
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
	'use strict';

	/** @returns {void} */
	function noop() {}

	/**
	 * @template T
	 * @template S
	 * @param {T} tar
	 * @param {S} src
	 * @returns {T & S}
	 */
	function assign(tar, src) {
		// @ts-ignore
		for (const k in src) tar[k] = src[k];
		return /** @type {T & S} */ (tar);
	}

	/** @returns {void} */
	function add_location(element, file, line, column, char) {
		element.__svelte_meta = {
			loc: { file, line, column, char }
		};
	}

	function run(fn) {
		return fn();
	}

	function blank_object() {
		return Object.create(null);
	}

	/**
	 * @param {Function[]} fns
	 * @returns {void}
	 */
	function run_all(fns) {
		fns.forEach(run);
	}

	/**
	 * @param {any} thing
	 * @returns {thing is Function}
	 */
	function is_function(thing) {
		return typeof thing === 'function';
	}

	/** @returns {boolean} */
	function safe_not_equal(a, b) {
		return a != a ? b == b : a !== b || (a && typeof a === 'object') || typeof a === 'function';
	}

	let src_url_equal_anchor;

	/**
	 * @param {string} element_src
	 * @param {string} url
	 * @returns {boolean}
	 */
	function src_url_equal(element_src, url) {
		if (element_src === url) return true;
		if (!src_url_equal_anchor) {
			src_url_equal_anchor = document.createElement('a');
		}
		// This is actually faster than doing URL(..).href
		src_url_equal_anchor.href = url;
		return element_src === src_url_equal_anchor.href;
	}

	/** @returns {boolean} */
	function is_empty(obj) {
		return Object.keys(obj).length === 0;
	}

	/** @returns {void} */
	function validate_store(store, name) {
		if (store != null && typeof store.subscribe !== 'function') {
			throw new Error(`'${name}' is not a store with a 'subscribe' method`);
		}
	}

	function subscribe(store, ...callbacks) {
		if (store == null) {
			for (const callback of callbacks) {
				callback(undefined);
			}
			return noop;
		}
		const unsub = store.subscribe(...callbacks);
		return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
	}

	/** @returns {void} */
	function component_subscribe(component, store, callback) {
		component.$$.on_destroy.push(subscribe(store, callback));
	}

	function create_slot(definition, ctx, $$scope, fn) {
		if (definition) {
			const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
			return definition[0](slot_ctx);
		}
	}

	function get_slot_context(definition, ctx, $$scope, fn) {
		return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
	}

	function get_slot_changes(definition, $$scope, dirty, fn) {
		if (definition[2] && fn) {
			const lets = definition[2](fn(dirty));
			if ($$scope.dirty === undefined) {
				return lets;
			}
			if (typeof lets === 'object') {
				const merged = [];
				const len = Math.max($$scope.dirty.length, lets.length);
				for (let i = 0; i < len; i += 1) {
					merged[i] = $$scope.dirty[i] | lets[i];
				}
				return merged;
			}
			return $$scope.dirty | lets;
		}
		return $$scope.dirty;
	}

	/** @returns {void} */
	function update_slot_base(
		slot,
		slot_definition,
		ctx,
		$$scope,
		slot_changes,
		get_slot_context_fn
	) {
		if (slot_changes) {
			const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
			slot.p(slot_context, slot_changes);
		}
	}

	/** @returns {any[] | -1} */
	function get_all_dirty_from_scope($$scope) {
		if ($$scope.ctx.length > 32) {
			const dirty = [];
			const length = $$scope.ctx.length / 32;
			for (let i = 0; i < length; i++) {
				dirty[i] = -1;
			}
			return dirty;
		}
		return -1;
	}

	/** @returns {{}} */
	function exclude_internal_props(props) {
		const result = {};
		for (const k in props) if (k[0] !== '$') result[k] = props[k];
		return result;
	}

	/** @returns {{}} */
	function compute_rest_props(props, keys) {
		const rest = {};
		keys = new Set(keys);
		for (const k in props) if (!keys.has(k) && k[0] !== '$') rest[k] = props[k];
		return rest;
	}

	/** @returns {{}} */
	function compute_slots(slots) {
		const result = {};
		for (const key in slots) {
			result[key] = true;
		}
		return result;
	}

	function set_store_value(store, ret, value) {
		store.set(value);
		return ret;
	}

	function action_destroyer(action_result) {
		return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
	}

	const contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];

	/** @type {typeof globalThis} */
	const globals =
		typeof window !== 'undefined'
			? window
			: typeof globalThis !== 'undefined'
			? globalThis
			: // @ts-ignore Node typings have this
			  global;

	/**
	 * @param {Node} target
	 * @param {Node} node
	 * @returns {void}
	 */
	function append(target, node) {
		target.appendChild(node);
	}

	/**
	 * @param {Node} target
	 * @param {Node} node
	 * @param {Node} [anchor]
	 * @returns {void}
	 */
	function insert(target, node, anchor) {
		target.insertBefore(node, anchor || null);
	}

	/**
	 * @param {Node} node
	 * @returns {void}
	 */
	function detach(node) {
		if (node.parentNode) {
			node.parentNode.removeChild(node);
		}
	}

	/**
	 * @returns {void} */
	function destroy_each(iterations, detaching) {
		for (let i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d(detaching);
		}
	}

	/**
	 * @template {keyof HTMLElementTagNameMap} K
	 * @param {K} name
	 * @returns {HTMLElementTagNameMap[K]}
	 */
	function element(name) {
		return document.createElement(name);
	}

	/**
	 * @template {keyof SVGElementTagNameMap} K
	 * @param {K} name
	 * @returns {SVGElement}
	 */
	function svg_element(name) {
		return document.createElementNS('http://www.w3.org/2000/svg', name);
	}

	/**
	 * @param {string} data
	 * @returns {Text}
	 */
	function text$2(data) {
		return document.createTextNode(data);
	}

	/**
	 * @returns {Text} */
	function space() {
		return text$2(' ');
	}

	/**
	 * @returns {Text} */
	function empty() {
		return text$2('');
	}

	/**
	 * @param {EventTarget} node
	 * @param {string} event
	 * @param {EventListenerOrEventListenerObject} handler
	 * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]
	 * @returns {() => void}
	 */
	function listen$1(node, event, handler, options) {
		node.addEventListener(event, handler, options);
		return () => node.removeEventListener(event, handler, options);
	}

	/**
	 * @param {Element} node
	 * @param {string} attribute
	 * @param {string} [value]
	 * @returns {void}
	 */
	function attr(node, attribute, value) {
		if (value == null) node.removeAttribute(attribute);
		else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
	}
	/**
	 * List of attributes that should always be set through the attr method,
	 * because updating them through the property setter doesn't work reliably.
	 * In the example of `width`/`height`, the problem is that the setter only
	 * accepts numeric values, but the attribute can also be set to a string like `50%`.
	 * If this list becomes too big, rethink this approach.
	 */
	const always_set_through_set_attribute = ['width', 'height'];

	/**
	 * @param {Element & ElementCSSInlineStyle} node
	 * @param {{ [x: string]: string }} attributes
	 * @returns {void}
	 */
	function set_attributes(node, attributes) {
		// @ts-ignore
		const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
		for (const key in attributes) {
			if (attributes[key] == null) {
				node.removeAttribute(key);
			} else if (key === 'style') {
				node.style.cssText = attributes[key];
			} else if (key === '__value') {
				/** @type {any} */ (node).value = node[key] = attributes[key];
			} else if (
				descriptors[key] &&
				descriptors[key].set &&
				always_set_through_set_attribute.indexOf(key) === -1
			) {
				node[key] = attributes[key];
			} else {
				attr(node, key, attributes[key]);
			}
		}
	}

	/**
	 * @param {Element & ElementCSSInlineStyle} node
	 * @param {{ [x: string]: string }} attributes
	 * @returns {void}
	 */
	function set_svg_attributes(node, attributes) {
		for (const key in attributes) {
			attr(node, key, attributes[key]);
		}
	}

	/**
	 * @param {Record<string, unknown>} data_map
	 * @returns {void}
	 */
	function set_custom_element_data_map(node, data_map) {
		Object.keys(data_map).forEach((key) => {
			set_custom_element_data(node, key, data_map[key]);
		});
	}

	/**
	 * @returns {void} */
	function set_custom_element_data(node, prop, value) {
		const lower = prop.toLowerCase(); // for backwards compatibility with existing behavior we do lowercase first
		if (lower in node) {
			node[lower] = typeof node[lower] === 'boolean' && value === '' ? true : value;
		} else if (prop in node) {
			node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;
		} else {
			attr(node, prop, value);
		}
	}

	/**
	 * @param {string} tag
	 */
	function set_dynamic_element_data(tag) {
		return /-/.test(tag) ? set_custom_element_data_map : set_attributes;
	}

	/** @returns {number} */
	function to_number(value) {
		return value === '' ? null : +value;
	}

	/**
	 * @param {Element} element
	 * @returns {ChildNode[]}
	 */
	function children(element) {
		return Array.from(element.childNodes);
	}

	/**
	 * @returns {void} */
	function set_input_value(input, value) {
		input.value = value == null ? '' : value;
	}

	/**
	 * @returns {void} */
	function set_style(node, key, value, important) {
		if (value == null) {
			node.style.removeProperty(key);
		} else {
			node.style.setProperty(key, value, important ? 'important' : '');
		}
	}

	/**
	 * @returns {void} */
	function toggle_class(element, name, toggle) {
		// The `!!` is required because an `undefined` flag means flipping the current state.
		element.classList.toggle(name, !!toggle);
	}

	/**
	 * @template T
	 * @param {string} type
	 * @param {T} [detail]
	 * @param {{ bubbles?: boolean, cancelable?: boolean }} [options]
	 * @returns {CustomEvent<T>}
	 */
	function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
		return new CustomEvent(type, { detail, bubbles, cancelable });
	}

	/**
	 * @typedef {Node & {
	 * 	claim_order?: number;
	 * 	hydrate_init?: true;
	 * 	actual_end_child?: NodeEx;
	 * 	childNodes: NodeListOf<NodeEx>;
	 * }} NodeEx
	 */

	/** @typedef {ChildNode & NodeEx} ChildNodeEx */

	/** @typedef {NodeEx & { claim_order: number }} NodeEx2 */

	/**
	 * @typedef {ChildNodeEx[] & {
	 * 	claim_info?: {
	 * 		last_index: number;
	 * 		total_claimed: number;
	 * 	};
	 * }} ChildNodeArray
	 */

	let current_component;

	/** @returns {void} */
	function set_current_component(component) {
		current_component = component;
	}

	function get_current_component() {
		if (!current_component) throw new Error('Function called outside component initialization');
		return current_component;
	}

	/**
	 * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
	 * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
	 * it can be called from an external module).
	 *
	 * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.
	 *
	 * `onMount` does not run inside a [server-side component](https://svelte.dev/docs#run-time-server-side-component-api).
	 *
	 * https://svelte.dev/docs/svelte#onmount
	 * @template T
	 * @param {() => import('./private.js').NotFunction<T> | Promise<import('./private.js').NotFunction<T>> | (() => any)} fn
	 * @returns {void}
	 */
	function onMount(fn) {
		get_current_component().$$.on_mount.push(fn);
	}

	/**
	 * Schedules a callback to run immediately after the component has been updated.
	 *
	 * The first time the callback runs will be after the initial `onMount`
	 *
	 * https://svelte.dev/docs/svelte#afterupdate
	 * @param {() => any} fn
	 * @returns {void}
	 */
	function afterUpdate(fn) {
		get_current_component().$$.after_update.push(fn);
	}

	/**
	 * Schedules a callback to run immediately before the component is unmounted.
	 *
	 * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
	 * only one that runs inside a server-side component.
	 *
	 * https://svelte.dev/docs/svelte#ondestroy
	 * @param {() => any} fn
	 * @returns {void}
	 */
	function onDestroy(fn) {
		get_current_component().$$.on_destroy.push(fn);
	}

	/**
	 * Associates an arbitrary `context` object with the current component and the specified `key`
	 * and returns that object. The context is then available to children of the component
	 * (including slotted content) with `getContext`.
	 *
	 * Like lifecycle functions, this must be called during component initialisation.
	 *
	 * https://svelte.dev/docs/svelte#setcontext
	 * @template T
	 * @param {any} key
	 * @param {T} context
	 * @returns {T}
	 */
	function setContext(key, context) {
		get_current_component().$$.context.set(key, context);
		return context;
	}

	/**
	 * Retrieves the context that belongs to the closest parent component with the specified `key`.
	 * Must be called during component initialisation.
	 *
	 * https://svelte.dev/docs/svelte#getcontext
	 * @template T
	 * @param {any} key
	 * @returns {T}
	 */
	function getContext(key) {
		return get_current_component().$$.context.get(key);
	}

	// TODO figure out if we still want to support
	// shorthand events, or if we want to implement
	// a real bubbling mechanism
	/**
	 * @param component
	 * @param event
	 * @returns {void}
	 */
	function bubble(component, event) {
		const callbacks = component.$$.callbacks[event.type];
		if (callbacks) {
			// @ts-ignore
			callbacks.slice().forEach((fn) => fn.call(this, event));
		}
	}

	const dirty_components = [];
	const binding_callbacks = [];

	let render_callbacks = [];

	const flush_callbacks = [];

	const resolved_promise = /* @__PURE__ */ Promise.resolve();

	let update_scheduled = false;

	/** @returns {void} */
	function schedule_update() {
		if (!update_scheduled) {
			update_scheduled = true;
			resolved_promise.then(flush);
		}
	}

	/** @returns {Promise<void>} */
	function tick() {
		schedule_update();
		return resolved_promise;
	}

	/** @returns {void} */
	function add_render_callback(fn) {
		render_callbacks.push(fn);
	}

	/** @returns {void} */
	function add_flush_callback(fn) {
		flush_callbacks.push(fn);
	}

	// flush() calls callbacks in this order:
	// 1. All beforeUpdate callbacks, in order: parents before children
	// 2. All bind:this callbacks, in reverse order: children before parents.
	// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
	//    for afterUpdates called during the initial onMount, which are called in
	//    reverse order: children before parents.
	// Since callbacks might update component values, which could trigger another
	// call to flush(), the following steps guard against this:
	// 1. During beforeUpdate, any updated components will be added to the
	//    dirty_components array and will cause a reentrant call to flush(). Because
	//    the flush index is kept outside the function, the reentrant call will pick
	//    up where the earlier call left off and go through all dirty components. The
	//    current_component value is saved and restored so that the reentrant call will
	//    not interfere with the "parent" flush() call.
	// 2. bind:this callbacks cannot trigger new flush() calls.
	// 3. During afterUpdate, any updated components will NOT have their afterUpdate
	//    callback called a second time; the seen_callbacks set, outside the flush()
	//    function, guarantees this behavior.
	const seen_callbacks = new Set();

	let flushidx = 0; // Do *not* move this inside the flush() function

	/** @returns {void} */
	function flush() {
		// Do not reenter flush while dirty components are updated, as this can
		// result in an infinite loop. Instead, let the inner flush handle it.
		// Reentrancy is ok afterwards for bindings etc.
		if (flushidx !== 0) {
			return;
		}
		const saved_component = current_component;
		do {
			// first, call beforeUpdate functions
			// and update components
			try {
				while (flushidx < dirty_components.length) {
					const component = dirty_components[flushidx];
					flushidx++;
					set_current_component(component);
					update(component.$$);
				}
			} catch (e) {
				// reset dirty state to not end up in a deadlocked state and then rethrow
				dirty_components.length = 0;
				flushidx = 0;
				throw e;
			}
			set_current_component(null);
			dirty_components.length = 0;
			flushidx = 0;
			while (binding_callbacks.length) binding_callbacks.pop()();
			// then, once components are updated, call
			// afterUpdate functions. This may cause
			// subsequent updates...
			for (let i = 0; i < render_callbacks.length; i += 1) {
				const callback = render_callbacks[i];
				if (!seen_callbacks.has(callback)) {
					// ...so guard against infinite loops
					seen_callbacks.add(callback);
					callback();
				}
			}
			render_callbacks.length = 0;
		} while (dirty_components.length);
		while (flush_callbacks.length) {
			flush_callbacks.pop()();
		}
		update_scheduled = false;
		seen_callbacks.clear();
		set_current_component(saved_component);
	}

	/** @returns {void} */
	function update($$) {
		if ($$.fragment !== null) {
			$$.update();
			run_all($$.before_update);
			const dirty = $$.dirty;
			$$.dirty = [-1];
			$$.fragment && $$.fragment.p($$.ctx, dirty);
			$$.after_update.forEach(add_render_callback);
		}
	}

	/**
	 * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
	 * @param {Function[]} fns
	 * @returns {void}
	 */
	function flush_render_callbacks(fns) {
		const filtered = [];
		const targets = [];
		render_callbacks.forEach((c) => (fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c)));
		targets.forEach((c) => c());
		render_callbacks = filtered;
	}

	const outroing = new Set();

	/**
	 * @type {Outro}
	 */
	let outros;

	/**
	 * @returns {void} */
	function group_outros() {
		outros = {
			r: 0,
			c: [],
			p: outros // parent group
		};
	}

	/**
	 * @returns {void} */
	function check_outros() {
		if (!outros.r) {
			run_all(outros.c);
		}
		outros = outros.p;
	}

	/**
	 * @param {import('./private.js').Fragment} block
	 * @param {0 | 1} [local]
	 * @returns {void}
	 */
	function transition_in(block, local) {
		if (block && block.i) {
			outroing.delete(block);
			block.i(local);
		}
	}

	/**
	 * @param {import('./private.js').Fragment} block
	 * @param {0 | 1} local
	 * @param {0 | 1} [detach]
	 * @param {() => void} [callback]
	 * @returns {void}
	 */
	function transition_out(block, local, detach, callback) {
		if (block && block.o) {
			if (outroing.has(block)) return;
			outroing.add(block);
			outros.c.push(() => {
				outroing.delete(block);
				if (callback) {
					if (detach) block.d(1);
					callback();
				}
			});
			block.o(local);
		} else if (callback) {
			callback();
		}
	}

	/** @typedef {1} INTRO */
	/** @typedef {0} OUTRO */
	/** @typedef {{ direction: 'in' | 'out' | 'both' }} TransitionOptions */
	/** @typedef {(node: Element, params: any, options: TransitionOptions) => import('../transition/public.js').TransitionConfig} TransitionFn */

	/**
	 * @typedef {Object} Outro
	 * @property {number} r
	 * @property {Function[]} c
	 * @property {Object} p
	 */

	/**
	 * @typedef {Object} PendingProgram
	 * @property {number} start
	 * @property {INTRO|OUTRO} b
	 * @property {Outro} [group]
	 */

	/**
	 * @typedef {Object} Program
	 * @property {number} a
	 * @property {INTRO|OUTRO} b
	 * @property {1|-1} d
	 * @property {number} duration
	 * @property {number} start
	 * @property {number} end
	 * @property {Outro} [group]
	 */

	// general each functions:

	function ensure_array_like(array_like_or_iterator) {
		return array_like_or_iterator?.length !== undefined
			? array_like_or_iterator
			: Array.from(array_like_or_iterator);
	}

	/** @returns {void} */
	function outro_and_destroy_block(block, lookup) {
		transition_out(block, 1, 1, () => {
			lookup.delete(block.key);
		});
	}

	/** @returns {any[]} */
	function update_keyed_each(
		old_blocks,
		dirty,
		get_key,
		dynamic,
		ctx,
		list,
		lookup,
		node,
		destroy,
		create_each_block,
		next,
		get_context
	) {
		let o = old_blocks.length;
		let n = list.length;
		let i = o;
		const old_indexes = {};
		while (i--) old_indexes[old_blocks[i].key] = i;
		const new_blocks = [];
		const new_lookup = new Map();
		const deltas = new Map();
		const updates = [];
		i = n;
		while (i--) {
			const child_ctx = get_context(ctx, list, i);
			const key = get_key(child_ctx);
			let block = lookup.get(key);
			if (!block) {
				block = create_each_block(key, child_ctx);
				block.c();
			} else if (dynamic) {
				// defer updates until all the DOM shuffling is done
				updates.push(() => block.p(child_ctx, dirty));
			}
			new_lookup.set(key, (new_blocks[i] = block));
			if (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));
		}
		const will_move = new Set();
		const did_move = new Set();
		/** @returns {void} */
		function insert(block) {
			transition_in(block, 1);
			block.m(node, next);
			lookup.set(block.key, block);
			next = block.first;
			n--;
		}
		while (o && n) {
			const new_block = new_blocks[n - 1];
			const old_block = old_blocks[o - 1];
			const new_key = new_block.key;
			const old_key = old_block.key;
			if (new_block === old_block) {
				// do nothing
				next = new_block.first;
				o--;
				n--;
			} else if (!new_lookup.has(old_key)) {
				// remove old block
				destroy(old_block, lookup);
				o--;
			} else if (!lookup.has(new_key) || will_move.has(new_key)) {
				insert(new_block);
			} else if (did_move.has(old_key)) {
				o--;
			} else if (deltas.get(new_key) > deltas.get(old_key)) {
				did_move.add(new_key);
				insert(new_block);
			} else {
				will_move.add(old_key);
				o--;
			}
		}
		while (o--) {
			const old_block = old_blocks[o];
			if (!new_lookup.has(old_block.key)) destroy(old_block, lookup);
		}
		while (n) insert(new_blocks[n - 1]);
		run_all(updates);
		return new_blocks;
	}

	/** @returns {void} */
	function validate_each_keys(ctx, list, get_context, get_key) {
		const keys = new Map();
		for (let i = 0; i < list.length; i++) {
			const key = get_key(get_context(ctx, list, i));
			if (keys.has(key)) {
				let value = '';
				try {
					value = `with value '${String(key)}' `;
				} catch (e) {
					// can't stringify
				}
				throw new Error(
					`Cannot have duplicate keys in a keyed each: Keys at index ${keys.get(
					key
				)} and ${i} ${value}are duplicates`
				);
			}
			keys.set(key, i);
		}
	}

	/** @returns {{}} */
	function get_spread_update(levels, updates) {
		const update = {};
		const to_null_out = {};
		const accounted_for = { $$scope: 1 };
		let i = levels.length;
		while (i--) {
			const o = levels[i];
			const n = updates[i];
			if (n) {
				for (const key in o) {
					if (!(key in n)) to_null_out[key] = 1;
				}
				for (const key in n) {
					if (!accounted_for[key]) {
						update[key] = n[key];
						accounted_for[key] = 1;
					}
				}
				levels[i] = n;
			} else {
				for (const key in o) {
					accounted_for[key] = 1;
				}
			}
		}
		for (const key in to_null_out) {
			if (!(key in update)) update[key] = undefined;
		}
		return update;
	}

	function get_spread_object(spread_props) {
		return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
	}

	/** regex of all html void element names */
	const void_element_names =
		/^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;

	/**
	 * @param {string} name
	 * @returns {boolean}
	 */
	function is_void(name) {
		return void_element_names.test(name) || name.toLowerCase() === '!doctype';
	}

	/** @returns {void} */
	function bind(component, name, callback) {
		const index = component.$$.props[name];
		if (index !== undefined) {
			component.$$.bound[index] = callback;
			callback(component.$$.ctx[index]);
		}
	}

	/** @returns {void} */
	function create_component(block) {
		block && block.c();
	}

	/** @returns {void} */
	function mount_component(component, target, anchor) {
		const { fragment, after_update } = component.$$;
		fragment && fragment.m(target, anchor);
		// onMount happens before the initial afterUpdate
		add_render_callback(() => {
			const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
			// if the component was destroyed immediately
			// it will update the `$$.on_destroy` reference to `null`.
			// the destructured on_destroy may still reference to the old array
			if (component.$$.on_destroy) {
				component.$$.on_destroy.push(...new_on_destroy);
			} else {
				// Edge case - component was destroyed immediately,
				// most likely as a result of a binding initialising
				run_all(new_on_destroy);
			}
			component.$$.on_mount = [];
		});
		after_update.forEach(add_render_callback);
	}

	/** @returns {void} */
	function destroy_component(component, detaching) {
		const $$ = component.$$;
		if ($$.fragment !== null) {
			flush_render_callbacks($$.after_update);
			run_all($$.on_destroy);
			$$.fragment && $$.fragment.d(detaching);
			// TODO null out other refs, including component.$$ (but need to
			// preserve final state?)
			$$.on_destroy = $$.fragment = null;
			$$.ctx = [];
		}
	}

	/** @returns {void} */
	function make_dirty(component, i) {
		if (component.$$.dirty[0] === -1) {
			dirty_components.push(component);
			schedule_update();
			component.$$.dirty.fill(0);
		}
		component.$$.dirty[(i / 31) | 0] |= 1 << i % 31;
	}

	// TODO: Document the other params
	/**
	 * @param {SvelteComponent} component
	 * @param {import('./public.js').ComponentConstructorOptions} options
	 *
	 * @param {import('./utils.js')['not_equal']} not_equal Used to compare props and state values.
	 * @param {(target: Element | ShadowRoot) => void} [append_styles] Function that appends styles to the DOM when the component is first initialised.
	 * This will be the `add_css` function from the compiled component.
	 *
	 * @returns {void}
	 */
	function init(
		component,
		options,
		instance,
		create_fragment,
		not_equal,
		props,
		append_styles = null,
		dirty = [-1]
	) {
		const parent_component = current_component;
		set_current_component(component);
		/** @type {import('./private.js').T$$} */
		const $$ = (component.$$ = {
			fragment: null,
			ctx: [],
			// state
			props,
			update: noop,
			not_equal,
			bound: blank_object(),
			// lifecycle
			on_mount: [],
			on_destroy: [],
			on_disconnect: [],
			before_update: [],
			after_update: [],
			context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
			// everything else
			callbacks: blank_object(),
			dirty,
			skip_bound: false,
			root: options.target || parent_component.$$.root
		});
		append_styles && append_styles($$.root);
		let ready = false;
		$$.ctx = instance
			? instance(component, options.props || {}, (i, ret, ...rest) => {
					const value = rest.length ? rest[0] : ret;
					if ($$.ctx && not_equal($$.ctx[i], ($$.ctx[i] = value))) {
						if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);
						if (ready) make_dirty(component, i);
					}
					return ret;
			  })
			: [];
		$$.update();
		ready = true;
		run_all($$.before_update);
		// `false` as a special case of no DOM component
		$$.fragment = create_fragment ? create_fragment($$.ctx) : false;
		if (options.target) {
			if (options.hydrate) {
				// TODO: what is the correct type here?
				// @ts-expect-error
				const nodes = children(options.target);
				$$.fragment && $$.fragment.l(nodes);
				nodes.forEach(detach);
			} else {
				// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
				$$.fragment && $$.fragment.c();
			}
			if (options.intro) transition_in(component.$$.fragment);
			mount_component(component, options.target, options.anchor);
			flush();
		}
		set_current_component(parent_component);
	}

	/**
	 * Base class for Svelte components. Used when dev=false.
	 *
	 * @template {Record<string, any>} [Props=any]
	 * @template {Record<string, any>} [Events=any]
	 */
	class SvelteComponent {
		/**
		 * ### PRIVATE API
		 *
		 * Do not use, may change at any time
		 *
		 * @type {any}
		 */
		$$ = undefined;
		/**
		 * ### PRIVATE API
		 *
		 * Do not use, may change at any time
		 *
		 * @type {any}
		 */
		$$set = undefined;

		/** @returns {void} */
		$destroy() {
			destroy_component(this, 1);
			this.$destroy = noop;
		}

		/**
		 * @template {Extract<keyof Events, string>} K
		 * @param {K} type
		 * @param {((e: Events[K]) => void) | null | undefined} callback
		 * @returns {() => void}
		 */
		$on(type, callback) {
			if (!is_function(callback)) {
				return noop;
			}
			const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
			callbacks.push(callback);
			return () => {
				const index = callbacks.indexOf(callback);
				if (index !== -1) callbacks.splice(index, 1);
			};
		}

		/**
		 * @param {Partial<Props>} props
		 * @returns {void}
		 */
		$set(props) {
			if (this.$$set && !is_empty(props)) {
				this.$$.skip_bound = true;
				this.$$set(props);
				this.$$.skip_bound = false;
			}
		}
	}

	/**
	 * @typedef {Object} CustomElementPropDefinition
	 * @property {string} [attribute]
	 * @property {boolean} [reflect]
	 * @property {'String'|'Boolean'|'Number'|'Array'|'Object'} [type]
	 */

	// generated during release, do not modify

	/**
	 * The current version, as set in package.json.
	 *
	 * https://svelte.dev/docs/svelte-compiler#svelte-version
	 * @type {string}
	 */
	const VERSION = '4.2.19';
	const PUBLIC_VERSION = '4';

	/**
	 * @template T
	 * @param {string} type
	 * @param {T} [detail]
	 * @returns {void}
	 */
	function dispatch_dev(type, detail) {
		document.dispatchEvent(custom_event(type, { version: VERSION, ...detail }, { bubbles: true }));
	}

	/**
	 * @param {Node} target
	 * @param {Node} node
	 * @returns {void}
	 */
	function append_dev(target, node) {
		dispatch_dev('SvelteDOMInsert', { target, node });
		append(target, node);
	}

	/**
	 * @param {Node} target
	 * @param {Node} node
	 * @param {Node} [anchor]
	 * @returns {void}
	 */
	function insert_dev(target, node, anchor) {
		dispatch_dev('SvelteDOMInsert', { target, node, anchor });
		insert(target, node, anchor);
	}

	/**
	 * @param {Node} node
	 * @returns {void}
	 */
	function detach_dev(node) {
		dispatch_dev('SvelteDOMRemove', { node });
		detach(node);
	}

	/**
	 * @param {Node} node
	 * @param {string} event
	 * @param {EventListenerOrEventListenerObject} handler
	 * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]
	 * @param {boolean} [has_prevent_default]
	 * @param {boolean} [has_stop_propagation]
	 * @param {boolean} [has_stop_immediate_propagation]
	 * @returns {() => void}
	 */
	function listen_dev(
		node,
		event,
		handler,
		options,
		has_prevent_default,
		has_stop_propagation,
		has_stop_immediate_propagation
	) {
		const modifiers =
			options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
		if (has_prevent_default) modifiers.push('preventDefault');
		if (has_stop_propagation) modifiers.push('stopPropagation');
		if (has_stop_immediate_propagation) modifiers.push('stopImmediatePropagation');
		dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
		const dispose = listen$1(node, event, handler, options);
		return () => {
			dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
			dispose();
		};
	}

	/**
	 * @param {Element} node
	 * @param {string} attribute
	 * @param {string} [value]
	 * @returns {void}
	 */
	function attr_dev(node, attribute, value) {
		attr(node, attribute, value);
		if (value == null) dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
		else dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
	}

	/**
	 * @param {Text} text
	 * @param {unknown} data
	 * @returns {void}
	 */
	function set_data_dev(text, data) {
		data = '' + data;
		if (text.data === data) return;
		dispatch_dev('SvelteDOMSetData', { node: text, data });
		text.data = /** @type {string} */ (data);
	}

	/**
	 * @param {Text} text
	 * @param {unknown} data
	 * @returns {void}
	 */
	function set_data_contenteditable_dev(text, data) {
		data = '' + data;
		if (text.wholeText === data) return;
		dispatch_dev('SvelteDOMSetData', { node: text, data });
		text.data = /** @type {string} */ (data);
	}

	/**
	 * @param {Text} text
	 * @param {unknown} data
	 * @param {string} attr_value
	 * @returns {void}
	 */
	function set_data_maybe_contenteditable_dev(text, data, attr_value) {
		if (~contenteditable_truthy_values.indexOf(attr_value)) {
			set_data_contenteditable_dev(text, data);
		} else {
			set_data_dev(text, data);
		}
	}

	function ensure_array_like_dev(arg) {
		if (
			typeof arg !== 'string' &&
			!(arg && typeof arg === 'object' && 'length' in arg) &&
			!(typeof Symbol === 'function' && arg && Symbol.iterator in arg)
		) {
			throw new Error('{#each} only works with iterable values.');
		}
		return ensure_array_like(arg);
	}

	/**
	 * @returns {void} */
	function validate_slots(name, slot, keys) {
		for (const slot_key of Object.keys(slot)) {
			if (!~keys.indexOf(slot_key)) {
				console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
			}
		}
	}

	/**
	 * @param {unknown} tag
	 * @returns {void}
	 */
	function validate_dynamic_element(tag) {
		const is_string = typeof tag === 'string';
		if (tag && !is_string) {
			throw new Error('<svelte:element> expects "this" attribute to be a string.');
		}
	}

	/**
	 * @param {undefined | string} tag
	 * @returns {void}
	 */
	function validate_void_dynamic_element(tag) {
		if (tag && is_void(tag)) {
			console.warn(`<svelte:element this="${tag}"> is self-closing and cannot have content.`);
		}
	}

	function construct_svelte_component_dev(component, props) {
		const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';
		try {
			const instance = new component(props);
			if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {
				throw new Error(error_message);
			}
			return instance;
		} catch (err) {
			const { message } = err;
			if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {
				throw new Error(error_message);
			} else {
				throw err;
			}
		}
	}

	/**
	 * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
	 *
	 * Can be used to create strongly typed Svelte components.
	 *
	 * #### Example:
	 *
	 * You have component library on npm called `component-library`, from which
	 * you export a component called `MyComponent`. For Svelte+TypeScript users,
	 * you want to provide typings. Therefore you create a `index.d.ts`:
	 * ```ts
	 * import { SvelteComponent } from "svelte";
	 * export class MyComponent extends SvelteComponent<{foo: string}> {}
	 * ```
	 * Typing this makes it possible for IDEs like VS Code with the Svelte extension
	 * to provide intellisense and to use the component like this in a Svelte file
	 * with TypeScript:
	 * ```svelte
	 * <script lang="ts">
	 * 	import { MyComponent } from "component-library";
	 * </script>
	 * <MyComponent foo={'bar'} />
	 * ```
	 * @template {Record<string, any>} [Props=any]
	 * @template {Record<string, any>} [Events=any]
	 * @template {Record<string, any>} [Slots=any]
	 * @extends {SvelteComponent<Props, Events>}
	 */
	class SvelteComponentDev extends SvelteComponent {
		/**
		 * For type checking capabilities only.
		 * Does not exist at runtime.
		 * ### DO NOT USE!
		 *
		 * @type {Props}
		 */
		$$prop_def;
		/**
		 * For type checking capabilities only.
		 * Does not exist at runtime.
		 * ### DO NOT USE!
		 *
		 * @type {Events}
		 */
		$$events_def;
		/**
		 * For type checking capabilities only.
		 * Does not exist at runtime.
		 * ### DO NOT USE!
		 *
		 * @type {Slots}
		 */
		$$slot_def;

		/** @param {import('./public.js').ComponentConstructorOptions<Props>} options */
		constructor(options) {
			if (!options || (!options.target && !options.$$inline)) {
				throw new Error("'target' is a required option");
			}
			super();
		}

		/** @returns {void} */
		$destroy() {
			super.$destroy();
			this.$destroy = () => {
				console.warn('Component was already destroyed'); // eslint-disable-line no-console
			};
		}

		/** @returns {void} */
		$capture_state() {}

		/** @returns {void} */
		$inject_state() {}
	}

	if (typeof window !== 'undefined')
		// @ts-ignore
		(window.__svelte || (window.__svelte = { v: new Set() })).v.add(PUBLIC_VERSION);

	const subscriber_queue = [];

	/**
	 * Create a `Writable` store that allows both updating and reading by subscription.
	 *
	 * https://svelte.dev/docs/svelte-store#writable
	 * @template T
	 * @param {T} [value] initial value
	 * @param {import('./public.js').StartStopNotifier<T>} [start]
	 * @returns {import('./public.js').Writable<T>}
	 */
	function writable(value, start = noop) {
		/** @type {import('./public.js').Unsubscriber} */
		let stop;
		/** @type {Set<import('./private.js').SubscribeInvalidateTuple<T>>} */
		const subscribers = new Set();
		/** @param {T} new_value
		 * @returns {void}
		 */
		function set(new_value) {
			if (safe_not_equal(value, new_value)) {
				value = new_value;
				if (stop) {
					// store is ready
					const run_queue = !subscriber_queue.length;
					for (const subscriber of subscribers) {
						subscriber[1]();
						subscriber_queue.push(subscriber, value);
					}
					if (run_queue) {
						for (let i = 0; i < subscriber_queue.length; i += 2) {
							subscriber_queue[i][0](subscriber_queue[i + 1]);
						}
						subscriber_queue.length = 0;
					}
				}
			}
		}

		/**
		 * @param {import('./public.js').Updater<T>} fn
		 * @returns {void}
		 */
		function update(fn) {
			set(fn(value));
		}

		/**
		 * @param {import('./public.js').Subscriber<T>} run
		 * @param {import('./private.js').Invalidator<T>} [invalidate]
		 * @returns {import('./public.js').Unsubscriber}
		 */
		function subscribe(run, invalidate = noop) {
			/** @type {import('./private.js').SubscribeInvalidateTuple<T>} */
			const subscriber = [run, invalidate];
			subscribers.add(subscriber);
			if (subscribers.size === 1) {
				stop = start(set, update) || noop;
			}
			run(value);
			return () => {
				subscribers.delete(subscriber);
				if (subscribers.size === 0 && stop) {
					stop();
					stop = null;
				}
			};
		}
		return { set, update, subscribe };
	}

	/**
	 * Lexing or parsing positional information for error reporting.
	 * This object is immutable.
	 */
	class SourceLocation {
	  // The + prefix indicates that these fields aren't writeable
	  // Lexer holding the input string.
	  // Start offset, zero-based inclusive.
	  // End offset, zero-based exclusive.
	  constructor(lexer, start, end) {
	    this.lexer = void 0;
	    this.start = void 0;
	    this.end = void 0;
	    this.lexer = lexer;
	    this.start = start;
	    this.end = end;
	  }
	  /**
	   * Merges two `SourceLocation`s from location providers, given they are
	   * provided in order of appearance.
	   * - Returns the first one's location if only the first is provided.
	   * - Returns a merged range of the first and the last if both are provided
	   *   and their lexers match.
	   * - Otherwise, returns null.
	   */


	  static range(first, second) {
	    if (!second) {
	      return first && first.loc;
	    } else if (!first || !first.loc || !second.loc || first.loc.lexer !== second.loc.lexer) {
	      return null;
	    } else {
	      return new SourceLocation(first.loc.lexer, first.loc.start, second.loc.end);
	    }
	  }

	}

	/**
	 * Interface required to break circular dependency between Token, Lexer, and
	 * ParseError.
	 */

	/**
	 * The resulting token returned from `lex`.
	 *
	 * It consists of the token text plus some position information.
	 * The position information is essentially a range in an input string,
	 * but instead of referencing the bare input string, we refer to the lexer.
	 * That way it is possible to attach extra metadata to the input string,
	 * like for example a file name or similar.
	 *
	 * The position information is optional, so it is OK to construct synthetic
	 * tokens if appropriate. Not providing available position information may
	 * lead to degraded error reporting, though.
	 */
	class Token {
	  // don't expand the token
	  // used in \noexpand
	  constructor(text, // the text of this token
	  loc) {
	    this.text = void 0;
	    this.loc = void 0;
	    this.noexpand = void 0;
	    this.treatAsRelax = void 0;
	    this.text = text;
	    this.loc = loc;
	  }
	  /**
	   * Given a pair of tokens (this and endToken), compute a `Token` encompassing
	   * the whole input range enclosed by these two.
	   */


	  range(endToken, // last token of the range, inclusive
	  text // the text of the newly constructed token
	  ) {
	    return new Token(text, SourceLocation.range(this, endToken));
	  }

	}

	/**
	 * This is the ParseError class, which is the main error thrown by KaTeX
	 * functions when something has gone wrong. This is used to distinguish internal
	 * errors from errors in the expression that the user provided.
	 *
	 * If possible, a caller should provide a Token or ParseNode with information
	 * about where in the source string the problem occurred.
	 */
	class ParseError {
	  // Error position based on passed-in Token or ParseNode.
	  constructor(message, // The error message
	  token // An object providing position information
	  ) {
	    this.position = void 0;
	    var error = "KaTeX parse error: " + message;
	    var start;
	    var loc = token && token.loc;

	    if (loc && loc.start <= loc.end) {
	      // If we have the input and a position, make the error a bit fancier
	      // Get the input
	      var input = loc.lexer.input; // Prepend some information

	      start = loc.start;
	      var end = loc.end;

	      if (start === input.length) {
	        error += " at end of input: ";
	      } else {
	        error += " at position " + (start + 1) + ": ";
	      } // Underline token in question using combining underscores


	      var underlined = input.slice(start, end).replace(/[^]/g, "$&\u0332"); // Extract some context from the input and add it to the error

	      var left;

	      if (start > 15) {
	        left = "…" + input.slice(start - 15, start);
	      } else {
	        left = input.slice(0, start);
	      }

	      var right;

	      if (end + 15 < input.length) {
	        right = input.slice(end, end + 15) + "…";
	      } else {
	        right = input.slice(end);
	      }

	      error += left + underlined + right;
	    } // Some hackery to make ParseError a prototype of Error
	    // See http://stackoverflow.com/a/8460753


	    var self = new Error(error);
	    self.name = "ParseError"; // $FlowFixMe

	    self.__proto__ = ParseError.prototype; // $FlowFixMe

	    self.position = start;
	    return self;
	  }

	} // $FlowFixMe More hackery


	ParseError.prototype.__proto__ = Error.prototype;

	/**
	 * This file contains a list of utility functions which are useful in other
	 * files.
	 */

	/**
	 * Return whether an element is contained in a list
	 */
	var contains = function contains(list, elem) {
	  return list.indexOf(elem) !== -1;
	};
	/**
	 * Provide a default value if a setting is undefined
	 * NOTE: Couldn't use `T` as the output type due to facebook/flow#5022.
	 */


	var deflt = function deflt(setting, defaultIfUndefined) {
	  return setting === undefined ? defaultIfUndefined : setting;
	}; // hyphenate and escape adapted from Facebook's React under Apache 2 license


	var uppercase = /([A-Z])/g;

	var hyphenate = function hyphenate(str) {
	  return str.replace(uppercase, "-$1").toLowerCase();
	};

	var ESCAPE_LOOKUP = {
	  "&": "&amp;",
	  ">": "&gt;",
	  "<": "&lt;",
	  "\"": "&quot;",
	  "'": "&#x27;"
	};
	var ESCAPE_REGEX = /[&><"']/g;
	/**
	 * Escapes text to prevent scripting attacks.
	 */

	function escape(text) {
	  return String(text).replace(ESCAPE_REGEX, match => ESCAPE_LOOKUP[match]);
	}
	/**
	 * Sometimes we want to pull out the innermost element of a group. In most
	 * cases, this will just be the group itself, but when ordgroups and colors have
	 * a single element, we want to pull that out.
	 */


	var getBaseElem = function getBaseElem(group) {
	  if (group.type === "ordgroup") {
	    if (group.body.length === 1) {
	      return getBaseElem(group.body[0]);
	    } else {
	      return group;
	    }
	  } else if (group.type === "color") {
	    if (group.body.length === 1) {
	      return getBaseElem(group.body[0]);
	    } else {
	      return group;
	    }
	  } else if (group.type === "font") {
	    return getBaseElem(group.body);
	  } else {
	    return group;
	  }
	};
	/**
	 * TeXbook algorithms often reference "character boxes", which are simply groups
	 * with a single character in them. To decide if something is a character box,
	 * we find its innermost group, and see if it is a single character.
	 */


	var isCharacterBox = function isCharacterBox(group) {
	  var baseElem = getBaseElem(group); // These are all they types of groups which hold single characters

	  return baseElem.type === "mathord" || baseElem.type === "textord" || baseElem.type === "atom";
	};

	var assert = function assert(value) {
	  if (!value) {
	    throw new Error('Expected non-null, but got ' + String(value));
	  }

	  return value;
	};
	/**
	 * Return the protocol of a URL, or "_relative" if the URL does not specify a
	 * protocol (and thus is relative).
	 */

	var protocolFromUrl = function protocolFromUrl(url) {
	  var protocol = /^\s*([^\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(url);
	  return protocol != null ? protocol[1] : "_relative";
	};
	var utils = {
	  contains,
	  deflt,
	  escape,
	  hyphenate,
	  getBaseElem,
	  isCharacterBox,
	  protocolFromUrl
	};

	/* eslint no-console:0 */
	// TODO: automatically generate documentation
	// TODO: check all properties on Settings exist
	// TODO: check the type of a property on Settings matches
	var SETTINGS_SCHEMA = {
	  displayMode: {
	    type: "boolean",
	    description: "Render math in display mode, which puts the math in " + "display style (so \\int and \\sum are large, for example), and " + "centers the math on the page on its own line.",
	    cli: "-d, --display-mode"
	  },
	  output: {
	    type: {
	      enum: ["htmlAndMathml", "html", "mathml"]
	    },
	    description: "Determines the markup language of the output.",
	    cli: "-F, --format <type>"
	  },
	  leqno: {
	    type: "boolean",
	    description: "Render display math in leqno style (left-justified tags)."
	  },
	  fleqn: {
	    type: "boolean",
	    description: "Render display math flush left."
	  },
	  throwOnError: {
	    type: "boolean",
	    default: true,
	    cli: "-t, --no-throw-on-error",
	    cliDescription: "Render errors (in the color given by --error-color) ins" + "tead of throwing a ParseError exception when encountering an error."
	  },
	  errorColor: {
	    type: "string",
	    default: "#cc0000",
	    cli: "-c, --error-color <color>",
	    cliDescription: "A color string given in the format 'rgb' or 'rrggbb' " + "(no #). This option determines the color of errors rendered by the " + "-t option.",
	    cliProcessor: color => "#" + color
	  },
	  macros: {
	    type: "object",
	    cli: "-m, --macro <def>",
	    cliDescription: "Define custom macro of the form '\\foo:expansion' (use " + "multiple -m arguments for multiple macros).",
	    cliDefault: [],
	    cliProcessor: (def, defs) => {
	      defs.push(def);
	      return defs;
	    }
	  },
	  minRuleThickness: {
	    type: "number",
	    description: "Specifies a minimum thickness, in ems, for fraction lines," + " `\\sqrt` top lines, `{array}` vertical lines, `\\hline`, " + "`\\hdashline`, `\\underline`, `\\overline`, and the borders of " + "`\\fbox`, `\\boxed`, and `\\fcolorbox`.",
	    processor: t => Math.max(0, t),
	    cli: "--min-rule-thickness <size>",
	    cliProcessor: parseFloat
	  },
	  colorIsTextColor: {
	    type: "boolean",
	    description: "Makes \\color behave like LaTeX's 2-argument \\textcolor, " + "instead of LaTeX's one-argument \\color mode change.",
	    cli: "-b, --color-is-text-color"
	  },
	  strict: {
	    type: [{
	      enum: ["warn", "ignore", "error"]
	    }, "boolean", "function"],
	    description: "Turn on strict / LaTeX faithfulness mode, which throws an " + "error if the input uses features that are not supported by LaTeX.",
	    cli: "-S, --strict",
	    cliDefault: false
	  },
	  trust: {
	    type: ["boolean", "function"],
	    description: "Trust the input, enabling all HTML features such as \\url.",
	    cli: "-T, --trust"
	  },
	  maxSize: {
	    type: "number",
	    default: Infinity,
	    description: "If non-zero, all user-specified sizes, e.g. in " + "\\rule{500em}{500em}, will be capped to maxSize ems. Otherwise, " + "elements and spaces can be arbitrarily large",
	    processor: s => Math.max(0, s),
	    cli: "-s, --max-size <n>",
	    cliProcessor: parseInt
	  },
	  maxExpand: {
	    type: "number",
	    default: 1000,
	    description: "Limit the number of macro expansions to the specified " + "number, to prevent e.g. infinite macro loops. If set to Infinity, " + "the macro expander will try to fully expand as in LaTeX.",
	    processor: n => Math.max(0, n),
	    cli: "-e, --max-expand <n>",
	    cliProcessor: n => n === "Infinity" ? Infinity : parseInt(n)
	  },
	  globalGroup: {
	    type: "boolean",
	    cli: false
	  }
	};

	function getDefaultValue(schema) {
	  if (schema.default) {
	    return schema.default;
	  }

	  var type = schema.type;
	  var defaultType = Array.isArray(type) ? type[0] : type;

	  if (typeof defaultType !== 'string') {
	    return defaultType.enum[0];
	  }

	  switch (defaultType) {
	    case 'boolean':
	      return false;

	    case 'string':
	      return '';

	    case 'number':
	      return 0;

	    case 'object':
	      return {};
	  }
	}
	/**
	 * The main Settings object
	 *
	 * The current options stored are:
	 *  - displayMode: Whether the expression should be typeset as inline math
	 *                 (false, the default), meaning that the math starts in
	 *                 \textstyle and is placed in an inline-block); or as display
	 *                 math (true), meaning that the math starts in \displaystyle
	 *                 and is placed in a block with vertical margin.
	 */


	class Settings {
	  constructor(options) {
	    this.displayMode = void 0;
	    this.output = void 0;
	    this.leqno = void 0;
	    this.fleqn = void 0;
	    this.throwOnError = void 0;
	    this.errorColor = void 0;
	    this.macros = void 0;
	    this.minRuleThickness = void 0;
	    this.colorIsTextColor = void 0;
	    this.strict = void 0;
	    this.trust = void 0;
	    this.maxSize = void 0;
	    this.maxExpand = void 0;
	    this.globalGroup = void 0;
	    // allow null options
	    options = options || {};

	    for (var prop in SETTINGS_SCHEMA) {
	      if (SETTINGS_SCHEMA.hasOwnProperty(prop)) {
	        // $FlowFixMe
	        var schema = SETTINGS_SCHEMA[prop]; // TODO: validate options
	        // $FlowFixMe

	        this[prop] = options[prop] !== undefined ? schema.processor ? schema.processor(options[prop]) : options[prop] : getDefaultValue(schema);
	      }
	    }
	  }
	  /**
	   * Report nonstrict (non-LaTeX-compatible) input.
	   * Can safely not be called if `this.strict` is false in JavaScript.
	   */


	  reportNonstrict(errorCode, errorMsg, token) {
	    var strict = this.strict;

	    if (typeof strict === "function") {
	      // Allow return value of strict function to be boolean or string
	      // (or null/undefined, meaning no further processing).
	      strict = strict(errorCode, errorMsg, token);
	    }

	    if (!strict || strict === "ignore") {
	      return;
	    } else if (strict === true || strict === "error") {
	      throw new ParseError("LaTeX-incompatible input and strict mode is set to 'error': " + (errorMsg + " [" + errorCode + "]"), token);
	    } else if (strict === "warn") {
	      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
	    } else {
	      // won't happen in type-safe code
	      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
	    }
	  }
	  /**
	   * Check whether to apply strict (LaTeX-adhering) behavior for unusual
	   * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
	   * instead, "error" translates to a return value of `true`, while "ignore"
	   * translates to a return value of `false`.  May still print a warning:
	   * "warn" prints a warning and returns `false`.
	   * This is for the second category of `errorCode`s listed in the README.
	   */


	  useStrictBehavior(errorCode, errorMsg, token) {
	    var strict = this.strict;

	    if (typeof strict === "function") {
	      // Allow return value of strict function to be boolean or string
	      // (or null/undefined, meaning no further processing).
	      // But catch any exceptions thrown by function, treating them
	      // like "error".
	      try {
	        strict = strict(errorCode, errorMsg, token);
	      } catch (error) {
	        strict = "error";
	      }
	    }

	    if (!strict || strict === "ignore") {
	      return false;
	    } else if (strict === true || strict === "error") {
	      return true;
	    } else if (strict === "warn") {
	      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
	      return false;
	    } else {
	      // won't happen in type-safe code
	      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
	      return false;
	    }
	  }
	  /**
	   * Check whether to test potentially dangerous input, and return
	   * `true` (trusted) or `false` (untrusted).  The sole argument `context`
	   * should be an object with `command` field specifying the relevant LaTeX
	   * command (as a string starting with `\`), and any other arguments, etc.
	   * If `context` has a `url` field, a `protocol` field will automatically
	   * get added by this function (changing the specified object).
	   */


	  isTrusted(context) {
	    if (context.url && !context.protocol) {
	      context.protocol = utils.protocolFromUrl(context.url);
	    }

	    var trust = typeof this.trust === "function" ? this.trust(context) : this.trust;
	    return Boolean(trust);
	  }

	}

	/**
	 * This file contains information and classes for the various kinds of styles
	 * used in TeX. It provides a generic `Style` class, which holds information
	 * about a specific style. It then provides instances of all the different kinds
	 * of styles possible, and provides functions to move between them and get
	 * information about them.
	 */

	/**
	 * The main style class. Contains a unique id for the style, a size (which is
	 * the same for cramped and uncramped version of a style), and a cramped flag.
	 */
	class Style {
	  constructor(id, size, cramped) {
	    this.id = void 0;
	    this.size = void 0;
	    this.cramped = void 0;
	    this.id = id;
	    this.size = size;
	    this.cramped = cramped;
	  }
	  /**
	   * Get the style of a superscript given a base in the current style.
	   */


	  sup() {
	    return styles[sup[this.id]];
	  }
	  /**
	   * Get the style of a subscript given a base in the current style.
	   */


	  sub() {
	    return styles[sub[this.id]];
	  }
	  /**
	   * Get the style of a fraction numerator given the fraction in the current
	   * style.
	   */


	  fracNum() {
	    return styles[fracNum[this.id]];
	  }
	  /**
	   * Get the style of a fraction denominator given the fraction in the current
	   * style.
	   */


	  fracDen() {
	    return styles[fracDen[this.id]];
	  }
	  /**
	   * Get the cramped version of a style (in particular, cramping a cramped style
	   * doesn't change the style).
	   */


	  cramp() {
	    return styles[cramp[this.id]];
	  }
	  /**
	   * Get a text or display version of this style.
	   */


	  text() {
	    return styles[text$1[this.id]];
	  }
	  /**
	   * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
	   */


	  isTight() {
	    return this.size >= 2;
	  }

	} // Export an interface for type checking, but don't expose the implementation.
	// This way, no more styles can be generated.


	// IDs of the different styles
	var D = 0;
	var Dc = 1;
	var T = 2;
	var Tc = 3;
	var S = 4;
	var Sc = 5;
	var SS = 6;
	var SSc = 7; // Instances of the different styles

	var styles = [new Style(D, 0, false), new Style(Dc, 0, true), new Style(T, 1, false), new Style(Tc, 1, true), new Style(S, 2, false), new Style(Sc, 2, true), new Style(SS, 3, false), new Style(SSc, 3, true)]; // Lookup tables for switching from one style to another

	var sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
	var sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
	var fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
	var fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
	var cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];
	var text$1 = [D, Dc, T, Tc, T, Tc, T, Tc]; // We only export some of the styles.

	var Style$1 = {
	  DISPLAY: styles[D],
	  TEXT: styles[T],
	  SCRIPT: styles[S],
	  SCRIPTSCRIPT: styles[SS]
	};

	/*
	 * This file defines the Unicode scripts and script families that we
	 * support. To add new scripts or families, just add a new entry to the
	 * scriptData array below. Adding scripts to the scriptData array allows
	 * characters from that script to appear in \text{} environments.
	 */

	/**
	 * Each script or script family has a name and an array of blocks.
	 * Each block is an array of two numbers which specify the start and
	 * end points (inclusive) of a block of Unicode codepoints.
	 */

	/**
	 * Unicode block data for the families of scripts we support in \text{}.
	 * Scripts only need to appear here if they do not have font metrics.
	 */
	var scriptData = [{
	  // Latin characters beyond the Latin-1 characters we have metrics for.
	  // Needed for Czech, Hungarian and Turkish text, for example.
	  name: 'latin',
	  blocks: [[0x0100, 0x024f], // Latin Extended-A and Latin Extended-B
	  [0x0300, 0x036f] // Combining Diacritical marks
	  ]
	}, {
	  // The Cyrillic script used by Russian and related languages.
	  // A Cyrillic subset used to be supported as explicitly defined
	  // symbols in symbols.js
	  name: 'cyrillic',
	  blocks: [[0x0400, 0x04ff]]
	}, {
	  // Armenian
	  name: 'armenian',
	  blocks: [[0x0530, 0x058F]]
	}, {
	  // The Brahmic scripts of South and Southeast Asia
	  // Devanagari (0900–097F)
	  // Bengali (0980–09FF)
	  // Gurmukhi (0A00–0A7F)
	  // Gujarati (0A80–0AFF)
	  // Oriya (0B00–0B7F)
	  // Tamil (0B80–0BFF)
	  // Telugu (0C00–0C7F)
	  // Kannada (0C80–0CFF)
	  // Malayalam (0D00–0D7F)
	  // Sinhala (0D80–0DFF)
	  // Thai (0E00–0E7F)
	  // Lao (0E80–0EFF)
	  // Tibetan (0F00–0FFF)
	  // Myanmar (1000–109F)
	  name: 'brahmic',
	  blocks: [[0x0900, 0x109F]]
	}, {
	  name: 'georgian',
	  blocks: [[0x10A0, 0x10ff]]
	}, {
	  // Chinese and Japanese.
	  // The "k" in cjk is for Korean, but we've separated Korean out
	  name: "cjk",
	  blocks: [[0x3000, 0x30FF], // CJK symbols and punctuation, Hiragana, Katakana
	  [0x4E00, 0x9FAF], // CJK ideograms
	  [0xFF00, 0xFF60] // Fullwidth punctuation
	  // TODO: add halfwidth Katakana and Romanji glyphs
	  ]
	}, {
	  // Korean
	  name: 'hangul',
	  blocks: [[0xAC00, 0xD7AF]]
	}];
	/**
	 * Given a codepoint, return the name of the script or script family
	 * it is from, or null if it is not part of a known block
	 */

	function scriptFromCodepoint(codepoint) {
	  for (var i = 0; i < scriptData.length; i++) {
	    var script = scriptData[i];

	    for (var _i = 0; _i < script.blocks.length; _i++) {
	      var block = script.blocks[_i];

	      if (codepoint >= block[0] && codepoint <= block[1]) {
	        return script.name;
	      }
	    }
	  }

	  return null;
	}
	/**
	 * A flattened version of all the supported blocks in a single array.
	 * This is an optimization to make supportedCodepoint() fast.
	 */

	var allBlocks = [];
	scriptData.forEach(s => s.blocks.forEach(b => allBlocks.push(...b)));
	/**
	 * Given a codepoint, return true if it falls within one of the
	 * scripts or script families defined above and false otherwise.
	 *
	 * Micro benchmarks shows that this is faster than
	 * /[\u3000-\u30FF\u4E00-\u9FAF\uFF00-\uFF60\uAC00-\uD7AF\u0900-\u109F]/.test()
	 * in Firefox, Chrome and Node.
	 */

	function supportedCodepoint(codepoint) {
	  for (var i = 0; i < allBlocks.length; i += 2) {
	    if (codepoint >= allBlocks[i] && codepoint <= allBlocks[i + 1]) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * This file provides support to domTree.js and delimiter.js.
	 * It's a storehouse of path geometry for SVG images.
	 */
	// In all paths below, the viewBox-to-em scale is 1000:1.
	var hLinePad = 80; // padding above a sqrt viniculum. Prevents image cropping.
	// The viniculum of a \sqrt can be made thicker by a KaTeX rendering option.
	// Think of variable extraViniculum as two detours in the SVG path.
	// The detour begins at the lower left of the area labeled extraViniculum below.
	// The detour proceeds one extraViniculum distance up and slightly to the right,
	// displacing the radiused corner between surd and viniculum. The radius is
	// traversed as usual, then the detour resumes. It goes right, to the end of
	// the very long viniculumn, then down one extraViniculum distance,
	// after which it resumes regular path geometry for the radical.

	/*                                                  viniculum
	                                                   /
	         /▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒←extraViniculum
	        / █████████████████████←0.04em (40 unit) std viniculum thickness
	       / /
	      / /
	     / /\
	    / / surd
	*/

	var sqrtMain = function sqrtMain(extraViniculum, hLinePad) {
	  // sqrtMain path geometry is from glyph U221A in the font KaTeX Main
	  return "M95," + (622 + extraViniculum + hLinePad) + "\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl" + extraViniculum / 2.075 + " -" + extraViniculum + "\nc5.3,-9.3,12,-14,20,-14\nH400000v" + (40 + extraViniculum) + "H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM" + (834 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
	};

	var sqrtSize1 = function sqrtSize1(extraViniculum, hLinePad) {
	  // size1 is from glyph U221A in the font KaTeX_Size1-Regular
	  return "M263," + (601 + extraViniculum + hLinePad) + "c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl" + extraViniculum / 2.084 + " -" + extraViniculum + "\nc4.7,-7.3,11,-11,19,-11\nH40000v" + (40 + extraViniculum) + "H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
	};

	var sqrtSize2 = function sqrtSize2(extraViniculum, hLinePad) {
	  // size2 is from glyph U221A in the font KaTeX_Size2-Regular
	  return "M983 " + (10 + extraViniculum + hLinePad) + "\nl" + extraViniculum / 3.13 + " -" + extraViniculum + "\nc4,-6.7,10,-10,18,-10 H400000v" + (40 + extraViniculum) + "\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
	};

	var sqrtSize3 = function sqrtSize3(extraViniculum, hLinePad) {
	  // size3 is from glyph U221A in the font KaTeX_Size3-Regular
	  return "M424," + (2398 + extraViniculum + hLinePad) + "\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl" + extraViniculum / 4.223 + " -" + extraViniculum + "c4,-6.7,10,-10,18,-10 H400000\nv" + (40 + extraViniculum) + "H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M" + (1001 + extraViniculum) + " " + hLinePad + "\nh400000v" + (40 + extraViniculum) + "h-400000z";
	};

	var sqrtSize4 = function sqrtSize4(extraViniculum, hLinePad) {
	  // size4 is from glyph U221A in the font KaTeX_Size4-Regular
	  return "M473," + (2713 + extraViniculum + hLinePad) + "\nc339.3,-1799.3,509.3,-2700,510,-2702 l" + extraViniculum / 5.298 + " -" + extraViniculum + "\nc3.3,-7.3,9.3,-11,18,-11 H400000v" + (40 + extraViniculum) + "H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "H1017.7z";
	};

	var phasePath = function phasePath(y) {
	  var x = y / 2; // x coordinate at top of angle

	  return "M400000 " + y + " H0 L" + x + " 0 l65 45 L145 " + (y - 80) + " H400000z";
	};

	var sqrtTall = function sqrtTall(extraViniculum, hLinePad, viewBoxHeight) {
	  // sqrtTall is from glyph U23B7 in the font KaTeX_Size4-Regular
	  // One path edge has a variable length. It runs vertically from the viniculumn
	  // to a point near (14 units) the bottom of the surd. The viniculum
	  // is normally 40 units thick. So the length of the line in question is:
	  var vertSegment = viewBoxHeight - 54 - hLinePad - extraViniculum;
	  return "M702 " + (extraViniculum + hLinePad) + "H400000" + (40 + extraViniculum) + "\nH742v" + vertSegment + "l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 " + hLinePad + "H400000v" + (40 + extraViniculum) + "H742z";
	};

	var sqrtPath = function sqrtPath(size, extraViniculum, viewBoxHeight) {
	  extraViniculum = 1000 * extraViniculum; // Convert from document ems to viewBox.

	  var path = "";

	  switch (size) {
	    case "sqrtMain":
	      path = sqrtMain(extraViniculum, hLinePad);
	      break;

	    case "sqrtSize1":
	      path = sqrtSize1(extraViniculum, hLinePad);
	      break;

	    case "sqrtSize2":
	      path = sqrtSize2(extraViniculum, hLinePad);
	      break;

	    case "sqrtSize3":
	      path = sqrtSize3(extraViniculum, hLinePad);
	      break;

	    case "sqrtSize4":
	      path = sqrtSize4(extraViniculum, hLinePad);
	      break;

	    case "sqrtTall":
	      path = sqrtTall(extraViniculum, hLinePad, viewBoxHeight);
	  }

	  return path;
	};
	var innerPath = function innerPath(name, height) {
	  // The inner part of stretchy tall delimiters
	  switch (name) {
	    case "\u239c":
	      return "M291 0 H417 V" + height + " H291z M291 0 H417 V" + height + " H291z";

	    case "\u2223":
	      return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z";

	    case "\u2225":
	      return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z" + ("M367 0 H410 V" + height + " H367z M367 0 H410 V" + height + " H367z");

	    case "\u239f":
	      return "M457 0 H583 V" + height + " H457z M457 0 H583 V" + height + " H457z";

	    case "\u23a2":
	      return "M319 0 H403 V" + height + " H319z M319 0 H403 V" + height + " H319z";

	    case "\u23a5":
	      return "M263 0 H347 V" + height + " H263z M263 0 H347 V" + height + " H263z";

	    case "\u23aa":
	      return "M384 0 H504 V" + height + " H384z M384 0 H504 V" + height + " H384z";

	    case "\u23d0":
	      return "M312 0 H355 V" + height + " H312z M312 0 H355 V" + height + " H312z";

	    case "\u2016":
	      return "M257 0 H300 V" + height + " H257z M257 0 H300 V" + height + " H257z" + ("M478 0 H521 V" + height + " H478z M478 0 H521 V" + height + " H478z");

	    default:
	      return "";
	  }
	};
	var path = {
	  // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
	  doubleleftarrow: "M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",
	  // doublerightarrow is from glyph U+21D2 in font KaTeX Main
	  doublerightarrow: "M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",
	  // leftarrow is from glyph U+2190 in font KaTeX Main
	  leftarrow: "M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",
	  // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
	  leftbrace: "M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",
	  leftbraceunder: "M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",
	  // overgroup is from the MnSymbol package (public domain)
	  leftgroup: "M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",
	  leftgroupunder: "M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",
	  // Harpoons are from glyph U+21BD in font KaTeX Main
	  leftharpoon: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",
	  leftharpoonplus: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",
	  leftharpoondown: "M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",
	  leftharpoondownplus: "M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",
	  // hook is from glyph U+21A9 in font KaTeX Main
	  lefthook: "M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",
	  leftlinesegment: "M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",
	  leftmapsto: "M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",
	  // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
	  leftToFrom: "M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",
	  longequal: "M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",
	  midbrace: "M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",
	  midbraceunder: "M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",
	  oiintSize1: "M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",
	  oiintSize2: "M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",
	  oiiintSize1: "M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",
	  oiiintSize2: "M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",
	  rightarrow: "M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",
	  rightbrace: "M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",
	  rightbraceunder: "M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",
	  rightgroup: "M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",
	  rightgroupunder: "M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",
	  rightharpoon: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",
	  rightharpoonplus: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",
	  rightharpoondown: "M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",
	  rightharpoondownplus: "M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",
	  righthook: "M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",
	  rightlinesegment: "M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",
	  rightToFrom: "M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",
	  // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
	  twoheadleftarrow: "M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",
	  twoheadrightarrow: "M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",
	  // tilde1 is a modified version of a glyph from the MnSymbol package
	  tilde1: "M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",
	  // ditto tilde2, tilde3, & tilde4
	  tilde2: "M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",
	  tilde3: "M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",
	  tilde4: "M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",
	  // vec is from glyph U+20D7 in font KaTeX Main
	  vec: "M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",
	  // widehat1 is a modified version of a glyph from the MnSymbol package
	  widehat1: "M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",
	  // ditto widehat2, widehat3, & widehat4
	  widehat2: "M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
	  widehat3: "M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
	  widehat4: "M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
	  // widecheck paths are all inverted versions of widehat
	  widecheck1: "M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",
	  widecheck2: "M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
	  widecheck3: "M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
	  widecheck4: "M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
	  // The next ten paths support reaction arrows from the mhchem package.
	  // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
	  // baraboveleftarrow is mostly from from glyph U+2190 in font KaTeX Main
	  baraboveleftarrow: "M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",
	  // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
	  rightarrowabovebar: "M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",
	  // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
	  // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
	  baraboveshortleftharpoon: "M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",
	  rightharpoonaboveshortbar: "M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",
	  shortbaraboveleftharpoon: "M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",
	  shortrightharpoonabovebar: "M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"
	};

	/**
	 * This node represents a document fragment, which contains elements, but when
	 * placed into the DOM doesn't have any representation itself. It only contains
	 * children and doesn't have any DOM node properties.
	 */
	class DocumentFragment {
	  // HtmlDomNode
	  // Never used; needed for satisfying interface.
	  constructor(children) {
	    this.children = void 0;
	    this.classes = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.maxFontSize = void 0;
	    this.style = void 0;
	    this.children = children;
	    this.classes = [];
	    this.height = 0;
	    this.depth = 0;
	    this.maxFontSize = 0;
	    this.style = {};
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }
	  /** Convert the fragment into a node. */


	  toNode() {
	    var frag = document.createDocumentFragment();

	    for (var i = 0; i < this.children.length; i++) {
	      frag.appendChild(this.children[i].toNode());
	    }

	    return frag;
	  }
	  /** Convert the fragment into HTML markup. */


	  toMarkup() {
	    var markup = ""; // Simply concatenate the markup for the children together.

	    for (var i = 0; i < this.children.length; i++) {
	      markup += this.children[i].toMarkup();
	    }

	    return markup;
	  }
	  /**
	   * Converts the math node into a string, similar to innerText. Applies to
	   * MathDomNode's only.
	   */


	  toText() {
	    // To avoid this, we would subclass documentFragment separately for
	    // MathML, but polyfills for subclassing is expensive per PR 1469.
	    // $FlowFixMe: Only works for ChildType = MathDomNode.
	    var toText = child => child.toText();

	    return this.children.map(toText).join("");
	  }

	}

	// This file is GENERATED by buildMetrics.sh. DO NOT MODIFY.
	var fontMetricsData = {
	  "AMS-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "65": [0, 0.68889, 0, 0, 0.72222],
	    "66": [0, 0.68889, 0, 0, 0.66667],
	    "67": [0, 0.68889, 0, 0, 0.72222],
	    "68": [0, 0.68889, 0, 0, 0.72222],
	    "69": [0, 0.68889, 0, 0, 0.66667],
	    "70": [0, 0.68889, 0, 0, 0.61111],
	    "71": [0, 0.68889, 0, 0, 0.77778],
	    "72": [0, 0.68889, 0, 0, 0.77778],
	    "73": [0, 0.68889, 0, 0, 0.38889],
	    "74": [0.16667, 0.68889, 0, 0, 0.5],
	    "75": [0, 0.68889, 0, 0, 0.77778],
	    "76": [0, 0.68889, 0, 0, 0.66667],
	    "77": [0, 0.68889, 0, 0, 0.94445],
	    "78": [0, 0.68889, 0, 0, 0.72222],
	    "79": [0.16667, 0.68889, 0, 0, 0.77778],
	    "80": [0, 0.68889, 0, 0, 0.61111],
	    "81": [0.16667, 0.68889, 0, 0, 0.77778],
	    "82": [0, 0.68889, 0, 0, 0.72222],
	    "83": [0, 0.68889, 0, 0, 0.55556],
	    "84": [0, 0.68889, 0, 0, 0.66667],
	    "85": [0, 0.68889, 0, 0, 0.72222],
	    "86": [0, 0.68889, 0, 0, 0.72222],
	    "87": [0, 0.68889, 0, 0, 1.0],
	    "88": [0, 0.68889, 0, 0, 0.72222],
	    "89": [0, 0.68889, 0, 0, 0.72222],
	    "90": [0, 0.68889, 0, 0, 0.66667],
	    "107": [0, 0.68889, 0, 0, 0.55556],
	    "160": [0, 0, 0, 0, 0.25],
	    "165": [0, 0.675, 0.025, 0, 0.75],
	    "174": [0.15559, 0.69224, 0, 0, 0.94666],
	    "240": [0, 0.68889, 0, 0, 0.55556],
	    "295": [0, 0.68889, 0, 0, 0.54028],
	    "710": [0, 0.825, 0, 0, 2.33334],
	    "732": [0, 0.9, 0, 0, 2.33334],
	    "770": [0, 0.825, 0, 0, 2.33334],
	    "771": [0, 0.9, 0, 0, 2.33334],
	    "989": [0.08167, 0.58167, 0, 0, 0.77778],
	    "1008": [0, 0.43056, 0.04028, 0, 0.66667],
	    "8245": [0, 0.54986, 0, 0, 0.275],
	    "8463": [0, 0.68889, 0, 0, 0.54028],
	    "8487": [0, 0.68889, 0, 0, 0.72222],
	    "8498": [0, 0.68889, 0, 0, 0.55556],
	    "8502": [0, 0.68889, 0, 0, 0.66667],
	    "8503": [0, 0.68889, 0, 0, 0.44445],
	    "8504": [0, 0.68889, 0, 0, 0.66667],
	    "8513": [0, 0.68889, 0, 0, 0.63889],
	    "8592": [-0.03598, 0.46402, 0, 0, 0.5],
	    "8594": [-0.03598, 0.46402, 0, 0, 0.5],
	    "8602": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8603": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8606": [0.01354, 0.52239, 0, 0, 1.0],
	    "8608": [0.01354, 0.52239, 0, 0, 1.0],
	    "8610": [0.01354, 0.52239, 0, 0, 1.11111],
	    "8611": [0.01354, 0.52239, 0, 0, 1.11111],
	    "8619": [0, 0.54986, 0, 0, 1.0],
	    "8620": [0, 0.54986, 0, 0, 1.0],
	    "8621": [-0.13313, 0.37788, 0, 0, 1.38889],
	    "8622": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8624": [0, 0.69224, 0, 0, 0.5],
	    "8625": [0, 0.69224, 0, 0, 0.5],
	    "8630": [0, 0.43056, 0, 0, 1.0],
	    "8631": [0, 0.43056, 0, 0, 1.0],
	    "8634": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8635": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8638": [0.19444, 0.69224, 0, 0, 0.41667],
	    "8639": [0.19444, 0.69224, 0, 0, 0.41667],
	    "8642": [0.19444, 0.69224, 0, 0, 0.41667],
	    "8643": [0.19444, 0.69224, 0, 0, 0.41667],
	    "8644": [0.1808, 0.675, 0, 0, 1.0],
	    "8646": [0.1808, 0.675, 0, 0, 1.0],
	    "8647": [0.1808, 0.675, 0, 0, 1.0],
	    "8648": [0.19444, 0.69224, 0, 0, 0.83334],
	    "8649": [0.1808, 0.675, 0, 0, 1.0],
	    "8650": [0.19444, 0.69224, 0, 0, 0.83334],
	    "8651": [0.01354, 0.52239, 0, 0, 1.0],
	    "8652": [0.01354, 0.52239, 0, 0, 1.0],
	    "8653": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8654": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8655": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8666": [0.13667, 0.63667, 0, 0, 1.0],
	    "8667": [0.13667, 0.63667, 0, 0, 1.0],
	    "8669": [-0.13313, 0.37788, 0, 0, 1.0],
	    "8672": [-0.064, 0.437, 0, 0, 1.334],
	    "8674": [-0.064, 0.437, 0, 0, 1.334],
	    "8705": [0, 0.825, 0, 0, 0.5],
	    "8708": [0, 0.68889, 0, 0, 0.55556],
	    "8709": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8717": [0, 0.43056, 0, 0, 0.42917],
	    "8722": [-0.03598, 0.46402, 0, 0, 0.5],
	    "8724": [0.08198, 0.69224, 0, 0, 0.77778],
	    "8726": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8733": [0, 0.69224, 0, 0, 0.77778],
	    "8736": [0, 0.69224, 0, 0, 0.72222],
	    "8737": [0, 0.69224, 0, 0, 0.72222],
	    "8738": [0.03517, 0.52239, 0, 0, 0.72222],
	    "8739": [0.08167, 0.58167, 0, 0, 0.22222],
	    "8740": [0.25142, 0.74111, 0, 0, 0.27778],
	    "8741": [0.08167, 0.58167, 0, 0, 0.38889],
	    "8742": [0.25142, 0.74111, 0, 0, 0.5],
	    "8756": [0, 0.69224, 0, 0, 0.66667],
	    "8757": [0, 0.69224, 0, 0, 0.66667],
	    "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
	    "8765": [-0.13313, 0.37788, 0, 0, 0.77778],
	    "8769": [-0.13313, 0.36687, 0, 0, 0.77778],
	    "8770": [-0.03625, 0.46375, 0, 0, 0.77778],
	    "8774": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
	    "8778": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8782": [0.06062, 0.54986, 0, 0, 0.77778],
	    "8783": [0.06062, 0.54986, 0, 0, 0.77778],
	    "8785": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8786": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8787": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8790": [0, 0.69224, 0, 0, 0.77778],
	    "8791": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8796": [0.08198, 0.91667, 0, 0, 0.77778],
	    "8806": [0.25583, 0.75583, 0, 0, 0.77778],
	    "8807": [0.25583, 0.75583, 0, 0, 0.77778],
	    "8808": [0.25142, 0.75726, 0, 0, 0.77778],
	    "8809": [0.25142, 0.75726, 0, 0, 0.77778],
	    "8812": [0.25583, 0.75583, 0, 0, 0.5],
	    "8814": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8815": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8816": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8817": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8818": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8819": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8822": [0.1808, 0.675, 0, 0, 0.77778],
	    "8823": [0.1808, 0.675, 0, 0, 0.77778],
	    "8828": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8829": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8830": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8831": [0.22958, 0.72958, 0, 0, 0.77778],
	    "8832": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8833": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8840": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8841": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8842": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8843": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8847": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8848": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8858": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8859": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8861": [0.08198, 0.58198, 0, 0, 0.77778],
	    "8862": [0, 0.675, 0, 0, 0.77778],
	    "8863": [0, 0.675, 0, 0, 0.77778],
	    "8864": [0, 0.675, 0, 0, 0.77778],
	    "8865": [0, 0.675, 0, 0, 0.77778],
	    "8872": [0, 0.69224, 0, 0, 0.61111],
	    "8873": [0, 0.69224, 0, 0, 0.72222],
	    "8874": [0, 0.69224, 0, 0, 0.88889],
	    "8876": [0, 0.68889, 0, 0, 0.61111],
	    "8877": [0, 0.68889, 0, 0, 0.61111],
	    "8878": [0, 0.68889, 0, 0, 0.72222],
	    "8879": [0, 0.68889, 0, 0, 0.72222],
	    "8882": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8883": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8884": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8885": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8888": [0, 0.54986, 0, 0, 1.11111],
	    "8890": [0.19444, 0.43056, 0, 0, 0.55556],
	    "8891": [0.19444, 0.69224, 0, 0, 0.61111],
	    "8892": [0.19444, 0.69224, 0, 0, 0.61111],
	    "8901": [0, 0.54986, 0, 0, 0.27778],
	    "8903": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8905": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8906": [0.08167, 0.58167, 0, 0, 0.77778],
	    "8907": [0, 0.69224, 0, 0, 0.77778],
	    "8908": [0, 0.69224, 0, 0, 0.77778],
	    "8909": [-0.03598, 0.46402, 0, 0, 0.77778],
	    "8910": [0, 0.54986, 0, 0, 0.76042],
	    "8911": [0, 0.54986, 0, 0, 0.76042],
	    "8912": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8913": [0.03517, 0.54986, 0, 0, 0.77778],
	    "8914": [0, 0.54986, 0, 0, 0.66667],
	    "8915": [0, 0.54986, 0, 0, 0.66667],
	    "8916": [0, 0.69224, 0, 0, 0.66667],
	    "8918": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8919": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8920": [0.03517, 0.54986, 0, 0, 1.33334],
	    "8921": [0.03517, 0.54986, 0, 0, 1.33334],
	    "8922": [0.38569, 0.88569, 0, 0, 0.77778],
	    "8923": [0.38569, 0.88569, 0, 0, 0.77778],
	    "8926": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8927": [0.13667, 0.63667, 0, 0, 0.77778],
	    "8928": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8929": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8934": [0.23222, 0.74111, 0, 0, 0.77778],
	    "8935": [0.23222, 0.74111, 0, 0, 0.77778],
	    "8936": [0.23222, 0.74111, 0, 0, 0.77778],
	    "8937": [0.23222, 0.74111, 0, 0, 0.77778],
	    "8938": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8939": [0.20576, 0.70576, 0, 0, 0.77778],
	    "8940": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8941": [0.30274, 0.79383, 0, 0, 0.77778],
	    "8994": [0.19444, 0.69224, 0, 0, 0.77778],
	    "8995": [0.19444, 0.69224, 0, 0, 0.77778],
	    "9416": [0.15559, 0.69224, 0, 0, 0.90222],
	    "9484": [0, 0.69224, 0, 0, 0.5],
	    "9488": [0, 0.69224, 0, 0, 0.5],
	    "9492": [0, 0.37788, 0, 0, 0.5],
	    "9496": [0, 0.37788, 0, 0, 0.5],
	    "9585": [0.19444, 0.68889, 0, 0, 0.88889],
	    "9586": [0.19444, 0.74111, 0, 0, 0.88889],
	    "9632": [0, 0.675, 0, 0, 0.77778],
	    "9633": [0, 0.675, 0, 0, 0.77778],
	    "9650": [0, 0.54986, 0, 0, 0.72222],
	    "9651": [0, 0.54986, 0, 0, 0.72222],
	    "9654": [0.03517, 0.54986, 0, 0, 0.77778],
	    "9660": [0, 0.54986, 0, 0, 0.72222],
	    "9661": [0, 0.54986, 0, 0, 0.72222],
	    "9664": [0.03517, 0.54986, 0, 0, 0.77778],
	    "9674": [0.11111, 0.69224, 0, 0, 0.66667],
	    "9733": [0.19444, 0.69224, 0, 0, 0.94445],
	    "10003": [0, 0.69224, 0, 0, 0.83334],
	    "10016": [0, 0.69224, 0, 0, 0.83334],
	    "10731": [0.11111, 0.69224, 0, 0, 0.66667],
	    "10846": [0.19444, 0.75583, 0, 0, 0.61111],
	    "10877": [0.13667, 0.63667, 0, 0, 0.77778],
	    "10878": [0.13667, 0.63667, 0, 0, 0.77778],
	    "10885": [0.25583, 0.75583, 0, 0, 0.77778],
	    "10886": [0.25583, 0.75583, 0, 0, 0.77778],
	    "10887": [0.13597, 0.63597, 0, 0, 0.77778],
	    "10888": [0.13597, 0.63597, 0, 0, 0.77778],
	    "10889": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10890": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10891": [0.48256, 0.98256, 0, 0, 0.77778],
	    "10892": [0.48256, 0.98256, 0, 0, 0.77778],
	    "10901": [0.13667, 0.63667, 0, 0, 0.77778],
	    "10902": [0.13667, 0.63667, 0, 0, 0.77778],
	    "10933": [0.25142, 0.75726, 0, 0, 0.77778],
	    "10934": [0.25142, 0.75726, 0, 0, 0.77778],
	    "10935": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10936": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10937": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10938": [0.26167, 0.75726, 0, 0, 0.77778],
	    "10949": [0.25583, 0.75583, 0, 0, 0.77778],
	    "10950": [0.25583, 0.75583, 0, 0, 0.77778],
	    "10955": [0.28481, 0.79383, 0, 0, 0.77778],
	    "10956": [0.28481, 0.79383, 0, 0, 0.77778],
	    "57350": [0.08167, 0.58167, 0, 0, 0.22222],
	    "57351": [0.08167, 0.58167, 0, 0, 0.38889],
	    "57352": [0.08167, 0.58167, 0, 0, 0.77778],
	    "57353": [0, 0.43056, 0.04028, 0, 0.66667],
	    "57356": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57357": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57358": [0.41951, 0.91951, 0, 0, 0.77778],
	    "57359": [0.30274, 0.79383, 0, 0, 0.77778],
	    "57360": [0.30274, 0.79383, 0, 0, 0.77778],
	    "57361": [0.41951, 0.91951, 0, 0, 0.77778],
	    "57366": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57367": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57368": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57369": [0.25142, 0.75726, 0, 0, 0.77778],
	    "57370": [0.13597, 0.63597, 0, 0, 0.77778],
	    "57371": [0.13597, 0.63597, 0, 0, 0.77778]
	  },
	  "Caligraphic-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "65": [0, 0.68333, 0, 0.19445, 0.79847],
	    "66": [0, 0.68333, 0.03041, 0.13889, 0.65681],
	    "67": [0, 0.68333, 0.05834, 0.13889, 0.52653],
	    "68": [0, 0.68333, 0.02778, 0.08334, 0.77139],
	    "69": [0, 0.68333, 0.08944, 0.11111, 0.52778],
	    "70": [0, 0.68333, 0.09931, 0.11111, 0.71875],
	    "71": [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
	    "72": [0, 0.68333, 0.00965, 0.11111, 0.84452],
	    "73": [0, 0.68333, 0.07382, 0, 0.54452],
	    "74": [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
	    "75": [0, 0.68333, 0.01445, 0.05556, 0.76195],
	    "76": [0, 0.68333, 0, 0.13889, 0.68972],
	    "77": [0, 0.68333, 0, 0.13889, 1.2009],
	    "78": [0, 0.68333, 0.14736, 0.08334, 0.82049],
	    "79": [0, 0.68333, 0.02778, 0.11111, 0.79611],
	    "80": [0, 0.68333, 0.08222, 0.08334, 0.69556],
	    "81": [0.09722, 0.68333, 0, 0.11111, 0.81667],
	    "82": [0, 0.68333, 0, 0.08334, 0.8475],
	    "83": [0, 0.68333, 0.075, 0.13889, 0.60556],
	    "84": [0, 0.68333, 0.25417, 0, 0.54464],
	    "85": [0, 0.68333, 0.09931, 0.08334, 0.62583],
	    "86": [0, 0.68333, 0.08222, 0, 0.61278],
	    "87": [0, 0.68333, 0.08222, 0.08334, 0.98778],
	    "88": [0, 0.68333, 0.14643, 0.13889, 0.7133],
	    "89": [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
	    "90": [0, 0.68333, 0.07944, 0.13889, 0.72473],
	    "160": [0, 0, 0, 0, 0.25]
	  },
	  "Fraktur-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69141, 0, 0, 0.29574],
	    "34": [0, 0.69141, 0, 0, 0.21471],
	    "38": [0, 0.69141, 0, 0, 0.73786],
	    "39": [0, 0.69141, 0, 0, 0.21201],
	    "40": [0.24982, 0.74947, 0, 0, 0.38865],
	    "41": [0.24982, 0.74947, 0, 0, 0.38865],
	    "42": [0, 0.62119, 0, 0, 0.27764],
	    "43": [0.08319, 0.58283, 0, 0, 0.75623],
	    "44": [0, 0.10803, 0, 0, 0.27764],
	    "45": [0.08319, 0.58283, 0, 0, 0.75623],
	    "46": [0, 0.10803, 0, 0, 0.27764],
	    "47": [0.24982, 0.74947, 0, 0, 0.50181],
	    "48": [0, 0.47534, 0, 0, 0.50181],
	    "49": [0, 0.47534, 0, 0, 0.50181],
	    "50": [0, 0.47534, 0, 0, 0.50181],
	    "51": [0.18906, 0.47534, 0, 0, 0.50181],
	    "52": [0.18906, 0.47534, 0, 0, 0.50181],
	    "53": [0.18906, 0.47534, 0, 0, 0.50181],
	    "54": [0, 0.69141, 0, 0, 0.50181],
	    "55": [0.18906, 0.47534, 0, 0, 0.50181],
	    "56": [0, 0.69141, 0, 0, 0.50181],
	    "57": [0.18906, 0.47534, 0, 0, 0.50181],
	    "58": [0, 0.47534, 0, 0, 0.21606],
	    "59": [0.12604, 0.47534, 0, 0, 0.21606],
	    "61": [-0.13099, 0.36866, 0, 0, 0.75623],
	    "63": [0, 0.69141, 0, 0, 0.36245],
	    "65": [0, 0.69141, 0, 0, 0.7176],
	    "66": [0, 0.69141, 0, 0, 0.88397],
	    "67": [0, 0.69141, 0, 0, 0.61254],
	    "68": [0, 0.69141, 0, 0, 0.83158],
	    "69": [0, 0.69141, 0, 0, 0.66278],
	    "70": [0.12604, 0.69141, 0, 0, 0.61119],
	    "71": [0, 0.69141, 0, 0, 0.78539],
	    "72": [0.06302, 0.69141, 0, 0, 0.7203],
	    "73": [0, 0.69141, 0, 0, 0.55448],
	    "74": [0.12604, 0.69141, 0, 0, 0.55231],
	    "75": [0, 0.69141, 0, 0, 0.66845],
	    "76": [0, 0.69141, 0, 0, 0.66602],
	    "77": [0, 0.69141, 0, 0, 1.04953],
	    "78": [0, 0.69141, 0, 0, 0.83212],
	    "79": [0, 0.69141, 0, 0, 0.82699],
	    "80": [0.18906, 0.69141, 0, 0, 0.82753],
	    "81": [0.03781, 0.69141, 0, 0, 0.82699],
	    "82": [0, 0.69141, 0, 0, 0.82807],
	    "83": [0, 0.69141, 0, 0, 0.82861],
	    "84": [0, 0.69141, 0, 0, 0.66899],
	    "85": [0, 0.69141, 0, 0, 0.64576],
	    "86": [0, 0.69141, 0, 0, 0.83131],
	    "87": [0, 0.69141, 0, 0, 1.04602],
	    "88": [0, 0.69141, 0, 0, 0.71922],
	    "89": [0.18906, 0.69141, 0, 0, 0.83293],
	    "90": [0.12604, 0.69141, 0, 0, 0.60201],
	    "91": [0.24982, 0.74947, 0, 0, 0.27764],
	    "93": [0.24982, 0.74947, 0, 0, 0.27764],
	    "94": [0, 0.69141, 0, 0, 0.49965],
	    "97": [0, 0.47534, 0, 0, 0.50046],
	    "98": [0, 0.69141, 0, 0, 0.51315],
	    "99": [0, 0.47534, 0, 0, 0.38946],
	    "100": [0, 0.62119, 0, 0, 0.49857],
	    "101": [0, 0.47534, 0, 0, 0.40053],
	    "102": [0.18906, 0.69141, 0, 0, 0.32626],
	    "103": [0.18906, 0.47534, 0, 0, 0.5037],
	    "104": [0.18906, 0.69141, 0, 0, 0.52126],
	    "105": [0, 0.69141, 0, 0, 0.27899],
	    "106": [0, 0.69141, 0, 0, 0.28088],
	    "107": [0, 0.69141, 0, 0, 0.38946],
	    "108": [0, 0.69141, 0, 0, 0.27953],
	    "109": [0, 0.47534, 0, 0, 0.76676],
	    "110": [0, 0.47534, 0, 0, 0.52666],
	    "111": [0, 0.47534, 0, 0, 0.48885],
	    "112": [0.18906, 0.52396, 0, 0, 0.50046],
	    "113": [0.18906, 0.47534, 0, 0, 0.48912],
	    "114": [0, 0.47534, 0, 0, 0.38919],
	    "115": [0, 0.47534, 0, 0, 0.44266],
	    "116": [0, 0.62119, 0, 0, 0.33301],
	    "117": [0, 0.47534, 0, 0, 0.5172],
	    "118": [0, 0.52396, 0, 0, 0.5118],
	    "119": [0, 0.52396, 0, 0, 0.77351],
	    "120": [0.18906, 0.47534, 0, 0, 0.38865],
	    "121": [0.18906, 0.47534, 0, 0, 0.49884],
	    "122": [0.18906, 0.47534, 0, 0, 0.39054],
	    "160": [0, 0, 0, 0, 0.25],
	    "8216": [0, 0.69141, 0, 0, 0.21471],
	    "8217": [0, 0.69141, 0, 0, 0.21471],
	    "58112": [0, 0.62119, 0, 0, 0.49749],
	    "58113": [0, 0.62119, 0, 0, 0.4983],
	    "58114": [0.18906, 0.69141, 0, 0, 0.33328],
	    "58115": [0.18906, 0.69141, 0, 0, 0.32923],
	    "58116": [0.18906, 0.47534, 0, 0, 0.50343],
	    "58117": [0, 0.69141, 0, 0, 0.33301],
	    "58118": [0, 0.62119, 0, 0, 0.33409],
	    "58119": [0, 0.47534, 0, 0, 0.50073]
	  },
	  "Main-Bold": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0, 0, 0.35],
	    "34": [0, 0.69444, 0, 0, 0.60278],
	    "35": [0.19444, 0.69444, 0, 0, 0.95833],
	    "36": [0.05556, 0.75, 0, 0, 0.575],
	    "37": [0.05556, 0.75, 0, 0, 0.95833],
	    "38": [0, 0.69444, 0, 0, 0.89444],
	    "39": [0, 0.69444, 0, 0, 0.31944],
	    "40": [0.25, 0.75, 0, 0, 0.44722],
	    "41": [0.25, 0.75, 0, 0, 0.44722],
	    "42": [0, 0.75, 0, 0, 0.575],
	    "43": [0.13333, 0.63333, 0, 0, 0.89444],
	    "44": [0.19444, 0.15556, 0, 0, 0.31944],
	    "45": [0, 0.44444, 0, 0, 0.38333],
	    "46": [0, 0.15556, 0, 0, 0.31944],
	    "47": [0.25, 0.75, 0, 0, 0.575],
	    "48": [0, 0.64444, 0, 0, 0.575],
	    "49": [0, 0.64444, 0, 0, 0.575],
	    "50": [0, 0.64444, 0, 0, 0.575],
	    "51": [0, 0.64444, 0, 0, 0.575],
	    "52": [0, 0.64444, 0, 0, 0.575],
	    "53": [0, 0.64444, 0, 0, 0.575],
	    "54": [0, 0.64444, 0, 0, 0.575],
	    "55": [0, 0.64444, 0, 0, 0.575],
	    "56": [0, 0.64444, 0, 0, 0.575],
	    "57": [0, 0.64444, 0, 0, 0.575],
	    "58": [0, 0.44444, 0, 0, 0.31944],
	    "59": [0.19444, 0.44444, 0, 0, 0.31944],
	    "60": [0.08556, 0.58556, 0, 0, 0.89444],
	    "61": [-0.10889, 0.39111, 0, 0, 0.89444],
	    "62": [0.08556, 0.58556, 0, 0, 0.89444],
	    "63": [0, 0.69444, 0, 0, 0.54305],
	    "64": [0, 0.69444, 0, 0, 0.89444],
	    "65": [0, 0.68611, 0, 0, 0.86944],
	    "66": [0, 0.68611, 0, 0, 0.81805],
	    "67": [0, 0.68611, 0, 0, 0.83055],
	    "68": [0, 0.68611, 0, 0, 0.88194],
	    "69": [0, 0.68611, 0, 0, 0.75555],
	    "70": [0, 0.68611, 0, 0, 0.72361],
	    "71": [0, 0.68611, 0, 0, 0.90416],
	    "72": [0, 0.68611, 0, 0, 0.9],
	    "73": [0, 0.68611, 0, 0, 0.43611],
	    "74": [0, 0.68611, 0, 0, 0.59444],
	    "75": [0, 0.68611, 0, 0, 0.90138],
	    "76": [0, 0.68611, 0, 0, 0.69166],
	    "77": [0, 0.68611, 0, 0, 1.09166],
	    "78": [0, 0.68611, 0, 0, 0.9],
	    "79": [0, 0.68611, 0, 0, 0.86388],
	    "80": [0, 0.68611, 0, 0, 0.78611],
	    "81": [0.19444, 0.68611, 0, 0, 0.86388],
	    "82": [0, 0.68611, 0, 0, 0.8625],
	    "83": [0, 0.68611, 0, 0, 0.63889],
	    "84": [0, 0.68611, 0, 0, 0.8],
	    "85": [0, 0.68611, 0, 0, 0.88472],
	    "86": [0, 0.68611, 0.01597, 0, 0.86944],
	    "87": [0, 0.68611, 0.01597, 0, 1.18888],
	    "88": [0, 0.68611, 0, 0, 0.86944],
	    "89": [0, 0.68611, 0.02875, 0, 0.86944],
	    "90": [0, 0.68611, 0, 0, 0.70277],
	    "91": [0.25, 0.75, 0, 0, 0.31944],
	    "92": [0.25, 0.75, 0, 0, 0.575],
	    "93": [0.25, 0.75, 0, 0, 0.31944],
	    "94": [0, 0.69444, 0, 0, 0.575],
	    "95": [0.31, 0.13444, 0.03194, 0, 0.575],
	    "97": [0, 0.44444, 0, 0, 0.55902],
	    "98": [0, 0.69444, 0, 0, 0.63889],
	    "99": [0, 0.44444, 0, 0, 0.51111],
	    "100": [0, 0.69444, 0, 0, 0.63889],
	    "101": [0, 0.44444, 0, 0, 0.52708],
	    "102": [0, 0.69444, 0.10903, 0, 0.35139],
	    "103": [0.19444, 0.44444, 0.01597, 0, 0.575],
	    "104": [0, 0.69444, 0, 0, 0.63889],
	    "105": [0, 0.69444, 0, 0, 0.31944],
	    "106": [0.19444, 0.69444, 0, 0, 0.35139],
	    "107": [0, 0.69444, 0, 0, 0.60694],
	    "108": [0, 0.69444, 0, 0, 0.31944],
	    "109": [0, 0.44444, 0, 0, 0.95833],
	    "110": [0, 0.44444, 0, 0, 0.63889],
	    "111": [0, 0.44444, 0, 0, 0.575],
	    "112": [0.19444, 0.44444, 0, 0, 0.63889],
	    "113": [0.19444, 0.44444, 0, 0, 0.60694],
	    "114": [0, 0.44444, 0, 0, 0.47361],
	    "115": [0, 0.44444, 0, 0, 0.45361],
	    "116": [0, 0.63492, 0, 0, 0.44722],
	    "117": [0, 0.44444, 0, 0, 0.63889],
	    "118": [0, 0.44444, 0.01597, 0, 0.60694],
	    "119": [0, 0.44444, 0.01597, 0, 0.83055],
	    "120": [0, 0.44444, 0, 0, 0.60694],
	    "121": [0.19444, 0.44444, 0.01597, 0, 0.60694],
	    "122": [0, 0.44444, 0, 0, 0.51111],
	    "123": [0.25, 0.75, 0, 0, 0.575],
	    "124": [0.25, 0.75, 0, 0, 0.31944],
	    "125": [0.25, 0.75, 0, 0, 0.575],
	    "126": [0.35, 0.34444, 0, 0, 0.575],
	    "160": [0, 0, 0, 0, 0.25],
	    "163": [0, 0.69444, 0, 0, 0.86853],
	    "168": [0, 0.69444, 0, 0, 0.575],
	    "172": [0, 0.44444, 0, 0, 0.76666],
	    "176": [0, 0.69444, 0, 0, 0.86944],
	    "177": [0.13333, 0.63333, 0, 0, 0.89444],
	    "184": [0.17014, 0, 0, 0, 0.51111],
	    "198": [0, 0.68611, 0, 0, 1.04166],
	    "215": [0.13333, 0.63333, 0, 0, 0.89444],
	    "216": [0.04861, 0.73472, 0, 0, 0.89444],
	    "223": [0, 0.69444, 0, 0, 0.59722],
	    "230": [0, 0.44444, 0, 0, 0.83055],
	    "247": [0.13333, 0.63333, 0, 0, 0.89444],
	    "248": [0.09722, 0.54167, 0, 0, 0.575],
	    "305": [0, 0.44444, 0, 0, 0.31944],
	    "338": [0, 0.68611, 0, 0, 1.16944],
	    "339": [0, 0.44444, 0, 0, 0.89444],
	    "567": [0.19444, 0.44444, 0, 0, 0.35139],
	    "710": [0, 0.69444, 0, 0, 0.575],
	    "711": [0, 0.63194, 0, 0, 0.575],
	    "713": [0, 0.59611, 0, 0, 0.575],
	    "714": [0, 0.69444, 0, 0, 0.575],
	    "715": [0, 0.69444, 0, 0, 0.575],
	    "728": [0, 0.69444, 0, 0, 0.575],
	    "729": [0, 0.69444, 0, 0, 0.31944],
	    "730": [0, 0.69444, 0, 0, 0.86944],
	    "732": [0, 0.69444, 0, 0, 0.575],
	    "733": [0, 0.69444, 0, 0, 0.575],
	    "915": [0, 0.68611, 0, 0, 0.69166],
	    "916": [0, 0.68611, 0, 0, 0.95833],
	    "920": [0, 0.68611, 0, 0, 0.89444],
	    "923": [0, 0.68611, 0, 0, 0.80555],
	    "926": [0, 0.68611, 0, 0, 0.76666],
	    "928": [0, 0.68611, 0, 0, 0.9],
	    "931": [0, 0.68611, 0, 0, 0.83055],
	    "933": [0, 0.68611, 0, 0, 0.89444],
	    "934": [0, 0.68611, 0, 0, 0.83055],
	    "936": [0, 0.68611, 0, 0, 0.89444],
	    "937": [0, 0.68611, 0, 0, 0.83055],
	    "8211": [0, 0.44444, 0.03194, 0, 0.575],
	    "8212": [0, 0.44444, 0.03194, 0, 1.14999],
	    "8216": [0, 0.69444, 0, 0, 0.31944],
	    "8217": [0, 0.69444, 0, 0, 0.31944],
	    "8220": [0, 0.69444, 0, 0, 0.60278],
	    "8221": [0, 0.69444, 0, 0, 0.60278],
	    "8224": [0.19444, 0.69444, 0, 0, 0.51111],
	    "8225": [0.19444, 0.69444, 0, 0, 0.51111],
	    "8242": [0, 0.55556, 0, 0, 0.34444],
	    "8407": [0, 0.72444, 0.15486, 0, 0.575],
	    "8463": [0, 0.69444, 0, 0, 0.66759],
	    "8465": [0, 0.69444, 0, 0, 0.83055],
	    "8467": [0, 0.69444, 0, 0, 0.47361],
	    "8472": [0.19444, 0.44444, 0, 0, 0.74027],
	    "8476": [0, 0.69444, 0, 0, 0.83055],
	    "8501": [0, 0.69444, 0, 0, 0.70277],
	    "8592": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8593": [0.19444, 0.69444, 0, 0, 0.575],
	    "8594": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8595": [0.19444, 0.69444, 0, 0, 0.575],
	    "8596": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8597": [0.25, 0.75, 0, 0, 0.575],
	    "8598": [0.19444, 0.69444, 0, 0, 1.14999],
	    "8599": [0.19444, 0.69444, 0, 0, 1.14999],
	    "8600": [0.19444, 0.69444, 0, 0, 1.14999],
	    "8601": [0.19444, 0.69444, 0, 0, 1.14999],
	    "8636": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8637": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8640": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8641": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8656": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8657": [0.19444, 0.69444, 0, 0, 0.70277],
	    "8658": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8659": [0.19444, 0.69444, 0, 0, 0.70277],
	    "8660": [-0.10889, 0.39111, 0, 0, 1.14999],
	    "8661": [0.25, 0.75, 0, 0, 0.70277],
	    "8704": [0, 0.69444, 0, 0, 0.63889],
	    "8706": [0, 0.69444, 0.06389, 0, 0.62847],
	    "8707": [0, 0.69444, 0, 0, 0.63889],
	    "8709": [0.05556, 0.75, 0, 0, 0.575],
	    "8711": [0, 0.68611, 0, 0, 0.95833],
	    "8712": [0.08556, 0.58556, 0, 0, 0.76666],
	    "8715": [0.08556, 0.58556, 0, 0, 0.76666],
	    "8722": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8723": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8725": [0.25, 0.75, 0, 0, 0.575],
	    "8726": [0.25, 0.75, 0, 0, 0.575],
	    "8727": [-0.02778, 0.47222, 0, 0, 0.575],
	    "8728": [-0.02639, 0.47361, 0, 0, 0.575],
	    "8729": [-0.02639, 0.47361, 0, 0, 0.575],
	    "8730": [0.18, 0.82, 0, 0, 0.95833],
	    "8733": [0, 0.44444, 0, 0, 0.89444],
	    "8734": [0, 0.44444, 0, 0, 1.14999],
	    "8736": [0, 0.69224, 0, 0, 0.72222],
	    "8739": [0.25, 0.75, 0, 0, 0.31944],
	    "8741": [0.25, 0.75, 0, 0, 0.575],
	    "8743": [0, 0.55556, 0, 0, 0.76666],
	    "8744": [0, 0.55556, 0, 0, 0.76666],
	    "8745": [0, 0.55556, 0, 0, 0.76666],
	    "8746": [0, 0.55556, 0, 0, 0.76666],
	    "8747": [0.19444, 0.69444, 0.12778, 0, 0.56875],
	    "8764": [-0.10889, 0.39111, 0, 0, 0.89444],
	    "8768": [0.19444, 0.69444, 0, 0, 0.31944],
	    "8771": [0.00222, 0.50222, 0, 0, 0.89444],
	    "8773": [0.027, 0.638, 0, 0, 0.894],
	    "8776": [0.02444, 0.52444, 0, 0, 0.89444],
	    "8781": [0.00222, 0.50222, 0, 0, 0.89444],
	    "8801": [0.00222, 0.50222, 0, 0, 0.89444],
	    "8804": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8805": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8810": [0.08556, 0.58556, 0, 0, 1.14999],
	    "8811": [0.08556, 0.58556, 0, 0, 1.14999],
	    "8826": [0.08556, 0.58556, 0, 0, 0.89444],
	    "8827": [0.08556, 0.58556, 0, 0, 0.89444],
	    "8834": [0.08556, 0.58556, 0, 0, 0.89444],
	    "8835": [0.08556, 0.58556, 0, 0, 0.89444],
	    "8838": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8839": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8846": [0, 0.55556, 0, 0, 0.76666],
	    "8849": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8850": [0.19667, 0.69667, 0, 0, 0.89444],
	    "8851": [0, 0.55556, 0, 0, 0.76666],
	    "8852": [0, 0.55556, 0, 0, 0.76666],
	    "8853": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8854": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8855": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8856": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8857": [0.13333, 0.63333, 0, 0, 0.89444],
	    "8866": [0, 0.69444, 0, 0, 0.70277],
	    "8867": [0, 0.69444, 0, 0, 0.70277],
	    "8868": [0, 0.69444, 0, 0, 0.89444],
	    "8869": [0, 0.69444, 0, 0, 0.89444],
	    "8900": [-0.02639, 0.47361, 0, 0, 0.575],
	    "8901": [-0.02639, 0.47361, 0, 0, 0.31944],
	    "8902": [-0.02778, 0.47222, 0, 0, 0.575],
	    "8968": [0.25, 0.75, 0, 0, 0.51111],
	    "8969": [0.25, 0.75, 0, 0, 0.51111],
	    "8970": [0.25, 0.75, 0, 0, 0.51111],
	    "8971": [0.25, 0.75, 0, 0, 0.51111],
	    "8994": [-0.13889, 0.36111, 0, 0, 1.14999],
	    "8995": [-0.13889, 0.36111, 0, 0, 1.14999],
	    "9651": [0.19444, 0.69444, 0, 0, 1.02222],
	    "9657": [-0.02778, 0.47222, 0, 0, 0.575],
	    "9661": [0.19444, 0.69444, 0, 0, 1.02222],
	    "9667": [-0.02778, 0.47222, 0, 0, 0.575],
	    "9711": [0.19444, 0.69444, 0, 0, 1.14999],
	    "9824": [0.12963, 0.69444, 0, 0, 0.89444],
	    "9825": [0.12963, 0.69444, 0, 0, 0.89444],
	    "9826": [0.12963, 0.69444, 0, 0, 0.89444],
	    "9827": [0.12963, 0.69444, 0, 0, 0.89444],
	    "9837": [0, 0.75, 0, 0, 0.44722],
	    "9838": [0.19444, 0.69444, 0, 0, 0.44722],
	    "9839": [0.19444, 0.69444, 0, 0, 0.44722],
	    "10216": [0.25, 0.75, 0, 0, 0.44722],
	    "10217": [0.25, 0.75, 0, 0, 0.44722],
	    "10815": [0, 0.68611, 0, 0, 0.9],
	    "10927": [0.19667, 0.69667, 0, 0, 0.89444],
	    "10928": [0.19667, 0.69667, 0, 0, 0.89444],
	    "57376": [0.19444, 0.69444, 0, 0, 0]
	  },
	  "Main-BoldItalic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0.11417, 0, 0.38611],
	    "34": [0, 0.69444, 0.07939, 0, 0.62055],
	    "35": [0.19444, 0.69444, 0.06833, 0, 0.94444],
	    "37": [0.05556, 0.75, 0.12861, 0, 0.94444],
	    "38": [0, 0.69444, 0.08528, 0, 0.88555],
	    "39": [0, 0.69444, 0.12945, 0, 0.35555],
	    "40": [0.25, 0.75, 0.15806, 0, 0.47333],
	    "41": [0.25, 0.75, 0.03306, 0, 0.47333],
	    "42": [0, 0.75, 0.14333, 0, 0.59111],
	    "43": [0.10333, 0.60333, 0.03306, 0, 0.88555],
	    "44": [0.19444, 0.14722, 0, 0, 0.35555],
	    "45": [0, 0.44444, 0.02611, 0, 0.41444],
	    "46": [0, 0.14722, 0, 0, 0.35555],
	    "47": [0.25, 0.75, 0.15806, 0, 0.59111],
	    "48": [0, 0.64444, 0.13167, 0, 0.59111],
	    "49": [0, 0.64444, 0.13167, 0, 0.59111],
	    "50": [0, 0.64444, 0.13167, 0, 0.59111],
	    "51": [0, 0.64444, 0.13167, 0, 0.59111],
	    "52": [0.19444, 0.64444, 0.13167, 0, 0.59111],
	    "53": [0, 0.64444, 0.13167, 0, 0.59111],
	    "54": [0, 0.64444, 0.13167, 0, 0.59111],
	    "55": [0.19444, 0.64444, 0.13167, 0, 0.59111],
	    "56": [0, 0.64444, 0.13167, 0, 0.59111],
	    "57": [0, 0.64444, 0.13167, 0, 0.59111],
	    "58": [0, 0.44444, 0.06695, 0, 0.35555],
	    "59": [0.19444, 0.44444, 0.06695, 0, 0.35555],
	    "61": [-0.10889, 0.39111, 0.06833, 0, 0.88555],
	    "63": [0, 0.69444, 0.11472, 0, 0.59111],
	    "64": [0, 0.69444, 0.09208, 0, 0.88555],
	    "65": [0, 0.68611, 0, 0, 0.86555],
	    "66": [0, 0.68611, 0.0992, 0, 0.81666],
	    "67": [0, 0.68611, 0.14208, 0, 0.82666],
	    "68": [0, 0.68611, 0.09062, 0, 0.87555],
	    "69": [0, 0.68611, 0.11431, 0, 0.75666],
	    "70": [0, 0.68611, 0.12903, 0, 0.72722],
	    "71": [0, 0.68611, 0.07347, 0, 0.89527],
	    "72": [0, 0.68611, 0.17208, 0, 0.8961],
	    "73": [0, 0.68611, 0.15681, 0, 0.47166],
	    "74": [0, 0.68611, 0.145, 0, 0.61055],
	    "75": [0, 0.68611, 0.14208, 0, 0.89499],
	    "76": [0, 0.68611, 0, 0, 0.69777],
	    "77": [0, 0.68611, 0.17208, 0, 1.07277],
	    "78": [0, 0.68611, 0.17208, 0, 0.8961],
	    "79": [0, 0.68611, 0.09062, 0, 0.85499],
	    "80": [0, 0.68611, 0.0992, 0, 0.78721],
	    "81": [0.19444, 0.68611, 0.09062, 0, 0.85499],
	    "82": [0, 0.68611, 0.02559, 0, 0.85944],
	    "83": [0, 0.68611, 0.11264, 0, 0.64999],
	    "84": [0, 0.68611, 0.12903, 0, 0.7961],
	    "85": [0, 0.68611, 0.17208, 0, 0.88083],
	    "86": [0, 0.68611, 0.18625, 0, 0.86555],
	    "87": [0, 0.68611, 0.18625, 0, 1.15999],
	    "88": [0, 0.68611, 0.15681, 0, 0.86555],
	    "89": [0, 0.68611, 0.19803, 0, 0.86555],
	    "90": [0, 0.68611, 0.14208, 0, 0.70888],
	    "91": [0.25, 0.75, 0.1875, 0, 0.35611],
	    "93": [0.25, 0.75, 0.09972, 0, 0.35611],
	    "94": [0, 0.69444, 0.06709, 0, 0.59111],
	    "95": [0.31, 0.13444, 0.09811, 0, 0.59111],
	    "97": [0, 0.44444, 0.09426, 0, 0.59111],
	    "98": [0, 0.69444, 0.07861, 0, 0.53222],
	    "99": [0, 0.44444, 0.05222, 0, 0.53222],
	    "100": [0, 0.69444, 0.10861, 0, 0.59111],
	    "101": [0, 0.44444, 0.085, 0, 0.53222],
	    "102": [0.19444, 0.69444, 0.21778, 0, 0.4],
	    "103": [0.19444, 0.44444, 0.105, 0, 0.53222],
	    "104": [0, 0.69444, 0.09426, 0, 0.59111],
	    "105": [0, 0.69326, 0.11387, 0, 0.35555],
	    "106": [0.19444, 0.69326, 0.1672, 0, 0.35555],
	    "107": [0, 0.69444, 0.11111, 0, 0.53222],
	    "108": [0, 0.69444, 0.10861, 0, 0.29666],
	    "109": [0, 0.44444, 0.09426, 0, 0.94444],
	    "110": [0, 0.44444, 0.09426, 0, 0.64999],
	    "111": [0, 0.44444, 0.07861, 0, 0.59111],
	    "112": [0.19444, 0.44444, 0.07861, 0, 0.59111],
	    "113": [0.19444, 0.44444, 0.105, 0, 0.53222],
	    "114": [0, 0.44444, 0.11111, 0, 0.50167],
	    "115": [0, 0.44444, 0.08167, 0, 0.48694],
	    "116": [0, 0.63492, 0.09639, 0, 0.385],
	    "117": [0, 0.44444, 0.09426, 0, 0.62055],
	    "118": [0, 0.44444, 0.11111, 0, 0.53222],
	    "119": [0, 0.44444, 0.11111, 0, 0.76777],
	    "120": [0, 0.44444, 0.12583, 0, 0.56055],
	    "121": [0.19444, 0.44444, 0.105, 0, 0.56166],
	    "122": [0, 0.44444, 0.13889, 0, 0.49055],
	    "126": [0.35, 0.34444, 0.11472, 0, 0.59111],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.69444, 0.11473, 0, 0.59111],
	    "176": [0, 0.69444, 0, 0, 0.94888],
	    "184": [0.17014, 0, 0, 0, 0.53222],
	    "198": [0, 0.68611, 0.11431, 0, 1.02277],
	    "216": [0.04861, 0.73472, 0.09062, 0, 0.88555],
	    "223": [0.19444, 0.69444, 0.09736, 0, 0.665],
	    "230": [0, 0.44444, 0.085, 0, 0.82666],
	    "248": [0.09722, 0.54167, 0.09458, 0, 0.59111],
	    "305": [0, 0.44444, 0.09426, 0, 0.35555],
	    "338": [0, 0.68611, 0.11431, 0, 1.14054],
	    "339": [0, 0.44444, 0.085, 0, 0.82666],
	    "567": [0.19444, 0.44444, 0.04611, 0, 0.385],
	    "710": [0, 0.69444, 0.06709, 0, 0.59111],
	    "711": [0, 0.63194, 0.08271, 0, 0.59111],
	    "713": [0, 0.59444, 0.10444, 0, 0.59111],
	    "714": [0, 0.69444, 0.08528, 0, 0.59111],
	    "715": [0, 0.69444, 0, 0, 0.59111],
	    "728": [0, 0.69444, 0.10333, 0, 0.59111],
	    "729": [0, 0.69444, 0.12945, 0, 0.35555],
	    "730": [0, 0.69444, 0, 0, 0.94888],
	    "732": [0, 0.69444, 0.11472, 0, 0.59111],
	    "733": [0, 0.69444, 0.11472, 0, 0.59111],
	    "915": [0, 0.68611, 0.12903, 0, 0.69777],
	    "916": [0, 0.68611, 0, 0, 0.94444],
	    "920": [0, 0.68611, 0.09062, 0, 0.88555],
	    "923": [0, 0.68611, 0, 0, 0.80666],
	    "926": [0, 0.68611, 0.15092, 0, 0.76777],
	    "928": [0, 0.68611, 0.17208, 0, 0.8961],
	    "931": [0, 0.68611, 0.11431, 0, 0.82666],
	    "933": [0, 0.68611, 0.10778, 0, 0.88555],
	    "934": [0, 0.68611, 0.05632, 0, 0.82666],
	    "936": [0, 0.68611, 0.10778, 0, 0.88555],
	    "937": [0, 0.68611, 0.0992, 0, 0.82666],
	    "8211": [0, 0.44444, 0.09811, 0, 0.59111],
	    "8212": [0, 0.44444, 0.09811, 0, 1.18221],
	    "8216": [0, 0.69444, 0.12945, 0, 0.35555],
	    "8217": [0, 0.69444, 0.12945, 0, 0.35555],
	    "8220": [0, 0.69444, 0.16772, 0, 0.62055],
	    "8221": [0, 0.69444, 0.07939, 0, 0.62055]
	  },
	  "Main-Italic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0.12417, 0, 0.30667],
	    "34": [0, 0.69444, 0.06961, 0, 0.51444],
	    "35": [0.19444, 0.69444, 0.06616, 0, 0.81777],
	    "37": [0.05556, 0.75, 0.13639, 0, 0.81777],
	    "38": [0, 0.69444, 0.09694, 0, 0.76666],
	    "39": [0, 0.69444, 0.12417, 0, 0.30667],
	    "40": [0.25, 0.75, 0.16194, 0, 0.40889],
	    "41": [0.25, 0.75, 0.03694, 0, 0.40889],
	    "42": [0, 0.75, 0.14917, 0, 0.51111],
	    "43": [0.05667, 0.56167, 0.03694, 0, 0.76666],
	    "44": [0.19444, 0.10556, 0, 0, 0.30667],
	    "45": [0, 0.43056, 0.02826, 0, 0.35778],
	    "46": [0, 0.10556, 0, 0, 0.30667],
	    "47": [0.25, 0.75, 0.16194, 0, 0.51111],
	    "48": [0, 0.64444, 0.13556, 0, 0.51111],
	    "49": [0, 0.64444, 0.13556, 0, 0.51111],
	    "50": [0, 0.64444, 0.13556, 0, 0.51111],
	    "51": [0, 0.64444, 0.13556, 0, 0.51111],
	    "52": [0.19444, 0.64444, 0.13556, 0, 0.51111],
	    "53": [0, 0.64444, 0.13556, 0, 0.51111],
	    "54": [0, 0.64444, 0.13556, 0, 0.51111],
	    "55": [0.19444, 0.64444, 0.13556, 0, 0.51111],
	    "56": [0, 0.64444, 0.13556, 0, 0.51111],
	    "57": [0, 0.64444, 0.13556, 0, 0.51111],
	    "58": [0, 0.43056, 0.0582, 0, 0.30667],
	    "59": [0.19444, 0.43056, 0.0582, 0, 0.30667],
	    "61": [-0.13313, 0.36687, 0.06616, 0, 0.76666],
	    "63": [0, 0.69444, 0.1225, 0, 0.51111],
	    "64": [0, 0.69444, 0.09597, 0, 0.76666],
	    "65": [0, 0.68333, 0, 0, 0.74333],
	    "66": [0, 0.68333, 0.10257, 0, 0.70389],
	    "67": [0, 0.68333, 0.14528, 0, 0.71555],
	    "68": [0, 0.68333, 0.09403, 0, 0.755],
	    "69": [0, 0.68333, 0.12028, 0, 0.67833],
	    "70": [0, 0.68333, 0.13305, 0, 0.65277],
	    "71": [0, 0.68333, 0.08722, 0, 0.77361],
	    "72": [0, 0.68333, 0.16389, 0, 0.74333],
	    "73": [0, 0.68333, 0.15806, 0, 0.38555],
	    "74": [0, 0.68333, 0.14028, 0, 0.525],
	    "75": [0, 0.68333, 0.14528, 0, 0.76888],
	    "76": [0, 0.68333, 0, 0, 0.62722],
	    "77": [0, 0.68333, 0.16389, 0, 0.89666],
	    "78": [0, 0.68333, 0.16389, 0, 0.74333],
	    "79": [0, 0.68333, 0.09403, 0, 0.76666],
	    "80": [0, 0.68333, 0.10257, 0, 0.67833],
	    "81": [0.19444, 0.68333, 0.09403, 0, 0.76666],
	    "82": [0, 0.68333, 0.03868, 0, 0.72944],
	    "83": [0, 0.68333, 0.11972, 0, 0.56222],
	    "84": [0, 0.68333, 0.13305, 0, 0.71555],
	    "85": [0, 0.68333, 0.16389, 0, 0.74333],
	    "86": [0, 0.68333, 0.18361, 0, 0.74333],
	    "87": [0, 0.68333, 0.18361, 0, 0.99888],
	    "88": [0, 0.68333, 0.15806, 0, 0.74333],
	    "89": [0, 0.68333, 0.19383, 0, 0.74333],
	    "90": [0, 0.68333, 0.14528, 0, 0.61333],
	    "91": [0.25, 0.75, 0.1875, 0, 0.30667],
	    "93": [0.25, 0.75, 0.10528, 0, 0.30667],
	    "94": [0, 0.69444, 0.06646, 0, 0.51111],
	    "95": [0.31, 0.12056, 0.09208, 0, 0.51111],
	    "97": [0, 0.43056, 0.07671, 0, 0.51111],
	    "98": [0, 0.69444, 0.06312, 0, 0.46],
	    "99": [0, 0.43056, 0.05653, 0, 0.46],
	    "100": [0, 0.69444, 0.10333, 0, 0.51111],
	    "101": [0, 0.43056, 0.07514, 0, 0.46],
	    "102": [0.19444, 0.69444, 0.21194, 0, 0.30667],
	    "103": [0.19444, 0.43056, 0.08847, 0, 0.46],
	    "104": [0, 0.69444, 0.07671, 0, 0.51111],
	    "105": [0, 0.65536, 0.1019, 0, 0.30667],
	    "106": [0.19444, 0.65536, 0.14467, 0, 0.30667],
	    "107": [0, 0.69444, 0.10764, 0, 0.46],
	    "108": [0, 0.69444, 0.10333, 0, 0.25555],
	    "109": [0, 0.43056, 0.07671, 0, 0.81777],
	    "110": [0, 0.43056, 0.07671, 0, 0.56222],
	    "111": [0, 0.43056, 0.06312, 0, 0.51111],
	    "112": [0.19444, 0.43056, 0.06312, 0, 0.51111],
	    "113": [0.19444, 0.43056, 0.08847, 0, 0.46],
	    "114": [0, 0.43056, 0.10764, 0, 0.42166],
	    "115": [0, 0.43056, 0.08208, 0, 0.40889],
	    "116": [0, 0.61508, 0.09486, 0, 0.33222],
	    "117": [0, 0.43056, 0.07671, 0, 0.53666],
	    "118": [0, 0.43056, 0.10764, 0, 0.46],
	    "119": [0, 0.43056, 0.10764, 0, 0.66444],
	    "120": [0, 0.43056, 0.12042, 0, 0.46389],
	    "121": [0.19444, 0.43056, 0.08847, 0, 0.48555],
	    "122": [0, 0.43056, 0.12292, 0, 0.40889],
	    "126": [0.35, 0.31786, 0.11585, 0, 0.51111],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.66786, 0.10474, 0, 0.51111],
	    "176": [0, 0.69444, 0, 0, 0.83129],
	    "184": [0.17014, 0, 0, 0, 0.46],
	    "198": [0, 0.68333, 0.12028, 0, 0.88277],
	    "216": [0.04861, 0.73194, 0.09403, 0, 0.76666],
	    "223": [0.19444, 0.69444, 0.10514, 0, 0.53666],
	    "230": [0, 0.43056, 0.07514, 0, 0.71555],
	    "248": [0.09722, 0.52778, 0.09194, 0, 0.51111],
	    "338": [0, 0.68333, 0.12028, 0, 0.98499],
	    "339": [0, 0.43056, 0.07514, 0, 0.71555],
	    "710": [0, 0.69444, 0.06646, 0, 0.51111],
	    "711": [0, 0.62847, 0.08295, 0, 0.51111],
	    "713": [0, 0.56167, 0.10333, 0, 0.51111],
	    "714": [0, 0.69444, 0.09694, 0, 0.51111],
	    "715": [0, 0.69444, 0, 0, 0.51111],
	    "728": [0, 0.69444, 0.10806, 0, 0.51111],
	    "729": [0, 0.66786, 0.11752, 0, 0.30667],
	    "730": [0, 0.69444, 0, 0, 0.83129],
	    "732": [0, 0.66786, 0.11585, 0, 0.51111],
	    "733": [0, 0.69444, 0.1225, 0, 0.51111],
	    "915": [0, 0.68333, 0.13305, 0, 0.62722],
	    "916": [0, 0.68333, 0, 0, 0.81777],
	    "920": [0, 0.68333, 0.09403, 0, 0.76666],
	    "923": [0, 0.68333, 0, 0, 0.69222],
	    "926": [0, 0.68333, 0.15294, 0, 0.66444],
	    "928": [0, 0.68333, 0.16389, 0, 0.74333],
	    "931": [0, 0.68333, 0.12028, 0, 0.71555],
	    "933": [0, 0.68333, 0.11111, 0, 0.76666],
	    "934": [0, 0.68333, 0.05986, 0, 0.71555],
	    "936": [0, 0.68333, 0.11111, 0, 0.76666],
	    "937": [0, 0.68333, 0.10257, 0, 0.71555],
	    "8211": [0, 0.43056, 0.09208, 0, 0.51111],
	    "8212": [0, 0.43056, 0.09208, 0, 1.02222],
	    "8216": [0, 0.69444, 0.12417, 0, 0.30667],
	    "8217": [0, 0.69444, 0.12417, 0, 0.30667],
	    "8220": [0, 0.69444, 0.1685, 0, 0.51444],
	    "8221": [0, 0.69444, 0.06961, 0, 0.51444],
	    "8463": [0, 0.68889, 0, 0, 0.54028]
	  },
	  "Main-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0, 0, 0.27778],
	    "34": [0, 0.69444, 0, 0, 0.5],
	    "35": [0.19444, 0.69444, 0, 0, 0.83334],
	    "36": [0.05556, 0.75, 0, 0, 0.5],
	    "37": [0.05556, 0.75, 0, 0, 0.83334],
	    "38": [0, 0.69444, 0, 0, 0.77778],
	    "39": [0, 0.69444, 0, 0, 0.27778],
	    "40": [0.25, 0.75, 0, 0, 0.38889],
	    "41": [0.25, 0.75, 0, 0, 0.38889],
	    "42": [0, 0.75, 0, 0, 0.5],
	    "43": [0.08333, 0.58333, 0, 0, 0.77778],
	    "44": [0.19444, 0.10556, 0, 0, 0.27778],
	    "45": [0, 0.43056, 0, 0, 0.33333],
	    "46": [0, 0.10556, 0, 0, 0.27778],
	    "47": [0.25, 0.75, 0, 0, 0.5],
	    "48": [0, 0.64444, 0, 0, 0.5],
	    "49": [0, 0.64444, 0, 0, 0.5],
	    "50": [0, 0.64444, 0, 0, 0.5],
	    "51": [0, 0.64444, 0, 0, 0.5],
	    "52": [0, 0.64444, 0, 0, 0.5],
	    "53": [0, 0.64444, 0, 0, 0.5],
	    "54": [0, 0.64444, 0, 0, 0.5],
	    "55": [0, 0.64444, 0, 0, 0.5],
	    "56": [0, 0.64444, 0, 0, 0.5],
	    "57": [0, 0.64444, 0, 0, 0.5],
	    "58": [0, 0.43056, 0, 0, 0.27778],
	    "59": [0.19444, 0.43056, 0, 0, 0.27778],
	    "60": [0.0391, 0.5391, 0, 0, 0.77778],
	    "61": [-0.13313, 0.36687, 0, 0, 0.77778],
	    "62": [0.0391, 0.5391, 0, 0, 0.77778],
	    "63": [0, 0.69444, 0, 0, 0.47222],
	    "64": [0, 0.69444, 0, 0, 0.77778],
	    "65": [0, 0.68333, 0, 0, 0.75],
	    "66": [0, 0.68333, 0, 0, 0.70834],
	    "67": [0, 0.68333, 0, 0, 0.72222],
	    "68": [0, 0.68333, 0, 0, 0.76389],
	    "69": [0, 0.68333, 0, 0, 0.68056],
	    "70": [0, 0.68333, 0, 0, 0.65278],
	    "71": [0, 0.68333, 0, 0, 0.78472],
	    "72": [0, 0.68333, 0, 0, 0.75],
	    "73": [0, 0.68333, 0, 0, 0.36111],
	    "74": [0, 0.68333, 0, 0, 0.51389],
	    "75": [0, 0.68333, 0, 0, 0.77778],
	    "76": [0, 0.68333, 0, 0, 0.625],
	    "77": [0, 0.68333, 0, 0, 0.91667],
	    "78": [0, 0.68333, 0, 0, 0.75],
	    "79": [0, 0.68333, 0, 0, 0.77778],
	    "80": [0, 0.68333, 0, 0, 0.68056],
	    "81": [0.19444, 0.68333, 0, 0, 0.77778],
	    "82": [0, 0.68333, 0, 0, 0.73611],
	    "83": [0, 0.68333, 0, 0, 0.55556],
	    "84": [0, 0.68333, 0, 0, 0.72222],
	    "85": [0, 0.68333, 0, 0, 0.75],
	    "86": [0, 0.68333, 0.01389, 0, 0.75],
	    "87": [0, 0.68333, 0.01389, 0, 1.02778],
	    "88": [0, 0.68333, 0, 0, 0.75],
	    "89": [0, 0.68333, 0.025, 0, 0.75],
	    "90": [0, 0.68333, 0, 0, 0.61111],
	    "91": [0.25, 0.75, 0, 0, 0.27778],
	    "92": [0.25, 0.75, 0, 0, 0.5],
	    "93": [0.25, 0.75, 0, 0, 0.27778],
	    "94": [0, 0.69444, 0, 0, 0.5],
	    "95": [0.31, 0.12056, 0.02778, 0, 0.5],
	    "97": [0, 0.43056, 0, 0, 0.5],
	    "98": [0, 0.69444, 0, 0, 0.55556],
	    "99": [0, 0.43056, 0, 0, 0.44445],
	    "100": [0, 0.69444, 0, 0, 0.55556],
	    "101": [0, 0.43056, 0, 0, 0.44445],
	    "102": [0, 0.69444, 0.07778, 0, 0.30556],
	    "103": [0.19444, 0.43056, 0.01389, 0, 0.5],
	    "104": [0, 0.69444, 0, 0, 0.55556],
	    "105": [0, 0.66786, 0, 0, 0.27778],
	    "106": [0.19444, 0.66786, 0, 0, 0.30556],
	    "107": [0, 0.69444, 0, 0, 0.52778],
	    "108": [0, 0.69444, 0, 0, 0.27778],
	    "109": [0, 0.43056, 0, 0, 0.83334],
	    "110": [0, 0.43056, 0, 0, 0.55556],
	    "111": [0, 0.43056, 0, 0, 0.5],
	    "112": [0.19444, 0.43056, 0, 0, 0.55556],
	    "113": [0.19444, 0.43056, 0, 0, 0.52778],
	    "114": [0, 0.43056, 0, 0, 0.39167],
	    "115": [0, 0.43056, 0, 0, 0.39445],
	    "116": [0, 0.61508, 0, 0, 0.38889],
	    "117": [0, 0.43056, 0, 0, 0.55556],
	    "118": [0, 0.43056, 0.01389, 0, 0.52778],
	    "119": [0, 0.43056, 0.01389, 0, 0.72222],
	    "120": [0, 0.43056, 0, 0, 0.52778],
	    "121": [0.19444, 0.43056, 0.01389, 0, 0.52778],
	    "122": [0, 0.43056, 0, 0, 0.44445],
	    "123": [0.25, 0.75, 0, 0, 0.5],
	    "124": [0.25, 0.75, 0, 0, 0.27778],
	    "125": [0.25, 0.75, 0, 0, 0.5],
	    "126": [0.35, 0.31786, 0, 0, 0.5],
	    "160": [0, 0, 0, 0, 0.25],
	    "163": [0, 0.69444, 0, 0, 0.76909],
	    "167": [0.19444, 0.69444, 0, 0, 0.44445],
	    "168": [0, 0.66786, 0, 0, 0.5],
	    "172": [0, 0.43056, 0, 0, 0.66667],
	    "176": [0, 0.69444, 0, 0, 0.75],
	    "177": [0.08333, 0.58333, 0, 0, 0.77778],
	    "182": [0.19444, 0.69444, 0, 0, 0.61111],
	    "184": [0.17014, 0, 0, 0, 0.44445],
	    "198": [0, 0.68333, 0, 0, 0.90278],
	    "215": [0.08333, 0.58333, 0, 0, 0.77778],
	    "216": [0.04861, 0.73194, 0, 0, 0.77778],
	    "223": [0, 0.69444, 0, 0, 0.5],
	    "230": [0, 0.43056, 0, 0, 0.72222],
	    "247": [0.08333, 0.58333, 0, 0, 0.77778],
	    "248": [0.09722, 0.52778, 0, 0, 0.5],
	    "305": [0, 0.43056, 0, 0, 0.27778],
	    "338": [0, 0.68333, 0, 0, 1.01389],
	    "339": [0, 0.43056, 0, 0, 0.77778],
	    "567": [0.19444, 0.43056, 0, 0, 0.30556],
	    "710": [0, 0.69444, 0, 0, 0.5],
	    "711": [0, 0.62847, 0, 0, 0.5],
	    "713": [0, 0.56778, 0, 0, 0.5],
	    "714": [0, 0.69444, 0, 0, 0.5],
	    "715": [0, 0.69444, 0, 0, 0.5],
	    "728": [0, 0.69444, 0, 0, 0.5],
	    "729": [0, 0.66786, 0, 0, 0.27778],
	    "730": [0, 0.69444, 0, 0, 0.75],
	    "732": [0, 0.66786, 0, 0, 0.5],
	    "733": [0, 0.69444, 0, 0, 0.5],
	    "915": [0, 0.68333, 0, 0, 0.625],
	    "916": [0, 0.68333, 0, 0, 0.83334],
	    "920": [0, 0.68333, 0, 0, 0.77778],
	    "923": [0, 0.68333, 0, 0, 0.69445],
	    "926": [0, 0.68333, 0, 0, 0.66667],
	    "928": [0, 0.68333, 0, 0, 0.75],
	    "931": [0, 0.68333, 0, 0, 0.72222],
	    "933": [0, 0.68333, 0, 0, 0.77778],
	    "934": [0, 0.68333, 0, 0, 0.72222],
	    "936": [0, 0.68333, 0, 0, 0.77778],
	    "937": [0, 0.68333, 0, 0, 0.72222],
	    "8211": [0, 0.43056, 0.02778, 0, 0.5],
	    "8212": [0, 0.43056, 0.02778, 0, 1.0],
	    "8216": [0, 0.69444, 0, 0, 0.27778],
	    "8217": [0, 0.69444, 0, 0, 0.27778],
	    "8220": [0, 0.69444, 0, 0, 0.5],
	    "8221": [0, 0.69444, 0, 0, 0.5],
	    "8224": [0.19444, 0.69444, 0, 0, 0.44445],
	    "8225": [0.19444, 0.69444, 0, 0, 0.44445],
	    "8230": [0, 0.123, 0, 0, 1.172],
	    "8242": [0, 0.55556, 0, 0, 0.275],
	    "8407": [0, 0.71444, 0.15382, 0, 0.5],
	    "8463": [0, 0.68889, 0, 0, 0.54028],
	    "8465": [0, 0.69444, 0, 0, 0.72222],
	    "8467": [0, 0.69444, 0, 0.11111, 0.41667],
	    "8472": [0.19444, 0.43056, 0, 0.11111, 0.63646],
	    "8476": [0, 0.69444, 0, 0, 0.72222],
	    "8501": [0, 0.69444, 0, 0, 0.61111],
	    "8592": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8593": [0.19444, 0.69444, 0, 0, 0.5],
	    "8594": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8595": [0.19444, 0.69444, 0, 0, 0.5],
	    "8596": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8597": [0.25, 0.75, 0, 0, 0.5],
	    "8598": [0.19444, 0.69444, 0, 0, 1.0],
	    "8599": [0.19444, 0.69444, 0, 0, 1.0],
	    "8600": [0.19444, 0.69444, 0, 0, 1.0],
	    "8601": [0.19444, 0.69444, 0, 0, 1.0],
	    "8614": [0.011, 0.511, 0, 0, 1.0],
	    "8617": [0.011, 0.511, 0, 0, 1.126],
	    "8618": [0.011, 0.511, 0, 0, 1.126],
	    "8636": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8637": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8640": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8641": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8652": [0.011, 0.671, 0, 0, 1.0],
	    "8656": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8657": [0.19444, 0.69444, 0, 0, 0.61111],
	    "8658": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8659": [0.19444, 0.69444, 0, 0, 0.61111],
	    "8660": [-0.13313, 0.36687, 0, 0, 1.0],
	    "8661": [0.25, 0.75, 0, 0, 0.61111],
	    "8704": [0, 0.69444, 0, 0, 0.55556],
	    "8706": [0, 0.69444, 0.05556, 0.08334, 0.5309],
	    "8707": [0, 0.69444, 0, 0, 0.55556],
	    "8709": [0.05556, 0.75, 0, 0, 0.5],
	    "8711": [0, 0.68333, 0, 0, 0.83334],
	    "8712": [0.0391, 0.5391, 0, 0, 0.66667],
	    "8715": [0.0391, 0.5391, 0, 0, 0.66667],
	    "8722": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8723": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8725": [0.25, 0.75, 0, 0, 0.5],
	    "8726": [0.25, 0.75, 0, 0, 0.5],
	    "8727": [-0.03472, 0.46528, 0, 0, 0.5],
	    "8728": [-0.05555, 0.44445, 0, 0, 0.5],
	    "8729": [-0.05555, 0.44445, 0, 0, 0.5],
	    "8730": [0.2, 0.8, 0, 0, 0.83334],
	    "8733": [0, 0.43056, 0, 0, 0.77778],
	    "8734": [0, 0.43056, 0, 0, 1.0],
	    "8736": [0, 0.69224, 0, 0, 0.72222],
	    "8739": [0.25, 0.75, 0, 0, 0.27778],
	    "8741": [0.25, 0.75, 0, 0, 0.5],
	    "8743": [0, 0.55556, 0, 0, 0.66667],
	    "8744": [0, 0.55556, 0, 0, 0.66667],
	    "8745": [0, 0.55556, 0, 0, 0.66667],
	    "8746": [0, 0.55556, 0, 0, 0.66667],
	    "8747": [0.19444, 0.69444, 0.11111, 0, 0.41667],
	    "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
	    "8768": [0.19444, 0.69444, 0, 0, 0.27778],
	    "8771": [-0.03625, 0.46375, 0, 0, 0.77778],
	    "8773": [-0.022, 0.589, 0, 0, 0.778],
	    "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
	    "8781": [-0.03625, 0.46375, 0, 0, 0.77778],
	    "8784": [-0.133, 0.673, 0, 0, 0.778],
	    "8801": [-0.03625, 0.46375, 0, 0, 0.77778],
	    "8804": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8805": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8810": [0.0391, 0.5391, 0, 0, 1.0],
	    "8811": [0.0391, 0.5391, 0, 0, 1.0],
	    "8826": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8827": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8834": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8835": [0.0391, 0.5391, 0, 0, 0.77778],
	    "8838": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8839": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8846": [0, 0.55556, 0, 0, 0.66667],
	    "8849": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8850": [0.13597, 0.63597, 0, 0, 0.77778],
	    "8851": [0, 0.55556, 0, 0, 0.66667],
	    "8852": [0, 0.55556, 0, 0, 0.66667],
	    "8853": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8854": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8855": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8856": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8857": [0.08333, 0.58333, 0, 0, 0.77778],
	    "8866": [0, 0.69444, 0, 0, 0.61111],
	    "8867": [0, 0.69444, 0, 0, 0.61111],
	    "8868": [0, 0.69444, 0, 0, 0.77778],
	    "8869": [0, 0.69444, 0, 0, 0.77778],
	    "8872": [0.249, 0.75, 0, 0, 0.867],
	    "8900": [-0.05555, 0.44445, 0, 0, 0.5],
	    "8901": [-0.05555, 0.44445, 0, 0, 0.27778],
	    "8902": [-0.03472, 0.46528, 0, 0, 0.5],
	    "8904": [0.005, 0.505, 0, 0, 0.9],
	    "8942": [0.03, 0.903, 0, 0, 0.278],
	    "8943": [-0.19, 0.313, 0, 0, 1.172],
	    "8945": [-0.1, 0.823, 0, 0, 1.282],
	    "8968": [0.25, 0.75, 0, 0, 0.44445],
	    "8969": [0.25, 0.75, 0, 0, 0.44445],
	    "8970": [0.25, 0.75, 0, 0, 0.44445],
	    "8971": [0.25, 0.75, 0, 0, 0.44445],
	    "8994": [-0.14236, 0.35764, 0, 0, 1.0],
	    "8995": [-0.14236, 0.35764, 0, 0, 1.0],
	    "9136": [0.244, 0.744, 0, 0, 0.412],
	    "9137": [0.244, 0.745, 0, 0, 0.412],
	    "9651": [0.19444, 0.69444, 0, 0, 0.88889],
	    "9657": [-0.03472, 0.46528, 0, 0, 0.5],
	    "9661": [0.19444, 0.69444, 0, 0, 0.88889],
	    "9667": [-0.03472, 0.46528, 0, 0, 0.5],
	    "9711": [0.19444, 0.69444, 0, 0, 1.0],
	    "9824": [0.12963, 0.69444, 0, 0, 0.77778],
	    "9825": [0.12963, 0.69444, 0, 0, 0.77778],
	    "9826": [0.12963, 0.69444, 0, 0, 0.77778],
	    "9827": [0.12963, 0.69444, 0, 0, 0.77778],
	    "9837": [0, 0.75, 0, 0, 0.38889],
	    "9838": [0.19444, 0.69444, 0, 0, 0.38889],
	    "9839": [0.19444, 0.69444, 0, 0, 0.38889],
	    "10216": [0.25, 0.75, 0, 0, 0.38889],
	    "10217": [0.25, 0.75, 0, 0, 0.38889],
	    "10222": [0.244, 0.744, 0, 0, 0.412],
	    "10223": [0.244, 0.745, 0, 0, 0.412],
	    "10229": [0.011, 0.511, 0, 0, 1.609],
	    "10230": [0.011, 0.511, 0, 0, 1.638],
	    "10231": [0.011, 0.511, 0, 0, 1.859],
	    "10232": [0.024, 0.525, 0, 0, 1.609],
	    "10233": [0.024, 0.525, 0, 0, 1.638],
	    "10234": [0.024, 0.525, 0, 0, 1.858],
	    "10236": [0.011, 0.511, 0, 0, 1.638],
	    "10815": [0, 0.68333, 0, 0, 0.75],
	    "10927": [0.13597, 0.63597, 0, 0, 0.77778],
	    "10928": [0.13597, 0.63597, 0, 0, 0.77778],
	    "57376": [0.19444, 0.69444, 0, 0, 0]
	  },
	  "Math-BoldItalic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "48": [0, 0.44444, 0, 0, 0.575],
	    "49": [0, 0.44444, 0, 0, 0.575],
	    "50": [0, 0.44444, 0, 0, 0.575],
	    "51": [0.19444, 0.44444, 0, 0, 0.575],
	    "52": [0.19444, 0.44444, 0, 0, 0.575],
	    "53": [0.19444, 0.44444, 0, 0, 0.575],
	    "54": [0, 0.64444, 0, 0, 0.575],
	    "55": [0.19444, 0.44444, 0, 0, 0.575],
	    "56": [0, 0.64444, 0, 0, 0.575],
	    "57": [0.19444, 0.44444, 0, 0, 0.575],
	    "65": [0, 0.68611, 0, 0, 0.86944],
	    "66": [0, 0.68611, 0.04835, 0, 0.8664],
	    "67": [0, 0.68611, 0.06979, 0, 0.81694],
	    "68": [0, 0.68611, 0.03194, 0, 0.93812],
	    "69": [0, 0.68611, 0.05451, 0, 0.81007],
	    "70": [0, 0.68611, 0.15972, 0, 0.68889],
	    "71": [0, 0.68611, 0, 0, 0.88673],
	    "72": [0, 0.68611, 0.08229, 0, 0.98229],
	    "73": [0, 0.68611, 0.07778, 0, 0.51111],
	    "74": [0, 0.68611, 0.10069, 0, 0.63125],
	    "75": [0, 0.68611, 0.06979, 0, 0.97118],
	    "76": [0, 0.68611, 0, 0, 0.75555],
	    "77": [0, 0.68611, 0.11424, 0, 1.14201],
	    "78": [0, 0.68611, 0.11424, 0, 0.95034],
	    "79": [0, 0.68611, 0.03194, 0, 0.83666],
	    "80": [0, 0.68611, 0.15972, 0, 0.72309],
	    "81": [0.19444, 0.68611, 0, 0, 0.86861],
	    "82": [0, 0.68611, 0.00421, 0, 0.87235],
	    "83": [0, 0.68611, 0.05382, 0, 0.69271],
	    "84": [0, 0.68611, 0.15972, 0, 0.63663],
	    "85": [0, 0.68611, 0.11424, 0, 0.80027],
	    "86": [0, 0.68611, 0.25555, 0, 0.67778],
	    "87": [0, 0.68611, 0.15972, 0, 1.09305],
	    "88": [0, 0.68611, 0.07778, 0, 0.94722],
	    "89": [0, 0.68611, 0.25555, 0, 0.67458],
	    "90": [0, 0.68611, 0.06979, 0, 0.77257],
	    "97": [0, 0.44444, 0, 0, 0.63287],
	    "98": [0, 0.69444, 0, 0, 0.52083],
	    "99": [0, 0.44444, 0, 0, 0.51342],
	    "100": [0, 0.69444, 0, 0, 0.60972],
	    "101": [0, 0.44444, 0, 0, 0.55361],
	    "102": [0.19444, 0.69444, 0.11042, 0, 0.56806],
	    "103": [0.19444, 0.44444, 0.03704, 0, 0.5449],
	    "104": [0, 0.69444, 0, 0, 0.66759],
	    "105": [0, 0.69326, 0, 0, 0.4048],
	    "106": [0.19444, 0.69326, 0.0622, 0, 0.47083],
	    "107": [0, 0.69444, 0.01852, 0, 0.6037],
	    "108": [0, 0.69444, 0.0088, 0, 0.34815],
	    "109": [0, 0.44444, 0, 0, 1.0324],
	    "110": [0, 0.44444, 0, 0, 0.71296],
	    "111": [0, 0.44444, 0, 0, 0.58472],
	    "112": [0.19444, 0.44444, 0, 0, 0.60092],
	    "113": [0.19444, 0.44444, 0.03704, 0, 0.54213],
	    "114": [0, 0.44444, 0.03194, 0, 0.5287],
	    "115": [0, 0.44444, 0, 0, 0.53125],
	    "116": [0, 0.63492, 0, 0, 0.41528],
	    "117": [0, 0.44444, 0, 0, 0.68102],
	    "118": [0, 0.44444, 0.03704, 0, 0.56666],
	    "119": [0, 0.44444, 0.02778, 0, 0.83148],
	    "120": [0, 0.44444, 0, 0, 0.65903],
	    "121": [0.19444, 0.44444, 0.03704, 0, 0.59028],
	    "122": [0, 0.44444, 0.04213, 0, 0.55509],
	    "160": [0, 0, 0, 0, 0.25],
	    "915": [0, 0.68611, 0.15972, 0, 0.65694],
	    "916": [0, 0.68611, 0, 0, 0.95833],
	    "920": [0, 0.68611, 0.03194, 0, 0.86722],
	    "923": [0, 0.68611, 0, 0, 0.80555],
	    "926": [0, 0.68611, 0.07458, 0, 0.84125],
	    "928": [0, 0.68611, 0.08229, 0, 0.98229],
	    "931": [0, 0.68611, 0.05451, 0, 0.88507],
	    "933": [0, 0.68611, 0.15972, 0, 0.67083],
	    "934": [0, 0.68611, 0, 0, 0.76666],
	    "936": [0, 0.68611, 0.11653, 0, 0.71402],
	    "937": [0, 0.68611, 0.04835, 0, 0.8789],
	    "945": [0, 0.44444, 0, 0, 0.76064],
	    "946": [0.19444, 0.69444, 0.03403, 0, 0.65972],
	    "947": [0.19444, 0.44444, 0.06389, 0, 0.59003],
	    "948": [0, 0.69444, 0.03819, 0, 0.52222],
	    "949": [0, 0.44444, 0, 0, 0.52882],
	    "950": [0.19444, 0.69444, 0.06215, 0, 0.50833],
	    "951": [0.19444, 0.44444, 0.03704, 0, 0.6],
	    "952": [0, 0.69444, 0.03194, 0, 0.5618],
	    "953": [0, 0.44444, 0, 0, 0.41204],
	    "954": [0, 0.44444, 0, 0, 0.66759],
	    "955": [0, 0.69444, 0, 0, 0.67083],
	    "956": [0.19444, 0.44444, 0, 0, 0.70787],
	    "957": [0, 0.44444, 0.06898, 0, 0.57685],
	    "958": [0.19444, 0.69444, 0.03021, 0, 0.50833],
	    "959": [0, 0.44444, 0, 0, 0.58472],
	    "960": [0, 0.44444, 0.03704, 0, 0.68241],
	    "961": [0.19444, 0.44444, 0, 0, 0.6118],
	    "962": [0.09722, 0.44444, 0.07917, 0, 0.42361],
	    "963": [0, 0.44444, 0.03704, 0, 0.68588],
	    "964": [0, 0.44444, 0.13472, 0, 0.52083],
	    "965": [0, 0.44444, 0.03704, 0, 0.63055],
	    "966": [0.19444, 0.44444, 0, 0, 0.74722],
	    "967": [0.19444, 0.44444, 0, 0, 0.71805],
	    "968": [0.19444, 0.69444, 0.03704, 0, 0.75833],
	    "969": [0, 0.44444, 0.03704, 0, 0.71782],
	    "977": [0, 0.69444, 0, 0, 0.69155],
	    "981": [0.19444, 0.69444, 0, 0, 0.7125],
	    "982": [0, 0.44444, 0.03194, 0, 0.975],
	    "1009": [0.19444, 0.44444, 0, 0, 0.6118],
	    "1013": [0, 0.44444, 0, 0, 0.48333],
	    "57649": [0, 0.44444, 0, 0, 0.39352],
	    "57911": [0.19444, 0.44444, 0, 0, 0.43889]
	  },
	  "Math-Italic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "48": [0, 0.43056, 0, 0, 0.5],
	    "49": [0, 0.43056, 0, 0, 0.5],
	    "50": [0, 0.43056, 0, 0, 0.5],
	    "51": [0.19444, 0.43056, 0, 0, 0.5],
	    "52": [0.19444, 0.43056, 0, 0, 0.5],
	    "53": [0.19444, 0.43056, 0, 0, 0.5],
	    "54": [0, 0.64444, 0, 0, 0.5],
	    "55": [0.19444, 0.43056, 0, 0, 0.5],
	    "56": [0, 0.64444, 0, 0, 0.5],
	    "57": [0.19444, 0.43056, 0, 0, 0.5],
	    "65": [0, 0.68333, 0, 0.13889, 0.75],
	    "66": [0, 0.68333, 0.05017, 0.08334, 0.75851],
	    "67": [0, 0.68333, 0.07153, 0.08334, 0.71472],
	    "68": [0, 0.68333, 0.02778, 0.05556, 0.82792],
	    "69": [0, 0.68333, 0.05764, 0.08334, 0.7382],
	    "70": [0, 0.68333, 0.13889, 0.08334, 0.64306],
	    "71": [0, 0.68333, 0, 0.08334, 0.78625],
	    "72": [0, 0.68333, 0.08125, 0.05556, 0.83125],
	    "73": [0, 0.68333, 0.07847, 0.11111, 0.43958],
	    "74": [0, 0.68333, 0.09618, 0.16667, 0.55451],
	    "75": [0, 0.68333, 0.07153, 0.05556, 0.84931],
	    "76": [0, 0.68333, 0, 0.02778, 0.68056],
	    "77": [0, 0.68333, 0.10903, 0.08334, 0.97014],
	    "78": [0, 0.68333, 0.10903, 0.08334, 0.80347],
	    "79": [0, 0.68333, 0.02778, 0.08334, 0.76278],
	    "80": [0, 0.68333, 0.13889, 0.08334, 0.64201],
	    "81": [0.19444, 0.68333, 0, 0.08334, 0.79056],
	    "82": [0, 0.68333, 0.00773, 0.08334, 0.75929],
	    "83": [0, 0.68333, 0.05764, 0.08334, 0.6132],
	    "84": [0, 0.68333, 0.13889, 0.08334, 0.58438],
	    "85": [0, 0.68333, 0.10903, 0.02778, 0.68278],
	    "86": [0, 0.68333, 0.22222, 0, 0.58333],
	    "87": [0, 0.68333, 0.13889, 0, 0.94445],
	    "88": [0, 0.68333, 0.07847, 0.08334, 0.82847],
	    "89": [0, 0.68333, 0.22222, 0, 0.58056],
	    "90": [0, 0.68333, 0.07153, 0.08334, 0.68264],
	    "97": [0, 0.43056, 0, 0, 0.52859],
	    "98": [0, 0.69444, 0, 0, 0.42917],
	    "99": [0, 0.43056, 0, 0.05556, 0.43276],
	    "100": [0, 0.69444, 0, 0.16667, 0.52049],
	    "101": [0, 0.43056, 0, 0.05556, 0.46563],
	    "102": [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
	    "103": [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
	    "104": [0, 0.69444, 0, 0, 0.57616],
	    "105": [0, 0.65952, 0, 0, 0.34451],
	    "106": [0.19444, 0.65952, 0.05724, 0, 0.41181],
	    "107": [0, 0.69444, 0.03148, 0, 0.5206],
	    "108": [0, 0.69444, 0.01968, 0.08334, 0.29838],
	    "109": [0, 0.43056, 0, 0, 0.87801],
	    "110": [0, 0.43056, 0, 0, 0.60023],
	    "111": [0, 0.43056, 0, 0.05556, 0.48472],
	    "112": [0.19444, 0.43056, 0, 0.08334, 0.50313],
	    "113": [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
	    "114": [0, 0.43056, 0.02778, 0.05556, 0.45116],
	    "115": [0, 0.43056, 0, 0.05556, 0.46875],
	    "116": [0, 0.61508, 0, 0.08334, 0.36111],
	    "117": [0, 0.43056, 0, 0.02778, 0.57246],
	    "118": [0, 0.43056, 0.03588, 0.02778, 0.48472],
	    "119": [0, 0.43056, 0.02691, 0.08334, 0.71592],
	    "120": [0, 0.43056, 0, 0.02778, 0.57153],
	    "121": [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
	    "122": [0, 0.43056, 0.04398, 0.05556, 0.46505],
	    "160": [0, 0, 0, 0, 0.25],
	    "915": [0, 0.68333, 0.13889, 0.08334, 0.61528],
	    "916": [0, 0.68333, 0, 0.16667, 0.83334],
	    "920": [0, 0.68333, 0.02778, 0.08334, 0.76278],
	    "923": [0, 0.68333, 0, 0.16667, 0.69445],
	    "926": [0, 0.68333, 0.07569, 0.08334, 0.74236],
	    "928": [0, 0.68333, 0.08125, 0.05556, 0.83125],
	    "931": [0, 0.68333, 0.05764, 0.08334, 0.77986],
	    "933": [0, 0.68333, 0.13889, 0.05556, 0.58333],
	    "934": [0, 0.68333, 0, 0.08334, 0.66667],
	    "936": [0, 0.68333, 0.11, 0.05556, 0.61222],
	    "937": [0, 0.68333, 0.05017, 0.08334, 0.7724],
	    "945": [0, 0.43056, 0.0037, 0.02778, 0.6397],
	    "946": [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
	    "947": [0.19444, 0.43056, 0.05556, 0, 0.51773],
	    "948": [0, 0.69444, 0.03785, 0.05556, 0.44444],
	    "949": [0, 0.43056, 0, 0.08334, 0.46632],
	    "950": [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
	    "951": [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
	    "952": [0, 0.69444, 0.02778, 0.08334, 0.46944],
	    "953": [0, 0.43056, 0, 0.05556, 0.35394],
	    "954": [0, 0.43056, 0, 0, 0.57616],
	    "955": [0, 0.69444, 0, 0, 0.58334],
	    "956": [0.19444, 0.43056, 0, 0.02778, 0.60255],
	    "957": [0, 0.43056, 0.06366, 0.02778, 0.49398],
	    "958": [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
	    "959": [0, 0.43056, 0, 0.05556, 0.48472],
	    "960": [0, 0.43056, 0.03588, 0, 0.57003],
	    "961": [0.19444, 0.43056, 0, 0.08334, 0.51702],
	    "962": [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
	    "963": [0, 0.43056, 0.03588, 0, 0.57141],
	    "964": [0, 0.43056, 0.1132, 0.02778, 0.43715],
	    "965": [0, 0.43056, 0.03588, 0.02778, 0.54028],
	    "966": [0.19444, 0.43056, 0, 0.08334, 0.65417],
	    "967": [0.19444, 0.43056, 0, 0.05556, 0.62569],
	    "968": [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
	    "969": [0, 0.43056, 0.03588, 0, 0.62245],
	    "977": [0, 0.69444, 0, 0.08334, 0.59144],
	    "981": [0.19444, 0.69444, 0, 0.08334, 0.59583],
	    "982": [0, 0.43056, 0.02778, 0, 0.82813],
	    "1009": [0.19444, 0.43056, 0, 0.08334, 0.51702],
	    "1013": [0, 0.43056, 0, 0.05556, 0.4059],
	    "57649": [0, 0.43056, 0, 0.02778, 0.32246],
	    "57911": [0.19444, 0.43056, 0, 0.08334, 0.38403]
	  },
	  "SansSerif-Bold": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0, 0, 0.36667],
	    "34": [0, 0.69444, 0, 0, 0.55834],
	    "35": [0.19444, 0.69444, 0, 0, 0.91667],
	    "36": [0.05556, 0.75, 0, 0, 0.55],
	    "37": [0.05556, 0.75, 0, 0, 1.02912],
	    "38": [0, 0.69444, 0, 0, 0.83056],
	    "39": [0, 0.69444, 0, 0, 0.30556],
	    "40": [0.25, 0.75, 0, 0, 0.42778],
	    "41": [0.25, 0.75, 0, 0, 0.42778],
	    "42": [0, 0.75, 0, 0, 0.55],
	    "43": [0.11667, 0.61667, 0, 0, 0.85556],
	    "44": [0.10556, 0.13056, 0, 0, 0.30556],
	    "45": [0, 0.45833, 0, 0, 0.36667],
	    "46": [0, 0.13056, 0, 0, 0.30556],
	    "47": [0.25, 0.75, 0, 0, 0.55],
	    "48": [0, 0.69444, 0, 0, 0.55],
	    "49": [0, 0.69444, 0, 0, 0.55],
	    "50": [0, 0.69444, 0, 0, 0.55],
	    "51": [0, 0.69444, 0, 0, 0.55],
	    "52": [0, 0.69444, 0, 0, 0.55],
	    "53": [0, 0.69444, 0, 0, 0.55],
	    "54": [0, 0.69444, 0, 0, 0.55],
	    "55": [0, 0.69444, 0, 0, 0.55],
	    "56": [0, 0.69444, 0, 0, 0.55],
	    "57": [0, 0.69444, 0, 0, 0.55],
	    "58": [0, 0.45833, 0, 0, 0.30556],
	    "59": [0.10556, 0.45833, 0, 0, 0.30556],
	    "61": [-0.09375, 0.40625, 0, 0, 0.85556],
	    "63": [0, 0.69444, 0, 0, 0.51945],
	    "64": [0, 0.69444, 0, 0, 0.73334],
	    "65": [0, 0.69444, 0, 0, 0.73334],
	    "66": [0, 0.69444, 0, 0, 0.73334],
	    "67": [0, 0.69444, 0, 0, 0.70278],
	    "68": [0, 0.69444, 0, 0, 0.79445],
	    "69": [0, 0.69444, 0, 0, 0.64167],
	    "70": [0, 0.69444, 0, 0, 0.61111],
	    "71": [0, 0.69444, 0, 0, 0.73334],
	    "72": [0, 0.69444, 0, 0, 0.79445],
	    "73": [0, 0.69444, 0, 0, 0.33056],
	    "74": [0, 0.69444, 0, 0, 0.51945],
	    "75": [0, 0.69444, 0, 0, 0.76389],
	    "76": [0, 0.69444, 0, 0, 0.58056],
	    "77": [0, 0.69444, 0, 0, 0.97778],
	    "78": [0, 0.69444, 0, 0, 0.79445],
	    "79": [0, 0.69444, 0, 0, 0.79445],
	    "80": [0, 0.69444, 0, 0, 0.70278],
	    "81": [0.10556, 0.69444, 0, 0, 0.79445],
	    "82": [0, 0.69444, 0, 0, 0.70278],
	    "83": [0, 0.69444, 0, 0, 0.61111],
	    "84": [0, 0.69444, 0, 0, 0.73334],
	    "85": [0, 0.69444, 0, 0, 0.76389],
	    "86": [0, 0.69444, 0.01528, 0, 0.73334],
	    "87": [0, 0.69444, 0.01528, 0, 1.03889],
	    "88": [0, 0.69444, 0, 0, 0.73334],
	    "89": [0, 0.69444, 0.0275, 0, 0.73334],
	    "90": [0, 0.69444, 0, 0, 0.67223],
	    "91": [0.25, 0.75, 0, 0, 0.34306],
	    "93": [0.25, 0.75, 0, 0, 0.34306],
	    "94": [0, 0.69444, 0, 0, 0.55],
	    "95": [0.35, 0.10833, 0.03056, 0, 0.55],
	    "97": [0, 0.45833, 0, 0, 0.525],
	    "98": [0, 0.69444, 0, 0, 0.56111],
	    "99": [0, 0.45833, 0, 0, 0.48889],
	    "100": [0, 0.69444, 0, 0, 0.56111],
	    "101": [0, 0.45833, 0, 0, 0.51111],
	    "102": [0, 0.69444, 0.07639, 0, 0.33611],
	    "103": [0.19444, 0.45833, 0.01528, 0, 0.55],
	    "104": [0, 0.69444, 0, 0, 0.56111],
	    "105": [0, 0.69444, 0, 0, 0.25556],
	    "106": [0.19444, 0.69444, 0, 0, 0.28611],
	    "107": [0, 0.69444, 0, 0, 0.53056],
	    "108": [0, 0.69444, 0, 0, 0.25556],
	    "109": [0, 0.45833, 0, 0, 0.86667],
	    "110": [0, 0.45833, 0, 0, 0.56111],
	    "111": [0, 0.45833, 0, 0, 0.55],
	    "112": [0.19444, 0.45833, 0, 0, 0.56111],
	    "113": [0.19444, 0.45833, 0, 0, 0.56111],
	    "114": [0, 0.45833, 0.01528, 0, 0.37222],
	    "115": [0, 0.45833, 0, 0, 0.42167],
	    "116": [0, 0.58929, 0, 0, 0.40417],
	    "117": [0, 0.45833, 0, 0, 0.56111],
	    "118": [0, 0.45833, 0.01528, 0, 0.5],
	    "119": [0, 0.45833, 0.01528, 0, 0.74445],
	    "120": [0, 0.45833, 0, 0, 0.5],
	    "121": [0.19444, 0.45833, 0.01528, 0, 0.5],
	    "122": [0, 0.45833, 0, 0, 0.47639],
	    "126": [0.35, 0.34444, 0, 0, 0.55],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.69444, 0, 0, 0.55],
	    "176": [0, 0.69444, 0, 0, 0.73334],
	    "180": [0, 0.69444, 0, 0, 0.55],
	    "184": [0.17014, 0, 0, 0, 0.48889],
	    "305": [0, 0.45833, 0, 0, 0.25556],
	    "567": [0.19444, 0.45833, 0, 0, 0.28611],
	    "710": [0, 0.69444, 0, 0, 0.55],
	    "711": [0, 0.63542, 0, 0, 0.55],
	    "713": [0, 0.63778, 0, 0, 0.55],
	    "728": [0, 0.69444, 0, 0, 0.55],
	    "729": [0, 0.69444, 0, 0, 0.30556],
	    "730": [0, 0.69444, 0, 0, 0.73334],
	    "732": [0, 0.69444, 0, 0, 0.55],
	    "733": [0, 0.69444, 0, 0, 0.55],
	    "915": [0, 0.69444, 0, 0, 0.58056],
	    "916": [0, 0.69444, 0, 0, 0.91667],
	    "920": [0, 0.69444, 0, 0, 0.85556],
	    "923": [0, 0.69444, 0, 0, 0.67223],
	    "926": [0, 0.69444, 0, 0, 0.73334],
	    "928": [0, 0.69444, 0, 0, 0.79445],
	    "931": [0, 0.69444, 0, 0, 0.79445],
	    "933": [0, 0.69444, 0, 0, 0.85556],
	    "934": [0, 0.69444, 0, 0, 0.79445],
	    "936": [0, 0.69444, 0, 0, 0.85556],
	    "937": [0, 0.69444, 0, 0, 0.79445],
	    "8211": [0, 0.45833, 0.03056, 0, 0.55],
	    "8212": [0, 0.45833, 0.03056, 0, 1.10001],
	    "8216": [0, 0.69444, 0, 0, 0.30556],
	    "8217": [0, 0.69444, 0, 0, 0.30556],
	    "8220": [0, 0.69444, 0, 0, 0.55834],
	    "8221": [0, 0.69444, 0, 0, 0.55834]
	  },
	  "SansSerif-Italic": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0.05733, 0, 0.31945],
	    "34": [0, 0.69444, 0.00316, 0, 0.5],
	    "35": [0.19444, 0.69444, 0.05087, 0, 0.83334],
	    "36": [0.05556, 0.75, 0.11156, 0, 0.5],
	    "37": [0.05556, 0.75, 0.03126, 0, 0.83334],
	    "38": [0, 0.69444, 0.03058, 0, 0.75834],
	    "39": [0, 0.69444, 0.07816, 0, 0.27778],
	    "40": [0.25, 0.75, 0.13164, 0, 0.38889],
	    "41": [0.25, 0.75, 0.02536, 0, 0.38889],
	    "42": [0, 0.75, 0.11775, 0, 0.5],
	    "43": [0.08333, 0.58333, 0.02536, 0, 0.77778],
	    "44": [0.125, 0.08333, 0, 0, 0.27778],
	    "45": [0, 0.44444, 0.01946, 0, 0.33333],
	    "46": [0, 0.08333, 0, 0, 0.27778],
	    "47": [0.25, 0.75, 0.13164, 0, 0.5],
	    "48": [0, 0.65556, 0.11156, 0, 0.5],
	    "49": [0, 0.65556, 0.11156, 0, 0.5],
	    "50": [0, 0.65556, 0.11156, 0, 0.5],
	    "51": [0, 0.65556, 0.11156, 0, 0.5],
	    "52": [0, 0.65556, 0.11156, 0, 0.5],
	    "53": [0, 0.65556, 0.11156, 0, 0.5],
	    "54": [0, 0.65556, 0.11156, 0, 0.5],
	    "55": [0, 0.65556, 0.11156, 0, 0.5],
	    "56": [0, 0.65556, 0.11156, 0, 0.5],
	    "57": [0, 0.65556, 0.11156, 0, 0.5],
	    "58": [0, 0.44444, 0.02502, 0, 0.27778],
	    "59": [0.125, 0.44444, 0.02502, 0, 0.27778],
	    "61": [-0.13, 0.37, 0.05087, 0, 0.77778],
	    "63": [0, 0.69444, 0.11809, 0, 0.47222],
	    "64": [0, 0.69444, 0.07555, 0, 0.66667],
	    "65": [0, 0.69444, 0, 0, 0.66667],
	    "66": [0, 0.69444, 0.08293, 0, 0.66667],
	    "67": [0, 0.69444, 0.11983, 0, 0.63889],
	    "68": [0, 0.69444, 0.07555, 0, 0.72223],
	    "69": [0, 0.69444, 0.11983, 0, 0.59722],
	    "70": [0, 0.69444, 0.13372, 0, 0.56945],
	    "71": [0, 0.69444, 0.11983, 0, 0.66667],
	    "72": [0, 0.69444, 0.08094, 0, 0.70834],
	    "73": [0, 0.69444, 0.13372, 0, 0.27778],
	    "74": [0, 0.69444, 0.08094, 0, 0.47222],
	    "75": [0, 0.69444, 0.11983, 0, 0.69445],
	    "76": [0, 0.69444, 0, 0, 0.54167],
	    "77": [0, 0.69444, 0.08094, 0, 0.875],
	    "78": [0, 0.69444, 0.08094, 0, 0.70834],
	    "79": [0, 0.69444, 0.07555, 0, 0.73611],
	    "80": [0, 0.69444, 0.08293, 0, 0.63889],
	    "81": [0.125, 0.69444, 0.07555, 0, 0.73611],
	    "82": [0, 0.69444, 0.08293, 0, 0.64584],
	    "83": [0, 0.69444, 0.09205, 0, 0.55556],
	    "84": [0, 0.69444, 0.13372, 0, 0.68056],
	    "85": [0, 0.69444, 0.08094, 0, 0.6875],
	    "86": [0, 0.69444, 0.1615, 0, 0.66667],
	    "87": [0, 0.69444, 0.1615, 0, 0.94445],
	    "88": [0, 0.69444, 0.13372, 0, 0.66667],
	    "89": [0, 0.69444, 0.17261, 0, 0.66667],
	    "90": [0, 0.69444, 0.11983, 0, 0.61111],
	    "91": [0.25, 0.75, 0.15942, 0, 0.28889],
	    "93": [0.25, 0.75, 0.08719, 0, 0.28889],
	    "94": [0, 0.69444, 0.0799, 0, 0.5],
	    "95": [0.35, 0.09444, 0.08616, 0, 0.5],
	    "97": [0, 0.44444, 0.00981, 0, 0.48056],
	    "98": [0, 0.69444, 0.03057, 0, 0.51667],
	    "99": [0, 0.44444, 0.08336, 0, 0.44445],
	    "100": [0, 0.69444, 0.09483, 0, 0.51667],
	    "101": [0, 0.44444, 0.06778, 0, 0.44445],
	    "102": [0, 0.69444, 0.21705, 0, 0.30556],
	    "103": [0.19444, 0.44444, 0.10836, 0, 0.5],
	    "104": [0, 0.69444, 0.01778, 0, 0.51667],
	    "105": [0, 0.67937, 0.09718, 0, 0.23889],
	    "106": [0.19444, 0.67937, 0.09162, 0, 0.26667],
	    "107": [0, 0.69444, 0.08336, 0, 0.48889],
	    "108": [0, 0.69444, 0.09483, 0, 0.23889],
	    "109": [0, 0.44444, 0.01778, 0, 0.79445],
	    "110": [0, 0.44444, 0.01778, 0, 0.51667],
	    "111": [0, 0.44444, 0.06613, 0, 0.5],
	    "112": [0.19444, 0.44444, 0.0389, 0, 0.51667],
	    "113": [0.19444, 0.44444, 0.04169, 0, 0.51667],
	    "114": [0, 0.44444, 0.10836, 0, 0.34167],
	    "115": [0, 0.44444, 0.0778, 0, 0.38333],
	    "116": [0, 0.57143, 0.07225, 0, 0.36111],
	    "117": [0, 0.44444, 0.04169, 0, 0.51667],
	    "118": [0, 0.44444, 0.10836, 0, 0.46111],
	    "119": [0, 0.44444, 0.10836, 0, 0.68334],
	    "120": [0, 0.44444, 0.09169, 0, 0.46111],
	    "121": [0.19444, 0.44444, 0.10836, 0, 0.46111],
	    "122": [0, 0.44444, 0.08752, 0, 0.43472],
	    "126": [0.35, 0.32659, 0.08826, 0, 0.5],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.67937, 0.06385, 0, 0.5],
	    "176": [0, 0.69444, 0, 0, 0.73752],
	    "184": [0.17014, 0, 0, 0, 0.44445],
	    "305": [0, 0.44444, 0.04169, 0, 0.23889],
	    "567": [0.19444, 0.44444, 0.04169, 0, 0.26667],
	    "710": [0, 0.69444, 0.0799, 0, 0.5],
	    "711": [0, 0.63194, 0.08432, 0, 0.5],
	    "713": [0, 0.60889, 0.08776, 0, 0.5],
	    "714": [0, 0.69444, 0.09205, 0, 0.5],
	    "715": [0, 0.69444, 0, 0, 0.5],
	    "728": [0, 0.69444, 0.09483, 0, 0.5],
	    "729": [0, 0.67937, 0.07774, 0, 0.27778],
	    "730": [0, 0.69444, 0, 0, 0.73752],
	    "732": [0, 0.67659, 0.08826, 0, 0.5],
	    "733": [0, 0.69444, 0.09205, 0, 0.5],
	    "915": [0, 0.69444, 0.13372, 0, 0.54167],
	    "916": [0, 0.69444, 0, 0, 0.83334],
	    "920": [0, 0.69444, 0.07555, 0, 0.77778],
	    "923": [0, 0.69444, 0, 0, 0.61111],
	    "926": [0, 0.69444, 0.12816, 0, 0.66667],
	    "928": [0, 0.69444, 0.08094, 0, 0.70834],
	    "931": [0, 0.69444, 0.11983, 0, 0.72222],
	    "933": [0, 0.69444, 0.09031, 0, 0.77778],
	    "934": [0, 0.69444, 0.04603, 0, 0.72222],
	    "936": [0, 0.69444, 0.09031, 0, 0.77778],
	    "937": [0, 0.69444, 0.08293, 0, 0.72222],
	    "8211": [0, 0.44444, 0.08616, 0, 0.5],
	    "8212": [0, 0.44444, 0.08616, 0, 1.0],
	    "8216": [0, 0.69444, 0.07816, 0, 0.27778],
	    "8217": [0, 0.69444, 0.07816, 0, 0.27778],
	    "8220": [0, 0.69444, 0.14205, 0, 0.5],
	    "8221": [0, 0.69444, 0.00316, 0, 0.5]
	  },
	  "SansSerif-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "33": [0, 0.69444, 0, 0, 0.31945],
	    "34": [0, 0.69444, 0, 0, 0.5],
	    "35": [0.19444, 0.69444, 0, 0, 0.83334],
	    "36": [0.05556, 0.75, 0, 0, 0.5],
	    "37": [0.05556, 0.75, 0, 0, 0.83334],
	    "38": [0, 0.69444, 0, 0, 0.75834],
	    "39": [0, 0.69444, 0, 0, 0.27778],
	    "40": [0.25, 0.75, 0, 0, 0.38889],
	    "41": [0.25, 0.75, 0, 0, 0.38889],
	    "42": [0, 0.75, 0, 0, 0.5],
	    "43": [0.08333, 0.58333, 0, 0, 0.77778],
	    "44": [0.125, 0.08333, 0, 0, 0.27778],
	    "45": [0, 0.44444, 0, 0, 0.33333],
	    "46": [0, 0.08333, 0, 0, 0.27778],
	    "47": [0.25, 0.75, 0, 0, 0.5],
	    "48": [0, 0.65556, 0, 0, 0.5],
	    "49": [0, 0.65556, 0, 0, 0.5],
	    "50": [0, 0.65556, 0, 0, 0.5],
	    "51": [0, 0.65556, 0, 0, 0.5],
	    "52": [0, 0.65556, 0, 0, 0.5],
	    "53": [0, 0.65556, 0, 0, 0.5],
	    "54": [0, 0.65556, 0, 0, 0.5],
	    "55": [0, 0.65556, 0, 0, 0.5],
	    "56": [0, 0.65556, 0, 0, 0.5],
	    "57": [0, 0.65556, 0, 0, 0.5],
	    "58": [0, 0.44444, 0, 0, 0.27778],
	    "59": [0.125, 0.44444, 0, 0, 0.27778],
	    "61": [-0.13, 0.37, 0, 0, 0.77778],
	    "63": [0, 0.69444, 0, 0, 0.47222],
	    "64": [0, 0.69444, 0, 0, 0.66667],
	    "65": [0, 0.69444, 0, 0, 0.66667],
	    "66": [0, 0.69444, 0, 0, 0.66667],
	    "67": [0, 0.69444, 0, 0, 0.63889],
	    "68": [0, 0.69444, 0, 0, 0.72223],
	    "69": [0, 0.69444, 0, 0, 0.59722],
	    "70": [0, 0.69444, 0, 0, 0.56945],
	    "71": [0, 0.69444, 0, 0, 0.66667],
	    "72": [0, 0.69444, 0, 0, 0.70834],
	    "73": [0, 0.69444, 0, 0, 0.27778],
	    "74": [0, 0.69444, 0, 0, 0.47222],
	    "75": [0, 0.69444, 0, 0, 0.69445],
	    "76": [0, 0.69444, 0, 0, 0.54167],
	    "77": [0, 0.69444, 0, 0, 0.875],
	    "78": [0, 0.69444, 0, 0, 0.70834],
	    "79": [0, 0.69444, 0, 0, 0.73611],
	    "80": [0, 0.69444, 0, 0, 0.63889],
	    "81": [0.125, 0.69444, 0, 0, 0.73611],
	    "82": [0, 0.69444, 0, 0, 0.64584],
	    "83": [0, 0.69444, 0, 0, 0.55556],
	    "84": [0, 0.69444, 0, 0, 0.68056],
	    "85": [0, 0.69444, 0, 0, 0.6875],
	    "86": [0, 0.69444, 0.01389, 0, 0.66667],
	    "87": [0, 0.69444, 0.01389, 0, 0.94445],
	    "88": [0, 0.69444, 0, 0, 0.66667],
	    "89": [0, 0.69444, 0.025, 0, 0.66667],
	    "90": [0, 0.69444, 0, 0, 0.61111],
	    "91": [0.25, 0.75, 0, 0, 0.28889],
	    "93": [0.25, 0.75, 0, 0, 0.28889],
	    "94": [0, 0.69444, 0, 0, 0.5],
	    "95": [0.35, 0.09444, 0.02778, 0, 0.5],
	    "97": [0, 0.44444, 0, 0, 0.48056],
	    "98": [0, 0.69444, 0, 0, 0.51667],
	    "99": [0, 0.44444, 0, 0, 0.44445],
	    "100": [0, 0.69444, 0, 0, 0.51667],
	    "101": [0, 0.44444, 0, 0, 0.44445],
	    "102": [0, 0.69444, 0.06944, 0, 0.30556],
	    "103": [0.19444, 0.44444, 0.01389, 0, 0.5],
	    "104": [0, 0.69444, 0, 0, 0.51667],
	    "105": [0, 0.67937, 0, 0, 0.23889],
	    "106": [0.19444, 0.67937, 0, 0, 0.26667],
	    "107": [0, 0.69444, 0, 0, 0.48889],
	    "108": [0, 0.69444, 0, 0, 0.23889],
	    "109": [0, 0.44444, 0, 0, 0.79445],
	    "110": [0, 0.44444, 0, 0, 0.51667],
	    "111": [0, 0.44444, 0, 0, 0.5],
	    "112": [0.19444, 0.44444, 0, 0, 0.51667],
	    "113": [0.19444, 0.44444, 0, 0, 0.51667],
	    "114": [0, 0.44444, 0.01389, 0, 0.34167],
	    "115": [0, 0.44444, 0, 0, 0.38333],
	    "116": [0, 0.57143, 0, 0, 0.36111],
	    "117": [0, 0.44444, 0, 0, 0.51667],
	    "118": [0, 0.44444, 0.01389, 0, 0.46111],
	    "119": [0, 0.44444, 0.01389, 0, 0.68334],
	    "120": [0, 0.44444, 0, 0, 0.46111],
	    "121": [0.19444, 0.44444, 0.01389, 0, 0.46111],
	    "122": [0, 0.44444, 0, 0, 0.43472],
	    "126": [0.35, 0.32659, 0, 0, 0.5],
	    "160": [0, 0, 0, 0, 0.25],
	    "168": [0, 0.67937, 0, 0, 0.5],
	    "176": [0, 0.69444, 0, 0, 0.66667],
	    "184": [0.17014, 0, 0, 0, 0.44445],
	    "305": [0, 0.44444, 0, 0, 0.23889],
	    "567": [0.19444, 0.44444, 0, 0, 0.26667],
	    "710": [0, 0.69444, 0, 0, 0.5],
	    "711": [0, 0.63194, 0, 0, 0.5],
	    "713": [0, 0.60889, 0, 0, 0.5],
	    "714": [0, 0.69444, 0, 0, 0.5],
	    "715": [0, 0.69444, 0, 0, 0.5],
	    "728": [0, 0.69444, 0, 0, 0.5],
	    "729": [0, 0.67937, 0, 0, 0.27778],
	    "730": [0, 0.69444, 0, 0, 0.66667],
	    "732": [0, 0.67659, 0, 0, 0.5],
	    "733": [0, 0.69444, 0, 0, 0.5],
	    "915": [0, 0.69444, 0, 0, 0.54167],
	    "916": [0, 0.69444, 0, 0, 0.83334],
	    "920": [0, 0.69444, 0, 0, 0.77778],
	    "923": [0, 0.69444, 0, 0, 0.61111],
	    "926": [0, 0.69444, 0, 0, 0.66667],
	    "928": [0, 0.69444, 0, 0, 0.70834],
	    "931": [0, 0.69444, 0, 0, 0.72222],
	    "933": [0, 0.69444, 0, 0, 0.77778],
	    "934": [0, 0.69444, 0, 0, 0.72222],
	    "936": [0, 0.69444, 0, 0, 0.77778],
	    "937": [0, 0.69444, 0, 0, 0.72222],
	    "8211": [0, 0.44444, 0.02778, 0, 0.5],
	    "8212": [0, 0.44444, 0.02778, 0, 1.0],
	    "8216": [0, 0.69444, 0, 0, 0.27778],
	    "8217": [0, 0.69444, 0, 0, 0.27778],
	    "8220": [0, 0.69444, 0, 0, 0.5],
	    "8221": [0, 0.69444, 0, 0, 0.5]
	  },
	  "Script-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "65": [0, 0.7, 0.22925, 0, 0.80253],
	    "66": [0, 0.7, 0.04087, 0, 0.90757],
	    "67": [0, 0.7, 0.1689, 0, 0.66619],
	    "68": [0, 0.7, 0.09371, 0, 0.77443],
	    "69": [0, 0.7, 0.18583, 0, 0.56162],
	    "70": [0, 0.7, 0.13634, 0, 0.89544],
	    "71": [0, 0.7, 0.17322, 0, 0.60961],
	    "72": [0, 0.7, 0.29694, 0, 0.96919],
	    "73": [0, 0.7, 0.19189, 0, 0.80907],
	    "74": [0.27778, 0.7, 0.19189, 0, 1.05159],
	    "75": [0, 0.7, 0.31259, 0, 0.91364],
	    "76": [0, 0.7, 0.19189, 0, 0.87373],
	    "77": [0, 0.7, 0.15981, 0, 1.08031],
	    "78": [0, 0.7, 0.3525, 0, 0.9015],
	    "79": [0, 0.7, 0.08078, 0, 0.73787],
	    "80": [0, 0.7, 0.08078, 0, 1.01262],
	    "81": [0, 0.7, 0.03305, 0, 0.88282],
	    "82": [0, 0.7, 0.06259, 0, 0.85],
	    "83": [0, 0.7, 0.19189, 0, 0.86767],
	    "84": [0, 0.7, 0.29087, 0, 0.74697],
	    "85": [0, 0.7, 0.25815, 0, 0.79996],
	    "86": [0, 0.7, 0.27523, 0, 0.62204],
	    "87": [0, 0.7, 0.27523, 0, 0.80532],
	    "88": [0, 0.7, 0.26006, 0, 0.94445],
	    "89": [0, 0.7, 0.2939, 0, 0.70961],
	    "90": [0, 0.7, 0.24037, 0, 0.8212],
	    "160": [0, 0, 0, 0, 0.25]
	  },
	  "Size1-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "40": [0.35001, 0.85, 0, 0, 0.45834],
	    "41": [0.35001, 0.85, 0, 0, 0.45834],
	    "47": [0.35001, 0.85, 0, 0, 0.57778],
	    "91": [0.35001, 0.85, 0, 0, 0.41667],
	    "92": [0.35001, 0.85, 0, 0, 0.57778],
	    "93": [0.35001, 0.85, 0, 0, 0.41667],
	    "123": [0.35001, 0.85, 0, 0, 0.58334],
	    "125": [0.35001, 0.85, 0, 0, 0.58334],
	    "160": [0, 0, 0, 0, 0.25],
	    "710": [0, 0.72222, 0, 0, 0.55556],
	    "732": [0, 0.72222, 0, 0, 0.55556],
	    "770": [0, 0.72222, 0, 0, 0.55556],
	    "771": [0, 0.72222, 0, 0, 0.55556],
	    "8214": [-0.00099, 0.601, 0, 0, 0.77778],
	    "8593": [1e-05, 0.6, 0, 0, 0.66667],
	    "8595": [1e-05, 0.6, 0, 0, 0.66667],
	    "8657": [1e-05, 0.6, 0, 0, 0.77778],
	    "8659": [1e-05, 0.6, 0, 0, 0.77778],
	    "8719": [0.25001, 0.75, 0, 0, 0.94445],
	    "8720": [0.25001, 0.75, 0, 0, 0.94445],
	    "8721": [0.25001, 0.75, 0, 0, 1.05556],
	    "8730": [0.35001, 0.85, 0, 0, 1.0],
	    "8739": [-0.00599, 0.606, 0, 0, 0.33333],
	    "8741": [-0.00599, 0.606, 0, 0, 0.55556],
	    "8747": [0.30612, 0.805, 0.19445, 0, 0.47222],
	    "8748": [0.306, 0.805, 0.19445, 0, 0.47222],
	    "8749": [0.306, 0.805, 0.19445, 0, 0.47222],
	    "8750": [0.30612, 0.805, 0.19445, 0, 0.47222],
	    "8896": [0.25001, 0.75, 0, 0, 0.83334],
	    "8897": [0.25001, 0.75, 0, 0, 0.83334],
	    "8898": [0.25001, 0.75, 0, 0, 0.83334],
	    "8899": [0.25001, 0.75, 0, 0, 0.83334],
	    "8968": [0.35001, 0.85, 0, 0, 0.47222],
	    "8969": [0.35001, 0.85, 0, 0, 0.47222],
	    "8970": [0.35001, 0.85, 0, 0, 0.47222],
	    "8971": [0.35001, 0.85, 0, 0, 0.47222],
	    "9168": [-0.00099, 0.601, 0, 0, 0.66667],
	    "10216": [0.35001, 0.85, 0, 0, 0.47222],
	    "10217": [0.35001, 0.85, 0, 0, 0.47222],
	    "10752": [0.25001, 0.75, 0, 0, 1.11111],
	    "10753": [0.25001, 0.75, 0, 0, 1.11111],
	    "10754": [0.25001, 0.75, 0, 0, 1.11111],
	    "10756": [0.25001, 0.75, 0, 0, 0.83334],
	    "10758": [0.25001, 0.75, 0, 0, 0.83334]
	  },
	  "Size2-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "40": [0.65002, 1.15, 0, 0, 0.59722],
	    "41": [0.65002, 1.15, 0, 0, 0.59722],
	    "47": [0.65002, 1.15, 0, 0, 0.81111],
	    "91": [0.65002, 1.15, 0, 0, 0.47222],
	    "92": [0.65002, 1.15, 0, 0, 0.81111],
	    "93": [0.65002, 1.15, 0, 0, 0.47222],
	    "123": [0.65002, 1.15, 0, 0, 0.66667],
	    "125": [0.65002, 1.15, 0, 0, 0.66667],
	    "160": [0, 0, 0, 0, 0.25],
	    "710": [0, 0.75, 0, 0, 1.0],
	    "732": [0, 0.75, 0, 0, 1.0],
	    "770": [0, 0.75, 0, 0, 1.0],
	    "771": [0, 0.75, 0, 0, 1.0],
	    "8719": [0.55001, 1.05, 0, 0, 1.27778],
	    "8720": [0.55001, 1.05, 0, 0, 1.27778],
	    "8721": [0.55001, 1.05, 0, 0, 1.44445],
	    "8730": [0.65002, 1.15, 0, 0, 1.0],
	    "8747": [0.86225, 1.36, 0.44445, 0, 0.55556],
	    "8748": [0.862, 1.36, 0.44445, 0, 0.55556],
	    "8749": [0.862, 1.36, 0.44445, 0, 0.55556],
	    "8750": [0.86225, 1.36, 0.44445, 0, 0.55556],
	    "8896": [0.55001, 1.05, 0, 0, 1.11111],
	    "8897": [0.55001, 1.05, 0, 0, 1.11111],
	    "8898": [0.55001, 1.05, 0, 0, 1.11111],
	    "8899": [0.55001, 1.05, 0, 0, 1.11111],
	    "8968": [0.65002, 1.15, 0, 0, 0.52778],
	    "8969": [0.65002, 1.15, 0, 0, 0.52778],
	    "8970": [0.65002, 1.15, 0, 0, 0.52778],
	    "8971": [0.65002, 1.15, 0, 0, 0.52778],
	    "10216": [0.65002, 1.15, 0, 0, 0.61111],
	    "10217": [0.65002, 1.15, 0, 0, 0.61111],
	    "10752": [0.55001, 1.05, 0, 0, 1.51112],
	    "10753": [0.55001, 1.05, 0, 0, 1.51112],
	    "10754": [0.55001, 1.05, 0, 0, 1.51112],
	    "10756": [0.55001, 1.05, 0, 0, 1.11111],
	    "10758": [0.55001, 1.05, 0, 0, 1.11111]
	  },
	  "Size3-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "40": [0.95003, 1.45, 0, 0, 0.73611],
	    "41": [0.95003, 1.45, 0, 0, 0.73611],
	    "47": [0.95003, 1.45, 0, 0, 1.04445],
	    "91": [0.95003, 1.45, 0, 0, 0.52778],
	    "92": [0.95003, 1.45, 0, 0, 1.04445],
	    "93": [0.95003, 1.45, 0, 0, 0.52778],
	    "123": [0.95003, 1.45, 0, 0, 0.75],
	    "125": [0.95003, 1.45, 0, 0, 0.75],
	    "160": [0, 0, 0, 0, 0.25],
	    "710": [0, 0.75, 0, 0, 1.44445],
	    "732": [0, 0.75, 0, 0, 1.44445],
	    "770": [0, 0.75, 0, 0, 1.44445],
	    "771": [0, 0.75, 0, 0, 1.44445],
	    "8730": [0.95003, 1.45, 0, 0, 1.0],
	    "8968": [0.95003, 1.45, 0, 0, 0.58334],
	    "8969": [0.95003, 1.45, 0, 0, 0.58334],
	    "8970": [0.95003, 1.45, 0, 0, 0.58334],
	    "8971": [0.95003, 1.45, 0, 0, 0.58334],
	    "10216": [0.95003, 1.45, 0, 0, 0.75],
	    "10217": [0.95003, 1.45, 0, 0, 0.75]
	  },
	  "Size4-Regular": {
	    "32": [0, 0, 0, 0, 0.25],
	    "40": [1.25003, 1.75, 0, 0, 0.79167],
	    "41": [1.25003, 1.75, 0, 0, 0.79167],
	    "47": [1.25003, 1.75, 0, 0, 1.27778],
	    "91": [1.25003, 1.75, 0, 0, 0.58334],
	    "92": [1.25003, 1.75, 0, 0, 1.27778],
	    "93": [1.25003, 1.75, 0, 0, 0.58334],
	    "123": [1.25003, 1.75, 0, 0, 0.80556],
	    "125": [1.25003, 1.75, 0, 0, 0.80556],
	    "160": [0, 0, 0, 0, 0.25],
	    "710": [0, 0.825, 0, 0, 1.8889],
	    "732": [0, 0.825, 0, 0, 1.8889],
	    "770": [0, 0.825, 0, 0, 1.8889],
	    "771": [0, 0.825, 0, 0, 1.8889],
	    "8730": [1.25003, 1.75, 0, 0, 1.0],
	    "8968": [1.25003, 1.75, 0, 0, 0.63889],
	    "8969": [1.25003, 1.75, 0, 0, 0.63889],
	    "8970": [1.25003, 1.75, 0, 0, 0.63889],
	    "8971": [1.25003, 1.75, 0, 0, 0.63889],
	    "9115": [0.64502, 1.155, 0, 0, 0.875],
	    "9116": [1e-05, 0.6, 0, 0, 0.875],
	    "9117": [0.64502, 1.155, 0, 0, 0.875],
	    "9118": [0.64502, 1.155, 0, 0, 0.875],
	    "9119": [1e-05, 0.6, 0, 0, 0.875],
	    "9120": [0.64502, 1.155, 0, 0, 0.875],
	    "9121": [0.64502, 1.155, 0, 0, 0.66667],
	    "9122": [-0.00099, 0.601, 0, 0, 0.66667],
	    "9123": [0.64502, 1.155, 0, 0, 0.66667],
	    "9124": [0.64502, 1.155, 0, 0, 0.66667],
	    "9125": [-0.00099, 0.601, 0, 0, 0.66667],
	    "9126": [0.64502, 1.155, 0, 0, 0.66667],
	    "9127": [1e-05, 0.9, 0, 0, 0.88889],
	    "9128": [0.65002, 1.15, 0, 0, 0.88889],
	    "9129": [0.90001, 0, 0, 0, 0.88889],
	    "9130": [0, 0.3, 0, 0, 0.88889],
	    "9131": [1e-05, 0.9, 0, 0, 0.88889],
	    "9132": [0.65002, 1.15, 0, 0, 0.88889],
	    "9133": [0.90001, 0, 0, 0, 0.88889],
	    "9143": [0.88502, 0.915, 0, 0, 1.05556],
	    "10216": [1.25003, 1.75, 0, 0, 0.80556],
	    "10217": [1.25003, 1.75, 0, 0, 0.80556],
	    "57344": [-0.00499, 0.605, 0, 0, 1.05556],
	    "57345": [-0.00499, 0.605, 0, 0, 1.05556],
	    "57680": [0, 0.12, 0, 0, 0.45],
	    "57681": [0, 0.12, 0, 0, 0.45],
	    "57682": [0, 0.12, 0, 0, 0.45],
	    "57683": [0, 0.12, 0, 0, 0.45]
	  },
	  "Typewriter-Regular": {
	    "32": [0, 0, 0, 0, 0.525],
	    "33": [0, 0.61111, 0, 0, 0.525],
	    "34": [0, 0.61111, 0, 0, 0.525],
	    "35": [0, 0.61111, 0, 0, 0.525],
	    "36": [0.08333, 0.69444, 0, 0, 0.525],
	    "37": [0.08333, 0.69444, 0, 0, 0.525],
	    "38": [0, 0.61111, 0, 0, 0.525],
	    "39": [0, 0.61111, 0, 0, 0.525],
	    "40": [0.08333, 0.69444, 0, 0, 0.525],
	    "41": [0.08333, 0.69444, 0, 0, 0.525],
	    "42": [0, 0.52083, 0, 0, 0.525],
	    "43": [-0.08056, 0.53055, 0, 0, 0.525],
	    "44": [0.13889, 0.125, 0, 0, 0.525],
	    "45": [-0.08056, 0.53055, 0, 0, 0.525],
	    "46": [0, 0.125, 0, 0, 0.525],
	    "47": [0.08333, 0.69444, 0, 0, 0.525],
	    "48": [0, 0.61111, 0, 0, 0.525],
	    "49": [0, 0.61111, 0, 0, 0.525],
	    "50": [0, 0.61111, 0, 0, 0.525],
	    "51": [0, 0.61111, 0, 0, 0.525],
	    "52": [0, 0.61111, 0, 0, 0.525],
	    "53": [0, 0.61111, 0, 0, 0.525],
	    "54": [0, 0.61111, 0, 0, 0.525],
	    "55": [0, 0.61111, 0, 0, 0.525],
	    "56": [0, 0.61111, 0, 0, 0.525],
	    "57": [0, 0.61111, 0, 0, 0.525],
	    "58": [0, 0.43056, 0, 0, 0.525],
	    "59": [0.13889, 0.43056, 0, 0, 0.525],
	    "60": [-0.05556, 0.55556, 0, 0, 0.525],
	    "61": [-0.19549, 0.41562, 0, 0, 0.525],
	    "62": [-0.05556, 0.55556, 0, 0, 0.525],
	    "63": [0, 0.61111, 0, 0, 0.525],
	    "64": [0, 0.61111, 0, 0, 0.525],
	    "65": [0, 0.61111, 0, 0, 0.525],
	    "66": [0, 0.61111, 0, 0, 0.525],
	    "67": [0, 0.61111, 0, 0, 0.525],
	    "68": [0, 0.61111, 0, 0, 0.525],
	    "69": [0, 0.61111, 0, 0, 0.525],
	    "70": [0, 0.61111, 0, 0, 0.525],
	    "71": [0, 0.61111, 0, 0, 0.525],
	    "72": [0, 0.61111, 0, 0, 0.525],
	    "73": [0, 0.61111, 0, 0, 0.525],
	    "74": [0, 0.61111, 0, 0, 0.525],
	    "75": [0, 0.61111, 0, 0, 0.525],
	    "76": [0, 0.61111, 0, 0, 0.525],
	    "77": [0, 0.61111, 0, 0, 0.525],
	    "78": [0, 0.61111, 0, 0, 0.525],
	    "79": [0, 0.61111, 0, 0, 0.525],
	    "80": [0, 0.61111, 0, 0, 0.525],
	    "81": [0.13889, 0.61111, 0, 0, 0.525],
	    "82": [0, 0.61111, 0, 0, 0.525],
	    "83": [0, 0.61111, 0, 0, 0.525],
	    "84": [0, 0.61111, 0, 0, 0.525],
	    "85": [0, 0.61111, 0, 0, 0.525],
	    "86": [0, 0.61111, 0, 0, 0.525],
	    "87": [0, 0.61111, 0, 0, 0.525],
	    "88": [0, 0.61111, 0, 0, 0.525],
	    "89": [0, 0.61111, 0, 0, 0.525],
	    "90": [0, 0.61111, 0, 0, 0.525],
	    "91": [0.08333, 0.69444, 0, 0, 0.525],
	    "92": [0.08333, 0.69444, 0, 0, 0.525],
	    "93": [0.08333, 0.69444, 0, 0, 0.525],
	    "94": [0, 0.61111, 0, 0, 0.525],
	    "95": [0.09514, 0, 0, 0, 0.525],
	    "96": [0, 0.61111, 0, 0, 0.525],
	    "97": [0, 0.43056, 0, 0, 0.525],
	    "98": [0, 0.61111, 0, 0, 0.525],
	    "99": [0, 0.43056, 0, 0, 0.525],
	    "100": [0, 0.61111, 0, 0, 0.525],
	    "101": [0, 0.43056, 0, 0, 0.525],
	    "102": [0, 0.61111, 0, 0, 0.525],
	    "103": [0.22222, 0.43056, 0, 0, 0.525],
	    "104": [0, 0.61111, 0, 0, 0.525],
	    "105": [0, 0.61111, 0, 0, 0.525],
	    "106": [0.22222, 0.61111, 0, 0, 0.525],
	    "107": [0, 0.61111, 0, 0, 0.525],
	    "108": [0, 0.61111, 0, 0, 0.525],
	    "109": [0, 0.43056, 0, 0, 0.525],
	    "110": [0, 0.43056, 0, 0, 0.525],
	    "111": [0, 0.43056, 0, 0, 0.525],
	    "112": [0.22222, 0.43056, 0, 0, 0.525],
	    "113": [0.22222, 0.43056, 0, 0, 0.525],
	    "114": [0, 0.43056, 0, 0, 0.525],
	    "115": [0, 0.43056, 0, 0, 0.525],
	    "116": [0, 0.55358, 0, 0, 0.525],
	    "117": [0, 0.43056, 0, 0, 0.525],
	    "118": [0, 0.43056, 0, 0, 0.525],
	    "119": [0, 0.43056, 0, 0, 0.525],
	    "120": [0, 0.43056, 0, 0, 0.525],
	    "121": [0.22222, 0.43056, 0, 0, 0.525],
	    "122": [0, 0.43056, 0, 0, 0.525],
	    "123": [0.08333, 0.69444, 0, 0, 0.525],
	    "124": [0.08333, 0.69444, 0, 0, 0.525],
	    "125": [0.08333, 0.69444, 0, 0, 0.525],
	    "126": [0, 0.61111, 0, 0, 0.525],
	    "127": [0, 0.61111, 0, 0, 0.525],
	    "160": [0, 0, 0, 0, 0.525],
	    "176": [0, 0.61111, 0, 0, 0.525],
	    "184": [0.19445, 0, 0, 0, 0.525],
	    "305": [0, 0.43056, 0, 0, 0.525],
	    "567": [0.22222, 0.43056, 0, 0, 0.525],
	    "711": [0, 0.56597, 0, 0, 0.525],
	    "713": [0, 0.56555, 0, 0, 0.525],
	    "714": [0, 0.61111, 0, 0, 0.525],
	    "715": [0, 0.61111, 0, 0, 0.525],
	    "728": [0, 0.61111, 0, 0, 0.525],
	    "730": [0, 0.61111, 0, 0, 0.525],
	    "770": [0, 0.61111, 0, 0, 0.525],
	    "771": [0, 0.61111, 0, 0, 0.525],
	    "776": [0, 0.61111, 0, 0, 0.525],
	    "915": [0, 0.61111, 0, 0, 0.525],
	    "916": [0, 0.61111, 0, 0, 0.525],
	    "920": [0, 0.61111, 0, 0, 0.525],
	    "923": [0, 0.61111, 0, 0, 0.525],
	    "926": [0, 0.61111, 0, 0, 0.525],
	    "928": [0, 0.61111, 0, 0, 0.525],
	    "931": [0, 0.61111, 0, 0, 0.525],
	    "933": [0, 0.61111, 0, 0, 0.525],
	    "934": [0, 0.61111, 0, 0, 0.525],
	    "936": [0, 0.61111, 0, 0, 0.525],
	    "937": [0, 0.61111, 0, 0, 0.525],
	    "8216": [0, 0.61111, 0, 0, 0.525],
	    "8217": [0, 0.61111, 0, 0, 0.525],
	    "8242": [0, 0.61111, 0, 0, 0.525],
	    "9251": [0.11111, 0.21944, 0, 0, 0.525]
	  }
	};

	/**
	 * This file contains metrics regarding fonts and individual symbols. The sigma
	 * and xi variables, as well as the metricMap map contain data extracted from
	 * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
	 * `metrics` variable and the getCharacterMetrics function.
	 */
	// In TeX, there are actually three sets of dimensions, one for each of
	// textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:
	// 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are
	// provided in the the arrays below, in that order.
	//
	// The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.
	// This was determined by running the following script:
	//
	//     latex -interaction=nonstopmode \
	//     '\documentclass{article}\usepackage{amsmath}\begin{document}' \
	//     '$a$ \expandafter\show\the\textfont2' \
	//     '\expandafter\show\the\scriptfont2' \
	//     '\expandafter\show\the\scriptscriptfont2' \
	//     '\stop'
	//
	// The metrics themselves were retreived using the following commands:
	//
	//     tftopl cmsy10
	//     tftopl cmsy7
	//     tftopl cmsy5
	//
	// The output of each of these commands is quite lengthy.  The only part we
	// care about is the FONTDIMEN section. Each value is measured in EMs.
	var sigmasAndXis = {
	  slant: [0.250, 0.250, 0.250],
	  // sigma1
	  space: [0.000, 0.000, 0.000],
	  // sigma2
	  stretch: [0.000, 0.000, 0.000],
	  // sigma3
	  shrink: [0.000, 0.000, 0.000],
	  // sigma4
	  xHeight: [0.431, 0.431, 0.431],
	  // sigma5
	  quad: [1.000, 1.171, 1.472],
	  // sigma6
	  extraSpace: [0.000, 0.000, 0.000],
	  // sigma7
	  num1: [0.677, 0.732, 0.925],
	  // sigma8
	  num2: [0.394, 0.384, 0.387],
	  // sigma9
	  num3: [0.444, 0.471, 0.504],
	  // sigma10
	  denom1: [0.686, 0.752, 1.025],
	  // sigma11
	  denom2: [0.345, 0.344, 0.532],
	  // sigma12
	  sup1: [0.413, 0.503, 0.504],
	  // sigma13
	  sup2: [0.363, 0.431, 0.404],
	  // sigma14
	  sup3: [0.289, 0.286, 0.294],
	  // sigma15
	  sub1: [0.150, 0.143, 0.200],
	  // sigma16
	  sub2: [0.247, 0.286, 0.400],
	  // sigma17
	  supDrop: [0.386, 0.353, 0.494],
	  // sigma18
	  subDrop: [0.050, 0.071, 0.100],
	  // sigma19
	  delim1: [2.390, 1.700, 1.980],
	  // sigma20
	  delim2: [1.010, 1.157, 1.420],
	  // sigma21
	  axisHeight: [0.250, 0.250, 0.250],
	  // sigma22
	  // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
	  // they correspond to the font parameters of the extension fonts (family 3).
	  // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
	  // match cmex7, we'd use cmex7.tfm values for script and scriptscript
	  // values.
	  defaultRuleThickness: [0.04, 0.049, 0.049],
	  // xi8; cmex7: 0.049
	  bigOpSpacing1: [0.111, 0.111, 0.111],
	  // xi9
	  bigOpSpacing2: [0.166, 0.166, 0.166],
	  // xi10
	  bigOpSpacing3: [0.2, 0.2, 0.2],
	  // xi11
	  bigOpSpacing4: [0.6, 0.611, 0.611],
	  // xi12; cmex7: 0.611
	  bigOpSpacing5: [0.1, 0.143, 0.143],
	  // xi13; cmex7: 0.143
	  // The \sqrt rule width is taken from the height of the surd character.
	  // Since we use the same font at all sizes, this thickness doesn't scale.
	  sqrtRuleThickness: [0.04, 0.04, 0.04],
	  // This value determines how large a pt is, for metrics which are defined
	  // in terms of pts.
	  // This value is also used in katex.less; if you change it make sure the
	  // values match.
	  ptPerEm: [10.0, 10.0, 10.0],
	  // The space between adjacent `|` columns in an array definition. From
	  // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
	  doubleRuleSep: [0.2, 0.2, 0.2],
	  // The width of separator lines in {array} environments. From
	  // `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.
	  arrayRuleWidth: [0.04, 0.04, 0.04],
	  // Two values from LaTeX source2e:
	  fboxsep: [0.3, 0.3, 0.3],
	  //        3 pt / ptPerEm
	  fboxrule: [0.04, 0.04, 0.04] // 0.4 pt / ptPerEm

	}; // This map contains a mapping from font name and character code to character
	// should have Latin-1 and Cyrillic characters, but may not depending on the
	// operating system.  The metrics do not account for extra height from the
	// accents.  In the case of Cyrillic characters which have both ascenders and
	// descenders we prefer approximations with ascenders, primarily to prevent
	// the fraction bar or root line from intersecting the glyph.
	// TODO(kevinb) allow union of multiple glyph metrics for better accuracy.

	var extraCharacterMap = {
	  // Latin-1
	  'Å': 'A',
	  'Ð': 'D',
	  'Þ': 'o',
	  'å': 'a',
	  'ð': 'd',
	  'þ': 'o',
	  // Cyrillic
	  'А': 'A',
	  'Б': 'B',
	  'В': 'B',
	  'Г': 'F',
	  'Д': 'A',
	  'Е': 'E',
	  'Ж': 'K',
	  'З': '3',
	  'И': 'N',
	  'Й': 'N',
	  'К': 'K',
	  'Л': 'N',
	  'М': 'M',
	  'Н': 'H',
	  'О': 'O',
	  'П': 'N',
	  'Р': 'P',
	  'С': 'C',
	  'Т': 'T',
	  'У': 'y',
	  'Ф': 'O',
	  'Х': 'X',
	  'Ц': 'U',
	  'Ч': 'h',
	  'Ш': 'W',
	  'Щ': 'W',
	  'Ъ': 'B',
	  'Ы': 'X',
	  'Ь': 'B',
	  'Э': '3',
	  'Ю': 'X',
	  'Я': 'R',
	  'а': 'a',
	  'б': 'b',
	  'в': 'a',
	  'г': 'r',
	  'д': 'y',
	  'е': 'e',
	  'ж': 'm',
	  'з': 'e',
	  'и': 'n',
	  'й': 'n',
	  'к': 'n',
	  'л': 'n',
	  'м': 'm',
	  'н': 'n',
	  'о': 'o',
	  'п': 'n',
	  'р': 'p',
	  'с': 'c',
	  'т': 'o',
	  'у': 'y',
	  'ф': 'b',
	  'х': 'x',
	  'ц': 'n',
	  'ч': 'n',
	  'ш': 'w',
	  'щ': 'w',
	  'ъ': 'a',
	  'ы': 'm',
	  'ь': 'a',
	  'э': 'e',
	  'ю': 'm',
	  'я': 'r'
	};

	/**
	 * This function adds new font metrics to default metricMap
	 * It can also override existing metrics
	 */
	function setFontMetrics(fontName, metrics) {
	  fontMetricsData[fontName] = metrics;
	}
	/**
	 * This function is a convenience function for looking up information in the
	 * metricMap table. It takes a character as a string, and a font.
	 *
	 * Note: the `width` property may be undefined if fontMetricsData.js wasn't
	 * built using `Make extended_metrics`.
	 */

	function getCharacterMetrics(character, font, mode) {
	  if (!fontMetricsData[font]) {
	    throw new Error("Font metrics not found for font: " + font + ".");
	  }

	  var ch = character.charCodeAt(0);
	  var metrics = fontMetricsData[font][ch];

	  if (!metrics && character[0] in extraCharacterMap) {
	    ch = extraCharacterMap[character[0]].charCodeAt(0);
	    metrics = fontMetricsData[font][ch];
	  }

	  if (!metrics && mode === 'text') {
	    // We don't typically have font metrics for Asian scripts.
	    // But since we support them in text mode, we need to return
	    // some sort of metrics.
	    // So if the character is in a script we support but we
	    // don't have metrics for it, just use the metrics for
	    // the Latin capital letter M. This is close enough because
	    // we (currently) only care about the height of the glpyh
	    // not its width.
	    if (supportedCodepoint(ch)) {
	      metrics = fontMetricsData[font][77]; // 77 is the charcode for 'M'
	    }
	  }

	  if (metrics) {
	    return {
	      depth: metrics[0],
	      height: metrics[1],
	      italic: metrics[2],
	      skew: metrics[3],
	      width: metrics[4]
	    };
	  }
	}
	var fontMetricsBySizeIndex = {};
	/**
	 * Get the font metrics for a given size.
	 */

	function getGlobalMetrics(size) {
	  var sizeIndex;

	  if (size >= 5) {
	    sizeIndex = 0;
	  } else if (size >= 3) {
	    sizeIndex = 1;
	  } else {
	    sizeIndex = 2;
	  }

	  if (!fontMetricsBySizeIndex[sizeIndex]) {
	    var metrics = fontMetricsBySizeIndex[sizeIndex] = {
	      cssEmPerMu: sigmasAndXis.quad[sizeIndex] / 18
	    };

	    for (var key in sigmasAndXis) {
	      if (sigmasAndXis.hasOwnProperty(key)) {
	        metrics[key] = sigmasAndXis[key][sizeIndex];
	      }
	    }
	  }

	  return fontMetricsBySizeIndex[sizeIndex];
	}

	/**
	 * This file contains information about the options that the Parser carries
	 * around with it while parsing. Data is held in an `Options` object, and when
	 * recursing, a new `Options` object can be created with the `.with*` and
	 * `.reset` functions.
	 */
	var sizeStyleMap = [// Each element contains [textsize, scriptsize, scriptscriptsize].
	// The size mappings are taken from TeX with \normalsize=10pt.
	[1, 1, 1], // size1: [5, 5, 5]              \tiny
	[2, 1, 1], // size2: [6, 5, 5]
	[3, 1, 1], // size3: [7, 5, 5]              \scriptsize
	[4, 2, 1], // size4: [8, 6, 5]              \footnotesize
	[5, 2, 1], // size5: [9, 6, 5]              \small
	[6, 3, 1], // size6: [10, 7, 5]             \normalsize
	[7, 4, 2], // size7: [12, 8, 6]             \large
	[8, 6, 3], // size8: [14.4, 10, 7]          \Large
	[9, 7, 6], // size9: [17.28, 12, 10]        \LARGE
	[10, 8, 7], // size10: [20.74, 14.4, 12]     \huge
	[11, 10, 9] // size11: [24.88, 20.74, 17.28] \HUGE
	];
	var sizeMultipliers = [// fontMetrics.js:getGlobalMetrics also uses size indexes, so if
	// you change size indexes, change that function.
	0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.44, 1.728, 2.074, 2.488];

	var sizeAtStyle = function sizeAtStyle(size, style) {
	  return style.size < 2 ? size : sizeStyleMap[size - 1][style.size - 1];
	}; // In these types, "" (empty string) means "no change".


	/**
	 * This is the main options class. It contains the current style, size, color,
	 * and font.
	 *
	 * Options objects should not be modified. To create a new Options with
	 * different properties, call a `.having*` method.
	 */
	class Options {
	  // A font family applies to a group of fonts (i.e. SansSerif), while a font
	  // represents a specific font (i.e. SansSerif Bold).
	  // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm

	  /**
	   * The base size index.
	   */
	  constructor(data) {
	    this.style = void 0;
	    this.color = void 0;
	    this.size = void 0;
	    this.textSize = void 0;
	    this.phantom = void 0;
	    this.font = void 0;
	    this.fontFamily = void 0;
	    this.fontWeight = void 0;
	    this.fontShape = void 0;
	    this.sizeMultiplier = void 0;
	    this.maxSize = void 0;
	    this.minRuleThickness = void 0;
	    this._fontMetrics = void 0;
	    this.style = data.style;
	    this.color = data.color;
	    this.size = data.size || Options.BASESIZE;
	    this.textSize = data.textSize || this.size;
	    this.phantom = !!data.phantom;
	    this.font = data.font || "";
	    this.fontFamily = data.fontFamily || "";
	    this.fontWeight = data.fontWeight || '';
	    this.fontShape = data.fontShape || '';
	    this.sizeMultiplier = sizeMultipliers[this.size - 1];
	    this.maxSize = data.maxSize;
	    this.minRuleThickness = data.minRuleThickness;
	    this._fontMetrics = undefined;
	  }
	  /**
	   * Returns a new options object with the same properties as "this".  Properties
	   * from "extension" will be copied to the new options object.
	   */


	  extend(extension) {
	    var data = {
	      style: this.style,
	      size: this.size,
	      textSize: this.textSize,
	      color: this.color,
	      phantom: this.phantom,
	      font: this.font,
	      fontFamily: this.fontFamily,
	      fontWeight: this.fontWeight,
	      fontShape: this.fontShape,
	      maxSize: this.maxSize,
	      minRuleThickness: this.minRuleThickness
	    };

	    for (var key in extension) {
	      if (extension.hasOwnProperty(key)) {
	        data[key] = extension[key];
	      }
	    }

	    return new Options(data);
	  }
	  /**
	   * Return an options object with the given style. If `this.style === style`,
	   * returns `this`.
	   */


	  havingStyle(style) {
	    if (this.style === style) {
	      return this;
	    } else {
	      return this.extend({
	        style: style,
	        size: sizeAtStyle(this.textSize, style)
	      });
	    }
	  }
	  /**
	   * Return an options object with a cramped version of the current style. If
	   * the current style is cramped, returns `this`.
	   */


	  havingCrampedStyle() {
	    return this.havingStyle(this.style.cramp());
	  }
	  /**
	   * Return an options object with the given size and in at least `\textstyle`.
	   * Returns `this` if appropriate.
	   */


	  havingSize(size) {
	    if (this.size === size && this.textSize === size) {
	      return this;
	    } else {
	      return this.extend({
	        style: this.style.text(),
	        size: size,
	        textSize: size,
	        sizeMultiplier: sizeMultipliers[size - 1]
	      });
	    }
	  }
	  /**
	   * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
	   * changes to at least `\textstyle`.
	   */


	  havingBaseStyle(style) {
	    style = style || this.style.text();
	    var wantSize = sizeAtStyle(Options.BASESIZE, style);

	    if (this.size === wantSize && this.textSize === Options.BASESIZE && this.style === style) {
	      return this;
	    } else {
	      return this.extend({
	        style: style,
	        size: wantSize
	      });
	    }
	  }
	  /**
	   * Remove the effect of sizing changes such as \Huge.
	   * Keep the effect of the current style, such as \scriptstyle.
	   */


	  havingBaseSizing() {
	    var size;

	    switch (this.style.id) {
	      case 4:
	      case 5:
	        size = 3; // normalsize in scriptstyle

	        break;

	      case 6:
	      case 7:
	        size = 1; // normalsize in scriptscriptstyle

	        break;

	      default:
	        size = 6;
	      // normalsize in textstyle or displaystyle
	    }

	    return this.extend({
	      style: this.style.text(),
	      size: size
	    });
	  }
	  /**
	   * Create a new options object with the given color.
	   */


	  withColor(color) {
	    return this.extend({
	      color: color
	    });
	  }
	  /**
	   * Create a new options object with "phantom" set to true.
	   */


	  withPhantom() {
	    return this.extend({
	      phantom: true
	    });
	  }
	  /**
	   * Creates a new options object with the given math font or old text font.
	   * @type {[type]}
	   */


	  withFont(font) {
	    return this.extend({
	      font
	    });
	  }
	  /**
	   * Create a new options objects with the given fontFamily.
	   */


	  withTextFontFamily(fontFamily) {
	    return this.extend({
	      fontFamily,
	      font: ""
	    });
	  }
	  /**
	   * Creates a new options object with the given font weight
	   */


	  withTextFontWeight(fontWeight) {
	    return this.extend({
	      fontWeight,
	      font: ""
	    });
	  }
	  /**
	   * Creates a new options object with the given font weight
	   */


	  withTextFontShape(fontShape) {
	    return this.extend({
	      fontShape,
	      font: ""
	    });
	  }
	  /**
	   * Return the CSS sizing classes required to switch from enclosing options
	   * `oldOptions` to `this`. Returns an array of classes.
	   */


	  sizingClasses(oldOptions) {
	    if (oldOptions.size !== this.size) {
	      return ["sizing", "reset-size" + oldOptions.size, "size" + this.size];
	    } else {
	      return [];
	    }
	  }
	  /**
	   * Return the CSS sizing classes required to switch to the base size. Like
	   * `this.havingSize(BASESIZE).sizingClasses(this)`.
	   */


	  baseSizingClasses() {
	    if (this.size !== Options.BASESIZE) {
	      return ["sizing", "reset-size" + this.size, "size" + Options.BASESIZE];
	    } else {
	      return [];
	    }
	  }
	  /**
	   * Return the font metrics for this size.
	   */


	  fontMetrics() {
	    if (!this._fontMetrics) {
	      this._fontMetrics = getGlobalMetrics(this.size);
	    }

	    return this._fontMetrics;
	  }
	  /**
	   * Gets the CSS color of the current options object
	   */


	  getColor() {
	    if (this.phantom) {
	      return "transparent";
	    } else {
	      return this.color;
	    }
	  }

	}

	Options.BASESIZE = 6;

	/**
	 * This file does conversion between units.  In particular, it provides
	 * calculateSize to convert other units into ems.
	 */
	// Thus, multiplying a length by this number converts the length from units
	// into pts.  Dividing the result by ptPerEm gives the number of ems
	// *assuming* a font size of ptPerEm (normal size, normal style).

	var ptPerUnit = {
	  // https://en.wikibooks.org/wiki/LaTeX/Lengths and
	  // https://tex.stackexchange.com/a/8263
	  "pt": 1,
	  // TeX point
	  "mm": 7227 / 2540,
	  // millimeter
	  "cm": 7227 / 254,
	  // centimeter
	  "in": 72.27,
	  // inch
	  "bp": 803 / 800,
	  // big (PostScript) points
	  "pc": 12,
	  // pica
	  "dd": 1238 / 1157,
	  // didot
	  "cc": 14856 / 1157,
	  // cicero (12 didot)
	  "nd": 685 / 642,
	  // new didot
	  "nc": 1370 / 107,
	  // new cicero (12 new didot)
	  "sp": 1 / 65536,
	  // scaled point (TeX's internal smallest unit)
	  // https://tex.stackexchange.com/a/41371
	  "px": 803 / 800 // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX

	}; // Dictionary of relative units, for fast validity testing.

	var relativeUnit = {
	  "ex": true,
	  "em": true,
	  "mu": true
	};

	/**
	 * Determine whether the specified unit (either a string defining the unit
	 * or a "size" parse node containing a unit field) is valid.
	 */
	var validUnit = function validUnit(unit) {
	  if (typeof unit !== "string") {
	    unit = unit.unit;
	  }

	  return unit in ptPerUnit || unit in relativeUnit || unit === "ex";
	};
	/*
	 * Convert a "size" parse node (with numeric "number" and string "unit" fields,
	 * as parsed by functions.js argType "size") into a CSS em value for the
	 * current style/scale.  `options` gives the current options.
	 */

	var calculateSize = function calculateSize(sizeValue, options) {
	  var scale;

	  if (sizeValue.unit in ptPerUnit) {
	    // Absolute units
	    scale = ptPerUnit[sizeValue.unit] // Convert unit to pt
	    / options.fontMetrics().ptPerEm // Convert pt to CSS em
	    / options.sizeMultiplier; // Unscale to make absolute units
	  } else if (sizeValue.unit === "mu") {
	    // `mu` units scale with scriptstyle/scriptscriptstyle.
	    scale = options.fontMetrics().cssEmPerMu;
	  } else {
	    // Other relative units always refer to the *textstyle* font
	    // in the current size.
	    var unitOptions;

	    if (options.style.isTight()) {
	      // isTight() means current style is script/scriptscript.
	      unitOptions = options.havingStyle(options.style.text());
	    } else {
	      unitOptions = options;
	    } // TODO: In TeX these units are relative to the quad of the current
	    // *text* font, e.g. cmr10. KaTeX instead uses values from the
	    // comparably-sized *Computer Modern symbol* font. At 10pt, these
	    // match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;
	    // cmr5=1.361133, cmsy5=1.472241. Consider $\scriptsize a\kern1emb$.
	    // TeX \showlists shows a kern of 1.13889 * fontsize;
	    // KaTeX shows a kern of 1.171 * fontsize.


	    if (sizeValue.unit === "ex") {
	      scale = unitOptions.fontMetrics().xHeight;
	    } else if (sizeValue.unit === "em") {
	      scale = unitOptions.fontMetrics().quad;
	    } else {
	      throw new ParseError("Invalid unit: '" + sizeValue.unit + "'");
	    }

	    if (unitOptions !== options) {
	      scale *= unitOptions.sizeMultiplier / options.sizeMultiplier;
	    }
	  }

	  return Math.min(sizeValue.number * scale, options.maxSize);
	};
	/**
	 * Round `n` to 4 decimal places, or to the nearest 1/10,000th em. See
	 * https://github.com/KaTeX/KaTeX/pull/2460.
	 */

	var makeEm = function makeEm(n) {
	  return +n.toFixed(4) + "em";
	};

	/**
	 * These objects store the data about the DOM nodes we create, as well as some
	 * extra data. They can then be transformed into real DOM nodes with the
	 * `toNode` function or HTML markup using `toMarkup`. They are useful for both
	 * storing extra properties on the nodes, as well as providing a way to easily
	 * work with the DOM.
	 *
	 * Similar functions for working with MathML nodes exist in mathMLTree.js.
	 *
	 * TODO: refactor `span` and `anchor` into common superclass when
	 * target environments support class inheritance
	 */

	/**
	 * Create an HTML className based on a list of classes. In addition to joining
	 * with spaces, we also remove empty classes.
	 */
	var createClass = function createClass(classes) {
	  return classes.filter(cls => cls).join(" ");
	};

	var initNode = function initNode(classes, options, style) {
	  this.classes = classes || [];
	  this.attributes = {};
	  this.height = 0;
	  this.depth = 0;
	  this.maxFontSize = 0;
	  this.style = style || {};

	  if (options) {
	    if (options.style.isTight()) {
	      this.classes.push("mtight");
	    }

	    var color = options.getColor();

	    if (color) {
	      this.style.color = color;
	    }
	  }
	};
	/**
	 * Convert into an HTML node
	 */


	var toNode = function toNode(tagName) {
	  var node = document.createElement(tagName); // Apply the class

	  node.className = createClass(this.classes); // Apply inline styles

	  for (var style in this.style) {
	    if (this.style.hasOwnProperty(style)) {
	      // $FlowFixMe Flow doesn't seem to understand span.style's type.
	      node.style[style] = this.style[style];
	    }
	  } // Apply attributes


	  for (var attr in this.attributes) {
	    if (this.attributes.hasOwnProperty(attr)) {
	      node.setAttribute(attr, this.attributes[attr]);
	    }
	  } // Append the children, also as HTML nodes


	  for (var i = 0; i < this.children.length; i++) {
	    node.appendChild(this.children[i].toNode());
	  }

	  return node;
	};
	/**
	 * Convert into an HTML markup string
	 */


	var toMarkup = function toMarkup(tagName) {
	  var markup = "<" + tagName; // Add the class

	  if (this.classes.length) {
	    markup += " class=\"" + utils.escape(createClass(this.classes)) + "\"";
	  }

	  var styles = ""; // Add the styles, after hyphenation

	  for (var style in this.style) {
	    if (this.style.hasOwnProperty(style)) {
	      styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
	    }
	  }

	  if (styles) {
	    markup += " style=\"" + utils.escape(styles) + "\"";
	  } // Add the attributes


	  for (var attr in this.attributes) {
	    if (this.attributes.hasOwnProperty(attr)) {
	      markup += " " + attr + "=\"" + utils.escape(this.attributes[attr]) + "\"";
	    }
	  }

	  markup += ">"; // Add the markup of the children, also as markup

	  for (var i = 0; i < this.children.length; i++) {
	    markup += this.children[i].toMarkup();
	  }

	  markup += "</" + tagName + ">";
	  return markup;
	}; // Making the type below exact with all optional fields doesn't work due to
	// - https://github.com/facebook/flow/issues/4582
	// - https://github.com/facebook/flow/issues/5688
	// However, since *all* fields are optional, $Shape<> works as suggested in 5688
	// above.
	// This type does not include all CSS properties. Additional properties should
	// be added as needed.


	/**
	 * This node represents a span node, with a className, a list of children, and
	 * an inline style. It also contains information about its height, depth, and
	 * maxFontSize.
	 *
	 * Represents two types with different uses: SvgSpan to wrap an SVG and DomSpan
	 * otherwise. This typesafety is important when HTML builders access a span's
	 * children.
	 */
	class Span {
	  constructor(classes, children, options, style) {
	    this.children = void 0;
	    this.attributes = void 0;
	    this.classes = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.width = void 0;
	    this.maxFontSize = void 0;
	    this.style = void 0;
	    initNode.call(this, classes, options, style);
	    this.children = children || [];
	  }
	  /**
	   * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
	   * all browsers support attributes the same, and having too many custom
	   * attributes is probably bad.
	   */


	  setAttribute(attribute, value) {
	    this.attributes[attribute] = value;
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }

	  toNode() {
	    return toNode.call(this, "span");
	  }

	  toMarkup() {
	    return toMarkup.call(this, "span");
	  }

	}
	/**
	 * This node represents an anchor (<a>) element with a hyperlink.  See `span`
	 * for further details.
	 */

	let Anchor$1 = class Anchor {
	  constructor(href, classes, children, options) {
	    this.children = void 0;
	    this.attributes = void 0;
	    this.classes = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.maxFontSize = void 0;
	    this.style = void 0;
	    initNode.call(this, classes, options);
	    this.children = children || [];
	    this.setAttribute('href', href);
	  }

	  setAttribute(attribute, value) {
	    this.attributes[attribute] = value;
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }

	  toNode() {
	    return toNode.call(this, "a");
	  }

	  toMarkup() {
	    return toMarkup.call(this, "a");
	  }

	};
	/**
	 * This node represents an image embed (<img>) element.
	 */

	class Img {
	  constructor(src, alt, style) {
	    this.src = void 0;
	    this.alt = void 0;
	    this.classes = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.maxFontSize = void 0;
	    this.style = void 0;
	    this.alt = alt;
	    this.src = src;
	    this.classes = ["mord"];
	    this.style = style;
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }

	  toNode() {
	    var node = document.createElement("img");
	    node.src = this.src;
	    node.alt = this.alt;
	    node.className = "mord"; // Apply inline styles

	    for (var style in this.style) {
	      if (this.style.hasOwnProperty(style)) {
	        // $FlowFixMe
	        node.style[style] = this.style[style];
	      }
	    }

	    return node;
	  }

	  toMarkup() {
	    var markup = "<img  src='" + this.src + " 'alt='" + this.alt + "' "; // Add the styles, after hyphenation

	    var styles = "";

	    for (var style in this.style) {
	      if (this.style.hasOwnProperty(style)) {
	        styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
	      }
	    }

	    if (styles) {
	      markup += " style=\"" + utils.escape(styles) + "\"";
	    }

	    markup += "'/>";
	    return markup;
	  }

	}
	var iCombinations = {
	  'î': '\u0131\u0302',
	  'ï': '\u0131\u0308',
	  'í': '\u0131\u0301',
	  // 'ī': '\u0131\u0304', // enable when we add Extended Latin
	  'ì': '\u0131\u0300'
	};
	/**
	 * A symbol node contains information about a single symbol. It either renders
	 * to a single text node, or a span with a single text node in it, depending on
	 * whether it has CSS classes, styles, or needs italic correction.
	 */

	class SymbolNode {
	  constructor(text, height, depth, italic, skew, width, classes, style) {
	    this.text = void 0;
	    this.height = void 0;
	    this.depth = void 0;
	    this.italic = void 0;
	    this.skew = void 0;
	    this.width = void 0;
	    this.maxFontSize = void 0;
	    this.classes = void 0;
	    this.style = void 0;
	    this.text = text;
	    this.height = height || 0;
	    this.depth = depth || 0;
	    this.italic = italic || 0;
	    this.skew = skew || 0;
	    this.width = width || 0;
	    this.classes = classes || [];
	    this.style = style || {};
	    this.maxFontSize = 0; // Mark text from non-Latin scripts with specific classes so that we
	    // can specify which fonts to use.  This allows us to render these
	    // characters with a serif font in situations where the browser would
	    // either default to a sans serif or render a placeholder character.
	    // We use CSS class names like cjk_fallback, hangul_fallback and
	    // brahmic_fallback. See ./unicodeScripts.js for the set of possible
	    // script names

	    var script = scriptFromCodepoint(this.text.charCodeAt(0));

	    if (script) {
	      this.classes.push(script + "_fallback");
	    }

	    if (/[îïíì]/.test(this.text)) {
	      // add ī when we add Extended Latin
	      this.text = iCombinations[this.text];
	    }
	  }

	  hasClass(className) {
	    return utils.contains(this.classes, className);
	  }
	  /**
	   * Creates a text node or span from a symbol node. Note that a span is only
	   * created if it is needed.
	   */


	  toNode() {
	    var node = document.createTextNode(this.text);
	    var span = null;

	    if (this.italic > 0) {
	      span = document.createElement("span");
	      span.style.marginRight = makeEm(this.italic);
	    }

	    if (this.classes.length > 0) {
	      span = span || document.createElement("span");
	      span.className = createClass(this.classes);
	    }

	    for (var style in this.style) {
	      if (this.style.hasOwnProperty(style)) {
	        span = span || document.createElement("span"); // $FlowFixMe Flow doesn't seem to understand span.style's type.

	        span.style[style] = this.style[style];
	      }
	    }

	    if (span) {
	      span.appendChild(node);
	      return span;
	    } else {
	      return node;
	    }
	  }
	  /**
	   * Creates markup for a symbol node.
	   */


	  toMarkup() {
	    // TODO(alpert): More duplication than I'd like from
	    // span.prototype.toMarkup and symbolNode.prototype.toNode...
	    var needsSpan = false;
	    var markup = "<span";

	    if (this.classes.length) {
	      needsSpan = true;
	      markup += " class=\"";
	      markup += utils.escape(createClass(this.classes));
	      markup += "\"";
	    }

	    var styles = "";

	    if (this.italic > 0) {
	      styles += "margin-right:" + this.italic + "em;";
	    }

	    for (var style in this.style) {
	      if (this.style.hasOwnProperty(style)) {
	        styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
	      }
	    }

	    if (styles) {
	      needsSpan = true;
	      markup += " style=\"" + utils.escape(styles) + "\"";
	    }

	    var escaped = utils.escape(this.text);

	    if (needsSpan) {
	      markup += ">";
	      markup += escaped;
	      markup += "</span>";
	      return markup;
	    } else {
	      return escaped;
	    }
	  }

	}
	/**
	 * SVG nodes are used to render stretchy wide elements.
	 */

	class SvgNode {
	  constructor(children, attributes) {
	    this.children = void 0;
	    this.attributes = void 0;
	    this.children = children || [];
	    this.attributes = attributes || {};
	  }

	  toNode() {
	    var svgNS = "http://www.w3.org/2000/svg";
	    var node = document.createElementNS(svgNS, "svg"); // Apply attributes

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        node.setAttribute(attr, this.attributes[attr]);
	      }
	    }

	    for (var i = 0; i < this.children.length; i++) {
	      node.appendChild(this.children[i].toNode());
	    }

	    return node;
	  }

	  toMarkup() {
	    var markup = "<svg xmlns=\"http://www.w3.org/2000/svg\""; // Apply attributes

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        markup += " " + attr + "='" + this.attributes[attr] + "'";
	      }
	    }

	    markup += ">";

	    for (var i = 0; i < this.children.length; i++) {
	      markup += this.children[i].toMarkup();
	    }

	    markup += "</svg>";
	    return markup;
	  }

	}
	class PathNode {
	  constructor(pathName, alternate) {
	    this.pathName = void 0;
	    this.alternate = void 0;
	    this.pathName = pathName;
	    this.alternate = alternate; // Used only for \sqrt, \phase, & tall delims
	  }

	  toNode() {
	    var svgNS = "http://www.w3.org/2000/svg";
	    var node = document.createElementNS(svgNS, "path");

	    if (this.alternate) {
	      node.setAttribute("d", this.alternate);
	    } else {
	      node.setAttribute("d", path[this.pathName]);
	    }

	    return node;
	  }

	  toMarkup() {
	    if (this.alternate) {
	      return "<path d='" + this.alternate + "'/>";
	    } else {
	      return "<path d='" + path[this.pathName] + "'/>";
	    }
	  }

	}
	class LineNode {
	  constructor(attributes) {
	    this.attributes = void 0;
	    this.attributes = attributes || {};
	  }

	  toNode() {
	    var svgNS = "http://www.w3.org/2000/svg";
	    var node = document.createElementNS(svgNS, "line"); // Apply attributes

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        node.setAttribute(attr, this.attributes[attr]);
	      }
	    }

	    return node;
	  }

	  toMarkup() {
	    var markup = "<line";

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        markup += " " + attr + "='" + this.attributes[attr] + "'";
	      }
	    }

	    markup += "/>";
	    return markup;
	  }

	}
	function assertSymbolDomNode(group) {
	  if (group instanceof SymbolNode) {
	    return group;
	  } else {
	    throw new Error("Expected symbolNode but got " + String(group) + ".");
	  }
	}
	function assertSpan(group) {
	  if (group instanceof Span) {
	    return group;
	  } else {
	    throw new Error("Expected span<HtmlDomNode> but got " + String(group) + ".");
	  }
	}

	/**
	 * This file holds a list of all no-argument functions and single-character
	 * symbols (like 'a' or ';').
	 *
	 * For each of the symbols, there are three properties they can have:
	 * - font (required): the font to be used for this symbol. Either "main" (the
	     normal font), or "ams" (the ams fonts).
	 * - group (required): the ParseNode group type the symbol should have (i.e.
	     "textord", "mathord", etc).
	     See https://github.com/KaTeX/KaTeX/wiki/Examining-TeX#group-types
	 * - replace: the character that this symbol or function should be
	 *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
	 *   character in the main font).
	 *
	 * The outermost map in the table indicates what mode the symbols should be
	 * accepted in (e.g. "math" or "text").
	 */
	// Some of these have a "-token" suffix since these are also used as `ParseNode`
	// types for raw text tokens, and we want to avoid conflicts with higher-level
	// `ParseNode` types. These `ParseNode`s are constructed within `Parser` by
	// looking up the `symbols` map.
	var ATOMS = {
	  "bin": 1,
	  "close": 1,
	  "inner": 1,
	  "open": 1,
	  "punct": 1,
	  "rel": 1
	};
	var NON_ATOMS = {
	  "accent-token": 1,
	  "mathord": 1,
	  "op-token": 1,
	  "spacing": 1,
	  "textord": 1
	};
	var symbols = {
	  "math": {},
	  "text": {}
	};
	/** `acceptUnicodeChar = true` is only applicable if `replace` is set. */

	function defineSymbol(mode, font, group, replace, name, acceptUnicodeChar) {
	  symbols[mode][name] = {
	    font,
	    group,
	    replace
	  };

	  if (acceptUnicodeChar && replace) {
	    symbols[mode][replace] = symbols[mode][name];
	  }
	} // Some abbreviations for commonly used strings.
	// This helps minify the code, and also spotting typos using jshint.
	// modes:

	var math = "math";
	var text = "text"; // fonts:

	var main = "main";
	var ams = "ams"; // groups:

	var accent = "accent-token";
	var bin = "bin";
	var close = "close";
	var inner = "inner";
	var mathord = "mathord";
	var op = "op-token";
	var open = "open";
	var punct = "punct";
	var rel = "rel";
	var spacing = "spacing";
	var textord = "textord"; // Now comes the symbol table
	// Relation Symbols

	defineSymbol(math, main, rel, "\u2261", "\\equiv", true);
	defineSymbol(math, main, rel, "\u227a", "\\prec", true);
	defineSymbol(math, main, rel, "\u227b", "\\succ", true);
	defineSymbol(math, main, rel, "\u223c", "\\sim", true);
	defineSymbol(math, main, rel, "\u22a5", "\\perp");
	defineSymbol(math, main, rel, "\u2aaf", "\\preceq", true);
	defineSymbol(math, main, rel, "\u2ab0", "\\succeq", true);
	defineSymbol(math, main, rel, "\u2243", "\\simeq", true);
	defineSymbol(math, main, rel, "\u2223", "\\mid", true);
	defineSymbol(math, main, rel, "\u226a", "\\ll", true);
	defineSymbol(math, main, rel, "\u226b", "\\gg", true);
	defineSymbol(math, main, rel, "\u224d", "\\asymp", true);
	defineSymbol(math, main, rel, "\u2225", "\\parallel");
	defineSymbol(math, main, rel, "\u22c8", "\\bowtie", true);
	defineSymbol(math, main, rel, "\u2323", "\\smile", true);
	defineSymbol(math, main, rel, "\u2291", "\\sqsubseteq", true);
	defineSymbol(math, main, rel, "\u2292", "\\sqsupseteq", true);
	defineSymbol(math, main, rel, "\u2250", "\\doteq", true);
	defineSymbol(math, main, rel, "\u2322", "\\frown", true);
	defineSymbol(math, main, rel, "\u220b", "\\ni", true);
	defineSymbol(math, main, rel, "\u221d", "\\propto", true);
	defineSymbol(math, main, rel, "\u22a2", "\\vdash", true);
	defineSymbol(math, main, rel, "\u22a3", "\\dashv", true);
	defineSymbol(math, main, rel, "\u220b", "\\owns"); // Punctuation

	defineSymbol(math, main, punct, "\u002e", "\\ldotp");
	defineSymbol(math, main, punct, "\u22c5", "\\cdotp"); // Misc Symbols

	defineSymbol(math, main, textord, "\u0023", "\\#");
	defineSymbol(text, main, textord, "\u0023", "\\#");
	defineSymbol(math, main, textord, "\u0026", "\\&");
	defineSymbol(text, main, textord, "\u0026", "\\&");
	defineSymbol(math, main, textord, "\u2135", "\\aleph", true);
	defineSymbol(math, main, textord, "\u2200", "\\forall", true);
	defineSymbol(math, main, textord, "\u210f", "\\hbar", true);
	defineSymbol(math, main, textord, "\u2203", "\\exists", true);
	defineSymbol(math, main, textord, "\u2207", "\\nabla", true);
	defineSymbol(math, main, textord, "\u266d", "\\flat", true);
	defineSymbol(math, main, textord, "\u2113", "\\ell", true);
	defineSymbol(math, main, textord, "\u266e", "\\natural", true);
	defineSymbol(math, main, textord, "\u2663", "\\clubsuit", true);
	defineSymbol(math, main, textord, "\u2118", "\\wp", true);
	defineSymbol(math, main, textord, "\u266f", "\\sharp", true);
	defineSymbol(math, main, textord, "\u2662", "\\diamondsuit", true);
	defineSymbol(math, main, textord, "\u211c", "\\Re", true);
	defineSymbol(math, main, textord, "\u2661", "\\heartsuit", true);
	defineSymbol(math, main, textord, "\u2111", "\\Im", true);
	defineSymbol(math, main, textord, "\u2660", "\\spadesuit", true);
	defineSymbol(math, main, textord, "\u00a7", "\\S", true);
	defineSymbol(text, main, textord, "\u00a7", "\\S");
	defineSymbol(math, main, textord, "\u00b6", "\\P", true);
	defineSymbol(text, main, textord, "\u00b6", "\\P"); // Math and Text

	defineSymbol(math, main, textord, "\u2020", "\\dag");
	defineSymbol(text, main, textord, "\u2020", "\\dag");
	defineSymbol(text, main, textord, "\u2020", "\\textdagger");
	defineSymbol(math, main, textord, "\u2021", "\\ddag");
	defineSymbol(text, main, textord, "\u2021", "\\ddag");
	defineSymbol(text, main, textord, "\u2021", "\\textdaggerdbl"); // Large Delimiters

	defineSymbol(math, main, close, "\u23b1", "\\rmoustache", true);
	defineSymbol(math, main, open, "\u23b0", "\\lmoustache", true);
	defineSymbol(math, main, close, "\u27ef", "\\rgroup", true);
	defineSymbol(math, main, open, "\u27ee", "\\lgroup", true); // Binary Operators

	defineSymbol(math, main, bin, "\u2213", "\\mp", true);
	defineSymbol(math, main, bin, "\u2296", "\\ominus", true);
	defineSymbol(math, main, bin, "\u228e", "\\uplus", true);
	defineSymbol(math, main, bin, "\u2293", "\\sqcap", true);
	defineSymbol(math, main, bin, "\u2217", "\\ast");
	defineSymbol(math, main, bin, "\u2294", "\\sqcup", true);
	defineSymbol(math, main, bin, "\u25ef", "\\bigcirc", true);
	defineSymbol(math, main, bin, "\u2219", "\\bullet", true);
	defineSymbol(math, main, bin, "\u2021", "\\ddagger");
	defineSymbol(math, main, bin, "\u2240", "\\wr", true);
	defineSymbol(math, main, bin, "\u2a3f", "\\amalg");
	defineSymbol(math, main, bin, "\u0026", "\\And"); // from amsmath
	// Arrow Symbols

	defineSymbol(math, main, rel, "\u27f5", "\\longleftarrow", true);
	defineSymbol(math, main, rel, "\u21d0", "\\Leftarrow", true);
	defineSymbol(math, main, rel, "\u27f8", "\\Longleftarrow", true);
	defineSymbol(math, main, rel, "\u27f6", "\\longrightarrow", true);
	defineSymbol(math, main, rel, "\u21d2", "\\Rightarrow", true);
	defineSymbol(math, main, rel, "\u27f9", "\\Longrightarrow", true);
	defineSymbol(math, main, rel, "\u2194", "\\leftrightarrow", true);
	defineSymbol(math, main, rel, "\u27f7", "\\longleftrightarrow", true);
	defineSymbol(math, main, rel, "\u21d4", "\\Leftrightarrow", true);
	defineSymbol(math, main, rel, "\u27fa", "\\Longleftrightarrow", true);
	defineSymbol(math, main, rel, "\u21a6", "\\mapsto", true);
	defineSymbol(math, main, rel, "\u27fc", "\\longmapsto", true);
	defineSymbol(math, main, rel, "\u2197", "\\nearrow", true);
	defineSymbol(math, main, rel, "\u21a9", "\\hookleftarrow", true);
	defineSymbol(math, main, rel, "\u21aa", "\\hookrightarrow", true);
	defineSymbol(math, main, rel, "\u2198", "\\searrow", true);
	defineSymbol(math, main, rel, "\u21bc", "\\leftharpoonup", true);
	defineSymbol(math, main, rel, "\u21c0", "\\rightharpoonup", true);
	defineSymbol(math, main, rel, "\u2199", "\\swarrow", true);
	defineSymbol(math, main, rel, "\u21bd", "\\leftharpoondown", true);
	defineSymbol(math, main, rel, "\u21c1", "\\rightharpoondown", true);
	defineSymbol(math, main, rel, "\u2196", "\\nwarrow", true);
	defineSymbol(math, main, rel, "\u21cc", "\\rightleftharpoons", true); // AMS Negated Binary Relations

	defineSymbol(math, ams, rel, "\u226e", "\\nless", true); // Symbol names preceeded by "@" each have a corresponding macro.

	defineSymbol(math, ams, rel, "\ue010", "\\@nleqslant");
	defineSymbol(math, ams, rel, "\ue011", "\\@nleqq");
	defineSymbol(math, ams, rel, "\u2a87", "\\lneq", true);
	defineSymbol(math, ams, rel, "\u2268", "\\lneqq", true);
	defineSymbol(math, ams, rel, "\ue00c", "\\@lvertneqq");
	defineSymbol(math, ams, rel, "\u22e6", "\\lnsim", true);
	defineSymbol(math, ams, rel, "\u2a89", "\\lnapprox", true);
	defineSymbol(math, ams, rel, "\u2280", "\\nprec", true); // unicode-math maps \u22e0 to \npreccurlyeq. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u22e0", "\\npreceq", true);
	defineSymbol(math, ams, rel, "\u22e8", "\\precnsim", true);
	defineSymbol(math, ams, rel, "\u2ab9", "\\precnapprox", true);
	defineSymbol(math, ams, rel, "\u2241", "\\nsim", true);
	defineSymbol(math, ams, rel, "\ue006", "\\@nshortmid");
	defineSymbol(math, ams, rel, "\u2224", "\\nmid", true);
	defineSymbol(math, ams, rel, "\u22ac", "\\nvdash", true);
	defineSymbol(math, ams, rel, "\u22ad", "\\nvDash", true);
	defineSymbol(math, ams, rel, "\u22ea", "\\ntriangleleft");
	defineSymbol(math, ams, rel, "\u22ec", "\\ntrianglelefteq", true);
	defineSymbol(math, ams, rel, "\u228a", "\\subsetneq", true);
	defineSymbol(math, ams, rel, "\ue01a", "\\@varsubsetneq");
	defineSymbol(math, ams, rel, "\u2acb", "\\subsetneqq", true);
	defineSymbol(math, ams, rel, "\ue017", "\\@varsubsetneqq");
	defineSymbol(math, ams, rel, "\u226f", "\\ngtr", true);
	defineSymbol(math, ams, rel, "\ue00f", "\\@ngeqslant");
	defineSymbol(math, ams, rel, "\ue00e", "\\@ngeqq");
	defineSymbol(math, ams, rel, "\u2a88", "\\gneq", true);
	defineSymbol(math, ams, rel, "\u2269", "\\gneqq", true);
	defineSymbol(math, ams, rel, "\ue00d", "\\@gvertneqq");
	defineSymbol(math, ams, rel, "\u22e7", "\\gnsim", true);
	defineSymbol(math, ams, rel, "\u2a8a", "\\gnapprox", true);
	defineSymbol(math, ams, rel, "\u2281", "\\nsucc", true); // unicode-math maps \u22e1 to \nsucccurlyeq. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u22e1", "\\nsucceq", true);
	defineSymbol(math, ams, rel, "\u22e9", "\\succnsim", true);
	defineSymbol(math, ams, rel, "\u2aba", "\\succnapprox", true); // unicode-math maps \u2246 to \simneqq. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u2246", "\\ncong", true);
	defineSymbol(math, ams, rel, "\ue007", "\\@nshortparallel");
	defineSymbol(math, ams, rel, "\u2226", "\\nparallel", true);
	defineSymbol(math, ams, rel, "\u22af", "\\nVDash", true);
	defineSymbol(math, ams, rel, "\u22eb", "\\ntriangleright");
	defineSymbol(math, ams, rel, "\u22ed", "\\ntrianglerighteq", true);
	defineSymbol(math, ams, rel, "\ue018", "\\@nsupseteqq");
	defineSymbol(math, ams, rel, "\u228b", "\\supsetneq", true);
	defineSymbol(math, ams, rel, "\ue01b", "\\@varsupsetneq");
	defineSymbol(math, ams, rel, "\u2acc", "\\supsetneqq", true);
	defineSymbol(math, ams, rel, "\ue019", "\\@varsupsetneqq");
	defineSymbol(math, ams, rel, "\u22ae", "\\nVdash", true);
	defineSymbol(math, ams, rel, "\u2ab5", "\\precneqq", true);
	defineSymbol(math, ams, rel, "\u2ab6", "\\succneqq", true);
	defineSymbol(math, ams, rel, "\ue016", "\\@nsubseteqq");
	defineSymbol(math, ams, bin, "\u22b4", "\\unlhd");
	defineSymbol(math, ams, bin, "\u22b5", "\\unrhd"); // AMS Negated Arrows

	defineSymbol(math, ams, rel, "\u219a", "\\nleftarrow", true);
	defineSymbol(math, ams, rel, "\u219b", "\\nrightarrow", true);
	defineSymbol(math, ams, rel, "\u21cd", "\\nLeftarrow", true);
	defineSymbol(math, ams, rel, "\u21cf", "\\nRightarrow", true);
	defineSymbol(math, ams, rel, "\u21ae", "\\nleftrightarrow", true);
	defineSymbol(math, ams, rel, "\u21ce", "\\nLeftrightarrow", true); // AMS Misc

	defineSymbol(math, ams, rel, "\u25b3", "\\vartriangle");
	defineSymbol(math, ams, textord, "\u210f", "\\hslash");
	defineSymbol(math, ams, textord, "\u25bd", "\\triangledown");
	defineSymbol(math, ams, textord, "\u25ca", "\\lozenge");
	defineSymbol(math, ams, textord, "\u24c8", "\\circledS");
	defineSymbol(math, ams, textord, "\u00ae", "\\circledR");
	defineSymbol(text, ams, textord, "\u00ae", "\\circledR");
	defineSymbol(math, ams, textord, "\u2221", "\\measuredangle", true);
	defineSymbol(math, ams, textord, "\u2204", "\\nexists");
	defineSymbol(math, ams, textord, "\u2127", "\\mho");
	defineSymbol(math, ams, textord, "\u2132", "\\Finv", true);
	defineSymbol(math, ams, textord, "\u2141", "\\Game", true);
	defineSymbol(math, ams, textord, "\u2035", "\\backprime");
	defineSymbol(math, ams, textord, "\u25b2", "\\blacktriangle");
	defineSymbol(math, ams, textord, "\u25bc", "\\blacktriangledown");
	defineSymbol(math, ams, textord, "\u25a0", "\\blacksquare");
	defineSymbol(math, ams, textord, "\u29eb", "\\blacklozenge");
	defineSymbol(math, ams, textord, "\u2605", "\\bigstar");
	defineSymbol(math, ams, textord, "\u2222", "\\sphericalangle", true);
	defineSymbol(math, ams, textord, "\u2201", "\\complement", true); // unicode-math maps U+F0 to \matheth. We map to AMS function \eth

	defineSymbol(math, ams, textord, "\u00f0", "\\eth", true);
	defineSymbol(text, main, textord, "\u00f0", "\u00f0");
	defineSymbol(math, ams, textord, "\u2571", "\\diagup");
	defineSymbol(math, ams, textord, "\u2572", "\\diagdown");
	defineSymbol(math, ams, textord, "\u25a1", "\\square");
	defineSymbol(math, ams, textord, "\u25a1", "\\Box");
	defineSymbol(math, ams, textord, "\u25ca", "\\Diamond"); // unicode-math maps U+A5 to \mathyen. We map to AMS function \yen

	defineSymbol(math, ams, textord, "\u00a5", "\\yen", true);
	defineSymbol(text, ams, textord, "\u00a5", "\\yen", true);
	defineSymbol(math, ams, textord, "\u2713", "\\checkmark", true);
	defineSymbol(text, ams, textord, "\u2713", "\\checkmark"); // AMS Hebrew

	defineSymbol(math, ams, textord, "\u2136", "\\beth", true);
	defineSymbol(math, ams, textord, "\u2138", "\\daleth", true);
	defineSymbol(math, ams, textord, "\u2137", "\\gimel", true); // AMS Greek

	defineSymbol(math, ams, textord, "\u03dd", "\\digamma", true);
	defineSymbol(math, ams, textord, "\u03f0", "\\varkappa"); // AMS Delimiters

	defineSymbol(math, ams, open, "\u250c", "\\@ulcorner", true);
	defineSymbol(math, ams, close, "\u2510", "\\@urcorner", true);
	defineSymbol(math, ams, open, "\u2514", "\\@llcorner", true);
	defineSymbol(math, ams, close, "\u2518", "\\@lrcorner", true); // AMS Binary Relations

	defineSymbol(math, ams, rel, "\u2266", "\\leqq", true);
	defineSymbol(math, ams, rel, "\u2a7d", "\\leqslant", true);
	defineSymbol(math, ams, rel, "\u2a95", "\\eqslantless", true);
	defineSymbol(math, ams, rel, "\u2272", "\\lesssim", true);
	defineSymbol(math, ams, rel, "\u2a85", "\\lessapprox", true);
	defineSymbol(math, ams, rel, "\u224a", "\\approxeq", true);
	defineSymbol(math, ams, bin, "\u22d6", "\\lessdot");
	defineSymbol(math, ams, rel, "\u22d8", "\\lll", true);
	defineSymbol(math, ams, rel, "\u2276", "\\lessgtr", true);
	defineSymbol(math, ams, rel, "\u22da", "\\lesseqgtr", true);
	defineSymbol(math, ams, rel, "\u2a8b", "\\lesseqqgtr", true);
	defineSymbol(math, ams, rel, "\u2251", "\\doteqdot");
	defineSymbol(math, ams, rel, "\u2253", "\\risingdotseq", true);
	defineSymbol(math, ams, rel, "\u2252", "\\fallingdotseq", true);
	defineSymbol(math, ams, rel, "\u223d", "\\backsim", true);
	defineSymbol(math, ams, rel, "\u22cd", "\\backsimeq", true);
	defineSymbol(math, ams, rel, "\u2ac5", "\\subseteqq", true);
	defineSymbol(math, ams, rel, "\u22d0", "\\Subset", true);
	defineSymbol(math, ams, rel, "\u228f", "\\sqsubset", true);
	defineSymbol(math, ams, rel, "\u227c", "\\preccurlyeq", true);
	defineSymbol(math, ams, rel, "\u22de", "\\curlyeqprec", true);
	defineSymbol(math, ams, rel, "\u227e", "\\precsim", true);
	defineSymbol(math, ams, rel, "\u2ab7", "\\precapprox", true);
	defineSymbol(math, ams, rel, "\u22b2", "\\vartriangleleft");
	defineSymbol(math, ams, rel, "\u22b4", "\\trianglelefteq");
	defineSymbol(math, ams, rel, "\u22a8", "\\vDash", true);
	defineSymbol(math, ams, rel, "\u22aa", "\\Vvdash", true);
	defineSymbol(math, ams, rel, "\u2323", "\\smallsmile");
	defineSymbol(math, ams, rel, "\u2322", "\\smallfrown");
	defineSymbol(math, ams, rel, "\u224f", "\\bumpeq", true);
	defineSymbol(math, ams, rel, "\u224e", "\\Bumpeq", true);
	defineSymbol(math, ams, rel, "\u2267", "\\geqq", true);
	defineSymbol(math, ams, rel, "\u2a7e", "\\geqslant", true);
	defineSymbol(math, ams, rel, "\u2a96", "\\eqslantgtr", true);
	defineSymbol(math, ams, rel, "\u2273", "\\gtrsim", true);
	defineSymbol(math, ams, rel, "\u2a86", "\\gtrapprox", true);
	defineSymbol(math, ams, bin, "\u22d7", "\\gtrdot");
	defineSymbol(math, ams, rel, "\u22d9", "\\ggg", true);
	defineSymbol(math, ams, rel, "\u2277", "\\gtrless", true);
	defineSymbol(math, ams, rel, "\u22db", "\\gtreqless", true);
	defineSymbol(math, ams, rel, "\u2a8c", "\\gtreqqless", true);
	defineSymbol(math, ams, rel, "\u2256", "\\eqcirc", true);
	defineSymbol(math, ams, rel, "\u2257", "\\circeq", true);
	defineSymbol(math, ams, rel, "\u225c", "\\triangleq", true);
	defineSymbol(math, ams, rel, "\u223c", "\\thicksim");
	defineSymbol(math, ams, rel, "\u2248", "\\thickapprox");
	defineSymbol(math, ams, rel, "\u2ac6", "\\supseteqq", true);
	defineSymbol(math, ams, rel, "\u22d1", "\\Supset", true);
	defineSymbol(math, ams, rel, "\u2290", "\\sqsupset", true);
	defineSymbol(math, ams, rel, "\u227d", "\\succcurlyeq", true);
	defineSymbol(math, ams, rel, "\u22df", "\\curlyeqsucc", true);
	defineSymbol(math, ams, rel, "\u227f", "\\succsim", true);
	defineSymbol(math, ams, rel, "\u2ab8", "\\succapprox", true);
	defineSymbol(math, ams, rel, "\u22b3", "\\vartriangleright");
	defineSymbol(math, ams, rel, "\u22b5", "\\trianglerighteq");
	defineSymbol(math, ams, rel, "\u22a9", "\\Vdash", true);
	defineSymbol(math, ams, rel, "\u2223", "\\shortmid");
	defineSymbol(math, ams, rel, "\u2225", "\\shortparallel");
	defineSymbol(math, ams, rel, "\u226c", "\\between", true);
	defineSymbol(math, ams, rel, "\u22d4", "\\pitchfork", true);
	defineSymbol(math, ams, rel, "\u221d", "\\varpropto");
	defineSymbol(math, ams, rel, "\u25c0", "\\blacktriangleleft"); // unicode-math says that \therefore is a mathord atom.
	// We kept the amssymb atom type, which is rel.

	defineSymbol(math, ams, rel, "\u2234", "\\therefore", true);
	defineSymbol(math, ams, rel, "\u220d", "\\backepsilon");
	defineSymbol(math, ams, rel, "\u25b6", "\\blacktriangleright"); // unicode-math says that \because is a mathord atom.
	// We kept the amssymb atom type, which is rel.

	defineSymbol(math, ams, rel, "\u2235", "\\because", true);
	defineSymbol(math, ams, rel, "\u22d8", "\\llless");
	defineSymbol(math, ams, rel, "\u22d9", "\\gggtr");
	defineSymbol(math, ams, bin, "\u22b2", "\\lhd");
	defineSymbol(math, ams, bin, "\u22b3", "\\rhd");
	defineSymbol(math, ams, rel, "\u2242", "\\eqsim", true);
	defineSymbol(math, main, rel, "\u22c8", "\\Join");
	defineSymbol(math, ams, rel, "\u2251", "\\Doteq", true); // AMS Binary Operators

	defineSymbol(math, ams, bin, "\u2214", "\\dotplus", true);
	defineSymbol(math, ams, bin, "\u2216", "\\smallsetminus");
	defineSymbol(math, ams, bin, "\u22d2", "\\Cap", true);
	defineSymbol(math, ams, bin, "\u22d3", "\\Cup", true);
	defineSymbol(math, ams, bin, "\u2a5e", "\\doublebarwedge", true);
	defineSymbol(math, ams, bin, "\u229f", "\\boxminus", true);
	defineSymbol(math, ams, bin, "\u229e", "\\boxplus", true);
	defineSymbol(math, ams, bin, "\u22c7", "\\divideontimes", true);
	defineSymbol(math, ams, bin, "\u22c9", "\\ltimes", true);
	defineSymbol(math, ams, bin, "\u22ca", "\\rtimes", true);
	defineSymbol(math, ams, bin, "\u22cb", "\\leftthreetimes", true);
	defineSymbol(math, ams, bin, "\u22cc", "\\rightthreetimes", true);
	defineSymbol(math, ams, bin, "\u22cf", "\\curlywedge", true);
	defineSymbol(math, ams, bin, "\u22ce", "\\curlyvee", true);
	defineSymbol(math, ams, bin, "\u229d", "\\circleddash", true);
	defineSymbol(math, ams, bin, "\u229b", "\\circledast", true);
	defineSymbol(math, ams, bin, "\u22c5", "\\centerdot");
	defineSymbol(math, ams, bin, "\u22ba", "\\intercal", true);
	defineSymbol(math, ams, bin, "\u22d2", "\\doublecap");
	defineSymbol(math, ams, bin, "\u22d3", "\\doublecup");
	defineSymbol(math, ams, bin, "\u22a0", "\\boxtimes", true); // AMS Arrows
	// Note: unicode-math maps \u21e2 to their own function \rightdasharrow.
	// We'll map it to AMS function \dashrightarrow. It produces the same atom.

	defineSymbol(math, ams, rel, "\u21e2", "\\dashrightarrow", true); // unicode-math maps \u21e0 to \leftdasharrow. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u21e0", "\\dashleftarrow", true);
	defineSymbol(math, ams, rel, "\u21c7", "\\leftleftarrows", true);
	defineSymbol(math, ams, rel, "\u21c6", "\\leftrightarrows", true);
	defineSymbol(math, ams, rel, "\u21da", "\\Lleftarrow", true);
	defineSymbol(math, ams, rel, "\u219e", "\\twoheadleftarrow", true);
	defineSymbol(math, ams, rel, "\u21a2", "\\leftarrowtail", true);
	defineSymbol(math, ams, rel, "\u21ab", "\\looparrowleft", true);
	defineSymbol(math, ams, rel, "\u21cb", "\\leftrightharpoons", true);
	defineSymbol(math, ams, rel, "\u21b6", "\\curvearrowleft", true); // unicode-math maps \u21ba to \acwopencirclearrow. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u21ba", "\\circlearrowleft", true);
	defineSymbol(math, ams, rel, "\u21b0", "\\Lsh", true);
	defineSymbol(math, ams, rel, "\u21c8", "\\upuparrows", true);
	defineSymbol(math, ams, rel, "\u21bf", "\\upharpoonleft", true);
	defineSymbol(math, ams, rel, "\u21c3", "\\downharpoonleft", true);
	defineSymbol(math, main, rel, "\u22b6", "\\origof", true); // not in font

	defineSymbol(math, main, rel, "\u22b7", "\\imageof", true); // not in font

	defineSymbol(math, ams, rel, "\u22b8", "\\multimap", true);
	defineSymbol(math, ams, rel, "\u21ad", "\\leftrightsquigarrow", true);
	defineSymbol(math, ams, rel, "\u21c9", "\\rightrightarrows", true);
	defineSymbol(math, ams, rel, "\u21c4", "\\rightleftarrows", true);
	defineSymbol(math, ams, rel, "\u21a0", "\\twoheadrightarrow", true);
	defineSymbol(math, ams, rel, "\u21a3", "\\rightarrowtail", true);
	defineSymbol(math, ams, rel, "\u21ac", "\\looparrowright", true);
	defineSymbol(math, ams, rel, "\u21b7", "\\curvearrowright", true); // unicode-math maps \u21bb to \cwopencirclearrow. We'll use the AMS synonym.

	defineSymbol(math, ams, rel, "\u21bb", "\\circlearrowright", true);
	defineSymbol(math, ams, rel, "\u21b1", "\\Rsh", true);
	defineSymbol(math, ams, rel, "\u21ca", "\\downdownarrows", true);
	defineSymbol(math, ams, rel, "\u21be", "\\upharpoonright", true);
	defineSymbol(math, ams, rel, "\u21c2", "\\downharpoonright", true);
	defineSymbol(math, ams, rel, "\u21dd", "\\rightsquigarrow", true);
	defineSymbol(math, ams, rel, "\u21dd", "\\leadsto");
	defineSymbol(math, ams, rel, "\u21db", "\\Rrightarrow", true);
	defineSymbol(math, ams, rel, "\u21be", "\\restriction");
	defineSymbol(math, main, textord, "\u2018", "`");
	defineSymbol(math, main, textord, "$", "\\$");
	defineSymbol(text, main, textord, "$", "\\$");
	defineSymbol(text, main, textord, "$", "\\textdollar");
	defineSymbol(math, main, textord, "%", "\\%");
	defineSymbol(text, main, textord, "%", "\\%");
	defineSymbol(math, main, textord, "_", "\\_");
	defineSymbol(text, main, textord, "_", "\\_");
	defineSymbol(text, main, textord, "_", "\\textunderscore");
	defineSymbol(math, main, textord, "\u2220", "\\angle", true);
	defineSymbol(math, main, textord, "\u221e", "\\infty", true);
	defineSymbol(math, main, textord, "\u2032", "\\prime");
	defineSymbol(math, main, textord, "\u25b3", "\\triangle");
	defineSymbol(math, main, textord, "\u0393", "\\Gamma", true);
	defineSymbol(math, main, textord, "\u0394", "\\Delta", true);
	defineSymbol(math, main, textord, "\u0398", "\\Theta", true);
	defineSymbol(math, main, textord, "\u039b", "\\Lambda", true);
	defineSymbol(math, main, textord, "\u039e", "\\Xi", true);
	defineSymbol(math, main, textord, "\u03a0", "\\Pi", true);
	defineSymbol(math, main, textord, "\u03a3", "\\Sigma", true);
	defineSymbol(math, main, textord, "\u03a5", "\\Upsilon", true);
	defineSymbol(math, main, textord, "\u03a6", "\\Phi", true);
	defineSymbol(math, main, textord, "\u03a8", "\\Psi", true);
	defineSymbol(math, main, textord, "\u03a9", "\\Omega", true);
	defineSymbol(math, main, textord, "A", "\u0391");
	defineSymbol(math, main, textord, "B", "\u0392");
	defineSymbol(math, main, textord, "E", "\u0395");
	defineSymbol(math, main, textord, "Z", "\u0396");
	defineSymbol(math, main, textord, "H", "\u0397");
	defineSymbol(math, main, textord, "I", "\u0399");
	defineSymbol(math, main, textord, "K", "\u039A");
	defineSymbol(math, main, textord, "M", "\u039C");
	defineSymbol(math, main, textord, "N", "\u039D");
	defineSymbol(math, main, textord, "O", "\u039F");
	defineSymbol(math, main, textord, "P", "\u03A1");
	defineSymbol(math, main, textord, "T", "\u03A4");
	defineSymbol(math, main, textord, "X", "\u03A7");
	defineSymbol(math, main, textord, "\u00ac", "\\neg", true);
	defineSymbol(math, main, textord, "\u00ac", "\\lnot");
	defineSymbol(math, main, textord, "\u22a4", "\\top");
	defineSymbol(math, main, textord, "\u22a5", "\\bot");
	defineSymbol(math, main, textord, "\u2205", "\\emptyset");
	defineSymbol(math, ams, textord, "\u2205", "\\varnothing");
	defineSymbol(math, main, mathord, "\u03b1", "\\alpha", true);
	defineSymbol(math, main, mathord, "\u03b2", "\\beta", true);
	defineSymbol(math, main, mathord, "\u03b3", "\\gamma", true);
	defineSymbol(math, main, mathord, "\u03b4", "\\delta", true);
	defineSymbol(math, main, mathord, "\u03f5", "\\epsilon", true);
	defineSymbol(math, main, mathord, "\u03b6", "\\zeta", true);
	defineSymbol(math, main, mathord, "\u03b7", "\\eta", true);
	defineSymbol(math, main, mathord, "\u03b8", "\\theta", true);
	defineSymbol(math, main, mathord, "\u03b9", "\\iota", true);
	defineSymbol(math, main, mathord, "\u03ba", "\\kappa", true);
	defineSymbol(math, main, mathord, "\u03bb", "\\lambda", true);
	defineSymbol(math, main, mathord, "\u03bc", "\\mu", true);
	defineSymbol(math, main, mathord, "\u03bd", "\\nu", true);
	defineSymbol(math, main, mathord, "\u03be", "\\xi", true);
	defineSymbol(math, main, mathord, "\u03bf", "\\omicron", true);
	defineSymbol(math, main, mathord, "\u03c0", "\\pi", true);
	defineSymbol(math, main, mathord, "\u03c1", "\\rho", true);
	defineSymbol(math, main, mathord, "\u03c3", "\\sigma", true);
	defineSymbol(math, main, mathord, "\u03c4", "\\tau", true);
	defineSymbol(math, main, mathord, "\u03c5", "\\upsilon", true);
	defineSymbol(math, main, mathord, "\u03d5", "\\phi", true);
	defineSymbol(math, main, mathord, "\u03c7", "\\chi", true);
	defineSymbol(math, main, mathord, "\u03c8", "\\psi", true);
	defineSymbol(math, main, mathord, "\u03c9", "\\omega", true);
	defineSymbol(math, main, mathord, "\u03b5", "\\varepsilon", true);
	defineSymbol(math, main, mathord, "\u03d1", "\\vartheta", true);
	defineSymbol(math, main, mathord, "\u03d6", "\\varpi", true);
	defineSymbol(math, main, mathord, "\u03f1", "\\varrho", true);
	defineSymbol(math, main, mathord, "\u03c2", "\\varsigma", true);
	defineSymbol(math, main, mathord, "\u03c6", "\\varphi", true);
	defineSymbol(math, main, bin, "\u2217", "*", true);
	defineSymbol(math, main, bin, "+", "+");
	defineSymbol(math, main, bin, "\u2212", "-", true);
	defineSymbol(math, main, bin, "\u22c5", "\\cdot", true);
	defineSymbol(math, main, bin, "\u2218", "\\circ", true);
	defineSymbol(math, main, bin, "\u00f7", "\\div", true);
	defineSymbol(math, main, bin, "\u00b1", "\\pm", true);
	defineSymbol(math, main, bin, "\u00d7", "\\times", true);
	defineSymbol(math, main, bin, "\u2229", "\\cap", true);
	defineSymbol(math, main, bin, "\u222a", "\\cup", true);
	defineSymbol(math, main, bin, "\u2216", "\\setminus", true);
	defineSymbol(math, main, bin, "\u2227", "\\land");
	defineSymbol(math, main, bin, "\u2228", "\\lor");
	defineSymbol(math, main, bin, "\u2227", "\\wedge", true);
	defineSymbol(math, main, bin, "\u2228", "\\vee", true);
	defineSymbol(math, main, textord, "\u221a", "\\surd");
	defineSymbol(math, main, open, "\u27e8", "\\langle", true);
	defineSymbol(math, main, open, "\u2223", "\\lvert");
	defineSymbol(math, main, open, "\u2225", "\\lVert");
	defineSymbol(math, main, close, "?", "?");
	defineSymbol(math, main, close, "!", "!");
	defineSymbol(math, main, close, "\u27e9", "\\rangle", true);
	defineSymbol(math, main, close, "\u2223", "\\rvert");
	defineSymbol(math, main, close, "\u2225", "\\rVert");
	defineSymbol(math, main, rel, "=", "=");
	defineSymbol(math, main, rel, ":", ":");
	defineSymbol(math, main, rel, "\u2248", "\\approx", true);
	defineSymbol(math, main, rel, "\u2245", "\\cong", true);
	defineSymbol(math, main, rel, "\u2265", "\\ge");
	defineSymbol(math, main, rel, "\u2265", "\\geq", true);
	defineSymbol(math, main, rel, "\u2190", "\\gets");
	defineSymbol(math, main, rel, ">", "\\gt", true);
	defineSymbol(math, main, rel, "\u2208", "\\in", true);
	defineSymbol(math, main, rel, "\ue020", "\\@not");
	defineSymbol(math, main, rel, "\u2282", "\\subset", true);
	defineSymbol(math, main, rel, "\u2283", "\\supset", true);
	defineSymbol(math, main, rel, "\u2286", "\\subseteq", true);
	defineSymbol(math, main, rel, "\u2287", "\\supseteq", true);
	defineSymbol(math, ams, rel, "\u2288", "\\nsubseteq", true);
	defineSymbol(math, ams, rel, "\u2289", "\\nsupseteq", true);
	defineSymbol(math, main, rel, "\u22a8", "\\models");
	defineSymbol(math, main, rel, "\u2190", "\\leftarrow", true);
	defineSymbol(math, main, rel, "\u2264", "\\le");
	defineSymbol(math, main, rel, "\u2264", "\\leq", true);
	defineSymbol(math, main, rel, "<", "\\lt", true);
	defineSymbol(math, main, rel, "\u2192", "\\rightarrow", true);
	defineSymbol(math, main, rel, "\u2192", "\\to");
	defineSymbol(math, ams, rel, "\u2271", "\\ngeq", true);
	defineSymbol(math, ams, rel, "\u2270", "\\nleq", true);
	defineSymbol(math, main, spacing, "\u00a0", "\\ ");
	defineSymbol(math, main, spacing, "\u00a0", "\\space"); // Ref: LaTeX Source 2e: \DeclareRobustCommand{\nobreakspace}{%

	defineSymbol(math, main, spacing, "\u00a0", "\\nobreakspace");
	defineSymbol(text, main, spacing, "\u00a0", "\\ ");
	defineSymbol(text, main, spacing, "\u00a0", " ");
	defineSymbol(text, main, spacing, "\u00a0", "\\space");
	defineSymbol(text, main, spacing, "\u00a0", "\\nobreakspace");
	defineSymbol(math, main, spacing, null, "\\nobreak");
	defineSymbol(math, main, spacing, null, "\\allowbreak");
	defineSymbol(math, main, punct, ",", ",");
	defineSymbol(math, main, punct, ";", ";");
	defineSymbol(math, ams, bin, "\u22bc", "\\barwedge", true);
	defineSymbol(math, ams, bin, "\u22bb", "\\veebar", true);
	defineSymbol(math, main, bin, "\u2299", "\\odot", true);
	defineSymbol(math, main, bin, "\u2295", "\\oplus", true);
	defineSymbol(math, main, bin, "\u2297", "\\otimes", true);
	defineSymbol(math, main, textord, "\u2202", "\\partial", true);
	defineSymbol(math, main, bin, "\u2298", "\\oslash", true);
	defineSymbol(math, ams, bin, "\u229a", "\\circledcirc", true);
	defineSymbol(math, ams, bin, "\u22a1", "\\boxdot", true);
	defineSymbol(math, main, bin, "\u25b3", "\\bigtriangleup");
	defineSymbol(math, main, bin, "\u25bd", "\\bigtriangledown");
	defineSymbol(math, main, bin, "\u2020", "\\dagger");
	defineSymbol(math, main, bin, "\u22c4", "\\diamond");
	defineSymbol(math, main, bin, "\u22c6", "\\star");
	defineSymbol(math, main, bin, "\u25c3", "\\triangleleft");
	defineSymbol(math, main, bin, "\u25b9", "\\triangleright");
	defineSymbol(math, main, open, "{", "\\{");
	defineSymbol(text, main, textord, "{", "\\{");
	defineSymbol(text, main, textord, "{", "\\textbraceleft");
	defineSymbol(math, main, close, "}", "\\}");
	defineSymbol(text, main, textord, "}", "\\}");
	defineSymbol(text, main, textord, "}", "\\textbraceright");
	defineSymbol(math, main, open, "{", "\\lbrace");
	defineSymbol(math, main, close, "}", "\\rbrace");
	defineSymbol(math, main, open, "[", "\\lbrack", true);
	defineSymbol(text, main, textord, "[", "\\lbrack", true);
	defineSymbol(math, main, close, "]", "\\rbrack", true);
	defineSymbol(text, main, textord, "]", "\\rbrack", true);
	defineSymbol(math, main, open, "(", "\\lparen", true);
	defineSymbol(math, main, close, ")", "\\rparen", true);
	defineSymbol(text, main, textord, "<", "\\textless", true); // in T1 fontenc

	defineSymbol(text, main, textord, ">", "\\textgreater", true); // in T1 fontenc

	defineSymbol(math, main, open, "\u230a", "\\lfloor", true);
	defineSymbol(math, main, close, "\u230b", "\\rfloor", true);
	defineSymbol(math, main, open, "\u2308", "\\lceil", true);
	defineSymbol(math, main, close, "\u2309", "\\rceil", true);
	defineSymbol(math, main, textord, "\\", "\\backslash");
	defineSymbol(math, main, textord, "\u2223", "|");
	defineSymbol(math, main, textord, "\u2223", "\\vert");
	defineSymbol(text, main, textord, "|", "\\textbar", true); // in T1 fontenc

	defineSymbol(math, main, textord, "\u2225", "\\|");
	defineSymbol(math, main, textord, "\u2225", "\\Vert");
	defineSymbol(text, main, textord, "\u2225", "\\textbardbl");
	defineSymbol(text, main, textord, "~", "\\textasciitilde");
	defineSymbol(text, main, textord, "\\", "\\textbackslash");
	defineSymbol(text, main, textord, "^", "\\textasciicircum");
	defineSymbol(math, main, rel, "\u2191", "\\uparrow", true);
	defineSymbol(math, main, rel, "\u21d1", "\\Uparrow", true);
	defineSymbol(math, main, rel, "\u2193", "\\downarrow", true);
	defineSymbol(math, main, rel, "\u21d3", "\\Downarrow", true);
	defineSymbol(math, main, rel, "\u2195", "\\updownarrow", true);
	defineSymbol(math, main, rel, "\u21d5", "\\Updownarrow", true);
	defineSymbol(math, main, op, "\u2210", "\\coprod");
	defineSymbol(math, main, op, "\u22c1", "\\bigvee");
	defineSymbol(math, main, op, "\u22c0", "\\bigwedge");
	defineSymbol(math, main, op, "\u2a04", "\\biguplus");
	defineSymbol(math, main, op, "\u22c2", "\\bigcap");
	defineSymbol(math, main, op, "\u22c3", "\\bigcup");
	defineSymbol(math, main, op, "\u222b", "\\int");
	defineSymbol(math, main, op, "\u222b", "\\intop");
	defineSymbol(math, main, op, "\u222c", "\\iint");
	defineSymbol(math, main, op, "\u222d", "\\iiint");
	defineSymbol(math, main, op, "\u220f", "\\prod");
	defineSymbol(math, main, op, "\u2211", "\\sum");
	defineSymbol(math, main, op, "\u2a02", "\\bigotimes");
	defineSymbol(math, main, op, "\u2a01", "\\bigoplus");
	defineSymbol(math, main, op, "\u2a00", "\\bigodot");
	defineSymbol(math, main, op, "\u222e", "\\oint");
	defineSymbol(math, main, op, "\u222f", "\\oiint");
	defineSymbol(math, main, op, "\u2230", "\\oiiint");
	defineSymbol(math, main, op, "\u2a06", "\\bigsqcup");
	defineSymbol(math, main, op, "\u222b", "\\smallint");
	defineSymbol(text, main, inner, "\u2026", "\\textellipsis");
	defineSymbol(math, main, inner, "\u2026", "\\mathellipsis");
	defineSymbol(text, main, inner, "\u2026", "\\ldots", true);
	defineSymbol(math, main, inner, "\u2026", "\\ldots", true);
	defineSymbol(math, main, inner, "\u22ef", "\\@cdots", true);
	defineSymbol(math, main, inner, "\u22f1", "\\ddots", true);
	defineSymbol(math, main, textord, "\u22ee", "\\varvdots"); // \vdots is a macro

	defineSymbol(math, main, accent, "\u02ca", "\\acute");
	defineSymbol(math, main, accent, "\u02cb", "\\grave");
	defineSymbol(math, main, accent, "\u00a8", "\\ddot");
	defineSymbol(math, main, accent, "\u007e", "\\tilde");
	defineSymbol(math, main, accent, "\u02c9", "\\bar");
	defineSymbol(math, main, accent, "\u02d8", "\\breve");
	defineSymbol(math, main, accent, "\u02c7", "\\check");
	defineSymbol(math, main, accent, "\u005e", "\\hat");
	defineSymbol(math, main, accent, "\u20d7", "\\vec");
	defineSymbol(math, main, accent, "\u02d9", "\\dot");
	defineSymbol(math, main, accent, "\u02da", "\\mathring"); // \imath and \jmath should be invariant to \mathrm, \mathbf, etc., so use PUA

	defineSymbol(math, main, mathord, "\ue131", "\\@imath");
	defineSymbol(math, main, mathord, "\ue237", "\\@jmath");
	defineSymbol(math, main, textord, "\u0131", "\u0131");
	defineSymbol(math, main, textord, "\u0237", "\u0237");
	defineSymbol(text, main, textord, "\u0131", "\\i", true);
	defineSymbol(text, main, textord, "\u0237", "\\j", true);
	defineSymbol(text, main, textord, "\u00df", "\\ss", true);
	defineSymbol(text, main, textord, "\u00e6", "\\ae", true);
	defineSymbol(text, main, textord, "\u0153", "\\oe", true);
	defineSymbol(text, main, textord, "\u00f8", "\\o", true);
	defineSymbol(text, main, textord, "\u00c6", "\\AE", true);
	defineSymbol(text, main, textord, "\u0152", "\\OE", true);
	defineSymbol(text, main, textord, "\u00d8", "\\O", true);
	defineSymbol(text, main, accent, "\u02ca", "\\'"); // acute

	defineSymbol(text, main, accent, "\u02cb", "\\`"); // grave

	defineSymbol(text, main, accent, "\u02c6", "\\^"); // circumflex

	defineSymbol(text, main, accent, "\u02dc", "\\~"); // tilde

	defineSymbol(text, main, accent, "\u02c9", "\\="); // macron

	defineSymbol(text, main, accent, "\u02d8", "\\u"); // breve

	defineSymbol(text, main, accent, "\u02d9", "\\."); // dot above

	defineSymbol(text, main, accent, "\u00b8", "\\c"); // cedilla

	defineSymbol(text, main, accent, "\u02da", "\\r"); // ring above

	defineSymbol(text, main, accent, "\u02c7", "\\v"); // caron

	defineSymbol(text, main, accent, "\u00a8", '\\"'); // diaresis

	defineSymbol(text, main, accent, "\u02dd", "\\H"); // double acute

	defineSymbol(text, main, accent, "\u25ef", "\\textcircled"); // \bigcirc glyph
	// These ligatures are detected and created in Parser.js's `formLigatures`.

	var ligatures = {
	  "--": true,
	  "---": true,
	  "``": true,
	  "''": true
	};
	defineSymbol(text, main, textord, "\u2013", "--", true);
	defineSymbol(text, main, textord, "\u2013", "\\textendash");
	defineSymbol(text, main, textord, "\u2014", "---", true);
	defineSymbol(text, main, textord, "\u2014", "\\textemdash");
	defineSymbol(text, main, textord, "\u2018", "`", true);
	defineSymbol(text, main, textord, "\u2018", "\\textquoteleft");
	defineSymbol(text, main, textord, "\u2019", "'", true);
	defineSymbol(text, main, textord, "\u2019", "\\textquoteright");
	defineSymbol(text, main, textord, "\u201c", "``", true);
	defineSymbol(text, main, textord, "\u201c", "\\textquotedblleft");
	defineSymbol(text, main, textord, "\u201d", "''", true);
	defineSymbol(text, main, textord, "\u201d", "\\textquotedblright"); //  \degree from gensymb package

	defineSymbol(math, main, textord, "\u00b0", "\\degree", true);
	defineSymbol(text, main, textord, "\u00b0", "\\degree"); // \textdegree from inputenc package

	defineSymbol(text, main, textord, "\u00b0", "\\textdegree", true); // TODO: In LaTeX, \pounds can generate a different character in text and math
	// mode, but among our fonts, only Main-Regular defines this character "163".

	defineSymbol(math, main, textord, "\u00a3", "\\pounds");
	defineSymbol(math, main, textord, "\u00a3", "\\mathsterling", true);
	defineSymbol(text, main, textord, "\u00a3", "\\pounds");
	defineSymbol(text, main, textord, "\u00a3", "\\textsterling", true);
	defineSymbol(math, ams, textord, "\u2720", "\\maltese");
	defineSymbol(text, ams, textord, "\u2720", "\\maltese"); // There are lots of symbols which are the same, so we add them in afterwards.
	// All of these are textords in math mode

	var mathTextSymbols = "0123456789/@.\"";

	for (var i = 0; i < mathTextSymbols.length; i++) {
	  var ch = mathTextSymbols.charAt(i);
	  defineSymbol(math, main, textord, ch, ch);
	} // All of these are textords in text mode


	var textSymbols = "0123456789!@*()-=+\";:?/.,";

	for (var _i = 0; _i < textSymbols.length; _i++) {
	  var _ch = textSymbols.charAt(_i);

	  defineSymbol(text, main, textord, _ch, _ch);
	} // All of these are textords in text mode, and mathords in math mode


	var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

	for (var _i2 = 0; _i2 < letters.length; _i2++) {
	  var _ch2 = letters.charAt(_i2);

	  defineSymbol(math, main, mathord, _ch2, _ch2);
	  defineSymbol(text, main, textord, _ch2, _ch2);
	} // Blackboard bold and script letters in Unicode range


	defineSymbol(math, ams, textord, "C", "\u2102"); // blackboard bold

	defineSymbol(text, ams, textord, "C", "\u2102");
	defineSymbol(math, ams, textord, "H", "\u210D");
	defineSymbol(text, ams, textord, "H", "\u210D");
	defineSymbol(math, ams, textord, "N", "\u2115");
	defineSymbol(text, ams, textord, "N", "\u2115");
	defineSymbol(math, ams, textord, "P", "\u2119");
	defineSymbol(text, ams, textord, "P", "\u2119");
	defineSymbol(math, ams, textord, "Q", "\u211A");
	defineSymbol(text, ams, textord, "Q", "\u211A");
	defineSymbol(math, ams, textord, "R", "\u211D");
	defineSymbol(text, ams, textord, "R", "\u211D");
	defineSymbol(math, ams, textord, "Z", "\u2124");
	defineSymbol(text, ams, textord, "Z", "\u2124");
	defineSymbol(math, main, mathord, "h", "\u210E"); // italic h, Planck constant

	defineSymbol(text, main, mathord, "h", "\u210E"); // The next loop loads wide (surrogate pair) characters.
	// We support some letters in the Unicode range U+1D400 to U+1D7FF,
	// Mathematical Alphanumeric Symbols.
	// Some editors do not deal well with wide characters. So don't write the
	// string into this file. Instead, create the string from the surrogate pair.

	var wideChar = "";

	for (var _i3 = 0; _i3 < letters.length; _i3++) {
	  var _ch3 = letters.charAt(_i3); // The hex numbers in the next line are a surrogate pair.
	  // 0xD835 is the high surrogate for all letters in the range we support.
	  // 0xDC00 is the low surrogate for bold A.


	  wideChar = String.fromCharCode(0xD835, 0xDC00 + _i3); // A-Z a-z bold

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDC34 + _i3); // A-Z a-z italic

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDC68 + _i3); // A-Z a-z bold italic

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDD04 + _i3); // A-Z a-z Fractur

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDDA0 + _i3); // A-Z a-z sans-serif

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDDD4 + _i3); // A-Z a-z sans bold

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDE08 + _i3); // A-Z a-z sans italic

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDE70 + _i3); // A-Z a-z monospace

	  defineSymbol(math, main, mathord, _ch3, wideChar);
	  defineSymbol(text, main, textord, _ch3, wideChar);

	  if (_i3 < 26) {
	    // KaTeX fonts have only capital letters for blackboard bold and script.
	    // See exception for k below.
	    wideChar = String.fromCharCode(0xD835, 0xDD38 + _i3); // A-Z double struck

	    defineSymbol(math, main, mathord, _ch3, wideChar);
	    defineSymbol(text, main, textord, _ch3, wideChar);
	    wideChar = String.fromCharCode(0xD835, 0xDC9C + _i3); // A-Z script

	    defineSymbol(math, main, mathord, _ch3, wideChar);
	    defineSymbol(text, main, textord, _ch3, wideChar);
	  } // TODO: Add bold script when it is supported by a KaTeX font.

	} // "k" is the only double struck lower case letter in the KaTeX fonts.


	wideChar = String.fromCharCode(0xD835, 0xDD5C); // k double struck

	defineSymbol(math, main, mathord, "k", wideChar);
	defineSymbol(text, main, textord, "k", wideChar); // Next, some wide character numerals

	for (var _i4 = 0; _i4 < 10; _i4++) {
	  var _ch4 = _i4.toString();

	  wideChar = String.fromCharCode(0xD835, 0xDFCE + _i4); // 0-9 bold

	  defineSymbol(math, main, mathord, _ch4, wideChar);
	  defineSymbol(text, main, textord, _ch4, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDFE2 + _i4); // 0-9 sans serif

	  defineSymbol(math, main, mathord, _ch4, wideChar);
	  defineSymbol(text, main, textord, _ch4, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDFEC + _i4); // 0-9 bold sans

	  defineSymbol(math, main, mathord, _ch4, wideChar);
	  defineSymbol(text, main, textord, _ch4, wideChar);
	  wideChar = String.fromCharCode(0xD835, 0xDFF6 + _i4); // 0-9 monospace

	  defineSymbol(math, main, mathord, _ch4, wideChar);
	  defineSymbol(text, main, textord, _ch4, wideChar);
	} // We add these Latin-1 letters as symbols for backwards-compatibility,
	// but they are not actually in the font, nor are they supported by the
	// Unicode accent mechanism, so they fall back to Times font and look ugly.
	// TODO(edemaine): Fix this.


	var extraLatin = "\u00d0\u00de\u00fe";

	for (var _i5 = 0; _i5 < extraLatin.length; _i5++) {
	  var _ch5 = extraLatin.charAt(_i5);

	  defineSymbol(math, main, mathord, _ch5, _ch5);
	  defineSymbol(text, main, textord, _ch5, _ch5);
	}

	/**
	 * This file provides support for Unicode range U+1D400 to U+1D7FF,
	 * Mathematical Alphanumeric Symbols.
	 *
	 * Function wideCharacterFont takes a wide character as input and returns
	 * the font information necessary to render it properly.
	 */
	/**
	 * Data below is from https://www.unicode.org/charts/PDF/U1D400.pdf
	 * That document sorts characters into groups by font type, say bold or italic.
	 *
	 * In the arrays below, each subarray consists three elements:
	 *      * The CSS class of that group when in math mode.
	 *      * The CSS class of that group when in text mode.
	 *      * The font name, so that KaTeX can get font metrics.
	 */

	var wideLatinLetterData = [["mathbf", "textbf", "Main-Bold"], // A-Z bold upright
	["mathbf", "textbf", "Main-Bold"], // a-z bold upright
	["mathnormal", "textit", "Math-Italic"], // A-Z italic
	["mathnormal", "textit", "Math-Italic"], // a-z italic
	["boldsymbol", "boldsymbol", "Main-BoldItalic"], // A-Z bold italic
	["boldsymbol", "boldsymbol", "Main-BoldItalic"], // a-z bold italic
	// Map fancy A-Z letters to script, not calligraphic.
	// This aligns with unicode-math and math fonts (except Cambria Math).
	["mathscr", "textscr", "Script-Regular"], // A-Z script
	["", "", ""], // a-z script.  No font
	["", "", ""], // A-Z bold script. No font
	["", "", ""], // a-z bold script. No font
	["mathfrak", "textfrak", "Fraktur-Regular"], // A-Z Fraktur
	["mathfrak", "textfrak", "Fraktur-Regular"], // a-z Fraktur
	["mathbb", "textbb", "AMS-Regular"], // A-Z double-struck
	["mathbb", "textbb", "AMS-Regular"], // k double-struck
	["", "", ""], // A-Z bold Fraktur No font metrics
	["", "", ""], // a-z bold Fraktur.   No font.
	["mathsf", "textsf", "SansSerif-Regular"], // A-Z sans-serif
	["mathsf", "textsf", "SansSerif-Regular"], // a-z sans-serif
	["mathboldsf", "textboldsf", "SansSerif-Bold"], // A-Z bold sans-serif
	["mathboldsf", "textboldsf", "SansSerif-Bold"], // a-z bold sans-serif
	["mathitsf", "textitsf", "SansSerif-Italic"], // A-Z italic sans-serif
	["mathitsf", "textitsf", "SansSerif-Italic"], // a-z italic sans-serif
	["", "", ""], // A-Z bold italic sans. No font
	["", "", ""], // a-z bold italic sans. No font
	["mathtt", "texttt", "Typewriter-Regular"], // A-Z monospace
	["mathtt", "texttt", "Typewriter-Regular"] // a-z monospace
	];
	var wideNumeralData = [["mathbf", "textbf", "Main-Bold"], // 0-9 bold
	["", "", ""], // 0-9 double-struck. No KaTeX font.
	["mathsf", "textsf", "SansSerif-Regular"], // 0-9 sans-serif
	["mathboldsf", "textboldsf", "SansSerif-Bold"], // 0-9 bold sans-serif
	["mathtt", "texttt", "Typewriter-Regular"] // 0-9 monospace
	];
	var wideCharacterFont = function wideCharacterFont(wideChar, mode) {
	  // IE doesn't support codePointAt(). So work with the surrogate pair.
	  var H = wideChar.charCodeAt(0); // high surrogate

	  var L = wideChar.charCodeAt(1); // low surrogate

	  var codePoint = (H - 0xD800) * 0x400 + (L - 0xDC00) + 0x10000;
	  var j = mode === "math" ? 0 : 1; // column index for CSS class.

	  if (0x1D400 <= codePoint && codePoint < 0x1D6A4) {
	    // wideLatinLetterData contains exactly 26 chars on each row.
	    // So we can calculate the relevant row. No traverse necessary.
	    var i = Math.floor((codePoint - 0x1D400) / 26);
	    return [wideLatinLetterData[i][2], wideLatinLetterData[i][j]];
	  } else if (0x1D7CE <= codePoint && codePoint <= 0x1D7FF) {
	    // Numerals, ten per row.
	    var _i = Math.floor((codePoint - 0x1D7CE) / 10);

	    return [wideNumeralData[_i][2], wideNumeralData[_i][j]];
	  } else if (codePoint === 0x1D6A5 || codePoint === 0x1D6A6) {
	    // dotless i or j
	    return [wideLatinLetterData[0][2], wideLatinLetterData[0][j]];
	  } else if (0x1D6A6 < codePoint && codePoint < 0x1D7CE) {
	    // Greek letters. Not supported, yet.
	    return ["", ""];
	  } else {
	    // We don't support any wide characters outside 1D400–1D7FF.
	    throw new ParseError("Unsupported character: " + wideChar);
	  }
	};

	/* eslint no-console:0 */

	/**
	 * Looks up the given symbol in fontMetrics, after applying any symbol
	 * replacements defined in symbol.js
	 */
	var lookupSymbol = function lookupSymbol(value, // TODO(#963): Use a union type for this.
	fontName, mode) {
	  // Replace the value with its replaced value from symbol.js
	  if (symbols[mode][value] && symbols[mode][value].replace) {
	    value = symbols[mode][value].replace;
	  }

	  return {
	    value: value,
	    metrics: getCharacterMetrics(value, fontName, mode)
	  };
	};
	/**
	 * Makes a symbolNode after translation via the list of symbols in symbols.js.
	 * Correctly pulls out metrics for the character, and optionally takes a list of
	 * classes to be attached to the node.
	 *
	 * TODO: make argument order closer to makeSpan
	 * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
	 * should if present come first in `classes`.
	 * TODO(#953): Make `options` mandatory and always pass it in.
	 */


	var makeSymbol = function makeSymbol(value, fontName, mode, options, classes) {
	  var lookup = lookupSymbol(value, fontName, mode);
	  var metrics = lookup.metrics;
	  value = lookup.value;
	  var symbolNode;

	  if (metrics) {
	    var italic = metrics.italic;

	    if (mode === "text" || options && options.font === "mathit") {
	      italic = 0;
	    }

	    symbolNode = new SymbolNode(value, metrics.height, metrics.depth, italic, metrics.skew, metrics.width, classes);
	  } else {
	    // TODO(emily): Figure out a good way to only print this in development
	    typeof console !== "undefined" && console.warn("No character metrics " + ("for '" + value + "' in style '" + fontName + "' and mode '" + mode + "'"));
	    symbolNode = new SymbolNode(value, 0, 0, 0, 0, 0, classes);
	  }

	  if (options) {
	    symbolNode.maxFontSize = options.sizeMultiplier;

	    if (options.style.isTight()) {
	      symbolNode.classes.push("mtight");
	    }

	    var color = options.getColor();

	    if (color) {
	      symbolNode.style.color = color;
	    }
	  }

	  return symbolNode;
	};
	/**
	 * Makes a symbol in Main-Regular or AMS-Regular.
	 * Used for rel, bin, open, close, inner, and punct.
	 */


	var mathsym = function mathsym(value, mode, options, classes) {
	  if (classes === void 0) {
	    classes = [];
	  }

	  // Decide what font to render the symbol in by its entry in the symbols
	  // table.
	  // Have a special case for when the value = \ because the \ is used as a
	  // textord in unsupported command errors but cannot be parsed as a regular
	  // text ordinal and is therefore not present as a symbol in the symbols
	  // table for text, as well as a special case for boldsymbol because it
	  // can be used for bold + and -
	  if (options.font === "boldsymbol" && lookupSymbol(value, "Main-Bold", mode).metrics) {
	    return makeSymbol(value, "Main-Bold", mode, options, classes.concat(["mathbf"]));
	  } else if (value === "\\" || symbols[mode][value].font === "main") {
	    return makeSymbol(value, "Main-Regular", mode, options, classes);
	  } else {
	    return makeSymbol(value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));
	  }
	};
	/**
	 * Determines which of the two font names (Main-Bold and Math-BoldItalic) and
	 * corresponding style tags (mathbf or boldsymbol) to use for font "boldsymbol",
	 * depending on the symbol.  Use this function instead of fontMap for font
	 * "boldsymbol".
	 */


	var boldsymbol = function boldsymbol(value, mode, options, classes, type) {
	  if (type !== "textord" && lookupSymbol(value, "Math-BoldItalic", mode).metrics) {
	    return {
	      fontName: "Math-BoldItalic",
	      fontClass: "boldsymbol"
	    };
	  } else {
	    // Some glyphs do not exist in Math-BoldItalic so we need to use
	    // Main-Bold instead.
	    return {
	      fontName: "Main-Bold",
	      fontClass: "mathbf"
	    };
	  }
	};
	/**
	 * Makes either a mathord or textord in the correct font and color.
	 */


	var makeOrd = function makeOrd(group, options, type) {
	  var mode = group.mode;
	  var text = group.text;
	  var classes = ["mord"]; // Math mode or Old font (i.e. \rm)

	  var isFont = mode === "math" || mode === "text" && options.font;
	  var fontOrFamily = isFont ? options.font : options.fontFamily;

	  if (text.charCodeAt(0) === 0xD835) {
	    // surrogate pairs get special treatment
	    var [wideFontName, wideFontClass] = wideCharacterFont(text, mode);
	    return makeSymbol(text, wideFontName, mode, options, classes.concat(wideFontClass));
	  } else if (fontOrFamily) {
	    var fontName;
	    var fontClasses;

	    if (fontOrFamily === "boldsymbol") {
	      var fontData = boldsymbol(text, mode, options, classes, type);
	      fontName = fontData.fontName;
	      fontClasses = [fontData.fontClass];
	    } else if (isFont) {
	      fontName = fontMap[fontOrFamily].fontName;
	      fontClasses = [fontOrFamily];
	    } else {
	      fontName = retrieveTextFontName(fontOrFamily, options.fontWeight, options.fontShape);
	      fontClasses = [fontOrFamily, options.fontWeight, options.fontShape];
	    }

	    if (lookupSymbol(text, fontName, mode).metrics) {
	      return makeSymbol(text, fontName, mode, options, classes.concat(fontClasses));
	    } else if (ligatures.hasOwnProperty(text) && fontName.substr(0, 10) === "Typewriter") {
	      // Deconstruct ligatures in monospace fonts (\texttt, \tt).
	      var parts = [];

	      for (var i = 0; i < text.length; i++) {
	        parts.push(makeSymbol(text[i], fontName, mode, options, classes.concat(fontClasses)));
	      }

	      return makeFragment(parts);
	    }
	  } // Makes a symbol in the default font for mathords and textords.


	  if (type === "mathord") {
	    return makeSymbol(text, "Math-Italic", mode, options, classes.concat(["mathnormal"]));
	  } else if (type === "textord") {
	    var font = symbols[mode][text] && symbols[mode][text].font;

	    if (font === "ams") {
	      var _fontName = retrieveTextFontName("amsrm", options.fontWeight, options.fontShape);

	      return makeSymbol(text, _fontName, mode, options, classes.concat("amsrm", options.fontWeight, options.fontShape));
	    } else if (font === "main" || !font) {
	      var _fontName2 = retrieveTextFontName("textrm", options.fontWeight, options.fontShape);

	      return makeSymbol(text, _fontName2, mode, options, classes.concat(options.fontWeight, options.fontShape));
	    } else {
	      // fonts added by plugins
	      var _fontName3 = retrieveTextFontName(font, options.fontWeight, options.fontShape); // We add font name as a css class


	      return makeSymbol(text, _fontName3, mode, options, classes.concat(_fontName3, options.fontWeight, options.fontShape));
	    }
	  } else {
	    throw new Error("unexpected type: " + type + " in makeOrd");
	  }
	};
	/**
	 * Returns true if subsequent symbolNodes have the same classes, skew, maxFont,
	 * and styles.
	 */


	var canCombine = (prev, next) => {
	  if (createClass(prev.classes) !== createClass(next.classes) || prev.skew !== next.skew || prev.maxFontSize !== next.maxFontSize) {
	    return false;
	  } // If prev and next both are just "mbin"s or "mord"s we don't combine them
	  // so that the proper spacing can be preserved.


	  if (prev.classes.length === 1) {
	    var cls = prev.classes[0];

	    if (cls === "mbin" || cls === "mord") {
	      return false;
	    }
	  }

	  for (var style in prev.style) {
	    if (prev.style.hasOwnProperty(style) && prev.style[style] !== next.style[style]) {
	      return false;
	    }
	  }

	  for (var _style in next.style) {
	    if (next.style.hasOwnProperty(_style) && prev.style[_style] !== next.style[_style]) {
	      return false;
	    }
	  }

	  return true;
	};
	/**
	 * Combine consecutive domTree.symbolNodes into a single symbolNode.
	 * Note: this function mutates the argument.
	 */


	var tryCombineChars = chars => {
	  for (var i = 0; i < chars.length - 1; i++) {
	    var prev = chars[i];
	    var next = chars[i + 1];

	    if (prev instanceof SymbolNode && next instanceof SymbolNode && canCombine(prev, next)) {
	      prev.text += next.text;
	      prev.height = Math.max(prev.height, next.height);
	      prev.depth = Math.max(prev.depth, next.depth); // Use the last character's italic correction since we use
	      // it to add padding to the right of the span created from
	      // the combined characters.

	      prev.italic = next.italic;
	      chars.splice(i + 1, 1);
	      i--;
	    }
	  }

	  return chars;
	};
	/**
	 * Calculate the height, depth, and maxFontSize of an element based on its
	 * children.
	 */


	var sizeElementFromChildren = function sizeElementFromChildren(elem) {
	  var height = 0;
	  var depth = 0;
	  var maxFontSize = 0;

	  for (var i = 0; i < elem.children.length; i++) {
	    var child = elem.children[i];

	    if (child.height > height) {
	      height = child.height;
	    }

	    if (child.depth > depth) {
	      depth = child.depth;
	    }

	    if (child.maxFontSize > maxFontSize) {
	      maxFontSize = child.maxFontSize;
	    }
	  }

	  elem.height = height;
	  elem.depth = depth;
	  elem.maxFontSize = maxFontSize;
	};
	/**
	 * Makes a span with the given list of classes, list of children, and options.
	 *
	 * TODO(#953): Ensure that `options` is always provided (currently some call
	 * sites don't pass it) and make the type below mandatory.
	 * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
	 * should if present come first in `classes`.
	 */


	var makeSpan$2 = function makeSpan(classes, children, options, style) {
	  var span = new Span(classes, children, options, style);
	  sizeElementFromChildren(span);
	  return span;
	}; // SVG one is simpler -- doesn't require height, depth, max-font setting.
	// This is also a separate method for typesafety.


	var makeSvgSpan = (classes, children, options, style) => new Span(classes, children, options, style);

	var makeLineSpan = function makeLineSpan(className, options, thickness) {
	  var line = makeSpan$2([className], [], options);
	  line.height = Math.max(thickness || options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
	  line.style.borderBottomWidth = makeEm(line.height);
	  line.maxFontSize = 1.0;
	  return line;
	};
	/**
	 * Makes an anchor with the given href, list of classes, list of children,
	 * and options.
	 */


	var makeAnchor = function makeAnchor(href, classes, children, options) {
	  var anchor = new Anchor$1(href, classes, children, options);
	  sizeElementFromChildren(anchor);
	  return anchor;
	};
	/**
	 * Makes a document fragment with the given list of children.
	 */


	var makeFragment = function makeFragment(children) {
	  var fragment = new DocumentFragment(children);
	  sizeElementFromChildren(fragment);
	  return fragment;
	};
	/**
	 * Wraps group in a span if it's a document fragment, allowing to apply classes
	 * and styles
	 */


	var wrapFragment = function wrapFragment(group, options) {
	  if (group instanceof DocumentFragment) {
	    return makeSpan$2([], [group], options);
	  }

	  return group;
	}; // These are exact object types to catch typos in the names of the optional fields.


	// Computes the updated `children` list and the overall depth.
	//
	// This helper function for makeVList makes it easier to enforce type safety by
	// allowing early exits (returns) in the logic.
	var getVListChildrenAndDepth = function getVListChildrenAndDepth(params) {
	  if (params.positionType === "individualShift") {
	    var oldChildren = params.children;
	    var children = [oldChildren[0]]; // Add in kerns to the list of params.children to get each element to be
	    // shifted to the correct specified shift

	    var _depth = -oldChildren[0].shift - oldChildren[0].elem.depth;

	    var currPos = _depth;

	    for (var i = 1; i < oldChildren.length; i++) {
	      var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;
	      var size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);
	      currPos = currPos + diff;
	      children.push({
	        type: "kern",
	        size
	      });
	      children.push(oldChildren[i]);
	    }

	    return {
	      children,
	      depth: _depth
	    };
	  }

	  var depth;

	  if (params.positionType === "top") {
	    // We always start at the bottom, so calculate the bottom by adding up
	    // all the sizes
	    var bottom = params.positionData;

	    for (var _i = 0; _i < params.children.length; _i++) {
	      var child = params.children[_i];
	      bottom -= child.type === "kern" ? child.size : child.elem.height + child.elem.depth;
	    }

	    depth = bottom;
	  } else if (params.positionType === "bottom") {
	    depth = -params.positionData;
	  } else {
	    var firstChild = params.children[0];

	    if (firstChild.type !== "elem") {
	      throw new Error('First child must have type "elem".');
	    }

	    if (params.positionType === "shift") {
	      depth = -firstChild.elem.depth - params.positionData;
	    } else if (params.positionType === "firstBaseline") {
	      depth = -firstChild.elem.depth;
	    } else {
	      throw new Error("Invalid positionType " + params.positionType + ".");
	    }
	  }

	  return {
	    children: params.children,
	    depth
	  };
	};
	/**
	 * Makes a vertical list by stacking elements and kerns on top of each other.
	 * Allows for many different ways of specifying the positioning method.
	 *
	 * See VListParam documentation above.
	 */


	var makeVList = function makeVList(params, options) {
	  var {
	    children,
	    depth
	  } = getVListChildrenAndDepth(params); // Create a strut that is taller than any list item. The strut is added to
	  // each item, where it will determine the item's baseline. Since it has
	  // `overflow:hidden`, the strut's top edge will sit on the item's line box's
	  // top edge and the strut's bottom edge will sit on the item's baseline,
	  // with no additional line-height spacing. This allows the item baseline to
	  // be positioned precisely without worrying about font ascent and
	  // line-height.

	  var pstrutSize = 0;

	  for (var i = 0; i < children.length; i++) {
	    var child = children[i];

	    if (child.type === "elem") {
	      var elem = child.elem;
	      pstrutSize = Math.max(pstrutSize, elem.maxFontSize, elem.height);
	    }
	  }

	  pstrutSize += 2;
	  var pstrut = makeSpan$2(["pstrut"], []);
	  pstrut.style.height = makeEm(pstrutSize); // Create a new list of actual children at the correct offsets

	  var realChildren = [];
	  var minPos = depth;
	  var maxPos = depth;
	  var currPos = depth;

	  for (var _i2 = 0; _i2 < children.length; _i2++) {
	    var _child = children[_i2];

	    if (_child.type === "kern") {
	      currPos += _child.size;
	    } else {
	      var _elem = _child.elem;
	      var classes = _child.wrapperClasses || [];
	      var style = _child.wrapperStyle || {};
	      var childWrap = makeSpan$2(classes, [pstrut, _elem], undefined, style);
	      childWrap.style.top = makeEm(-pstrutSize - currPos - _elem.depth);

	      if (_child.marginLeft) {
	        childWrap.style.marginLeft = _child.marginLeft;
	      }

	      if (_child.marginRight) {
	        childWrap.style.marginRight = _child.marginRight;
	      }

	      realChildren.push(childWrap);
	      currPos += _elem.height + _elem.depth;
	    }

	    minPos = Math.min(minPos, currPos);
	    maxPos = Math.max(maxPos, currPos);
	  } // The vlist contents go in a table-cell with `vertical-align:bottom`.
	  // This cell's bottom edge will determine the containing table's baseline
	  // without overly expanding the containing line-box.


	  var vlist = makeSpan$2(["vlist"], realChildren);
	  vlist.style.height = makeEm(maxPos); // A second row is used if necessary to represent the vlist's depth.

	  var rows;

	  if (minPos < 0) {
	    // We will define depth in an empty span with display: table-cell.
	    // It should render with the height that we define. But Chrome, in
	    // contenteditable mode only, treats that span as if it contains some
	    // text content. And that min-height over-rides our desired height.
	    // So we put another empty span inside the depth strut span.
	    var emptySpan = makeSpan$2([], []);
	    var depthStrut = makeSpan$2(["vlist"], [emptySpan]);
	    depthStrut.style.height = makeEm(-minPos); // Safari wants the first row to have inline content; otherwise it
	    // puts the bottom of the *second* row on the baseline.

	    var topStrut = makeSpan$2(["vlist-s"], [new SymbolNode("\u200b")]);
	    rows = [makeSpan$2(["vlist-r"], [vlist, topStrut]), makeSpan$2(["vlist-r"], [depthStrut])];
	  } else {
	    rows = [makeSpan$2(["vlist-r"], [vlist])];
	  }

	  var vtable = makeSpan$2(["vlist-t"], rows);

	  if (rows.length === 2) {
	    vtable.classes.push("vlist-t2");
	  }

	  vtable.height = maxPos;
	  vtable.depth = -minPos;
	  return vtable;
	}; // Glue is a concept from TeX which is a flexible space between elements in
	// either a vertical or horizontal list. In KaTeX, at least for now, it's
	// static space between elements in a horizontal layout.


	var makeGlue = (measurement, options) => {
	  // Make an empty span for the space
	  var rule = makeSpan$2(["mspace"], [], options);
	  var size = calculateSize(measurement, options);
	  rule.style.marginRight = makeEm(size);
	  return rule;
	}; // Takes font options, and returns the appropriate fontLookup name


	var retrieveTextFontName = function retrieveTextFontName(fontFamily, fontWeight, fontShape) {
	  var baseFontName = "";

	  switch (fontFamily) {
	    case "amsrm":
	      baseFontName = "AMS";
	      break;

	    case "textrm":
	      baseFontName = "Main";
	      break;

	    case "textsf":
	      baseFontName = "SansSerif";
	      break;

	    case "texttt":
	      baseFontName = "Typewriter";
	      break;

	    default:
	      baseFontName = fontFamily;
	    // use fonts added by a plugin
	  }

	  var fontStylesName;

	  if (fontWeight === "textbf" && fontShape === "textit") {
	    fontStylesName = "BoldItalic";
	  } else if (fontWeight === "textbf") {
	    fontStylesName = "Bold";
	  } else if (fontWeight === "textit") {
	    fontStylesName = "Italic";
	  } else {
	    fontStylesName = "Regular";
	  }

	  return baseFontName + "-" + fontStylesName;
	};
	/**
	 * Maps TeX font commands to objects containing:
	 * - variant: string used for "mathvariant" attribute in buildMathML.js
	 * - fontName: the "style" parameter to fontMetrics.getCharacterMetrics
	 */
	// A map between tex font commands an MathML mathvariant attribute values


	var fontMap = {
	  // styles
	  "mathbf": {
	    variant: "bold",
	    fontName: "Main-Bold"
	  },
	  "mathrm": {
	    variant: "normal",
	    fontName: "Main-Regular"
	  },
	  "textit": {
	    variant: "italic",
	    fontName: "Main-Italic"
	  },
	  "mathit": {
	    variant: "italic",
	    fontName: "Main-Italic"
	  },
	  "mathnormal": {
	    variant: "italic",
	    fontName: "Math-Italic"
	  },
	  // "boldsymbol" is missing because they require the use of multiple fonts:
	  // Math-BoldItalic and Main-Bold.  This is handled by a special case in
	  // makeOrd which ends up calling boldsymbol.
	  // families
	  "mathbb": {
	    variant: "double-struck",
	    fontName: "AMS-Regular"
	  },
	  "mathcal": {
	    variant: "script",
	    fontName: "Caligraphic-Regular"
	  },
	  "mathfrak": {
	    variant: "fraktur",
	    fontName: "Fraktur-Regular"
	  },
	  "mathscr": {
	    variant: "script",
	    fontName: "Script-Regular"
	  },
	  "mathsf": {
	    variant: "sans-serif",
	    fontName: "SansSerif-Regular"
	  },
	  "mathtt": {
	    variant: "monospace",
	    fontName: "Typewriter-Regular"
	  }
	};
	var svgData = {
	  //   path, width, height
	  vec: ["vec", 0.471, 0.714],
	  // values from the font glyph
	  oiintSize1: ["oiintSize1", 0.957, 0.499],
	  // oval to overlay the integrand
	  oiintSize2: ["oiintSize2", 1.472, 0.659],
	  oiiintSize1: ["oiiintSize1", 1.304, 0.499],
	  oiiintSize2: ["oiiintSize2", 1.98, 0.659]
	};

	var staticSvg = function staticSvg(value, options) {
	  // Create a span with inline SVG for the element.
	  var [pathName, width, height] = svgData[value];
	  var path = new PathNode(pathName);
	  var svgNode = new SvgNode([path], {
	    "width": makeEm(width),
	    "height": makeEm(height),
	    // Override CSS rule `.katex svg { width: 100% }`
	    "style": "width:" + makeEm(width),
	    "viewBox": "0 0 " + 1000 * width + " " + 1000 * height,
	    "preserveAspectRatio": "xMinYMin"
	  });
	  var span = makeSvgSpan(["overlay"], [svgNode], options);
	  span.height = height;
	  span.style.height = makeEm(height);
	  span.style.width = makeEm(width);
	  return span;
	};

	var buildCommon = {
	  fontMap,
	  makeSymbol,
	  mathsym,
	  makeSpan: makeSpan$2,
	  makeSvgSpan,
	  makeLineSpan,
	  makeAnchor,
	  makeFragment,
	  wrapFragment,
	  makeVList,
	  makeOrd,
	  makeGlue,
	  staticSvg,
	  svgData,
	  tryCombineChars
	};

	/**
	 * Describes spaces between different classes of atoms.
	 */
	var thinspace = {
	  number: 3,
	  unit: "mu"
	};
	var mediumspace = {
	  number: 4,
	  unit: "mu"
	};
	var thickspace = {
	  number: 5,
	  unit: "mu"
	}; // Making the type below exact with all optional fields doesn't work due to
	// - https://github.com/facebook/flow/issues/4582
	// - https://github.com/facebook/flow/issues/5688
	// However, since *all* fields are optional, $Shape<> works as suggested in 5688
	// above.

	// Spacing relationships for display and text styles
	var spacings = {
	  mord: {
	    mop: thinspace,
	    mbin: mediumspace,
	    mrel: thickspace,
	    minner: thinspace
	  },
	  mop: {
	    mord: thinspace,
	    mop: thinspace,
	    mrel: thickspace,
	    minner: thinspace
	  },
	  mbin: {
	    mord: mediumspace,
	    mop: mediumspace,
	    mopen: mediumspace,
	    minner: mediumspace
	  },
	  mrel: {
	    mord: thickspace,
	    mop: thickspace,
	    mopen: thickspace,
	    minner: thickspace
	  },
	  mopen: {},
	  mclose: {
	    mop: thinspace,
	    mbin: mediumspace,
	    mrel: thickspace,
	    minner: thinspace
	  },
	  mpunct: {
	    mord: thinspace,
	    mop: thinspace,
	    mrel: thickspace,
	    mopen: thinspace,
	    mclose: thinspace,
	    mpunct: thinspace,
	    minner: thinspace
	  },
	  minner: {
	    mord: thinspace,
	    mop: thinspace,
	    mbin: mediumspace,
	    mrel: thickspace,
	    mopen: thinspace,
	    mpunct: thinspace,
	    minner: thinspace
	  }
	}; // Spacing relationships for script and scriptscript styles

	var tightSpacings = {
	  mord: {
	    mop: thinspace
	  },
	  mop: {
	    mord: thinspace,
	    mop: thinspace
	  },
	  mbin: {},
	  mrel: {},
	  mopen: {},
	  mclose: {
	    mop: thinspace
	  },
	  mpunct: {},
	  minner: {
	    mop: thinspace
	  }
	};

	/** Context provided to function handlers for error messages. */
	// Note: reverse the order of the return type union will cause a flow error.
	// See https://github.com/facebook/flow/issues/3663.
	// More general version of `HtmlBuilder` for nodes (e.g. \sum, accent types)
	// whose presence impacts super/subscripting. In this case, ParseNode<"supsub">
	// delegates its HTML building to the HtmlBuilder corresponding to these nodes.

	/**
	 * Final function spec for use at parse time.
	 * This is almost identical to `FunctionPropSpec`, except it
	 * 1. includes the function handler, and
	 * 2. requires all arguments except argTypes.
	 * It is generated by `defineFunction()` below.
	 */

	/**
	 * All registered functions.
	 * `functions.js` just exports this same dictionary again and makes it public.
	 * `Parser.js` requires this dictionary.
	 */
	var _functions = {};
	/**
	 * All HTML builders. Should be only used in the `define*` and the `build*ML`
	 * functions.
	 */

	var _htmlGroupBuilders = {};
	/**
	 * All MathML builders. Should be only used in the `define*` and the `build*ML`
	 * functions.
	 */

	var _mathmlGroupBuilders = {};
	function defineFunction(_ref) {
	  var {
	    type,
	    names,
	    props,
	    handler,
	    htmlBuilder,
	    mathmlBuilder
	  } = _ref;
	  // Set default values of functions
	  var data = {
	    type,
	    numArgs: props.numArgs,
	    argTypes: props.argTypes,
	    allowedInArgument: !!props.allowedInArgument,
	    allowedInText: !!props.allowedInText,
	    allowedInMath: props.allowedInMath === undefined ? true : props.allowedInMath,
	    numOptionalArgs: props.numOptionalArgs || 0,
	    infix: !!props.infix,
	    primitive: !!props.primitive,
	    handler: handler
	  };

	  for (var i = 0; i < names.length; ++i) {
	    _functions[names[i]] = data;
	  }

	  if (type) {
	    if (htmlBuilder) {
	      _htmlGroupBuilders[type] = htmlBuilder;
	    }

	    if (mathmlBuilder) {
	      _mathmlGroupBuilders[type] = mathmlBuilder;
	    }
	  }
	}
	/**
	 * Use this to register only the HTML and MathML builders for a function (e.g.
	 * if the function's ParseNode is generated in Parser.js rather than via a
	 * stand-alone handler provided to `defineFunction`).
	 */

	function defineFunctionBuilders(_ref2) {
	  var {
	    type,
	    htmlBuilder,
	    mathmlBuilder
	  } = _ref2;
	  defineFunction({
	    type,
	    names: [],
	    props: {
	      numArgs: 0
	    },

	    handler() {
	      throw new Error('Should never be called.');
	    },

	    htmlBuilder,
	    mathmlBuilder
	  });
	}
	var normalizeArgument = function normalizeArgument(arg) {
	  return arg.type === "ordgroup" && arg.body.length === 1 ? arg.body[0] : arg;
	}; // Since the corresponding buildHTML/buildMathML function expects a
	// list of elements, we normalize for different kinds of arguments

	var ordargument = function ordargument(arg) {
	  return arg.type === "ordgroup" ? arg.body : [arg];
	};

	/**
	 * This file does the main work of building a domTree structure from a parse
	 * tree. The entry point is the `buildHTML` function, which takes a parse tree.
	 * Then, the buildExpression, buildGroup, and various groupBuilders functions
	 * are called, to produce a final HTML tree.
	 */
	var makeSpan$1 = buildCommon.makeSpan; // Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)
	// depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,
	// and the text before Rule 19.

	var binLeftCanceller = ["leftmost", "mbin", "mopen", "mrel", "mop", "mpunct"];
	var binRightCanceller = ["rightmost", "mrel", "mclose", "mpunct"];
	var styleMap$1 = {
	  "display": Style$1.DISPLAY,
	  "text": Style$1.TEXT,
	  "script": Style$1.SCRIPT,
	  "scriptscript": Style$1.SCRIPTSCRIPT
	};
	var DomEnum = {
	  mord: "mord",
	  mop: "mop",
	  mbin: "mbin",
	  mrel: "mrel",
	  mopen: "mopen",
	  mclose: "mclose",
	  mpunct: "mpunct",
	  minner: "minner"
	};

	/**
	 * Take a list of nodes, build them in order, and return a list of the built
	 * nodes. documentFragments are flattened into their contents, so the
	 * returned list contains no fragments. `isRealGroup` is true if `expression`
	 * is a real group (no atoms will be added on either side), as opposed to
	 * a partial group (e.g. one created by \color). `surrounding` is an array
	 * consisting type of nodes that will be added to the left and right.
	 */
	var buildExpression$1 = function buildExpression(expression, options, isRealGroup, surrounding) {
	  if (surrounding === void 0) {
	    surrounding = [null, null];
	  }

	  // Parse expressions into `groups`.
	  var groups = [];

	  for (var i = 0; i < expression.length; i++) {
	    var output = buildGroup$1(expression[i], options);

	    if (output instanceof DocumentFragment) {
	      var children = output.children;
	      groups.push(...children);
	    } else {
	      groups.push(output);
	    }
	  } // Combine consecutive domTree.symbolNodes into a single symbolNode.


	  buildCommon.tryCombineChars(groups); // If `expression` is a partial group, let the parent handle spacings
	  // to avoid processing groups multiple times.

	  if (!isRealGroup) {
	    return groups;
	  }

	  var glueOptions = options;

	  if (expression.length === 1) {
	    var node = expression[0];

	    if (node.type === "sizing") {
	      glueOptions = options.havingSize(node.size);
	    } else if (node.type === "styling") {
	      glueOptions = options.havingStyle(styleMap$1[node.style]);
	    }
	  } // Dummy spans for determining spacings between surrounding atoms.
	  // If `expression` has no atoms on the left or right, class "leftmost"
	  // or "rightmost", respectively, is used to indicate it.


	  var dummyPrev = makeSpan$1([surrounding[0] || "leftmost"], [], options);
	  var dummyNext = makeSpan$1([surrounding[1] || "rightmost"], [], options); // TODO: These code assumes that a node's math class is the first element
	  // of its `classes` array. A later cleanup should ensure this, for
	  // instance by changing the signature of `makeSpan`.
	  // Before determining what spaces to insert, perform bin cancellation.
	  // Binary operators change to ordinary symbols in some contexts.

	  var isRoot = isRealGroup === "root";
	  traverseNonSpaceNodes(groups, (node, prev) => {
	    var prevType = prev.classes[0];
	    var type = node.classes[0];

	    if (prevType === "mbin" && utils.contains(binRightCanceller, type)) {
	      prev.classes[0] = "mord";
	    } else if (type === "mbin" && utils.contains(binLeftCanceller, prevType)) {
	      node.classes[0] = "mord";
	    }
	  }, {
	    node: dummyPrev
	  }, dummyNext, isRoot);
	  traverseNonSpaceNodes(groups, (node, prev) => {
	    var prevType = getTypeOfDomTree(prev);
	    var type = getTypeOfDomTree(node); // 'mtight' indicates that the node is script or scriptscript style.

	    var space = prevType && type ? node.hasClass("mtight") ? tightSpacings[prevType][type] : spacings[prevType][type] : null;

	    if (space) {
	      // Insert glue (spacing) after the `prev`.
	      return buildCommon.makeGlue(space, glueOptions);
	    }
	  }, {
	    node: dummyPrev
	  }, dummyNext, isRoot);
	  return groups;
	}; // Depth-first traverse non-space `nodes`, calling `callback` with the current and
	// previous node as arguments, optionally returning a node to insert after the
	// previous node. `prev` is an object with the previous node and `insertAfter`
	// function to insert after it. `next` is a node that will be added to the right.
	// Used for bin cancellation and inserting spacings.

	var traverseNonSpaceNodes = function traverseNonSpaceNodes(nodes, callback, prev, next, isRoot) {
	  if (next) {
	    // temporarily append the right node, if exists
	    nodes.push(next);
	  }

	  var i = 0;

	  for (; i < nodes.length; i++) {
	    var node = nodes[i];
	    var partialGroup = checkPartialGroup(node);

	    if (partialGroup) {
	      // Recursive DFS
	      // $FlowFixMe: make nodes a $ReadOnlyArray by returning a new array
	      traverseNonSpaceNodes(partialGroup.children, callback, prev, null, isRoot);
	      continue;
	    } // Ignore explicit spaces (e.g., \;, \,) when determining what implicit
	    // spacing should go between atoms of different classes


	    var nonspace = !node.hasClass("mspace");

	    if (nonspace) {
	      var result = callback(node, prev.node);

	      if (result) {
	        if (prev.insertAfter) {
	          prev.insertAfter(result);
	        } else {
	          // insert at front
	          nodes.unshift(result);
	          i++;
	        }
	      }
	    }

	    if (nonspace) {
	      prev.node = node;
	    } else if (isRoot && node.hasClass("newline")) {
	      prev.node = makeSpan$1(["leftmost"]); // treat like beginning of line
	    }

	    prev.insertAfter = (index => n => {
	      nodes.splice(index + 1, 0, n);
	      i++;
	    })(i);
	  }

	  if (next) {
	    nodes.pop();
	  }
	}; // Check if given node is a partial group, i.e., does not affect spacing around.


	var checkPartialGroup = function checkPartialGroup(node) {
	  if (node instanceof DocumentFragment || node instanceof Anchor$1 || node instanceof Span && node.hasClass("enclosing")) {
	    return node;
	  }

	  return null;
	}; // Return the outermost node of a domTree.


	var getOutermostNode = function getOutermostNode(node, side) {
	  var partialGroup = checkPartialGroup(node);

	  if (partialGroup) {
	    var children = partialGroup.children;

	    if (children.length) {
	      if (side === "right") {
	        return getOutermostNode(children[children.length - 1], "right");
	      } else if (side === "left") {
	        return getOutermostNode(children[0], "left");
	      }
	    }
	  }

	  return node;
	}; // Return math atom class (mclass) of a domTree.
	// If `side` is given, it will get the type of the outermost node at given side.


	var getTypeOfDomTree = function getTypeOfDomTree(node, side) {
	  if (!node) {
	    return null;
	  }

	  if (side) {
	    node = getOutermostNode(node, side);
	  } // This makes a lot of assumptions as to where the type of atom
	  // appears.  We should do a better job of enforcing this.


	  return DomEnum[node.classes[0]] || null;
	};
	var makeNullDelimiter = function makeNullDelimiter(options, classes) {
	  var moreClasses = ["nulldelimiter"].concat(options.baseSizingClasses());
	  return makeSpan$1(classes.concat(moreClasses));
	};
	/**
	 * buildGroup is the function that takes a group and calls the correct groupType
	 * function for it. It also handles the interaction of size and style changes
	 * between parents and children.
	 */

	var buildGroup$1 = function buildGroup(group, options, baseOptions) {
	  if (!group) {
	    return makeSpan$1();
	  }

	  if (_htmlGroupBuilders[group.type]) {
	    // Call the groupBuilders function
	    // $FlowFixMe
	    var groupNode = _htmlGroupBuilders[group.type](group, options); // If the size changed between the parent and the current group, account
	    // for that size difference.

	    if (baseOptions && options.size !== baseOptions.size) {
	      groupNode = makeSpan$1(options.sizingClasses(baseOptions), [groupNode], options);
	      var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
	      groupNode.height *= multiplier;
	      groupNode.depth *= multiplier;
	    }

	    return groupNode;
	  } else {
	    throw new ParseError("Got group of unknown type: '" + group.type + "'");
	  }
	};
	/**
	 * Combine an array of HTML DOM nodes (e.g., the output of `buildExpression`)
	 * into an unbreakable HTML node of class .base, with proper struts to
	 * guarantee correct vertical extent.  `buildHTML` calls this repeatedly to
	 * make up the entire expression as a sequence of unbreakable units.
	 */

	function buildHTMLUnbreakable(children, options) {
	  // Compute height and depth of this chunk.
	  var body = makeSpan$1(["base"], children, options); // Add strut, which ensures that the top of the HTML element falls at
	  // the height of the expression, and the bottom of the HTML element
	  // falls at the depth of the expression.

	  var strut = makeSpan$1(["strut"]);
	  strut.style.height = makeEm(body.height + body.depth);

	  if (body.depth) {
	    strut.style.verticalAlign = makeEm(-body.depth);
	  }

	  body.children.unshift(strut);
	  return body;
	}
	/**
	 * Take an entire parse tree, and build it into an appropriate set of HTML
	 * nodes.
	 */


	function buildHTML(tree, options) {
	  // Strip off outer tag wrapper for processing below.
	  var tag = null;

	  if (tree.length === 1 && tree[0].type === "tag") {
	    tag = tree[0].tag;
	    tree = tree[0].body;
	  } // Build the expression contained in the tree


	  var expression = buildExpression$1(tree, options, "root");
	  var eqnNum;

	  if (expression.length === 2 && expression[1].hasClass("tag")) {
	    // An environment with automatic equation numbers, e.g. {gather}.
	    eqnNum = expression.pop();
	  }

	  var children = []; // Create one base node for each chunk between potential line breaks.
	  // The TeXBook [p.173] says "A formula will be broken only after a
	  // relation symbol like $=$ or $<$ or $\rightarrow$, or after a binary
	  // operation symbol like $+$ or $-$ or $\times$, where the relation or
	  // binary operation is on the ``outer level'' of the formula (i.e., not
	  // enclosed in {...} and not part of an \over construction)."

	  var parts = [];

	  for (var i = 0; i < expression.length; i++) {
	    parts.push(expression[i]);

	    if (expression[i].hasClass("mbin") || expression[i].hasClass("mrel") || expression[i].hasClass("allowbreak")) {
	      // Put any post-operator glue on same line as operator.
	      // Watch for \nobreak along the way, and stop at \newline.
	      var nobreak = false;

	      while (i < expression.length - 1 && expression[i + 1].hasClass("mspace") && !expression[i + 1].hasClass("newline")) {
	        i++;
	        parts.push(expression[i]);

	        if (expression[i].hasClass("nobreak")) {
	          nobreak = true;
	        }
	      } // Don't allow break if \nobreak among the post-operator glue.


	      if (!nobreak) {
	        children.push(buildHTMLUnbreakable(parts, options));
	        parts = [];
	      }
	    } else if (expression[i].hasClass("newline")) {
	      // Write the line except the newline
	      parts.pop();

	      if (parts.length > 0) {
	        children.push(buildHTMLUnbreakable(parts, options));
	        parts = [];
	      } // Put the newline at the top level


	      children.push(expression[i]);
	    }
	  }

	  if (parts.length > 0) {
	    children.push(buildHTMLUnbreakable(parts, options));
	  } // Now, if there was a tag, build it too and append it as a final child.


	  var tagChild;

	  if (tag) {
	    tagChild = buildHTMLUnbreakable(buildExpression$1(tag, options, true));
	    tagChild.classes = ["tag"];
	    children.push(tagChild);
	  } else if (eqnNum) {
	    children.push(eqnNum);
	  }

	  var htmlNode = makeSpan$1(["katex-html"], children);
	  htmlNode.setAttribute("aria-hidden", "true"); // Adjust the strut of the tag to be the maximum height of all children
	  // (the height of the enclosing htmlNode) for proper vertical alignment.

	  if (tagChild) {
	    var strut = tagChild.children[0];
	    strut.style.height = makeEm(htmlNode.height + htmlNode.depth);

	    if (htmlNode.depth) {
	      strut.style.verticalAlign = makeEm(-htmlNode.depth);
	    }
	  }

	  return htmlNode;
	}

	/**
	 * These objects store data about MathML nodes. This is the MathML equivalent
	 * of the types in domTree.js. Since MathML handles its own rendering, and
	 * since we're mainly using MathML to improve accessibility, we don't manage
	 * any of the styling state that the plain DOM nodes do.
	 *
	 * The `toNode` and `toMarkup` functions work simlarly to how they do in
	 * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
	 */
	function newDocumentFragment(children) {
	  return new DocumentFragment(children);
	}
	/**
	 * This node represents a general purpose MathML node of any type. The
	 * constructor requires the type of node to create (for example, `"mo"` or
	 * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
	 */

	class MathNode {
	  constructor(type, children, classes) {
	    this.type = void 0;
	    this.attributes = void 0;
	    this.children = void 0;
	    this.classes = void 0;
	    this.type = type;
	    this.attributes = {};
	    this.children = children || [];
	    this.classes = classes || [];
	  }
	  /**
	   * Sets an attribute on a MathML node. MathML depends on attributes to convey a
	   * semantic content, so this is used heavily.
	   */


	  setAttribute(name, value) {
	    this.attributes[name] = value;
	  }
	  /**
	   * Gets an attribute on a MathML node.
	   */


	  getAttribute(name) {
	    return this.attributes[name];
	  }
	  /**
	   * Converts the math node into a MathML-namespaced DOM element.
	   */


	  toNode() {
	    var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        node.setAttribute(attr, this.attributes[attr]);
	      }
	    }

	    if (this.classes.length > 0) {
	      node.className = createClass(this.classes);
	    }

	    for (var i = 0; i < this.children.length; i++) {
	      node.appendChild(this.children[i].toNode());
	    }

	    return node;
	  }
	  /**
	   * Converts the math node into an HTML markup string.
	   */


	  toMarkup() {
	    var markup = "<" + this.type; // Add the attributes

	    for (var attr in this.attributes) {
	      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
	        markup += " " + attr + "=\"";
	        markup += utils.escape(this.attributes[attr]);
	        markup += "\"";
	      }
	    }

	    if (this.classes.length > 0) {
	      markup += " class =\"" + utils.escape(createClass(this.classes)) + "\"";
	    }

	    markup += ">";

	    for (var i = 0; i < this.children.length; i++) {
	      markup += this.children[i].toMarkup();
	    }

	    markup += "</" + this.type + ">";
	    return markup;
	  }
	  /**
	   * Converts the math node into a string, similar to innerText, but escaped.
	   */


	  toText() {
	    return this.children.map(child => child.toText()).join("");
	  }

	}
	/**
	 * This node represents a piece of text.
	 */

	class TextNode {
	  constructor(text) {
	    this.text = void 0;
	    this.text = text;
	  }
	  /**
	   * Converts the text node into a DOM text node.
	   */


	  toNode() {
	    return document.createTextNode(this.text);
	  }
	  /**
	   * Converts the text node into escaped HTML markup
	   * (representing the text itself).
	   */


	  toMarkup() {
	    return utils.escape(this.toText());
	  }
	  /**
	   * Converts the text node into a string
	   * (representing the text iteself).
	   */


	  toText() {
	    return this.text;
	  }

	}
	/**
	 * This node represents a space, but may render as <mspace.../> or as text,
	 * depending on the width.
	 */

	class SpaceNode {
	  /**
	   * Create a Space node with width given in CSS ems.
	   */
	  constructor(width) {
	    this.width = void 0;
	    this.character = void 0;
	    this.width = width; // See https://www.w3.org/TR/2000/WD-MathML2-20000328/chapter6.html
	    // for a table of space-like characters.  We use Unicode
	    // representations instead of &LongNames; as it's not clear how to
	    // make the latter via document.createTextNode.

	    if (width >= 0.05555 && width <= 0.05556) {
	      this.character = "\u200a"; // &VeryThinSpace;
	    } else if (width >= 0.1666 && width <= 0.1667) {
	      this.character = "\u2009"; // &ThinSpace;
	    } else if (width >= 0.2222 && width <= 0.2223) {
	      this.character = "\u2005"; // &MediumSpace;
	    } else if (width >= 0.2777 && width <= 0.2778) {
	      this.character = "\u2005\u200a"; // &ThickSpace;
	    } else if (width >= -0.05556 && width <= -0.05555) {
	      this.character = "\u200a\u2063"; // &NegativeVeryThinSpace;
	    } else if (width >= -0.1667 && width <= -0.1666) {
	      this.character = "\u2009\u2063"; // &NegativeThinSpace;
	    } else if (width >= -0.2223 && width <= -0.2222) {
	      this.character = "\u205f\u2063"; // &NegativeMediumSpace;
	    } else if (width >= -0.2778 && width <= -0.2777) {
	      this.character = "\u2005\u2063"; // &NegativeThickSpace;
	    } else {
	      this.character = null;
	    }
	  }
	  /**
	   * Converts the math node into a MathML-namespaced DOM element.
	   */


	  toNode() {
	    if (this.character) {
	      return document.createTextNode(this.character);
	    } else {
	      var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mspace");
	      node.setAttribute("width", makeEm(this.width));
	      return node;
	    }
	  }
	  /**
	   * Converts the math node into an HTML markup string.
	   */


	  toMarkup() {
	    if (this.character) {
	      return "<mtext>" + this.character + "</mtext>";
	    } else {
	      return "<mspace width=\"" + makeEm(this.width) + "\"/>";
	    }
	  }
	  /**
	   * Converts the math node into a string, similar to innerText.
	   */


	  toText() {
	    if (this.character) {
	      return this.character;
	    } else {
	      return " ";
	    }
	  }

	}

	var mathMLTree = {
	  MathNode,
	  TextNode,
	  SpaceNode,
	  newDocumentFragment
	};

	/**
	 * This file converts a parse tree into a cooresponding MathML tree. The main
	 * entry point is the `buildMathML` function, which takes a parse tree from the
	 * parser.
	 */

	/**
	 * Takes a symbol and converts it into a MathML text node after performing
	 * optional replacement from symbols.js.
	 */
	var makeText = function makeText(text, mode, options) {
	  if (symbols[mode][text] && symbols[mode][text].replace && text.charCodeAt(0) !== 0xD835 && !(ligatures.hasOwnProperty(text) && options && (options.fontFamily && options.fontFamily.substr(4, 2) === "tt" || options.font && options.font.substr(4, 2) === "tt"))) {
	    text = symbols[mode][text].replace;
	  }

	  return new mathMLTree.TextNode(text);
	};
	/**
	 * Wrap the given array of nodes in an <mrow> node if needed, i.e.,
	 * unless the array has length 1.  Always returns a single node.
	 */

	var makeRow = function makeRow(body) {
	  if (body.length === 1) {
	    return body[0];
	  } else {
	    return new mathMLTree.MathNode("mrow", body);
	  }
	};
	/**
	 * Returns the math variant as a string or null if none is required.
	 */

	var getVariant = function getVariant(group, options) {
	  // Handle \text... font specifiers as best we can.
	  // MathML has a limited list of allowable mathvariant specifiers; see
	  // https://www.w3.org/TR/MathML3/chapter3.html#presm.commatt
	  if (options.fontFamily === "texttt") {
	    return "monospace";
	  } else if (options.fontFamily === "textsf") {
	    if (options.fontShape === "textit" && options.fontWeight === "textbf") {
	      return "sans-serif-bold-italic";
	    } else if (options.fontShape === "textit") {
	      return "sans-serif-italic";
	    } else if (options.fontWeight === "textbf") {
	      return "bold-sans-serif";
	    } else {
	      return "sans-serif";
	    }
	  } else if (options.fontShape === "textit" && options.fontWeight === "textbf") {
	    return "bold-italic";
	  } else if (options.fontShape === "textit") {
	    return "italic";
	  } else if (options.fontWeight === "textbf") {
	    return "bold";
	  }

	  var font = options.font;

	  if (!font || font === "mathnormal") {
	    return null;
	  }

	  var mode = group.mode;

	  if (font === "mathit") {
	    return "italic";
	  } else if (font === "boldsymbol") {
	    return group.type === "textord" ? "bold" : "bold-italic";
	  } else if (font === "mathbf") {
	    return "bold";
	  } else if (font === "mathbb") {
	    return "double-struck";
	  } else if (font === "mathfrak") {
	    return "fraktur";
	  } else if (font === "mathscr" || font === "mathcal") {
	    // MathML makes no distinction between script and caligrahpic
	    return "script";
	  } else if (font === "mathsf") {
	    return "sans-serif";
	  } else if (font === "mathtt") {
	    return "monospace";
	  }

	  var text = group.text;

	  if (utils.contains(["\\imath", "\\jmath"], text)) {
	    return null;
	  }

	  if (symbols[mode][text] && symbols[mode][text].replace) {
	    text = symbols[mode][text].replace;
	  }

	  var fontName = buildCommon.fontMap[font].fontName;

	  if (getCharacterMetrics(text, fontName, mode)) {
	    return buildCommon.fontMap[font].variant;
	  }

	  return null;
	};
	/**
	 * Takes a list of nodes, builds them, and returns a list of the generated
	 * MathML nodes.  Also combine consecutive <mtext> outputs into a single
	 * <mtext> tag.
	 */

	var buildExpression = function buildExpression(expression, options, isOrdgroup) {
	  if (expression.length === 1) {
	    var group = buildGroup(expression[0], options);

	    if (isOrdgroup && group instanceof MathNode && group.type === "mo") {
	      // When TeX writers want to suppress spacing on an operator,
	      // they often put the operator by itself inside braces.
	      group.setAttribute("lspace", "0em");
	      group.setAttribute("rspace", "0em");
	    }

	    return [group];
	  }

	  var groups = [];
	  var lastGroup;

	  for (var i = 0; i < expression.length; i++) {
	    var _group = buildGroup(expression[i], options);

	    if (_group instanceof MathNode && lastGroup instanceof MathNode) {
	      // Concatenate adjacent <mtext>s
	      if (_group.type === 'mtext' && lastGroup.type === 'mtext' && _group.getAttribute('mathvariant') === lastGroup.getAttribute('mathvariant')) {
	        lastGroup.children.push(..._group.children);
	        continue; // Concatenate adjacent <mn>s
	      } else if (_group.type === 'mn' && lastGroup.type === 'mn') {
	        lastGroup.children.push(..._group.children);
	        continue; // Concatenate <mn>...</mn> followed by <mi>.</mi>
	      } else if (_group.type === 'mi' && _group.children.length === 1 && lastGroup.type === 'mn') {
	        var child = _group.children[0];

	        if (child instanceof TextNode && child.text === '.') {
	          lastGroup.children.push(..._group.children);
	          continue;
	        }
	      } else if (lastGroup.type === 'mi' && lastGroup.children.length === 1) {
	        var lastChild = lastGroup.children[0];

	        if (lastChild instanceof TextNode && lastChild.text === '\u0338' && (_group.type === 'mo' || _group.type === 'mi' || _group.type === 'mn')) {
	          var _child = _group.children[0];

	          if (_child instanceof TextNode && _child.text.length > 0) {
	            // Overlay with combining character long solidus
	            _child.text = _child.text.slice(0, 1) + "\u0338" + _child.text.slice(1);
	            groups.pop();
	          }
	        }
	      }
	    }

	    groups.push(_group);
	    lastGroup = _group;
	  }

	  return groups;
	};
	/**
	 * Equivalent to buildExpression, but wraps the elements in an <mrow>
	 * if there's more than one.  Returns a single node instead of an array.
	 */

	var buildExpressionRow = function buildExpressionRow(expression, options, isOrdgroup) {
	  return makeRow(buildExpression(expression, options, isOrdgroup));
	};
	/**
	 * Takes a group from the parser and calls the appropriate groupBuilders function
	 * on it to produce a MathML node.
	 */

	var buildGroup = function buildGroup(group, options) {
	  if (!group) {
	    return new mathMLTree.MathNode("mrow");
	  }

	  if (_mathmlGroupBuilders[group.type]) {
	    // Call the groupBuilders function
	    // $FlowFixMe
	    var result = _mathmlGroupBuilders[group.type](group, options); // $FlowFixMe

	    return result;
	  } else {
	    throw new ParseError("Got group of unknown type: '" + group.type + "'");
	  }
	};
	/**
	 * Takes a full parse tree and settings and builds a MathML representation of
	 * it. In particular, we put the elements from building the parse tree into a
	 * <semantics> tag so we can also include that TeX source as an annotation.
	 *
	 * Note that we actually return a domTree element with a `<math>` inside it so
	 * we can do appropriate styling.
	 */

	function buildMathML(tree, texExpression, options, isDisplayMode, forMathmlOnly) {
	  var expression = buildExpression(tree, options); // TODO: Make a pass thru the MathML similar to buildHTML.traverseNonSpaceNodes
	  // and add spacing nodes. This is necessary only adjacent to math operators
	  // like \sin or \lim or to subsup elements that contain math operators.
	  // MathML takes care of the other spacing issues.
	  // Wrap up the expression in an mrow so it is presented in the semantics
	  // tag correctly, unless it's a single <mrow> or <mtable>.

	  var wrapper;

	  if (expression.length === 1 && expression[0] instanceof MathNode && utils.contains(["mrow", "mtable"], expression[0].type)) {
	    wrapper = expression[0];
	  } else {
	    wrapper = new mathMLTree.MathNode("mrow", expression);
	  } // Build a TeX annotation of the source


	  var annotation = new mathMLTree.MathNode("annotation", [new mathMLTree.TextNode(texExpression)]);
	  annotation.setAttribute("encoding", "application/x-tex");
	  var semantics = new mathMLTree.MathNode("semantics", [wrapper, annotation]);
	  var math = new mathMLTree.MathNode("math", [semantics]);
	  math.setAttribute("xmlns", "http://www.w3.org/1998/Math/MathML");

	  if (isDisplayMode) {
	    math.setAttribute("display", "block");
	  } // You can't style <math> nodes, so we wrap the node in a span.
	  // NOTE: The span class is not typed to have <math> nodes as children, and
	  // we don't want to make the children type more generic since the children
	  // of span are expected to have more fields in `buildHtml` contexts.


	  var wrapperClass = forMathmlOnly ? "katex" : "katex-mathml"; // $FlowFixMe

	  return buildCommon.makeSpan([wrapperClass], [math]);
	}

	var optionsFromSettings = function optionsFromSettings(settings) {
	  return new Options({
	    style: settings.displayMode ? Style$1.DISPLAY : Style$1.TEXT,
	    maxSize: settings.maxSize,
	    minRuleThickness: settings.minRuleThickness
	  });
	};

	var displayWrap = function displayWrap(node, settings) {
	  if (settings.displayMode) {
	    var classes = ["katex-display"];

	    if (settings.leqno) {
	      classes.push("leqno");
	    }

	    if (settings.fleqn) {
	      classes.push("fleqn");
	    }

	    node = buildCommon.makeSpan(classes, [node]);
	  }

	  return node;
	};

	var buildTree = function buildTree(tree, expression, settings) {
	  var options = optionsFromSettings(settings);
	  var katexNode;

	  if (settings.output === "mathml") {
	    return buildMathML(tree, expression, options, settings.displayMode, true);
	  } else if (settings.output === "html") {
	    var htmlNode = buildHTML(tree, options);
	    katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
	  } else {
	    var mathMLNode = buildMathML(tree, expression, options, settings.displayMode, false);

	    var _htmlNode = buildHTML(tree, options);

	    katexNode = buildCommon.makeSpan(["katex"], [mathMLNode, _htmlNode]);
	  }

	  return displayWrap(katexNode, settings);
	};
	var buildHTMLTree = function buildHTMLTree(tree, expression, settings) {
	  var options = optionsFromSettings(settings);
	  var htmlNode = buildHTML(tree, options);
	  var katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
	  return displayWrap(katexNode, settings);
	};

	/**
	 * This file provides support to buildMathML.js and buildHTML.js
	 * for stretchy wide elements rendered from SVG files
	 * and other CSS trickery.
	 */
	var stretchyCodePoint = {
	  widehat: "^",
	  widecheck: "ˇ",
	  widetilde: "~",
	  utilde: "~",
	  overleftarrow: "\u2190",
	  underleftarrow: "\u2190",
	  xleftarrow: "\u2190",
	  overrightarrow: "\u2192",
	  underrightarrow: "\u2192",
	  xrightarrow: "\u2192",
	  underbrace: "\u23df",
	  overbrace: "\u23de",
	  overgroup: "\u23e0",
	  undergroup: "\u23e1",
	  overleftrightarrow: "\u2194",
	  underleftrightarrow: "\u2194",
	  xleftrightarrow: "\u2194",
	  Overrightarrow: "\u21d2",
	  xRightarrow: "\u21d2",
	  overleftharpoon: "\u21bc",
	  xleftharpoonup: "\u21bc",
	  overrightharpoon: "\u21c0",
	  xrightharpoonup: "\u21c0",
	  xLeftarrow: "\u21d0",
	  xLeftrightarrow: "\u21d4",
	  xhookleftarrow: "\u21a9",
	  xhookrightarrow: "\u21aa",
	  xmapsto: "\u21a6",
	  xrightharpoondown: "\u21c1",
	  xleftharpoondown: "\u21bd",
	  xrightleftharpoons: "\u21cc",
	  xleftrightharpoons: "\u21cb",
	  xtwoheadleftarrow: "\u219e",
	  xtwoheadrightarrow: "\u21a0",
	  xlongequal: "=",
	  xtofrom: "\u21c4",
	  xrightleftarrows: "\u21c4",
	  xrightequilibrium: "\u21cc",
	  // Not a perfect match.
	  xleftequilibrium: "\u21cb",
	  // None better available.
	  "\\cdrightarrow": "\u2192",
	  "\\cdleftarrow": "\u2190",
	  "\\cdlongequal": "="
	};

	var mathMLnode = function mathMLnode(label) {
	  var node = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(stretchyCodePoint[label.replace(/^\\/, '')])]);
	  node.setAttribute("stretchy", "true");
	  return node;
	}; // Many of the KaTeX SVG images have been adapted from glyphs in KaTeX fonts.
	// Copyright (c) 2009-2010, Design Science, Inc. (<www.mathjax.org>)
	// Copyright (c) 2014-2017 Khan Academy (<www.khanacademy.org>)
	// Licensed under the SIL Open Font License, Version 1.1.
	// See \nhttp://scripts.sil.org/OFL
	// Very Long SVGs
	//    Many of the KaTeX stretchy wide elements use a long SVG image and an
	//    overflow: hidden tactic to achieve a stretchy image while avoiding
	//    distortion of arrowheads or brace corners.
	//    The SVG typically contains a very long (400 em) arrow.
	//    The SVG is in a container span that has overflow: hidden, so the span
	//    acts like a window that exposes only part of the  SVG.
	//    The SVG always has a longer, thinner aspect ratio than the container span.
	//    After the SVG fills 100% of the height of the container span,
	//    there is a long arrow shaft left over. That left-over shaft is not shown.
	//    Instead, it is sliced off because the span's CSS has overflow: hidden.
	//    Thus, the reader sees an arrow that matches the subject matter width
	//    without distortion.
	//    Some functions, such as \cancel, need to vary their aspect ratio. These
	//    functions do not get the overflow SVG treatment.
	// Second Brush Stroke
	//    Low resolution monitors struggle to display images in fine detail.
	//    So browsers apply anti-aliasing. A long straight arrow shaft therefore
	//    will sometimes appear as if it has a blurred edge.
	//    To mitigate this, these SVG files contain a second "brush-stroke" on the
	//    arrow shafts. That is, a second long thin rectangular SVG path has been
	//    written directly on top of each arrow shaft. This reinforcement causes
	//    some of the screen pixels to display as black instead of the anti-aliased
	//    gray pixel that a  single path would generate. So we get arrow shafts
	//    whose edges appear to be sharper.
	// In the katexImagesData object just below, the dimensions all
	// correspond to path geometry inside the relevant SVG.
	// For example, \overrightarrow uses the same arrowhead as glyph U+2192
	// from the KaTeX Main font. The scaling factor is 1000.
	// That is, inside the font, that arrowhead is 522 units tall, which
	// corresponds to 0.522 em inside the document.


	var katexImagesData = {
	  //   path(s), minWidth, height, align
	  overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
	  overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
	  underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
	  underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
	  xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
	  "\\cdrightarrow": [["rightarrow"], 3.0, 522, "xMaxYMin"],
	  // CD minwwidth2.5pc
	  xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
	  "\\cdleftarrow": [["leftarrow"], 3.0, 522, "xMinYMin"],
	  Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
	  xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
	  xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
	  overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
	  xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
	  xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
	  overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
	  xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
	  xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
	  xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
	  "\\cdlongequal": [["longequal"], 3.0, 334, "xMinYMin"],
	  xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
	  xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
	  overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
	  overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
	  underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
	  underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
	  xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
	  xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
	  xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
	  xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
	  xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
	  xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
	  overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
	  underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
	  overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
	  undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
	  xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
	  xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
	  // The next three arrows are from the mhchem package.
	  // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
	  // document as \xrightarrow or \xrightleftharpoons. Those have
	  // min-length = 1.75em, so we set min-length on these next three to match.
	  xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 901],
	  xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
	  xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
	};

	var groupLength = function groupLength(arg) {
	  if (arg.type === "ordgroup") {
	    return arg.body.length;
	  } else {
	    return 1;
	  }
	};

	var svgSpan = function svgSpan(group, options) {
	  // Create a span with inline SVG for the element.
	  function buildSvgSpan_() {
	    var viewBoxWidth = 400000; // default

	    var label = group.label.substr(1);

	    if (utils.contains(["widehat", "widecheck", "widetilde", "utilde"], label)) {
	      // Each type in the `if` statement corresponds to one of the ParseNode
	      // types below. This narrowing is required to access `grp.base`.
	      // $FlowFixMe
	      var grp = group; // There are four SVG images available for each function.
	      // Choose a taller image when there are more characters.

	      var numChars = groupLength(grp.base);
	      var viewBoxHeight;
	      var pathName;

	      var _height;

	      if (numChars > 5) {
	        if (label === "widehat" || label === "widecheck") {
	          viewBoxHeight = 420;
	          viewBoxWidth = 2364;
	          _height = 0.42;
	          pathName = label + "4";
	        } else {
	          viewBoxHeight = 312;
	          viewBoxWidth = 2340;
	          _height = 0.34;
	          pathName = "tilde4";
	        }
	      } else {
	        var imgIndex = [1, 1, 2, 2, 3, 3][numChars];

	        if (label === "widehat" || label === "widecheck") {
	          viewBoxWidth = [0, 1062, 2364, 2364, 2364][imgIndex];
	          viewBoxHeight = [0, 239, 300, 360, 420][imgIndex];
	          _height = [0, 0.24, 0.3, 0.3, 0.36, 0.42][imgIndex];
	          pathName = label + imgIndex;
	        } else {
	          viewBoxWidth = [0, 600, 1033, 2339, 2340][imgIndex];
	          viewBoxHeight = [0, 260, 286, 306, 312][imgIndex];
	          _height = [0, 0.26, 0.286, 0.3, 0.306, 0.34][imgIndex];
	          pathName = "tilde" + imgIndex;
	        }
	      }

	      var path = new PathNode(pathName);
	      var svgNode = new SvgNode([path], {
	        "width": "100%",
	        "height": makeEm(_height),
	        "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight,
	        "preserveAspectRatio": "none"
	      });
	      return {
	        span: buildCommon.makeSvgSpan([], [svgNode], options),
	        minWidth: 0,
	        height: _height
	      };
	    } else {
	      var spans = [];
	      var data = katexImagesData[label];
	      var [paths, _minWidth, _viewBoxHeight] = data;

	      var _height2 = _viewBoxHeight / 1000;

	      var numSvgChildren = paths.length;
	      var widthClasses;
	      var aligns;

	      if (numSvgChildren === 1) {
	        // $FlowFixMe: All these cases must be of the 4-tuple type.
	        var align1 = data[3];
	        widthClasses = ["hide-tail"];
	        aligns = [align1];
	      } else if (numSvgChildren === 2) {
	        widthClasses = ["halfarrow-left", "halfarrow-right"];
	        aligns = ["xMinYMin", "xMaxYMin"];
	      } else if (numSvgChildren === 3) {
	        widthClasses = ["brace-left", "brace-center", "brace-right"];
	        aligns = ["xMinYMin", "xMidYMin", "xMaxYMin"];
	      } else {
	        throw new Error("Correct katexImagesData or update code here to support\n                    " + numSvgChildren + " children.");
	      }

	      for (var i = 0; i < numSvgChildren; i++) {
	        var _path = new PathNode(paths[i]);

	        var _svgNode = new SvgNode([_path], {
	          "width": "400em",
	          "height": makeEm(_height2),
	          "viewBox": "0 0 " + viewBoxWidth + " " + _viewBoxHeight,
	          "preserveAspectRatio": aligns[i] + " slice"
	        });

	        var _span = buildCommon.makeSvgSpan([widthClasses[i]], [_svgNode], options);

	        if (numSvgChildren === 1) {
	          return {
	            span: _span,
	            minWidth: _minWidth,
	            height: _height2
	          };
	        } else {
	          _span.style.height = makeEm(_height2);
	          spans.push(_span);
	        }
	      }

	      return {
	        span: buildCommon.makeSpan(["stretchy"], spans, options),
	        minWidth: _minWidth,
	        height: _height2
	      };
	    }
	  } // buildSvgSpan_()


	  var {
	    span,
	    minWidth,
	    height
	  } = buildSvgSpan_(); // Note that we are returning span.depth = 0.
	  // Any adjustments relative to the baseline must be done in buildHTML.

	  span.height = height;
	  span.style.height = makeEm(height);

	  if (minWidth > 0) {
	    span.style.minWidth = makeEm(minWidth);
	  }

	  return span;
	};

	var encloseSpan = function encloseSpan(inner, label, topPad, bottomPad, options) {
	  // Return an image span for \cancel, \bcancel, \xcancel, \fbox, or \angl
	  var img;
	  var totalHeight = inner.height + inner.depth + topPad + bottomPad;

	  if (/fbox|color|angl/.test(label)) {
	    img = buildCommon.makeSpan(["stretchy", label], [], options);

	    if (label === "fbox") {
	      var color = options.color && options.getColor();

	      if (color) {
	        img.style.borderColor = color;
	      }
	    }
	  } else {
	    // \cancel, \bcancel, or \xcancel
	    // Since \cancel's SVG is inline and it omits the viewBox attribute,
	    // its stroke-width will not vary with span area.
	    var lines = [];

	    if (/^[bx]cancel$/.test(label)) {
	      lines.push(new LineNode({
	        "x1": "0",
	        "y1": "0",
	        "x2": "100%",
	        "y2": "100%",
	        "stroke-width": "0.046em"
	      }));
	    }

	    if (/^x?cancel$/.test(label)) {
	      lines.push(new LineNode({
	        "x1": "0",
	        "y1": "100%",
	        "x2": "100%",
	        "y2": "0",
	        "stroke-width": "0.046em"
	      }));
	    }

	    var svgNode = new SvgNode(lines, {
	      "width": "100%",
	      "height": makeEm(totalHeight)
	    });
	    img = buildCommon.makeSvgSpan([], [svgNode], options);
	  }

	  img.height = totalHeight;
	  img.style.height = makeEm(totalHeight);
	  return img;
	};

	var stretchy = {
	  encloseSpan,
	  mathMLnode,
	  svgSpan
	};

	/**
	 * Asserts that the node is of the given type and returns it with stricter
	 * typing. Throws if the node's type does not match.
	 */
	function assertNodeType(node, type) {
	  if (!node || node.type !== type) {
	    throw new Error("Expected node of type " + type + ", but got " + (node ? "node of type " + node.type : String(node)));
	  } // $FlowFixMe, >=0.125


	  return node;
	}
	/**
	 * Returns the node more strictly typed iff it is of the given type. Otherwise,
	 * returns null.
	 */

	function assertSymbolNodeType(node) {
	  var typedNode = checkSymbolNodeType(node);

	  if (!typedNode) {
	    throw new Error("Expected node of symbol group type, but got " + (node ? "node of type " + node.type : String(node)));
	  }

	  return typedNode;
	}
	/**
	 * Returns the node more strictly typed iff it is of the given type. Otherwise,
	 * returns null.
	 */

	function checkSymbolNodeType(node) {
	  if (node && (node.type === "atom" || NON_ATOMS.hasOwnProperty(node.type))) {
	    // $FlowFixMe
	    return node;
	  }

	  return null;
	}

	// NOTE: Unlike most `htmlBuilder`s, this one handles not only "accent", but
	// also "supsub" since an accent can affect super/subscripting.
	var htmlBuilder$a = (grp, options) => {
	  // Accents are handled in the TeXbook pg. 443, rule 12.
	  var base;
	  var group;
	  var supSubGroup;

	  if (grp && grp.type === "supsub") {
	    // If our base is a character box, and we have superscripts and
	    // subscripts, the supsub will defer to us. In particular, we want
	    // to attach the superscripts and subscripts to the inner body (so
	    // that the position of the superscripts and subscripts won't be
	    // affected by the height of the accent). We accomplish this by
	    // sticking the base of the accent into the base of the supsub, and
	    // rendering that, while keeping track of where the accent is.
	    // The real accent group is the base of the supsub group
	    group = assertNodeType(grp.base, "accent"); // The character box is the base of the accent group

	    base = group.base; // Stick the character box into the base of the supsub group

	    grp.base = base; // Rerender the supsub group with its new base, and store that
	    // result.

	    supSubGroup = assertSpan(buildGroup$1(grp, options)); // reset original base

	    grp.base = group;
	  } else {
	    group = assertNodeType(grp, "accent");
	    base = group.base;
	  } // Build the base group


	  var body = buildGroup$1(base, options.havingCrampedStyle()); // Does the accent need to shift for the skew of a character?

	  var mustShift = group.isShifty && utils.isCharacterBox(base); // Calculate the skew of the accent. This is based on the line "If the
	  // nucleus is not a single character, let s = 0; otherwise set s to the
	  // kern amount for the nucleus followed by the \skewchar of its font."
	  // Note that our skew metrics are just the kern between each character
	  // and the skewchar.

	  var skew = 0;

	  if (mustShift) {
	    // If the base is a character box, then we want the skew of the
	    // innermost character. To do that, we find the innermost character:
	    var baseChar = utils.getBaseElem(base); // Then, we render its group to get the symbol inside it

	    var baseGroup = buildGroup$1(baseChar, options.havingCrampedStyle()); // Finally, we pull the skew off of the symbol.

	    skew = assertSymbolDomNode(baseGroup).skew; // Note that we now throw away baseGroup, because the layers we
	    // removed with getBaseElem might contain things like \color which
	    // we can't get rid of.
	    // TODO(emily): Find a better way to get the skew
	  }

	  var accentBelow = group.label === "\\c"; // calculate the amount of space between the body and the accent

	  var clearance = accentBelow ? body.height + body.depth : Math.min(body.height, options.fontMetrics().xHeight); // Build the accent

	  var accentBody;

	  if (!group.isStretchy) {
	    var accent;
	    var width;

	    if (group.label === "\\vec") {
	      // Before version 0.9, \vec used the combining font glyph U+20D7.
	      // But browsers, especially Safari, are not consistent in how they
	      // render combining characters when not preceded by a character.
	      // So now we use an SVG.
	      // If Safari reforms, we should consider reverting to the glyph.
	      accent = buildCommon.staticSvg("vec", options);
	      width = buildCommon.svgData.vec[1];
	    } else {
	      accent = buildCommon.makeOrd({
	        mode: group.mode,
	        text: group.label
	      }, options, "textord");
	      accent = assertSymbolDomNode(accent); // Remove the italic correction of the accent, because it only serves to
	      // shift the accent over to a place we don't want.

	      accent.italic = 0;
	      width = accent.width;

	      if (accentBelow) {
	        clearance += accent.depth;
	      }
	    }

	    accentBody = buildCommon.makeSpan(["accent-body"], [accent]); // "Full" accents expand the width of the resulting symbol to be
	    // at least the width of the accent, and overlap directly onto the
	    // character without any vertical offset.

	    var accentFull = group.label === "\\textcircled";

	    if (accentFull) {
	      accentBody.classes.push('accent-full');
	      clearance = body.height;
	    } // Shift the accent over by the skew.


	    var left = skew; // CSS defines `.katex .accent .accent-body:not(.accent-full) { width: 0 }`
	    // so that the accent doesn't contribute to the bounding box.
	    // We need to shift the character by its width (effectively half
	    // its width) to compensate.

	    if (!accentFull) {
	      left -= width / 2;
	    }

	    accentBody.style.left = makeEm(left); // \textcircled uses the \bigcirc glyph, so it needs some
	    // vertical adjustment to match LaTeX.

	    if (group.label === "\\textcircled") {
	      accentBody.style.top = ".2em";
	    }

	    accentBody = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: body
	      }, {
	        type: "kern",
	        size: -clearance
	      }, {
	        type: "elem",
	        elem: accentBody
	      }]
	    }, options);
	  } else {
	    accentBody = stretchy.svgSpan(group, options);
	    accentBody = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: body
	      }, {
	        type: "elem",
	        elem: accentBody,
	        wrapperClasses: ["svg-align"],
	        wrapperStyle: skew > 0 ? {
	          width: "calc(100% - " + makeEm(2 * skew) + ")",
	          marginLeft: makeEm(2 * skew)
	        } : undefined
	      }]
	    }, options);
	  }

	  var accentWrap = buildCommon.makeSpan(["mord", "accent"], [accentBody], options);

	  if (supSubGroup) {
	    // Here, we replace the "base" child of the supsub with our newly
	    // generated accent.
	    supSubGroup.children[0] = accentWrap; // Since we don't rerun the height calculation after replacing the
	    // accent, we manually recalculate height.

	    supSubGroup.height = Math.max(accentWrap.height, supSubGroup.height); // Accents should always be ords, even when their innards are not.

	    supSubGroup.classes[0] = "mord";
	    return supSubGroup;
	  } else {
	    return accentWrap;
	  }
	};

	var mathmlBuilder$9 = (group, options) => {
	  var accentNode = group.isStretchy ? stretchy.mathMLnode(group.label) : new mathMLTree.MathNode("mo", [makeText(group.label, group.mode)]);
	  var node = new mathMLTree.MathNode("mover", [buildGroup(group.base, options), accentNode]);
	  node.setAttribute("accent", "true");
	  return node;
	};

	var NON_STRETCHY_ACCENT_REGEX = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map(accent => "\\" + accent).join("|")); // Accents

	defineFunction({
	  type: "accent",
	  names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widecheck", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
	  props: {
	    numArgs: 1
	  },
	  handler: (context, args) => {
	    var base = normalizeArgument(args[0]);
	    var isStretchy = !NON_STRETCHY_ACCENT_REGEX.test(context.funcName);
	    var isShifty = !isStretchy || context.funcName === "\\widehat" || context.funcName === "\\widetilde" || context.funcName === "\\widecheck";
	    return {
	      type: "accent",
	      mode: context.parser.mode,
	      label: context.funcName,
	      isStretchy: isStretchy,
	      isShifty: isShifty,
	      base: base
	    };
	  },
	  htmlBuilder: htmlBuilder$a,
	  mathmlBuilder: mathmlBuilder$9
	}); // Text-mode accents

	defineFunction({
	  type: "accent",
	  names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\c", "\\r", "\\H", "\\v", "\\textcircled"],
	  props: {
	    numArgs: 1,
	    allowedInText: true,
	    allowedInMath: true,
	    // unless in strict mode
	    argTypes: ["primitive"]
	  },
	  handler: (context, args) => {
	    var base = args[0];
	    var mode = context.parser.mode;

	    if (mode === "math") {
	      context.parser.settings.reportNonstrict("mathVsTextAccents", "LaTeX's accent " + context.funcName + " works only in text mode");
	      mode = "text";
	    }

	    return {
	      type: "accent",
	      mode: mode,
	      label: context.funcName,
	      isStretchy: false,
	      isShifty: true,
	      base: base
	    };
	  },
	  htmlBuilder: htmlBuilder$a,
	  mathmlBuilder: mathmlBuilder$9
	});

	// Horizontal overlap functions
	defineFunction({
	  type: "accentUnder",
	  names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
	  props: {
	    numArgs: 1
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var base = args[0];
	    return {
	      type: "accentUnder",
	      mode: parser.mode,
	      label: funcName,
	      base: base
	    };
	  },
	  htmlBuilder: (group, options) => {
	    // Treat under accents much like underlines.
	    var innerGroup = buildGroup$1(group.base, options);
	    var accentBody = stretchy.svgSpan(group, options);
	    var kern = group.label === "\\utilde" ? 0.12 : 0; // Generate the vlist, with the appropriate kerns

	    var vlist = buildCommon.makeVList({
	      positionType: "top",
	      positionData: innerGroup.height,
	      children: [{
	        type: "elem",
	        elem: accentBody,
	        wrapperClasses: ["svg-align"]
	      }, {
	        type: "kern",
	        size: kern
	      }, {
	        type: "elem",
	        elem: innerGroup
	      }]
	    }, options);
	    return buildCommon.makeSpan(["mord", "accentunder"], [vlist], options);
	  },
	  mathmlBuilder: (group, options) => {
	    var accentNode = stretchy.mathMLnode(group.label);
	    var node = new mathMLTree.MathNode("munder", [buildGroup(group.base, options), accentNode]);
	    node.setAttribute("accentunder", "true");
	    return node;
	  }
	});

	// Helper function
	var paddedNode = group => {
	  var node = new mathMLTree.MathNode("mpadded", group ? [group] : []);
	  node.setAttribute("width", "+0.6em");
	  node.setAttribute("lspace", "0.3em");
	  return node;
	}; // Stretchy arrows with an optional argument


	defineFunction({
	  type: "xArrow",
	  names: ["\\xleftarrow", "\\xrightarrow", "\\xLeftarrow", "\\xRightarrow", "\\xleftrightarrow", "\\xLeftrightarrow", "\\xhookleftarrow", "\\xhookrightarrow", "\\xmapsto", "\\xrightharpoondown", "\\xrightharpoonup", "\\xleftharpoondown", "\\xleftharpoonup", "\\xrightleftharpoons", "\\xleftrightharpoons", "\\xlongequal", "\\xtwoheadrightarrow", "\\xtwoheadleftarrow", "\\xtofrom", // The next 3 functions are here to support the mhchem extension.
	  // Direct use of these functions is discouraged and may break someday.
	  "\\xrightleftarrows", "\\xrightequilibrium", "\\xleftequilibrium", // The next 3 functions are here only to support the {CD} environment.
	  "\\\\cdrightarrow", "\\\\cdleftarrow", "\\\\cdlongequal"],
	  props: {
	    numArgs: 1,
	    numOptionalArgs: 1
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    return {
	      type: "xArrow",
	      mode: parser.mode,
	      label: funcName,
	      body: args[0],
	      below: optArgs[0]
	    };
	  },

	  // Flow is unable to correctly infer the type of `group`, even though it's
	  // unamibiguously determined from the passed-in `type` above.
	  htmlBuilder(group, options) {
	    var style = options.style; // Build the argument groups in the appropriate style.
	    // Ref: amsmath.dtx:   \hbox{$\scriptstyle\mkern#3mu{#6}\mkern#4mu$}%
	    // Some groups can return document fragments.  Handle those by wrapping
	    // them in a span.

	    var newOptions = options.havingStyle(style.sup());
	    var upperGroup = buildCommon.wrapFragment(buildGroup$1(group.body, newOptions, options), options);
	    var arrowPrefix = group.label.slice(0, 2) === "\\x" ? "x" : "cd";
	    upperGroup.classes.push(arrowPrefix + "-arrow-pad");
	    var lowerGroup;

	    if (group.below) {
	      // Build the lower group
	      newOptions = options.havingStyle(style.sub());
	      lowerGroup = buildCommon.wrapFragment(buildGroup$1(group.below, newOptions, options), options);
	      lowerGroup.classes.push(arrowPrefix + "-arrow-pad");
	    }

	    var arrowBody = stretchy.svgSpan(group, options); // Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.
	    // The point we want on the math axis is at 0.5 * arrowBody.height.

	    var arrowShift = -options.fontMetrics().axisHeight + 0.5 * arrowBody.height; // 2 mu kern. Ref: amsmath.dtx: #7\if0#2\else\mkern#2mu\fi

	    var upperShift = -options.fontMetrics().axisHeight - 0.5 * arrowBody.height - 0.111; // 0.111 em = 2 mu

	    if (upperGroup.depth > 0.25 || group.label === "\\xleftequilibrium") {
	      upperShift -= upperGroup.depth; // shift up if depth encroaches
	    } // Generate the vlist


	    var vlist;

	    if (lowerGroup) {
	      var lowerShift = -options.fontMetrics().axisHeight + lowerGroup.height + 0.5 * arrowBody.height + 0.111;
	      vlist = buildCommon.makeVList({
	        positionType: "individualShift",
	        children: [{
	          type: "elem",
	          elem: upperGroup,
	          shift: upperShift
	        }, {
	          type: "elem",
	          elem: arrowBody,
	          shift: arrowShift
	        }, {
	          type: "elem",
	          elem: lowerGroup,
	          shift: lowerShift
	        }]
	      }, options);
	    } else {
	      vlist = buildCommon.makeVList({
	        positionType: "individualShift",
	        children: [{
	          type: "elem",
	          elem: upperGroup,
	          shift: upperShift
	        }, {
	          type: "elem",
	          elem: arrowBody,
	          shift: arrowShift
	        }]
	      }, options);
	    } // $FlowFixMe: Replace this with passing "svg-align" into makeVList.


	    vlist.children[0].children[0].children[1].classes.push("svg-align");
	    return buildCommon.makeSpan(["mrel", "x-arrow"], [vlist], options);
	  },

	  mathmlBuilder(group, options) {
	    var arrowNode = stretchy.mathMLnode(group.label);
	    arrowNode.setAttribute("minsize", group.label.charAt(0) === "x" ? "1.75em" : "3.0em");
	    var node;

	    if (group.body) {
	      var upperNode = paddedNode(buildGroup(group.body, options));

	      if (group.below) {
	        var lowerNode = paddedNode(buildGroup(group.below, options));
	        node = new mathMLTree.MathNode("munderover", [arrowNode, lowerNode, upperNode]);
	      } else {
	        node = new mathMLTree.MathNode("mover", [arrowNode, upperNode]);
	      }
	    } else if (group.below) {
	      var _lowerNode = paddedNode(buildGroup(group.below, options));

	      node = new mathMLTree.MathNode("munder", [arrowNode, _lowerNode]);
	    } else {
	      // This should never happen.
	      // Parser.js throws an error if there is no argument.
	      node = paddedNode();
	      node = new mathMLTree.MathNode("mover", [arrowNode, node]);
	    }

	    return node;
	  }

	});

	var cdArrowFunctionName = {
	  ">": "\\\\cdrightarrow",
	  "<": "\\\\cdleftarrow",
	  "=": "\\\\cdlongequal",
	  "A": "\\uparrow",
	  "V": "\\downarrow",
	  "|": "\\Vert",
	  ".": "no arrow"
	};

	var newCell = () => {
	  // Create an empty cell, to be filled below with parse nodes.
	  // The parseTree from this module must be constructed like the
	  // one created by parseArray(), so an empty CD cell must
	  // be a ParseNode<"styling">. And CD is always displaystyle.
	  // So these values are fixed and flow can do implicit typing.
	  return {
	    type: "styling",
	    body: [],
	    mode: "math",
	    style: "display"
	  };
	};

	var isStartOfArrow = node => {
	  return node.type === "textord" && node.text === "@";
	};

	var isLabelEnd = (node, endChar) => {
	  return (node.type === "mathord" || node.type === "atom") && node.text === endChar;
	};

	function cdArrow(arrowChar, labels, parser) {
	  // Return a parse tree of an arrow and its labels.
	  // This acts in a way similar to a macro expansion.
	  var funcName = cdArrowFunctionName[arrowChar];

	  switch (funcName) {
	    case "\\\\cdrightarrow":
	    case "\\\\cdleftarrow":
	      return parser.callFunction(funcName, [labels[0]], [labels[1]]);

	    case "\\uparrow":
	    case "\\downarrow":
	      {
	        var leftLabel = parser.callFunction("\\\\cdleft", [labels[0]], []);
	        var bareArrow = {
	          type: "atom",
	          text: funcName,
	          mode: "math",
	          family: "rel"
	        };
	        var sizedArrow = parser.callFunction("\\Big", [bareArrow], []);
	        var rightLabel = parser.callFunction("\\\\cdright", [labels[1]], []);
	        var arrowGroup = {
	          type: "ordgroup",
	          mode: "math",
	          body: [leftLabel, sizedArrow, rightLabel]
	        };
	        return parser.callFunction("\\\\cdparent", [arrowGroup], []);
	      }

	    case "\\\\cdlongequal":
	      return parser.callFunction("\\\\cdlongequal", [], []);

	    case "\\Vert":
	      {
	        var arrow = {
	          type: "textord",
	          text: "\\Vert",
	          mode: "math"
	        };
	        return parser.callFunction("\\Big", [arrow], []);
	      }

	    default:
	      return {
	        type: "textord",
	        text: " ",
	        mode: "math"
	      };
	  }
	}

	function parseCD(parser) {
	  // Get the array's parse nodes with \\ temporarily mapped to \cr.
	  var parsedRows = [];
	  parser.gullet.beginGroup();
	  parser.gullet.macros.set("\\cr", "\\\\\\relax");
	  parser.gullet.beginGroup();

	  while (true) {
	    // eslint-disable-line no-constant-condition
	    // Get the parse nodes for the next row.
	    parsedRows.push(parser.parseExpression(false, "\\\\"));
	    parser.gullet.endGroup();
	    parser.gullet.beginGroup();
	    var next = parser.fetch().text;

	    if (next === "&" || next === "\\\\") {
	      parser.consume();
	    } else if (next === "\\end") {
	      if (parsedRows[parsedRows.length - 1].length === 0) {
	        parsedRows.pop(); // final row ended in \\
	      }

	      break;
	    } else {
	      throw new ParseError("Expected \\\\ or \\cr or \\end", parser.nextToken);
	    }
	  }

	  var row = [];
	  var body = [row]; // Loop thru the parse nodes. Collect them into cells and arrows.

	  for (var i = 0; i < parsedRows.length; i++) {
	    // Start a new row.
	    var rowNodes = parsedRows[i]; // Create the first cell.

	    var cell = newCell();

	    for (var j = 0; j < rowNodes.length; j++) {
	      if (!isStartOfArrow(rowNodes[j])) {
	        // If a parseNode is not an arrow, it goes into a cell.
	        cell.body.push(rowNodes[j]);
	      } else {
	        // Parse node j is an "@", the start of an arrow.
	        // Before starting on the arrow, push the cell into `row`.
	        row.push(cell); // Now collect parseNodes into an arrow.
	        // The character after "@" defines the arrow type.

	        j += 1;
	        var arrowChar = assertSymbolNodeType(rowNodes[j]).text; // Create two empty label nodes. We may or may not use them.

	        var labels = new Array(2);
	        labels[0] = {
	          type: "ordgroup",
	          mode: "math",
	          body: []
	        };
	        labels[1] = {
	          type: "ordgroup",
	          mode: "math",
	          body: []
	        }; // Process the arrow.

	        if ("=|.".indexOf(arrowChar) > -1) ; else if ("<>AV".indexOf(arrowChar) > -1) {
	          // Four arrows, `@>>>`, `@<<<`, `@AAA`, and `@VVV`, each take
	          // two optional labels. E.g. the right-point arrow syntax is
	          // really:  @>{optional label}>{optional label}>
	          // Collect parseNodes into labels.
	          for (var labelNum = 0; labelNum < 2; labelNum++) {
	            var inLabel = true;

	            for (var k = j + 1; k < rowNodes.length; k++) {
	              if (isLabelEnd(rowNodes[k], arrowChar)) {
	                inLabel = false;
	                j = k;
	                break;
	              }

	              if (isStartOfArrow(rowNodes[k])) {
	                throw new ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[k]);
	              }

	              labels[labelNum].body.push(rowNodes[k]);
	            }

	            if (inLabel) {
	              // isLabelEnd never returned a true.
	              throw new ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[j]);
	            }
	          }
	        } else {
	          throw new ParseError("Expected one of \"<>AV=|.\" after @", rowNodes[j]);
	        } // Now join the arrow to its labels.


	        var arrow = cdArrow(arrowChar, labels, parser); // Wrap the arrow in  ParseNode<"styling">.
	        // This is done to match parseArray() behavior.

	        var wrappedArrow = {
	          type: "styling",
	          body: [arrow],
	          mode: "math",
	          style: "display" // CD is always displaystyle.

	        };
	        row.push(wrappedArrow); // In CD's syntax, cells are implicit. That is, everything that
	        // is not an arrow gets collected into a cell. So create an empty
	        // cell now. It will collect upcoming parseNodes.

	        cell = newCell();
	      }
	    }

	    if (i % 2 === 0) {
	      // Even-numbered rows consist of: cell, arrow, cell, arrow, ... cell
	      // The last cell is not yet pushed into `row`, so:
	      row.push(cell);
	    } else {
	      // Odd-numbered rows consist of: vert arrow, empty cell, ... vert arrow
	      // Remove the empty cell that was placed at the beginning of `row`.
	      row.shift();
	    }

	    row = [];
	    body.push(row);
	  } // End row group


	  parser.gullet.endGroup(); // End array group defining \\

	  parser.gullet.endGroup(); // define column separation.

	  var cols = new Array(body[0].length).fill({
	    type: "align",
	    align: "c",
	    pregap: 0.25,
	    // CD package sets \enskip between columns.
	    postgap: 0.25 // So pre and post each get half an \enskip, i.e. 0.25em.

	  });
	  return {
	    type: "array",
	    mode: "math",
	    body,
	    arraystretch: 1,
	    addJot: true,
	    rowGaps: [null],
	    cols,
	    colSeparationType: "CD",
	    hLinesBeforeRow: new Array(body.length + 1).fill([])
	  };
	} // The functions below are not available for general use.
	// They are here only for internal use by the {CD} environment in placing labels
	// next to vertical arrows.
	// We don't need any such functions for horizontal arrows because we can reuse
	// the functionality that already exists for extensible arrows.

	defineFunction({
	  type: "cdlabel",
	  names: ["\\\\cdleft", "\\\\cdright"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    return {
	      type: "cdlabel",
	      mode: parser.mode,
	      side: funcName.slice(4),
	      label: args[0]
	    };
	  },

	  htmlBuilder(group, options) {
	    var newOptions = options.havingStyle(options.style.sup());
	    var label = buildCommon.wrapFragment(buildGroup$1(group.label, newOptions, options), options);
	    label.classes.push("cd-label-" + group.side);
	    label.style.bottom = makeEm(0.8 - label.depth); // Zero out label height & depth, so vertical align of arrow is set
	    // by the arrow height, not by the label.

	    label.height = 0;
	    label.depth = 0;
	    return label;
	  },

	  mathmlBuilder(group, options) {
	    var label = new mathMLTree.MathNode("mrow", [buildGroup(group.label, options)]);
	    label = new mathMLTree.MathNode("mpadded", [label]);
	    label.setAttribute("width", "0");

	    if (group.side === "left") {
	      label.setAttribute("lspace", "-1width");
	    } // We have to guess at vertical alignment. We know the arrow is 1.8em tall,
	    // But we don't know the height or depth of the label.


	    label.setAttribute("voffset", "0.7em");
	    label = new mathMLTree.MathNode("mstyle", [label]);
	    label.setAttribute("displaystyle", "false");
	    label.setAttribute("scriptlevel", "1");
	    return label;
	  }

	});
	defineFunction({
	  type: "cdlabelparent",
	  names: ["\\\\cdparent"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref2, args) {
	    var {
	      parser
	    } = _ref2;
	    return {
	      type: "cdlabelparent",
	      mode: parser.mode,
	      fragment: args[0]
	    };
	  },

	  htmlBuilder(group, options) {
	    // Wrap the vertical arrow and its labels.
	    // The parent gets position: relative. The child gets position: absolute.
	    // So CSS can locate the label correctly.
	    var parent = buildCommon.wrapFragment(buildGroup$1(group.fragment, options), options);
	    parent.classes.push("cd-vert-arrow");
	    return parent;
	  },

	  mathmlBuilder(group, options) {
	    return new mathMLTree.MathNode("mrow", [buildGroup(group.fragment, options)]);
	  }

	});

	// {123} and converts into symbol with code 123.  It is used by the *macro*
	// \char defined in macros.js.

	defineFunction({
	  type: "textord",
	  names: ["\\@char"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    var arg = assertNodeType(args[0], "ordgroup");
	    var group = arg.body;
	    var number = "";

	    for (var i = 0; i < group.length; i++) {
	      var node = assertNodeType(group[i], "textord");
	      number += node.text;
	    }

	    var code = parseInt(number);
	    var text;

	    if (isNaN(code)) {
	      throw new ParseError("\\@char has non-numeric argument " + number); // If we drop IE support, the following code could be replaced with
	      // text = String.fromCodePoint(code)
	    } else if (code < 0 || code >= 0x10ffff) {
	      throw new ParseError("\\@char with invalid code point " + number);
	    } else if (code <= 0xffff) {
	      text = String.fromCharCode(code);
	    } else {
	      // Astral code point; split into surrogate halves
	      code -= 0x10000;
	      text = String.fromCharCode((code >> 10) + 0xd800, (code & 0x3ff) + 0xdc00);
	    }

	    return {
	      type: "textord",
	      mode: parser.mode,
	      text: text
	    };
	  }

	});

	var htmlBuilder$9 = (group, options) => {
	  var elements = buildExpression$1(group.body, options.withColor(group.color), false); // \color isn't supposed to affect the type of the elements it contains.
	  // To accomplish this, we wrap the results in a fragment, so the inner
	  // elements will be able to directly interact with their neighbors. For
	  // example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`

	  return buildCommon.makeFragment(elements);
	};

	var mathmlBuilder$8 = (group, options) => {
	  var inner = buildExpression(group.body, options.withColor(group.color));
	  var node = new mathMLTree.MathNode("mstyle", inner);
	  node.setAttribute("mathcolor", group.color);
	  return node;
	};

	defineFunction({
	  type: "color",
	  names: ["\\textcolor"],
	  props: {
	    numArgs: 2,
	    allowedInText: true,
	    argTypes: ["color", "original"]
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    var color = assertNodeType(args[0], "color-token").color;
	    var body = args[1];
	    return {
	      type: "color",
	      mode: parser.mode,
	      color,
	      body: ordargument(body)
	    };
	  },

	  htmlBuilder: htmlBuilder$9,
	  mathmlBuilder: mathmlBuilder$8
	});
	defineFunction({
	  type: "color",
	  names: ["\\color"],
	  props: {
	    numArgs: 1,
	    allowedInText: true,
	    argTypes: ["color"]
	  },

	  handler(_ref2, args) {
	    var {
	      parser,
	      breakOnTokenText
	    } = _ref2;
	    var color = assertNodeType(args[0], "color-token").color; // Set macro \current@color in current namespace to store the current
	    // color, mimicking the behavior of color.sty.
	    // This is currently used just to correctly color a \right
	    // that follows a \color command.

	    parser.gullet.macros.set("\\current@color", color); // Parse out the implicit body that should be colored.

	    var body = parser.parseExpression(true, breakOnTokenText);
	    return {
	      type: "color",
	      mode: parser.mode,
	      color,
	      body
	    };
	  },

	  htmlBuilder: htmlBuilder$9,
	  mathmlBuilder: mathmlBuilder$8
	});

	// Row breaks within tabular environments, and line breaks at top level

	defineFunction({
	  type: "cr",
	  names: ["\\\\"],
	  props: {
	    numArgs: 0,
	    numOptionalArgs: 1,
	    argTypes: ["size"],
	    allowedInText: true
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser
	    } = _ref;
	    var size = optArgs[0];
	    var newLine = !parser.settings.displayMode || !parser.settings.useStrictBehavior("newLineInDisplayMode", "In LaTeX, \\\\ or \\newline " + "does nothing in display mode");
	    return {
	      type: "cr",
	      mode: parser.mode,
	      newLine,
	      size: size && assertNodeType(size, "size").value
	    };
	  },

	  // The following builders are called only at the top level,
	  // not within tabular/array environments.
	  htmlBuilder(group, options) {
	    var span = buildCommon.makeSpan(["mspace"], [], options);

	    if (group.newLine) {
	      span.classes.push("newline");

	      if (group.size) {
	        span.style.marginTop = makeEm(calculateSize(group.size, options));
	      }
	    }

	    return span;
	  },

	  mathmlBuilder(group, options) {
	    var node = new mathMLTree.MathNode("mspace");

	    if (group.newLine) {
	      node.setAttribute("linebreak", "newline");

	      if (group.size) {
	        node.setAttribute("height", makeEm(calculateSize(group.size, options)));
	      }
	    }

	    return node;
	  }

	});

	var globalMap = {
	  "\\global": "\\global",
	  "\\long": "\\\\globallong",
	  "\\\\globallong": "\\\\globallong",
	  "\\def": "\\gdef",
	  "\\gdef": "\\gdef",
	  "\\edef": "\\xdef",
	  "\\xdef": "\\xdef",
	  "\\let": "\\\\globallet",
	  "\\futurelet": "\\\\globalfuture"
	};

	var checkControlSequence = tok => {
	  var name = tok.text;

	  if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
	    throw new ParseError("Expected a control sequence", tok);
	  }

	  return name;
	};

	var getRHS = parser => {
	  var tok = parser.gullet.popToken();

	  if (tok.text === "=") {
	    // consume optional equals
	    tok = parser.gullet.popToken();

	    if (tok.text === " ") {
	      // consume one optional space
	      tok = parser.gullet.popToken();
	    }
	  }

	  return tok;
	};

	var letCommand = (parser, name, tok, global) => {
	  var macro = parser.gullet.macros.get(tok.text);

	  if (macro == null) {
	    // don't expand it later even if a macro with the same name is defined
	    // e.g., \let\foo=\frac \def\frac{\relax} \frac12
	    tok.noexpand = true;
	    macro = {
	      tokens: [tok],
	      numArgs: 0,
	      // reproduce the same behavior in expansion
	      unexpandable: !parser.gullet.isExpandable(tok.text)
	    };
	  }

	  parser.gullet.macros.set(name, macro, global);
	}; // <assignment> -> <non-macro assignment>|<macro assignment>
	// <non-macro assignment> -> <simple assignment>|\global<non-macro assignment>
	// <macro assignment> -> <definition>|<prefix><macro assignment>
	// <prefix> -> \global|\long|\outer


	defineFunction({
	  type: "internal",
	  names: ["\\global", "\\long", "\\\\globallong" // can’t be entered directly
	  ],
	  props: {
	    numArgs: 0,
	    allowedInText: true
	  },

	  handler(_ref) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    parser.consumeSpaces();
	    var token = parser.fetch();

	    if (globalMap[token.text]) {
	      // KaTeX doesn't have \par, so ignore \long
	      if (funcName === "\\global" || funcName === "\\\\globallong") {
	        token.text = globalMap[token.text];
	      }

	      return assertNodeType(parser.parseFunction(), "internal");
	    }

	    throw new ParseError("Invalid token after macro prefix", token);
	  }

	}); // Basic support for macro definitions: \def, \gdef, \edef, \xdef
	// <definition> -> <def><control sequence><definition text>
	// <def> -> \def|\gdef|\edef|\xdef
	// <definition text> -> <parameter text><left brace><balanced text><right brace>

	defineFunction({
	  type: "internal",
	  names: ["\\def", "\\gdef", "\\edef", "\\xdef"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref2) {
	    var {
	      parser,
	      funcName
	    } = _ref2;
	    var tok = parser.gullet.popToken();
	    var name = tok.text;

	    if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
	      throw new ParseError("Expected a control sequence", tok);
	    }

	    var numArgs = 0;
	    var insert;
	    var delimiters = [[]]; // <parameter text> contains no braces

	    while (parser.gullet.future().text !== "{") {
	      tok = parser.gullet.popToken();

	      if (tok.text === "#") {
	        // If the very last character of the <parameter text> is #, so that
	        // this # is immediately followed by {, TeX will behave as if the {
	        // had been inserted at the right end of both the parameter text
	        // and the replacement text.
	        if (parser.gullet.future().text === "{") {
	          insert = parser.gullet.future();
	          delimiters[numArgs].push("{");
	          break;
	        } // A parameter, the first appearance of # must be followed by 1,
	        // the next by 2, and so on; up to nine #’s are allowed


	        tok = parser.gullet.popToken();

	        if (!/^[1-9]$/.test(tok.text)) {
	          throw new ParseError("Invalid argument number \"" + tok.text + "\"");
	        }

	        if (parseInt(tok.text) !== numArgs + 1) {
	          throw new ParseError("Argument number \"" + tok.text + "\" out of order");
	        }

	        numArgs++;
	        delimiters.push([]);
	      } else if (tok.text === "EOF") {
	        throw new ParseError("Expected a macro definition");
	      } else {
	        delimiters[numArgs].push(tok.text);
	      }
	    } // replacement text, enclosed in '{' and '}' and properly nested


	    var {
	      tokens
	    } = parser.gullet.consumeArg();

	    if (insert) {
	      tokens.unshift(insert);
	    }

	    if (funcName === "\\edef" || funcName === "\\xdef") {
	      tokens = parser.gullet.expandTokens(tokens);
	      tokens.reverse(); // to fit in with stack order
	    } // Final arg is the expansion of the macro


	    parser.gullet.macros.set(name, {
	      tokens,
	      numArgs,
	      delimiters
	    }, funcName === globalMap[funcName]);
	    return {
	      type: "internal",
	      mode: parser.mode
	    };
	  }

	}); // <simple assignment> -> <let assignment>
	// <let assignment> -> \futurelet<control sequence><token><token>
	//     | \let<control sequence><equals><one optional space><token>
	// <equals> -> <optional spaces>|<optional spaces>=

	defineFunction({
	  type: "internal",
	  names: ["\\let", "\\\\globallet" // can’t be entered directly
	  ],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref3) {
	    var {
	      parser,
	      funcName
	    } = _ref3;
	    var name = checkControlSequence(parser.gullet.popToken());
	    parser.gullet.consumeSpaces();
	    var tok = getRHS(parser);
	    letCommand(parser, name, tok, funcName === "\\\\globallet");
	    return {
	      type: "internal",
	      mode: parser.mode
	    };
	  }

	}); // ref: https://www.tug.org/TUGboat/tb09-3/tb22bechtolsheim.pdf

	defineFunction({
	  type: "internal",
	  names: ["\\futurelet", "\\\\globalfuture" // can’t be entered directly
	  ],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref4) {
	    var {
	      parser,
	      funcName
	    } = _ref4;
	    var name = checkControlSequence(parser.gullet.popToken());
	    var middle = parser.gullet.popToken();
	    var tok = parser.gullet.popToken();
	    letCommand(parser, name, tok, funcName === "\\\\globalfuture");
	    parser.gullet.pushToken(tok);
	    parser.gullet.pushToken(middle);
	    return {
	      type: "internal",
	      mode: parser.mode
	    };
	  }

	});

	/**
	 * This file deals with creating delimiters of various sizes. The TeXbook
	 * discusses these routines on page 441-442, in the "Another subroutine sets box
	 * x to a specified variable delimiter" paragraph.
	 *
	 * There are three main routines here. `makeSmallDelim` makes a delimiter in the
	 * normal font, but in either text, script, or scriptscript style.
	 * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
	 * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
	 * smaller pieces that are stacked on top of one another.
	 *
	 * The functions take a parameter `center`, which determines if the delimiter
	 * should be centered around the axis.
	 *
	 * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
	 * one of the given sizes. This is used for things like `\bigl`.
	 * `customSizedDelim` makes a delimiter with a given total height+depth. It is
	 * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
	 * delimiter which surrounds an expression of a given height an depth. It is
	 * used in `\left` and `\right`.
	 */

	/**
	 * Get the metrics for a given symbol and font, after transformation (i.e.
	 * after following replacement from symbols.js)
	 */
	var getMetrics = function getMetrics(symbol, font, mode) {
	  var replace = symbols.math[symbol] && symbols.math[symbol].replace;
	  var metrics = getCharacterMetrics(replace || symbol, font, mode);

	  if (!metrics) {
	    throw new Error("Unsupported symbol " + symbol + " and font size " + font + ".");
	  }

	  return metrics;
	};
	/**
	 * Puts a delimiter span in a given style, and adds appropriate height, depth,
	 * and maxFontSizes.
	 */


	var styleWrap = function styleWrap(delim, toStyle, options, classes) {
	  var newOptions = options.havingBaseStyle(toStyle);
	  var span = buildCommon.makeSpan(classes.concat(newOptions.sizingClasses(options)), [delim], options);
	  var delimSizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
	  span.height *= delimSizeMultiplier;
	  span.depth *= delimSizeMultiplier;
	  span.maxFontSize = newOptions.sizeMultiplier;
	  return span;
	};

	var centerSpan = function centerSpan(span, options, style) {
	  var newOptions = options.havingBaseStyle(style);
	  var shift = (1 - options.sizeMultiplier / newOptions.sizeMultiplier) * options.fontMetrics().axisHeight;
	  span.classes.push("delimcenter");
	  span.style.top = makeEm(shift);
	  span.height -= shift;
	  span.depth += shift;
	};
	/**
	 * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
	 * font, but is restyled to either be in textstyle, scriptstyle, or
	 * scriptscriptstyle.
	 */


	var makeSmallDelim = function makeSmallDelim(delim, style, center, options, mode, classes) {
	  var text = buildCommon.makeSymbol(delim, "Main-Regular", mode, options);
	  var span = styleWrap(text, style, options, classes);

	  if (center) {
	    centerSpan(span, options, style);
	  }

	  return span;
	};
	/**
	 * Builds a symbol in the given font size (note size is an integer)
	 */


	var mathrmSize = function mathrmSize(value, size, mode, options) {
	  return buildCommon.makeSymbol(value, "Size" + size + "-Regular", mode, options);
	};
	/**
	 * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
	 * Size3, or Size4 fonts. It is always rendered in textstyle.
	 */


	var makeLargeDelim = function makeLargeDelim(delim, size, center, options, mode, classes) {
	  var inner = mathrmSize(delim, size, mode, options);
	  var span = styleWrap(buildCommon.makeSpan(["delimsizing", "size" + size], [inner], options), Style$1.TEXT, options, classes);

	  if (center) {
	    centerSpan(span, options, Style$1.TEXT);
	  }

	  return span;
	};
	/**
	 * Make a span from a font glyph with the given offset and in the given font.
	 * This is used in makeStackedDelim to make the stacking pieces for the delimiter.
	 */


	var makeGlyphSpan = function makeGlyphSpan(symbol, font, mode) {
	  var sizeClass; // Apply the correct CSS class to choose the right font.

	  if (font === "Size1-Regular") {
	    sizeClass = "delim-size1";
	  } else
	    /* if (font === "Size4-Regular") */
	    {
	      sizeClass = "delim-size4";
	    }

	  var corner = buildCommon.makeSpan(["delimsizinginner", sizeClass], [buildCommon.makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]); // Since this will be passed into `makeVList` in the end, wrap the element
	  // in the appropriate tag that VList uses.

	  return {
	    type: "elem",
	    elem: corner
	  };
	};

	var makeInner = function makeInner(ch, height, options) {
	  // Create a span with inline SVG for the inner part of a tall stacked delimiter.
	  var width = fontMetricsData['Size4-Regular'][ch.charCodeAt(0)] ? fontMetricsData['Size4-Regular'][ch.charCodeAt(0)][4] : fontMetricsData['Size1-Regular'][ch.charCodeAt(0)][4];
	  var path = new PathNode("inner", innerPath(ch, Math.round(1000 * height)));
	  var svgNode = new SvgNode([path], {
	    "width": makeEm(width),
	    "height": makeEm(height),
	    // Override CSS rule `.katex svg { width: 100% }`
	    "style": "width:" + makeEm(width),
	    "viewBox": "0 0 " + 1000 * width + " " + Math.round(1000 * height),
	    "preserveAspectRatio": "xMinYMin"
	  });
	  var span = buildCommon.makeSvgSpan([], [svgNode], options);
	  span.height = height;
	  span.style.height = makeEm(height);
	  span.style.width = makeEm(width);
	  return {
	    type: "elem",
	    elem: span
	  };
	}; // Helpers for makeStackedDelim


	var lapInEms = 0.008;
	var lap = {
	  type: "kern",
	  size: -1 * lapInEms
	};
	var verts = ["|", "\\lvert", "\\rvert", "\\vert"];
	var doubleVerts = ["\\|", "\\lVert", "\\rVert", "\\Vert"];
	/**
	 * Make a stacked delimiter out of a given delimiter, with the total height at
	 * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
	 */

	var makeStackedDelim = function makeStackedDelim(delim, heightTotal, center, options, mode, classes) {
	  // There are four parts, the top, an optional middle, a repeated part, and a
	  // bottom.
	  var top;
	  var middle;
	  var repeat;
	  var bottom;
	  top = repeat = bottom = delim;
	  middle = null; // Also keep track of what font the delimiters are in

	  var font = "Size1-Regular"; // We set the parts and font based on the symbol. Note that we use
	  // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
	  // repeats of the arrows

	  if (delim === "\\uparrow") {
	    repeat = bottom = "\u23d0";
	  } else if (delim === "\\Uparrow") {
	    repeat = bottom = "\u2016";
	  } else if (delim === "\\downarrow") {
	    top = repeat = "\u23d0";
	  } else if (delim === "\\Downarrow") {
	    top = repeat = "\u2016";
	  } else if (delim === "\\updownarrow") {
	    top = "\\uparrow";
	    repeat = "\u23d0";
	    bottom = "\\downarrow";
	  } else if (delim === "\\Updownarrow") {
	    top = "\\Uparrow";
	    repeat = "\u2016";
	    bottom = "\\Downarrow";
	  } else if (utils.contains(verts, delim)) {
	    repeat = "\u2223";
	  } else if (utils.contains(doubleVerts, delim)) {
	    repeat = "\u2225";
	  } else if (delim === "[" || delim === "\\lbrack") {
	    top = "\u23a1";
	    repeat = "\u23a2";
	    bottom = "\u23a3";
	    font = "Size4-Regular";
	  } else if (delim === "]" || delim === "\\rbrack") {
	    top = "\u23a4";
	    repeat = "\u23a5";
	    bottom = "\u23a6";
	    font = "Size4-Regular";
	  } else if (delim === "\\lfloor" || delim === "\u230a") {
	    repeat = top = "\u23a2";
	    bottom = "\u23a3";
	    font = "Size4-Regular";
	  } else if (delim === "\\lceil" || delim === "\u2308") {
	    top = "\u23a1";
	    repeat = bottom = "\u23a2";
	    font = "Size4-Regular";
	  } else if (delim === "\\rfloor" || delim === "\u230b") {
	    repeat = top = "\u23a5";
	    bottom = "\u23a6";
	    font = "Size4-Regular";
	  } else if (delim === "\\rceil" || delim === "\u2309") {
	    top = "\u23a4";
	    repeat = bottom = "\u23a5";
	    font = "Size4-Regular";
	  } else if (delim === "(" || delim === "\\lparen") {
	    top = "\u239b";
	    repeat = "\u239c";
	    bottom = "\u239d";
	    font = "Size4-Regular";
	  } else if (delim === ")" || delim === "\\rparen") {
	    top = "\u239e";
	    repeat = "\u239f";
	    bottom = "\u23a0";
	    font = "Size4-Regular";
	  } else if (delim === "\\{" || delim === "\\lbrace") {
	    top = "\u23a7";
	    middle = "\u23a8";
	    bottom = "\u23a9";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\}" || delim === "\\rbrace") {
	    top = "\u23ab";
	    middle = "\u23ac";
	    bottom = "\u23ad";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\lgroup" || delim === "\u27ee") {
	    top = "\u23a7";
	    bottom = "\u23a9";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\rgroup" || delim === "\u27ef") {
	    top = "\u23ab";
	    bottom = "\u23ad";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\lmoustache" || delim === "\u23b0") {
	    top = "\u23a7";
	    bottom = "\u23ad";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } else if (delim === "\\rmoustache" || delim === "\u23b1") {
	    top = "\u23ab";
	    bottom = "\u23a9";
	    repeat = "\u23aa";
	    font = "Size4-Regular";
	  } // Get the metrics of the four sections


	  var topMetrics = getMetrics(top, font, mode);
	  var topHeightTotal = topMetrics.height + topMetrics.depth;
	  var repeatMetrics = getMetrics(repeat, font, mode);
	  var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
	  var bottomMetrics = getMetrics(bottom, font, mode);
	  var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
	  var middleHeightTotal = 0;
	  var middleFactor = 1;

	  if (middle !== null) {
	    var middleMetrics = getMetrics(middle, font, mode);
	    middleHeightTotal = middleMetrics.height + middleMetrics.depth;
	    middleFactor = 2; // repeat symmetrically above and below middle
	  } // Calcuate the minimal height that the delimiter can have.
	  // It is at least the size of the top, bottom, and optional middle combined.


	  var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal; // Compute the number of copies of the repeat symbol we will need

	  var repeatCount = Math.max(0, Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal))); // Compute the total height of the delimiter including all the symbols

	  var realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal; // The center of the delimiter is placed at the center of the axis. Note
	  // that in this context, "center" means that the delimiter should be
	  // centered around the axis in the current style, while normally it is
	  // centered around the axis in textstyle.

	  var axisHeight = options.fontMetrics().axisHeight;

	  if (center) {
	    axisHeight *= options.sizeMultiplier;
	  } // Calculate the depth


	  var depth = realHeightTotal / 2 - axisHeight; // Now, we start building the pieces that will go into the vlist
	  // Keep a list of the pieces of the stacked delimiter

	  var stack = []; // Add the bottom symbol

	  stack.push(makeGlyphSpan(bottom, font, mode));
	  stack.push(lap); // overlap

	  if (middle === null) {
	    // The middle section will be an SVG. Make it an extra 0.016em tall.
	    // We'll overlap by 0.008em at top and bottom.
	    var innerHeight = realHeightTotal - topHeightTotal - bottomHeightTotal + 2 * lapInEms;
	    stack.push(makeInner(repeat, innerHeight, options));
	  } else {
	    // When there is a middle bit, we need the middle part and two repeated
	    // sections
	    var _innerHeight = (realHeightTotal - topHeightTotal - bottomHeightTotal - middleHeightTotal) / 2 + 2 * lapInEms;

	    stack.push(makeInner(repeat, _innerHeight, options)); // Now insert the middle of the brace.

	    stack.push(lap);
	    stack.push(makeGlyphSpan(middle, font, mode));
	    stack.push(lap);
	    stack.push(makeInner(repeat, _innerHeight, options));
	  } // Add the top symbol


	  stack.push(lap);
	  stack.push(makeGlyphSpan(top, font, mode)); // Finally, build the vlist

	  var newOptions = options.havingBaseStyle(Style$1.TEXT);
	  var inner = buildCommon.makeVList({
	    positionType: "bottom",
	    positionData: depth,
	    children: stack
	  }, newOptions);
	  return styleWrap(buildCommon.makeSpan(["delimsizing", "mult"], [inner], newOptions), Style$1.TEXT, options, classes);
	}; // All surds have 0.08em padding above the viniculum inside the SVG.
	// That keeps browser span height rounding error from pinching the line.


	var vbPad = 80; // padding above the surd, measured inside the viewBox.

	var emPad = 0.08; // padding, in ems, measured in the document.

	var sqrtSvg = function sqrtSvg(sqrtName, height, viewBoxHeight, extraViniculum, options) {
	  var path = sqrtPath(sqrtName, extraViniculum, viewBoxHeight);
	  var pathNode = new PathNode(sqrtName, path);
	  var svg = new SvgNode([pathNode], {
	    // Note: 1000:1 ratio of viewBox to document em width.
	    "width": "400em",
	    "height": makeEm(height),
	    "viewBox": "0 0 400000 " + viewBoxHeight,
	    "preserveAspectRatio": "xMinYMin slice"
	  });
	  return buildCommon.makeSvgSpan(["hide-tail"], [svg], options);
	};
	/**
	 * Make a sqrt image of the given height,
	 */


	var makeSqrtImage = function makeSqrtImage(height, options) {
	  // Define a newOptions that removes the effect of size changes such as \Huge.
	  // We don't pick different a height surd for \Huge. For it, we scale up.
	  var newOptions = options.havingBaseSizing(); // Pick the desired surd glyph from a sequence of surds.

	  var delim = traverseSequence("\\surd", height * newOptions.sizeMultiplier, stackLargeDelimiterSequence, newOptions);
	  var sizeMultiplier = newOptions.sizeMultiplier; // default
	  // The standard sqrt SVGs each have a 0.04em thick viniculum.
	  // If Settings.minRuleThickness is larger than that, we add extraViniculum.

	  var extraViniculum = Math.max(0, options.minRuleThickness - options.fontMetrics().sqrtRuleThickness); // Create a span containing an SVG image of a sqrt symbol.

	  var span;
	  var spanHeight = 0;
	  var texHeight = 0;
	  var viewBoxHeight = 0;
	  var advanceWidth; // We create viewBoxes with 80 units of "padding" above each surd.
	  // Then browser rounding error on the parent span height will not
	  // encroach on the ink of the viniculum. But that padding is not
	  // included in the TeX-like `height` used for calculation of
	  // vertical alignment. So texHeight = span.height < span.style.height.

	  if (delim.type === "small") {
	    // Get an SVG that is derived from glyph U+221A in font KaTeX-Main.
	    // 1000 unit normal glyph height.
	    viewBoxHeight = 1000 + 1000 * extraViniculum + vbPad;

	    if (height < 1.0) {
	      sizeMultiplier = 1.0; // mimic a \textfont radical
	    } else if (height < 1.4) {
	      sizeMultiplier = 0.7; // mimic a \scriptfont radical
	    }

	    spanHeight = (1.0 + extraViniculum + emPad) / sizeMultiplier;
	    texHeight = (1.00 + extraViniculum) / sizeMultiplier;
	    span = sqrtSvg("sqrtMain", spanHeight, viewBoxHeight, extraViniculum, options);
	    span.style.minWidth = "0.853em";
	    advanceWidth = 0.833 / sizeMultiplier; // from the font.
	  } else if (delim.type === "large") {
	    // These SVGs come from fonts: KaTeX_Size1, _Size2, etc.
	    viewBoxHeight = (1000 + vbPad) * sizeToMaxHeight[delim.size];
	    texHeight = (sizeToMaxHeight[delim.size] + extraViniculum) / sizeMultiplier;
	    spanHeight = (sizeToMaxHeight[delim.size] + extraViniculum + emPad) / sizeMultiplier;
	    span = sqrtSvg("sqrtSize" + delim.size, spanHeight, viewBoxHeight, extraViniculum, options);
	    span.style.minWidth = "1.02em";
	    advanceWidth = 1.0 / sizeMultiplier; // 1.0 from the font.
	  } else {
	    // Tall sqrt. In TeX, this would be stacked using multiple glyphs.
	    // We'll use a single SVG to accomplish the same thing.
	    spanHeight = height + extraViniculum + emPad;
	    texHeight = height + extraViniculum;
	    viewBoxHeight = Math.floor(1000 * height + extraViniculum) + vbPad;
	    span = sqrtSvg("sqrtTall", spanHeight, viewBoxHeight, extraViniculum, options);
	    span.style.minWidth = "0.742em";
	    advanceWidth = 1.056;
	  }

	  span.height = texHeight;
	  span.style.height = makeEm(spanHeight);
	  return {
	    span,
	    advanceWidth,
	    // Calculate the actual line width.
	    // This actually should depend on the chosen font -- e.g. \boldmath
	    // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
	    // have thicker rules.
	    ruleWidth: (options.fontMetrics().sqrtRuleThickness + extraViniculum) * sizeMultiplier
	  };
	}; // There are three kinds of delimiters, delimiters that stack when they become
	// too large


	var stackLargeDelimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230a", "\u230b", "\\lceil", "\\rceil", "\u2308", "\u2309", "\\surd"]; // delimiters that always stack

	var stackAlwaysDelimiters = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27ee", "\u27ef", "\\lmoustache", "\\rmoustache", "\u23b0", "\u23b1"]; // and delimiters that never stack

	var stackNeverDelimiters = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"]; // Metrics of the different sizes. Found by looking at TeX's output of
	// $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
	// Used to create stacked delimiters of appropriate sizes in makeSizedDelim.

	var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];
	/**
	 * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
	 */

	var makeSizedDelim = function makeSizedDelim(delim, size, options, mode, classes) {
	  // < and > turn into \langle and \rangle in delimiters
	  if (delim === "<" || delim === "\\lt" || delim === "\u27e8") {
	    delim = "\\langle";
	  } else if (delim === ">" || delim === "\\gt" || delim === "\u27e9") {
	    delim = "\\rangle";
	  } // Sized delimiters are never centered.


	  if (utils.contains(stackLargeDelimiters, delim) || utils.contains(stackNeverDelimiters, delim)) {
	    return makeLargeDelim(delim, size, false, options, mode, classes);
	  } else if (utils.contains(stackAlwaysDelimiters, delim)) {
	    return makeStackedDelim(delim, sizeToMaxHeight[size], false, options, mode, classes);
	  } else {
	    throw new ParseError("Illegal delimiter: '" + delim + "'");
	  }
	};
	/**
	 * There are three different sequences of delimiter sizes that the delimiters
	 * follow depending on the kind of delimiter. This is used when creating custom
	 * sized delimiters to decide whether to create a small, large, or stacked
	 * delimiter.
	 *
	 * In real TeX, these sequences aren't explicitly defined, but are instead
	 * defined inside the font metrics. Since there are only three sequences that
	 * are possible for the delimiters that TeX defines, it is easier to just encode
	 * them explicitly here.
	 */


	// Delimiters that never stack try small delimiters and large delimiters only
	var stackNeverDelimiterSequence = [{
	  type: "small",
	  style: Style$1.SCRIPTSCRIPT
	}, {
	  type: "small",
	  style: Style$1.SCRIPT
	}, {
	  type: "small",
	  style: Style$1.TEXT
	}, {
	  type: "large",
	  size: 1
	}, {
	  type: "large",
	  size: 2
	}, {
	  type: "large",
	  size: 3
	}, {
	  type: "large",
	  size: 4
	}]; // Delimiters that always stack try the small delimiters first, then stack

	var stackAlwaysDelimiterSequence = [{
	  type: "small",
	  style: Style$1.SCRIPTSCRIPT
	}, {
	  type: "small",
	  style: Style$1.SCRIPT
	}, {
	  type: "small",
	  style: Style$1.TEXT
	}, {
	  type: "stack"
	}]; // Delimiters that stack when large try the small and then large delimiters, and
	// stack afterwards

	var stackLargeDelimiterSequence = [{
	  type: "small",
	  style: Style$1.SCRIPTSCRIPT
	}, {
	  type: "small",
	  style: Style$1.SCRIPT
	}, {
	  type: "small",
	  style: Style$1.TEXT
	}, {
	  type: "large",
	  size: 1
	}, {
	  type: "large",
	  size: 2
	}, {
	  type: "large",
	  size: 3
	}, {
	  type: "large",
	  size: 4
	}, {
	  type: "stack"
	}];
	/**
	 * Get the font used in a delimiter based on what kind of delimiter it is.
	 * TODO(#963) Use more specific font family return type once that is introduced.
	 */

	var delimTypeToFont = function delimTypeToFont(type) {
	  if (type.type === "small") {
	    return "Main-Regular";
	  } else if (type.type === "large") {
	    return "Size" + type.size + "-Regular";
	  } else if (type.type === "stack") {
	    return "Size4-Regular";
	  } else {
	    throw new Error("Add support for delim type '" + type.type + "' here.");
	  }
	};
	/**
	 * Traverse a sequence of types of delimiters to decide what kind of delimiter
	 * should be used to create a delimiter of the given height+depth.
	 */


	var traverseSequence = function traverseSequence(delim, height, sequence, options) {
	  // Here, we choose the index we should start at in the sequences. In smaller
	  // sizes (which correspond to larger numbers in style.size) we start earlier
	  // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
	  // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
	  var start = Math.min(2, 3 - options.style.size);

	  for (var i = start; i < sequence.length; i++) {
	    if (sequence[i].type === "stack") {
	      // This is always the last delimiter, so we just break the loop now.
	      break;
	    }

	    var metrics = getMetrics(delim, delimTypeToFont(sequence[i]), "math");
	    var heightDepth = metrics.height + metrics.depth; // Small delimiters are scaled down versions of the same font, so we
	    // account for the style change size.

	    if (sequence[i].type === "small") {
	      var newOptions = options.havingBaseStyle(sequence[i].style);
	      heightDepth *= newOptions.sizeMultiplier;
	    } // Check if the delimiter at this size works for the given height.


	    if (heightDepth > height) {
	      return sequence[i];
	    }
	  } // If we reached the end of the sequence, return the last sequence element.


	  return sequence[sequence.length - 1];
	};
	/**
	 * Make a delimiter of a given height+depth, with optional centering. Here, we
	 * traverse the sequences, and create a delimiter that the sequence tells us to.
	 */


	var makeCustomSizedDelim = function makeCustomSizedDelim(delim, height, center, options, mode, classes) {
	  if (delim === "<" || delim === "\\lt" || delim === "\u27e8") {
	    delim = "\\langle";
	  } else if (delim === ">" || delim === "\\gt" || delim === "\u27e9") {
	    delim = "\\rangle";
	  } // Decide what sequence to use


	  var sequence;

	  if (utils.contains(stackNeverDelimiters, delim)) {
	    sequence = stackNeverDelimiterSequence;
	  } else if (utils.contains(stackLargeDelimiters, delim)) {
	    sequence = stackLargeDelimiterSequence;
	  } else {
	    sequence = stackAlwaysDelimiterSequence;
	  } // Look through the sequence


	  var delimType = traverseSequence(delim, height, sequence, options); // Get the delimiter from font glyphs.
	  // Depending on the sequence element we decided on, call the
	  // appropriate function.

	  if (delimType.type === "small") {
	    return makeSmallDelim(delim, delimType.style, center, options, mode, classes);
	  } else if (delimType.type === "large") {
	    return makeLargeDelim(delim, delimType.size, center, options, mode, classes);
	  } else
	    /* if (delimType.type === "stack") */
	    {
	      return makeStackedDelim(delim, height, center, options, mode, classes);
	    }
	};
	/**
	 * Make a delimiter for use with `\left` and `\right`, given a height and depth
	 * of an expression that the delimiters surround.
	 */


	var makeLeftRightDelim = function makeLeftRightDelim(delim, height, depth, options, mode, classes) {
	  // We always center \left/\right delimiters, so the axis is always shifted
	  var axisHeight = options.fontMetrics().axisHeight * options.sizeMultiplier; // Taken from TeX source, tex.web, function make_left_right

	  var delimiterFactor = 901;
	  var delimiterExtend = 5.0 / options.fontMetrics().ptPerEm;
	  var maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
	  var totalHeight = Math.max( // In real TeX, calculations are done using integral values which are
	  // 65536 per pt, or 655360 per em. So, the division here truncates in
	  // TeX but doesn't here, producing different results. If we wanted to
	  // exactly match TeX's calculation, we could do
	  //   Math.floor(655360 * maxDistFromAxis / 500) *
	  //    delimiterFactor / 655360
	  // (To see the difference, compare
	  //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
	  // in TeX and KaTeX)
	  maxDistFromAxis / 500 * delimiterFactor, 2 * maxDistFromAxis - delimiterExtend); // Finally, we defer to `makeCustomSizedDelim` with our calculated total
	  // height

	  return makeCustomSizedDelim(delim, totalHeight, true, options, mode, classes);
	};

	var delimiter = {
	  sqrtImage: makeSqrtImage,
	  sizedDelim: makeSizedDelim,
	  sizeToMaxHeight: sizeToMaxHeight,
	  customSizedDelim: makeCustomSizedDelim,
	  leftRightDelim: makeLeftRightDelim
	};

	// Extra data needed for the delimiter handler down below
	var delimiterSizes = {
	  "\\bigl": {
	    mclass: "mopen",
	    size: 1
	  },
	  "\\Bigl": {
	    mclass: "mopen",
	    size: 2
	  },
	  "\\biggl": {
	    mclass: "mopen",
	    size: 3
	  },
	  "\\Biggl": {
	    mclass: "mopen",
	    size: 4
	  },
	  "\\bigr": {
	    mclass: "mclose",
	    size: 1
	  },
	  "\\Bigr": {
	    mclass: "mclose",
	    size: 2
	  },
	  "\\biggr": {
	    mclass: "mclose",
	    size: 3
	  },
	  "\\Biggr": {
	    mclass: "mclose",
	    size: 4
	  },
	  "\\bigm": {
	    mclass: "mrel",
	    size: 1
	  },
	  "\\Bigm": {
	    mclass: "mrel",
	    size: 2
	  },
	  "\\biggm": {
	    mclass: "mrel",
	    size: 3
	  },
	  "\\Biggm": {
	    mclass: "mrel",
	    size: 4
	  },
	  "\\big": {
	    mclass: "mord",
	    size: 1
	  },
	  "\\Big": {
	    mclass: "mord",
	    size: 2
	  },
	  "\\bigg": {
	    mclass: "mord",
	    size: 3
	  },
	  "\\Bigg": {
	    mclass: "mord",
	    size: 4
	  }
	};
	var delimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230a", "\u230b", "\\lceil", "\\rceil", "\u2308", "\u2309", "<", ">", "\\langle", "\u27e8", "\\rangle", "\u27e9", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27ee", "\u27ef", "\\lmoustache", "\\rmoustache", "\u23b0", "\u23b1", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."];

	// Delimiter functions
	function checkDelimiter(delim, context) {
	  var symDelim = checkSymbolNodeType(delim);

	  if (symDelim && utils.contains(delimiters, symDelim.text)) {
	    return symDelim;
	  } else if (symDelim) {
	    throw new ParseError("Invalid delimiter '" + symDelim.text + "' after '" + context.funcName + "'", delim);
	  } else {
	    throw new ParseError("Invalid delimiter type '" + delim.type + "'", delim);
	  }
	}

	defineFunction({
	  type: "delimsizing",
	  names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
	  props: {
	    numArgs: 1,
	    argTypes: ["primitive"]
	  },
	  handler: (context, args) => {
	    var delim = checkDelimiter(args[0], context);
	    return {
	      type: "delimsizing",
	      mode: context.parser.mode,
	      size: delimiterSizes[context.funcName].size,
	      mclass: delimiterSizes[context.funcName].mclass,
	      delim: delim.text
	    };
	  },
	  htmlBuilder: (group, options) => {
	    if (group.delim === ".") {
	      // Empty delimiters still count as elements, even though they don't
	      // show anything.
	      return buildCommon.makeSpan([group.mclass]);
	    } // Use delimiter.sizedDelim to generate the delimiter.


	    return delimiter.sizedDelim(group.delim, group.size, options, group.mode, [group.mclass]);
	  },
	  mathmlBuilder: group => {
	    var children = [];

	    if (group.delim !== ".") {
	      children.push(makeText(group.delim, group.mode));
	    }

	    var node = new mathMLTree.MathNode("mo", children);

	    if (group.mclass === "mopen" || group.mclass === "mclose") {
	      // Only some of the delimsizing functions act as fences, and they
	      // return "mopen" or "mclose" mclass.
	      node.setAttribute("fence", "true");
	    } else {
	      // Explicitly disable fencing if it's not a fence, to override the
	      // defaults.
	      node.setAttribute("fence", "false");
	    }

	    node.setAttribute("stretchy", "true");
	    var size = makeEm(delimiter.sizeToMaxHeight[group.size]);
	    node.setAttribute("minsize", size);
	    node.setAttribute("maxsize", size);
	    return node;
	  }
	});

	function assertParsed(group) {
	  if (!group.body) {
	    throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
	  }
	}

	defineFunction({
	  type: "leftright-right",
	  names: ["\\right"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },
	  handler: (context, args) => {
	    // \left case below triggers parsing of \right in
	    //   `const right = parser.parseFunction();`
	    // uses this return value.
	    var color = context.parser.gullet.macros.get("\\current@color");

	    if (color && typeof color !== "string") {
	      throw new ParseError("\\current@color set to non-string in \\right");
	    }

	    return {
	      type: "leftright-right",
	      mode: context.parser.mode,
	      delim: checkDelimiter(args[0], context).text,
	      color // undefined if not set via \color

	    };
	  }
	});
	defineFunction({
	  type: "leftright",
	  names: ["\\left"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },
	  handler: (context, args) => {
	    var delim = checkDelimiter(args[0], context);
	    var parser = context.parser; // Parse out the implicit body

	    ++parser.leftrightDepth; // parseExpression stops before '\\right'

	    var body = parser.parseExpression(false);
	    --parser.leftrightDepth; // Check the next token

	    parser.expect("\\right", false);
	    var right = assertNodeType(parser.parseFunction(), "leftright-right");
	    return {
	      type: "leftright",
	      mode: parser.mode,
	      body,
	      left: delim.text,
	      right: right.delim,
	      rightColor: right.color
	    };
	  },
	  htmlBuilder: (group, options) => {
	    assertParsed(group); // Build the inner expression

	    var inner = buildExpression$1(group.body, options, true, ["mopen", "mclose"]);
	    var innerHeight = 0;
	    var innerDepth = 0;
	    var hadMiddle = false; // Calculate its height and depth

	    for (var i = 0; i < inner.length; i++) {
	      // Property `isMiddle` not defined on `span`. See comment in
	      // "middle"'s htmlBuilder.
	      // $FlowFixMe
	      if (inner[i].isMiddle) {
	        hadMiddle = true;
	      } else {
	        innerHeight = Math.max(inner[i].height, innerHeight);
	        innerDepth = Math.max(inner[i].depth, innerDepth);
	      }
	    } // The size of delimiters is the same, regardless of what style we are
	    // in. Thus, to correctly calculate the size of delimiter we need around
	    // a group, we scale down the inner size based on the size.


	    innerHeight *= options.sizeMultiplier;
	    innerDepth *= options.sizeMultiplier;
	    var leftDelim;

	    if (group.left === ".") {
	      // Empty delimiters in \left and \right make null delimiter spaces.
	      leftDelim = makeNullDelimiter(options, ["mopen"]);
	    } else {
	      // Otherwise, use leftRightDelim to generate the correct sized
	      // delimiter.
	      leftDelim = delimiter.leftRightDelim(group.left, innerHeight, innerDepth, options, group.mode, ["mopen"]);
	    } // Add it to the beginning of the expression


	    inner.unshift(leftDelim); // Handle middle delimiters

	    if (hadMiddle) {
	      for (var _i = 1; _i < inner.length; _i++) {
	        var middleDelim = inner[_i]; // Property `isMiddle` not defined on `span`. See comment in
	        // "middle"'s htmlBuilder.
	        // $FlowFixMe

	        var isMiddle = middleDelim.isMiddle;

	        if (isMiddle) {
	          // Apply the options that were active when \middle was called
	          inner[_i] = delimiter.leftRightDelim(isMiddle.delim, innerHeight, innerDepth, isMiddle.options, group.mode, []);
	        }
	      }
	    }

	    var rightDelim; // Same for the right delimiter, but using color specified by \color

	    if (group.right === ".") {
	      rightDelim = makeNullDelimiter(options, ["mclose"]);
	    } else {
	      var colorOptions = group.rightColor ? options.withColor(group.rightColor) : options;
	      rightDelim = delimiter.leftRightDelim(group.right, innerHeight, innerDepth, colorOptions, group.mode, ["mclose"]);
	    } // Add it to the end of the expression.


	    inner.push(rightDelim);
	    return buildCommon.makeSpan(["minner"], inner, options);
	  },
	  mathmlBuilder: (group, options) => {
	    assertParsed(group);
	    var inner = buildExpression(group.body, options);

	    if (group.left !== ".") {
	      var leftNode = new mathMLTree.MathNode("mo", [makeText(group.left, group.mode)]);
	      leftNode.setAttribute("fence", "true");
	      inner.unshift(leftNode);
	    }

	    if (group.right !== ".") {
	      var rightNode = new mathMLTree.MathNode("mo", [makeText(group.right, group.mode)]);
	      rightNode.setAttribute("fence", "true");

	      if (group.rightColor) {
	        rightNode.setAttribute("mathcolor", group.rightColor);
	      }

	      inner.push(rightNode);
	    }

	    return makeRow(inner);
	  }
	});
	defineFunction({
	  type: "middle",
	  names: ["\\middle"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },
	  handler: (context, args) => {
	    var delim = checkDelimiter(args[0], context);

	    if (!context.parser.leftrightDepth) {
	      throw new ParseError("\\middle without preceding \\left", delim);
	    }

	    return {
	      type: "middle",
	      mode: context.parser.mode,
	      delim: delim.text
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var middleDelim;

	    if (group.delim === ".") {
	      middleDelim = makeNullDelimiter(options, []);
	    } else {
	      middleDelim = delimiter.sizedDelim(group.delim, 1, options, group.mode, []);
	      var isMiddle = {
	        delim: group.delim,
	        options
	      }; // Property `isMiddle` not defined on `span`. It is only used in
	      // this file above.
	      // TODO: Fix this violation of the `span` type and possibly rename
	      // things since `isMiddle` sounds like a boolean, but is a struct.
	      // $FlowFixMe

	      middleDelim.isMiddle = isMiddle;
	    }

	    return middleDelim;
	  },
	  mathmlBuilder: (group, options) => {
	    // A Firefox \middle will strech a character vertically only if it
	    // is in the fence part of the operator dictionary at:
	    // https://www.w3.org/TR/MathML3/appendixc.html.
	    // So we need to avoid U+2223 and use plain "|" instead.
	    var textNode = group.delim === "\\vert" || group.delim === "|" ? makeText("|", "text") : makeText(group.delim, group.mode);
	    var middleNode = new mathMLTree.MathNode("mo", [textNode]);
	    middleNode.setAttribute("fence", "true"); // MathML gives 5/18em spacing to each <mo> element.
	    // \middle should get delimiter spacing instead.

	    middleNode.setAttribute("lspace", "0.05em");
	    middleNode.setAttribute("rspace", "0.05em");
	    return middleNode;
	  }
	});

	var htmlBuilder$8 = (group, options) => {
	  // \cancel, \bcancel, \xcancel, \sout, \fbox, \colorbox, \fcolorbox, \phase
	  // Some groups can return document fragments.  Handle those by wrapping
	  // them in a span.
	  var inner = buildCommon.wrapFragment(buildGroup$1(group.body, options), options);
	  var label = group.label.substr(1);
	  var scale = options.sizeMultiplier;
	  var img;
	  var imgShift = 0; // In the LaTeX cancel package, line geometry is slightly different
	  // depending on whether the subject is wider than it is tall, or vice versa.
	  // We don't know the width of a group, so as a proxy, we test if
	  // the subject is a single character. This captures most of the
	  // subjects that should get the "tall" treatment.

	  var isSingleChar = utils.isCharacterBox(group.body);

	  if (label === "sout") {
	    img = buildCommon.makeSpan(["stretchy", "sout"]);
	    img.height = options.fontMetrics().defaultRuleThickness / scale;
	    imgShift = -0.5 * options.fontMetrics().xHeight;
	  } else if (label === "phase") {
	    // Set a couple of dimensions from the steinmetz package.
	    var lineWeight = calculateSize({
	      number: 0.6,
	      unit: "pt"
	    }, options);
	    var clearance = calculateSize({
	      number: 0.35,
	      unit: "ex"
	    }, options); // Prevent size changes like \Huge from affecting line thickness

	    var newOptions = options.havingBaseSizing();
	    scale = scale / newOptions.sizeMultiplier;
	    var angleHeight = inner.height + inner.depth + lineWeight + clearance; // Reserve a left pad for the angle.

	    inner.style.paddingLeft = makeEm(angleHeight / 2 + lineWeight); // Create an SVG

	    var viewBoxHeight = Math.floor(1000 * angleHeight * scale);
	    var path = phasePath(viewBoxHeight);
	    var svgNode = new SvgNode([new PathNode("phase", path)], {
	      "width": "400em",
	      "height": makeEm(viewBoxHeight / 1000),
	      "viewBox": "0 0 400000 " + viewBoxHeight,
	      "preserveAspectRatio": "xMinYMin slice"
	    }); // Wrap it in a span with overflow: hidden.

	    img = buildCommon.makeSvgSpan(["hide-tail"], [svgNode], options);
	    img.style.height = makeEm(angleHeight);
	    imgShift = inner.depth + lineWeight + clearance;
	  } else {
	    // Add horizontal padding
	    if (/cancel/.test(label)) {
	      if (!isSingleChar) {
	        inner.classes.push("cancel-pad");
	      }
	    } else if (label === "angl") {
	      inner.classes.push("anglpad");
	    } else {
	      inner.classes.push("boxpad");
	    } // Add vertical padding


	    var topPad = 0;
	    var bottomPad = 0;
	    var ruleThickness = 0; // ref: cancel package: \advance\totalheight2\p@ % "+2"

	    if (/box/.test(label)) {
	      ruleThickness = Math.max(options.fontMetrics().fboxrule, // default
	      options.minRuleThickness // User override.
	      );
	      topPad = options.fontMetrics().fboxsep + (label === "colorbox" ? 0 : ruleThickness);
	      bottomPad = topPad;
	    } else if (label === "angl") {
	      ruleThickness = Math.max(options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
	      topPad = 4 * ruleThickness; // gap = 3 × line, plus the line itself.

	      bottomPad = Math.max(0, 0.25 - inner.depth);
	    } else {
	      topPad = isSingleChar ? 0.2 : 0;
	      bottomPad = topPad;
	    }

	    img = stretchy.encloseSpan(inner, label, topPad, bottomPad, options);

	    if (/fbox|boxed|fcolorbox/.test(label)) {
	      img.style.borderStyle = "solid";
	      img.style.borderWidth = makeEm(ruleThickness);
	    } else if (label === "angl" && ruleThickness !== 0.049) {
	      img.style.borderTopWidth = makeEm(ruleThickness);
	      img.style.borderRightWidth = makeEm(ruleThickness);
	    }

	    imgShift = inner.depth + bottomPad;

	    if (group.backgroundColor) {
	      img.style.backgroundColor = group.backgroundColor;

	      if (group.borderColor) {
	        img.style.borderColor = group.borderColor;
	      }
	    }
	  }

	  var vlist;

	  if (group.backgroundColor) {
	    vlist = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: [// Put the color background behind inner;
	      {
	        type: "elem",
	        elem: img,
	        shift: imgShift
	      }, {
	        type: "elem",
	        elem: inner,
	        shift: 0
	      }]
	    }, options);
	  } else {
	    var classes = /cancel|phase/.test(label) ? ["svg-align"] : [];
	    vlist = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: [// Write the \cancel stroke on top of inner.
	      {
	        type: "elem",
	        elem: inner,
	        shift: 0
	      }, {
	        type: "elem",
	        elem: img,
	        shift: imgShift,
	        wrapperClasses: classes
	      }]
	    }, options);
	  }

	  if (/cancel/.test(label)) {
	    // The cancel package documentation says that cancel lines add their height
	    // to the expression, but tests show that isn't how it actually works.
	    vlist.height = inner.height;
	    vlist.depth = inner.depth;
	  }

	  if (/cancel/.test(label) && !isSingleChar) {
	    // cancel does not create horiz space for its line extension.
	    return buildCommon.makeSpan(["mord", "cancel-lap"], [vlist], options);
	  } else {
	    return buildCommon.makeSpan(["mord"], [vlist], options);
	  }
	};

	var mathmlBuilder$7 = (group, options) => {
	  var fboxsep = 0;
	  var node = new mathMLTree.MathNode(group.label.indexOf("colorbox") > -1 ? "mpadded" : "menclose", [buildGroup(group.body, options)]);

	  switch (group.label) {
	    case "\\cancel":
	      node.setAttribute("notation", "updiagonalstrike");
	      break;

	    case "\\bcancel":
	      node.setAttribute("notation", "downdiagonalstrike");
	      break;

	    case "\\phase":
	      node.setAttribute("notation", "phasorangle");
	      break;

	    case "\\sout":
	      node.setAttribute("notation", "horizontalstrike");
	      break;

	    case "\\fbox":
	      node.setAttribute("notation", "box");
	      break;

	    case "\\angl":
	      node.setAttribute("notation", "actuarial");
	      break;

	    case "\\fcolorbox":
	    case "\\colorbox":
	      // <menclose> doesn't have a good notation option. So use <mpadded>
	      // instead. Set some attributes that come included with <menclose>.
	      fboxsep = options.fontMetrics().fboxsep * options.fontMetrics().ptPerEm;
	      node.setAttribute("width", "+" + 2 * fboxsep + "pt");
	      node.setAttribute("height", "+" + 2 * fboxsep + "pt");
	      node.setAttribute("lspace", fboxsep + "pt"); //

	      node.setAttribute("voffset", fboxsep + "pt");

	      if (group.label === "\\fcolorbox") {
	        var thk = Math.max(options.fontMetrics().fboxrule, // default
	        options.minRuleThickness // user override
	        );
	        node.setAttribute("style", "border: " + thk + "em solid " + String(group.borderColor));
	      }

	      break;

	    case "\\xcancel":
	      node.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
	      break;
	  }

	  if (group.backgroundColor) {
	    node.setAttribute("mathbackground", group.backgroundColor);
	  }

	  return node;
	};

	defineFunction({
	  type: "enclose",
	  names: ["\\colorbox"],
	  props: {
	    numArgs: 2,
	    allowedInText: true,
	    argTypes: ["color", "text"]
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var color = assertNodeType(args[0], "color-token").color;
	    var body = args[1];
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: funcName,
	      backgroundColor: color,
	      body
	    };
	  },

	  htmlBuilder: htmlBuilder$8,
	  mathmlBuilder: mathmlBuilder$7
	});
	defineFunction({
	  type: "enclose",
	  names: ["\\fcolorbox"],
	  props: {
	    numArgs: 3,
	    allowedInText: true,
	    argTypes: ["color", "color", "text"]
	  },

	  handler(_ref2, args, optArgs) {
	    var {
	      parser,
	      funcName
	    } = _ref2;
	    var borderColor = assertNodeType(args[0], "color-token").color;
	    var backgroundColor = assertNodeType(args[1], "color-token").color;
	    var body = args[2];
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: funcName,
	      backgroundColor,
	      borderColor,
	      body
	    };
	  },

	  htmlBuilder: htmlBuilder$8,
	  mathmlBuilder: mathmlBuilder$7
	});
	defineFunction({
	  type: "enclose",
	  names: ["\\fbox"],
	  props: {
	    numArgs: 1,
	    argTypes: ["hbox"],
	    allowedInText: true
	  },

	  handler(_ref3, args) {
	    var {
	      parser
	    } = _ref3;
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: "\\fbox",
	      body: args[0]
	    };
	  }

	});
	defineFunction({
	  type: "enclose",
	  names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\phase"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref4, args) {
	    var {
	      parser,
	      funcName
	    } = _ref4;
	    var body = args[0];
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: funcName,
	      body
	    };
	  },

	  htmlBuilder: htmlBuilder$8,
	  mathmlBuilder: mathmlBuilder$7
	});
	defineFunction({
	  type: "enclose",
	  names: ["\\angl"],
	  props: {
	    numArgs: 1,
	    argTypes: ["hbox"],
	    allowedInText: false
	  },

	  handler(_ref5, args) {
	    var {
	      parser
	    } = _ref5;
	    return {
	      type: "enclose",
	      mode: parser.mode,
	      label: "\\angl",
	      body: args[0]
	    };
	  }

	});

	/**
	 * All registered environments.
	 * `environments.js` exports this same dictionary again and makes it public.
	 * `Parser.js` requires this dictionary via `environments.js`.
	 */
	var _environments = {};
	function defineEnvironment(_ref) {
	  var {
	    type,
	    names,
	    props,
	    handler,
	    htmlBuilder,
	    mathmlBuilder
	  } = _ref;
	  // Set default values of environments.
	  var data = {
	    type,
	    numArgs: props.numArgs || 0,
	    allowedInText: false,
	    numOptionalArgs: 0,
	    handler
	  };

	  for (var i = 0; i < names.length; ++i) {
	    // TODO: The value type of _environments should be a type union of all
	    // possible `EnvSpec<>` possibilities instead of `EnvSpec<*>`, which is
	    // an existential type.
	    _environments[names[i]] = data;
	  }

	  if (htmlBuilder) {
	    _htmlGroupBuilders[type] = htmlBuilder;
	  }

	  if (mathmlBuilder) {
	    _mathmlGroupBuilders[type] = mathmlBuilder;
	  }
	}

	/**
	 * All registered global/built-in macros.
	 * `macros.js` exports this same dictionary again and makes it public.
	 * `Parser.js` requires this dictionary via `macros.js`.
	 */
	var _macros = {}; // This function might one day accept an additional argument and do more things.

	function defineMacro(name, body) {
	  _macros[name] = body;
	}

	// Helper functions
	function getHLines(parser) {
	  // Return an array. The array length = number of hlines.
	  // Each element in the array tells if the line is dashed.
	  var hlineInfo = [];
	  parser.consumeSpaces();
	  var nxt = parser.fetch().text;

	  while (nxt === "\\hline" || nxt === "\\hdashline") {
	    parser.consume();
	    hlineInfo.push(nxt === "\\hdashline");
	    parser.consumeSpaces();
	    nxt = parser.fetch().text;
	  }

	  return hlineInfo;
	}

	var validateAmsEnvironmentContext = context => {
	  var settings = context.parser.settings;

	  if (!settings.displayMode) {
	    throw new ParseError("{" + context.envName + "} can be used only in" + " display mode.");
	  }
	}; // autoTag (an argument to parseArray) can be one of three values:
	// * undefined: Regular (not-top-level) array; no tags on each row
	// * true: Automatic equation numbering, overridable by \tag
	// * false: Tags allowed on each row, but no automatic numbering
	// This function *doesn't* work with the "split" environment name.


	function getAutoTag(name) {
	  if (name.indexOf("ed") === -1) {
	    return name.indexOf("*") === -1;
	  } // return undefined;

	}
	/**
	 * Parse the body of the environment, with rows delimited by \\ and
	 * columns delimited by &, and create a nested list in row-major order
	 * with one group per cell.  If given an optional argument style
	 * ("text", "display", etc.), then each cell is cast into that style.
	 */


	function parseArray(parser, _ref, style) {
	  var {
	    hskipBeforeAndAfter,
	    addJot,
	    cols,
	    arraystretch,
	    colSeparationType,
	    autoTag,
	    singleRow,
	    emptySingleRow,
	    maxNumCols,
	    leqno
	  } = _ref;
	  parser.gullet.beginGroup();

	  if (!singleRow) {
	    // \cr is equivalent to \\ without the optional size argument (see below)
	    // TODO: provide helpful error when \cr is used outside array environment
	    parser.gullet.macros.set("\\cr", "\\\\\\relax");
	  } // Get current arraystretch if it's not set by the environment


	  if (!arraystretch) {
	    var stretch = parser.gullet.expandMacroAsText("\\arraystretch");

	    if (stretch == null) {
	      // Default \arraystretch from lttab.dtx
	      arraystretch = 1;
	    } else {
	      arraystretch = parseFloat(stretch);

	      if (!arraystretch || arraystretch < 0) {
	        throw new ParseError("Invalid \\arraystretch: " + stretch);
	      }
	    }
	  } // Start group for first cell


	  parser.gullet.beginGroup();
	  var row = [];
	  var body = [row];
	  var rowGaps = [];
	  var hLinesBeforeRow = [];
	  var tags = autoTag != null ? [] : undefined; // amsmath uses \global\@eqnswtrue and \global\@eqnswfalse to represent
	  // whether this row should have an equation number.  Simulate this with
	  // a \@eqnsw macro set to 1 or 0.

	  function beginRow() {
	    if (autoTag) {
	      parser.gullet.macros.set("\\@eqnsw", "1", true);
	    }
	  }

	  function endRow() {
	    if (tags) {
	      if (parser.gullet.macros.get("\\df@tag")) {
	        tags.push(parser.subparse([new Token("\\df@tag")]));
	        parser.gullet.macros.set("\\df@tag", undefined, true);
	      } else {
	        tags.push(Boolean(autoTag) && parser.gullet.macros.get("\\@eqnsw") === "1");
	      }
	    }
	  }

	  beginRow(); // Test for \hline at the top of the array.

	  hLinesBeforeRow.push(getHLines(parser));

	  while (true) {
	    // eslint-disable-line no-constant-condition
	    // Parse each cell in its own group (namespace)
	    var cell = parser.parseExpression(false, singleRow ? "\\end" : "\\\\");
	    parser.gullet.endGroup();
	    parser.gullet.beginGroup();
	    cell = {
	      type: "ordgroup",
	      mode: parser.mode,
	      body: cell
	    };

	    if (style) {
	      cell = {
	        type: "styling",
	        mode: parser.mode,
	        style,
	        body: [cell]
	      };
	    }

	    row.push(cell);
	    var next = parser.fetch().text;

	    if (next === "&") {
	      if (maxNumCols && row.length === maxNumCols) {
	        if (singleRow || colSeparationType) {
	          // {equation} or {split}
	          throw new ParseError("Too many tab characters: &", parser.nextToken);
	        } else {
	          // {array} environment
	          parser.settings.reportNonstrict("textEnv", "Too few columns " + "specified in the {array} column argument.");
	        }
	      }

	      parser.consume();
	    } else if (next === "\\end") {
	      endRow(); // Arrays terminate newlines with `\crcr` which consumes a `\cr` if
	      // the last line is empty.  However, AMS environments keep the
	      // empty row if it's the only one.
	      // NOTE: Currently, `cell` is the last item added into `row`.

	      if (row.length === 1 && cell.type === "styling" && cell.body[0].body.length === 0 && (body.length > 1 || !emptySingleRow)) {
	        body.pop();
	      }

	      if (hLinesBeforeRow.length < body.length + 1) {
	        hLinesBeforeRow.push([]);
	      }

	      break;
	    } else if (next === "\\\\") {
	      parser.consume();
	      var size = void 0; // \def\Let@{\let\\\math@cr}
	      // \def\math@cr{...\math@cr@}
	      // \def\math@cr@{\new@ifnextchar[\math@cr@@{\math@cr@@[\z@]}}
	      // \def\math@cr@@[#1]{...\math@cr@@@...}
	      // \def\math@cr@@@{\cr}

	      if (parser.gullet.future().text !== " ") {
	        size = parser.parseSizeGroup(true);
	      }

	      rowGaps.push(size ? size.value : null);
	      endRow(); // check for \hline(s) following the row separator

	      hLinesBeforeRow.push(getHLines(parser));
	      row = [];
	      body.push(row);
	      beginRow();
	    } else {
	      throw new ParseError("Expected & or \\\\ or \\cr or \\end", parser.nextToken);
	    }
	  } // End cell group


	  parser.gullet.endGroup(); // End array group defining \cr

	  parser.gullet.endGroup();
	  return {
	    type: "array",
	    mode: parser.mode,
	    addJot,
	    arraystretch,
	    body,
	    cols,
	    rowGaps,
	    hskipBeforeAndAfter,
	    hLinesBeforeRow,
	    colSeparationType,
	    tags,
	    leqno
	  };
	} // Decides on a style for cells in an array according to whether the given
	// environment name starts with the letter 'd'.


	function dCellStyle(envName) {
	  if (envName.substr(0, 1) === "d") {
	    return "display";
	  } else {
	    return "text";
	  }
	}

	var htmlBuilder$7 = function htmlBuilder(group, options) {
	  var r;
	  var c;
	  var nr = group.body.length;
	  var hLinesBeforeRow = group.hLinesBeforeRow;
	  var nc = 0;
	  var body = new Array(nr);
	  var hlines = [];
	  var ruleThickness = Math.max( // From LaTeX \showthe\arrayrulewidth. Equals 0.04 em.
	  options.fontMetrics().arrayRuleWidth, options.minRuleThickness // User override.
	  ); // Horizontal spacing

	  var pt = 1 / options.fontMetrics().ptPerEm;
	  var arraycolsep = 5 * pt; // default value, i.e. \arraycolsep in article.cls

	  if (group.colSeparationType && group.colSeparationType === "small") {
	    // We're in a {smallmatrix}. Default column space is \thickspace,
	    // i.e. 5/18em = 0.2778em, per amsmath.dtx for {smallmatrix}.
	    // But that needs adjustment because LaTeX applies \scriptstyle to the
	    // entire array, including the colspace, but this function applies
	    // \scriptstyle only inside each element.
	    var localMultiplier = options.havingStyle(Style$1.SCRIPT).sizeMultiplier;
	    arraycolsep = 0.2778 * (localMultiplier / options.sizeMultiplier);
	  } // Vertical spacing


	  var baselineskip = group.colSeparationType === "CD" ? calculateSize({
	    number: 3,
	    unit: "ex"
	  }, options) : 12 * pt; // see size10.clo
	  // Default \jot from ltmath.dtx
	  // TODO(edemaine): allow overriding \jot via \setlength (#687)

	  var jot = 3 * pt;
	  var arrayskip = group.arraystretch * baselineskip;
	  var arstrutHeight = 0.7 * arrayskip; // \strutbox in ltfsstrc.dtx and

	  var arstrutDepth = 0.3 * arrayskip; // \@arstrutbox in lttab.dtx

	  var totalHeight = 0; // Set a position for \hline(s) at the top of the array, if any.

	  function setHLinePos(hlinesInGap) {
	    for (var i = 0; i < hlinesInGap.length; ++i) {
	      if (i > 0) {
	        totalHeight += 0.25;
	      }

	      hlines.push({
	        pos: totalHeight,
	        isDashed: hlinesInGap[i]
	      });
	    }
	  }

	  setHLinePos(hLinesBeforeRow[0]);

	  for (r = 0; r < group.body.length; ++r) {
	    var inrow = group.body[r];
	    var height = arstrutHeight; // \@array adds an \@arstrut

	    var depth = arstrutDepth; // to each tow (via the template)

	    if (nc < inrow.length) {
	      nc = inrow.length;
	    }

	    var outrow = new Array(inrow.length);

	    for (c = 0; c < inrow.length; ++c) {
	      var elt = buildGroup$1(inrow[c], options);

	      if (depth < elt.depth) {
	        depth = elt.depth;
	      }

	      if (height < elt.height) {
	        height = elt.height;
	      }

	      outrow[c] = elt;
	    }

	    var rowGap = group.rowGaps[r];
	    var gap = 0;

	    if (rowGap) {
	      gap = calculateSize(rowGap, options);

	      if (gap > 0) {
	        // \@argarraycr
	        gap += arstrutDepth;

	        if (depth < gap) {
	          depth = gap; // \@xargarraycr
	        }

	        gap = 0;
	      }
	    } // In AMS multiline environments such as aligned and gathered, rows
	    // correspond to lines that have additional \jot added to the
	    // \baselineskip via \openup.


	    if (group.addJot) {
	      depth += jot;
	    }

	    outrow.height = height;
	    outrow.depth = depth;
	    totalHeight += height;
	    outrow.pos = totalHeight;
	    totalHeight += depth + gap; // \@yargarraycr

	    body[r] = outrow; // Set a position for \hline(s), if any.

	    setHLinePos(hLinesBeforeRow[r + 1]);
	  }

	  var offset = totalHeight / 2 + options.fontMetrics().axisHeight;
	  var colDescriptions = group.cols || [];
	  var cols = [];
	  var colSep;
	  var colDescrNum;
	  var tagSpans = [];

	  if (group.tags && group.tags.some(tag => tag)) {
	    // An environment with manual tags and/or automatic equation numbers.
	    // Create node(s), the latter of which trigger CSS counter increment.
	    for (r = 0; r < nr; ++r) {
	      var rw = body[r];
	      var shift = rw.pos - offset;
	      var tag = group.tags[r];
	      var tagSpan = void 0;

	      if (tag === true) {
	        // automatic numbering
	        tagSpan = buildCommon.makeSpan(["eqn-num"], [], options);
	      } else if (tag === false) {
	        // \nonumber/\notag or starred environment
	        tagSpan = buildCommon.makeSpan([], [], options);
	      } else {
	        // manual \tag
	        tagSpan = buildCommon.makeSpan([], buildExpression$1(tag, options, true), options);
	      }

	      tagSpan.depth = rw.depth;
	      tagSpan.height = rw.height;
	      tagSpans.push({
	        type: "elem",
	        elem: tagSpan,
	        shift
	      });
	    }
	  }

	  for (c = 0, colDescrNum = 0; // Continue while either there are more columns or more column
	  // descriptions, so trailing separators don't get lost.
	  c < nc || colDescrNum < colDescriptions.length; ++c, ++colDescrNum) {
	    var colDescr = colDescriptions[colDescrNum] || {};
	    var firstSeparator = true;

	    while (colDescr.type === "separator") {
	      // If there is more than one separator in a row, add a space
	      // between them.
	      if (!firstSeparator) {
	        colSep = buildCommon.makeSpan(["arraycolsep"], []);
	        colSep.style.width = makeEm(options.fontMetrics().doubleRuleSep);
	        cols.push(colSep);
	      }

	      if (colDescr.separator === "|" || colDescr.separator === ":") {
	        var lineType = colDescr.separator === "|" ? "solid" : "dashed";
	        var separator = buildCommon.makeSpan(["vertical-separator"], [], options);
	        separator.style.height = makeEm(totalHeight);
	        separator.style.borderRightWidth = makeEm(ruleThickness);
	        separator.style.borderRightStyle = lineType;
	        separator.style.margin = "0 " + makeEm(-ruleThickness / 2);

	        var _shift = totalHeight - offset;

	        if (_shift) {
	          separator.style.verticalAlign = makeEm(-_shift);
	        }

	        cols.push(separator);
	      } else {
	        throw new ParseError("Invalid separator type: " + colDescr.separator);
	      }

	      colDescrNum++;
	      colDescr = colDescriptions[colDescrNum] || {};
	      firstSeparator = false;
	    }

	    if (c >= nc) {
	      continue;
	    }

	    var sepwidth = void 0;

	    if (c > 0 || group.hskipBeforeAndAfter) {
	      sepwidth = utils.deflt(colDescr.pregap, arraycolsep);

	      if (sepwidth !== 0) {
	        colSep = buildCommon.makeSpan(["arraycolsep"], []);
	        colSep.style.width = makeEm(sepwidth);
	        cols.push(colSep);
	      }
	    }

	    var col = [];

	    for (r = 0; r < nr; ++r) {
	      var row = body[r];
	      var elem = row[c];

	      if (!elem) {
	        continue;
	      }

	      var _shift2 = row.pos - offset;

	      elem.depth = row.depth;
	      elem.height = row.height;
	      col.push({
	        type: "elem",
	        elem: elem,
	        shift: _shift2
	      });
	    }

	    col = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: col
	    }, options);
	    col = buildCommon.makeSpan(["col-align-" + (colDescr.align || "c")], [col]);
	    cols.push(col);

	    if (c < nc - 1 || group.hskipBeforeAndAfter) {
	      sepwidth = utils.deflt(colDescr.postgap, arraycolsep);

	      if (sepwidth !== 0) {
	        colSep = buildCommon.makeSpan(["arraycolsep"], []);
	        colSep.style.width = makeEm(sepwidth);
	        cols.push(colSep);
	      }
	    }
	  }

	  body = buildCommon.makeSpan(["mtable"], cols); // Add \hline(s), if any.

	  if (hlines.length > 0) {
	    var line = buildCommon.makeLineSpan("hline", options, ruleThickness);
	    var dashes = buildCommon.makeLineSpan("hdashline", options, ruleThickness);
	    var vListElems = [{
	      type: "elem",
	      elem: body,
	      shift: 0
	    }];

	    while (hlines.length > 0) {
	      var hline = hlines.pop();
	      var lineShift = hline.pos - offset;

	      if (hline.isDashed) {
	        vListElems.push({
	          type: "elem",
	          elem: dashes,
	          shift: lineShift
	        });
	      } else {
	        vListElems.push({
	          type: "elem",
	          elem: line,
	          shift: lineShift
	        });
	      }
	    }

	    body = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: vListElems
	    }, options);
	  }

	  if (tagSpans.length === 0) {
	    return buildCommon.makeSpan(["mord"], [body], options);
	  } else {
	    var eqnNumCol = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: tagSpans
	    }, options);
	    eqnNumCol = buildCommon.makeSpan(["tag"], [eqnNumCol], options);
	    return buildCommon.makeFragment([body, eqnNumCol]);
	  }
	};

	var alignMap = {
	  c: "center ",
	  l: "left ",
	  r: "right "
	};

	var mathmlBuilder$6 = function mathmlBuilder(group, options) {
	  var tbl = [];
	  var glue = new mathMLTree.MathNode("mtd", [], ["mtr-glue"]);
	  var tag = new mathMLTree.MathNode("mtd", [], ["mml-eqn-num"]);

	  for (var i = 0; i < group.body.length; i++) {
	    var rw = group.body[i];
	    var row = [];

	    for (var j = 0; j < rw.length; j++) {
	      row.push(new mathMLTree.MathNode("mtd", [buildGroup(rw[j], options)]));
	    }

	    if (group.tags && group.tags[i]) {
	      row.unshift(glue);
	      row.push(glue);

	      if (group.leqno) {
	        row.unshift(tag);
	      } else {
	        row.push(tag);
	      }
	    }

	    tbl.push(new mathMLTree.MathNode("mtr", row));
	  }

	  var table = new mathMLTree.MathNode("mtable", tbl); // Set column alignment, row spacing, column spacing, and
	  // array lines by setting attributes on the table element.
	  // Set the row spacing. In MathML, we specify a gap distance.
	  // We do not use rowGap[] because MathML automatically increases
	  // cell height with the height/depth of the element content.
	  // LaTeX \arraystretch multiplies the row baseline-to-baseline distance.
	  // We simulate this by adding (arraystretch - 1)em to the gap. This
	  // does a reasonable job of adjusting arrays containing 1 em tall content.
	  // The 0.16 and 0.09 values are found emprically. They produce an array
	  // similar to LaTeX and in which content does not interfere with \hines.

	  var gap = group.arraystretch === 0.5 ? 0.1 // {smallmatrix}, {subarray}
	  : 0.16 + group.arraystretch - 1 + (group.addJot ? 0.09 : 0);
	  table.setAttribute("rowspacing", makeEm(gap)); // MathML table lines go only between cells.
	  // To place a line on an edge we'll use <menclose>, if necessary.

	  var menclose = "";
	  var align = "";

	  if (group.cols && group.cols.length > 0) {
	    // Find column alignment, column spacing, and  vertical lines.
	    var cols = group.cols;
	    var columnLines = "";
	    var prevTypeWasAlign = false;
	    var iStart = 0;
	    var iEnd = cols.length;

	    if (cols[0].type === "separator") {
	      menclose += "top ";
	      iStart = 1;
	    }

	    if (cols[cols.length - 1].type === "separator") {
	      menclose += "bottom ";
	      iEnd -= 1;
	    }

	    for (var _i = iStart; _i < iEnd; _i++) {
	      if (cols[_i].type === "align") {
	        align += alignMap[cols[_i].align];

	        if (prevTypeWasAlign) {
	          columnLines += "none ";
	        }

	        prevTypeWasAlign = true;
	      } else if (cols[_i].type === "separator") {
	        // MathML accepts only single lines between cells.
	        // So we read only the first of consecutive separators.
	        if (prevTypeWasAlign) {
	          columnLines += cols[_i].separator === "|" ? "solid " : "dashed ";
	          prevTypeWasAlign = false;
	        }
	      }
	    }

	    table.setAttribute("columnalign", align.trim());

	    if (/[sd]/.test(columnLines)) {
	      table.setAttribute("columnlines", columnLines.trim());
	    }
	  } // Set column spacing.


	  if (group.colSeparationType === "align") {
	    var _cols = group.cols || [];

	    var spacing = "";

	    for (var _i2 = 1; _i2 < _cols.length; _i2++) {
	      spacing += _i2 % 2 ? "0em " : "1em ";
	    }

	    table.setAttribute("columnspacing", spacing.trim());
	  } else if (group.colSeparationType === "alignat" || group.colSeparationType === "gather") {
	    table.setAttribute("columnspacing", "0em");
	  } else if (group.colSeparationType === "small") {
	    table.setAttribute("columnspacing", "0.2778em");
	  } else if (group.colSeparationType === "CD") {
	    table.setAttribute("columnspacing", "0.5em");
	  } else {
	    table.setAttribute("columnspacing", "1em");
	  } // Address \hline and \hdashline


	  var rowLines = "";
	  var hlines = group.hLinesBeforeRow;
	  menclose += hlines[0].length > 0 ? "left " : "";
	  menclose += hlines[hlines.length - 1].length > 0 ? "right " : "";

	  for (var _i3 = 1; _i3 < hlines.length - 1; _i3++) {
	    rowLines += hlines[_i3].length === 0 ? "none " // MathML accepts only a single line between rows. Read one element.
	    : hlines[_i3][0] ? "dashed " : "solid ";
	  }

	  if (/[sd]/.test(rowLines)) {
	    table.setAttribute("rowlines", rowLines.trim());
	  }

	  if (menclose !== "") {
	    table = new mathMLTree.MathNode("menclose", [table]);
	    table.setAttribute("notation", menclose.trim());
	  }

	  if (group.arraystretch && group.arraystretch < 1) {
	    // A small array. Wrap in scriptstyle so row gap is not too large.
	    table = new mathMLTree.MathNode("mstyle", [table]);
	    table.setAttribute("scriptlevel", "1");
	  }

	  return table;
	}; // Convenience function for align, align*, aligned, alignat, alignat*, alignedat.


	var alignedHandler = function alignedHandler(context, args) {
	  if (context.envName.indexOf("ed") === -1) {
	    validateAmsEnvironmentContext(context);
	  }

	  var cols = [];
	  var separationType = context.envName.indexOf("at") > -1 ? "alignat" : "align";
	  var isSplit = context.envName === "split";
	  var res = parseArray(context.parser, {
	    cols,
	    addJot: true,
	    autoTag: isSplit ? undefined : getAutoTag(context.envName),
	    emptySingleRow: true,
	    colSeparationType: separationType,
	    maxNumCols: isSplit ? 2 : undefined,
	    leqno: context.parser.settings.leqno
	  }, "display"); // Determining number of columns.
	  // 1. If the first argument is given, we use it as a number of columns,
	  //    and makes sure that each row doesn't exceed that number.
	  // 2. Otherwise, just count number of columns = maximum number
	  //    of cells in each row ("aligned" mode -- isAligned will be true).
	  //
	  // At the same time, prepend empty group {} at beginning of every second
	  // cell in each row (starting with second cell) so that operators become
	  // binary.  This behavior is implemented in amsmath's \start@aligned.

	  var numMaths;
	  var numCols = 0;
	  var emptyGroup = {
	    type: "ordgroup",
	    mode: context.mode,
	    body: []
	  };

	  if (args[0] && args[0].type === "ordgroup") {
	    var arg0 = "";

	    for (var i = 0; i < args[0].body.length; i++) {
	      var textord = assertNodeType(args[0].body[i], "textord");
	      arg0 += textord.text;
	    }

	    numMaths = Number(arg0);
	    numCols = numMaths * 2;
	  }

	  var isAligned = !numCols;
	  res.body.forEach(function (row) {
	    for (var _i4 = 1; _i4 < row.length; _i4 += 2) {
	      // Modify ordgroup node within styling node
	      var styling = assertNodeType(row[_i4], "styling");
	      var ordgroup = assertNodeType(styling.body[0], "ordgroup");
	      ordgroup.body.unshift(emptyGroup);
	    }

	    if (!isAligned) {
	      // Case 1
	      var curMaths = row.length / 2;

	      if (numMaths < curMaths) {
	        throw new ParseError("Too many math in a row: " + ("expected " + numMaths + ", but got " + curMaths), row[0]);
	      }
	    } else if (numCols < row.length) {
	      // Case 2
	      numCols = row.length;
	    }
	  }); // Adjusting alignment.
	  // In aligned mode, we add one \qquad between columns;
	  // otherwise we add nothing.

	  for (var _i5 = 0; _i5 < numCols; ++_i5) {
	    var align = "r";
	    var pregap = 0;

	    if (_i5 % 2 === 1) {
	      align = "l";
	    } else if (_i5 > 0 && isAligned) {
	      // "aligned" mode.
	      pregap = 1; // add one \quad
	    }

	    cols[_i5] = {
	      type: "align",
	      align: align,
	      pregap: pregap,
	      postgap: 0
	    };
	  }

	  res.colSeparationType = isAligned ? "align" : "alignat";
	  return res;
	}; // Arrays are part of LaTeX, defined in lttab.dtx so its documentation
	// is part of the source2e.pdf file of LaTeX2e source documentation.
	// {darray} is an {array} environment where cells are set in \displaystyle,
	// as defined in nccmath.sty.


	defineEnvironment({
	  type: "array",
	  names: ["array", "darray"],
	  props: {
	    numArgs: 1
	  },

	  handler(context, args) {
	    // Since no types are specified above, the two possibilities are
	    // - The argument is wrapped in {} or [], in which case Parser's
	    //   parseGroup() returns an "ordgroup" wrapping some symbol node.
	    // - The argument is a bare symbol node.
	    var symNode = checkSymbolNodeType(args[0]);
	    var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
	    var cols = colalign.map(function (nde) {
	      var node = assertSymbolNodeType(nde);
	      var ca = node.text;

	      if ("lcr".indexOf(ca) !== -1) {
	        return {
	          type: "align",
	          align: ca
	        };
	      } else if (ca === "|") {
	        return {
	          type: "separator",
	          separator: "|"
	        };
	      } else if (ca === ":") {
	        return {
	          type: "separator",
	          separator: ":"
	        };
	      }

	      throw new ParseError("Unknown column alignment: " + ca, nde);
	    });
	    var res = {
	      cols,
	      hskipBeforeAndAfter: true,
	      // \@preamble in lttab.dtx
	      maxNumCols: cols.length
	    };
	    return parseArray(context.parser, res, dCellStyle(context.envName));
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	}); // The matrix environments of amsmath builds on the array environment
	// of LaTeX, which is discussed above.
	// The mathtools package adds starred versions of the same environments.
	// These have an optional argument to choose left|center|right justification.

	defineEnvironment({
	  type: "array",
	  names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix", "matrix*", "pmatrix*", "bmatrix*", "Bmatrix*", "vmatrix*", "Vmatrix*"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    var delimiters = {
	      "matrix": null,
	      "pmatrix": ["(", ")"],
	      "bmatrix": ["[", "]"],
	      "Bmatrix": ["\\{", "\\}"],
	      "vmatrix": ["|", "|"],
	      "Vmatrix": ["\\Vert", "\\Vert"]
	    }[context.envName.replace("*", "")]; // \hskip -\arraycolsep in amsmath

	    var colAlign = "c";
	    var payload = {
	      hskipBeforeAndAfter: false,
	      cols: [{
	        type: "align",
	        align: colAlign
	      }]
	    };

	    if (context.envName.charAt(context.envName.length - 1) === "*") {
	      // It's one of the mathtools starred functions.
	      // Parse the optional alignment argument.
	      var parser = context.parser;
	      parser.consumeSpaces();

	      if (parser.fetch().text === "[") {
	        parser.consume();
	        parser.consumeSpaces();
	        colAlign = parser.fetch().text;

	        if ("lcr".indexOf(colAlign) === -1) {
	          throw new ParseError("Expected l or c or r", parser.nextToken);
	        }

	        parser.consume();
	        parser.consumeSpaces();
	        parser.expect("]");
	        parser.consume();
	        payload.cols = [{
	          type: "align",
	          align: colAlign
	        }];
	      }
	    }

	    var res = parseArray(context.parser, payload, dCellStyle(context.envName)); // Populate cols with the correct number of column alignment specs.

	    var numCols = Math.max(0, ...res.body.map(row => row.length));
	    res.cols = new Array(numCols).fill({
	      type: "align",
	      align: colAlign
	    });
	    return delimiters ? {
	      type: "leftright",
	      mode: context.mode,
	      body: [res],
	      left: delimiters[0],
	      right: delimiters[1],
	      rightColor: undefined // \right uninfluenced by \color in array

	    } : res;
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	});
	defineEnvironment({
	  type: "array",
	  names: ["smallmatrix"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    var payload = {
	      arraystretch: 0.5
	    };
	    var res = parseArray(context.parser, payload, "script");
	    res.colSeparationType = "small";
	    return res;
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	});
	defineEnvironment({
	  type: "array",
	  names: ["subarray"],
	  props: {
	    numArgs: 1
	  },

	  handler(context, args) {
	    // Parsing of {subarray} is similar to {array}
	    var symNode = checkSymbolNodeType(args[0]);
	    var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
	    var cols = colalign.map(function (nde) {
	      var node = assertSymbolNodeType(nde);
	      var ca = node.text; // {subarray} only recognizes "l" & "c"

	      if ("lc".indexOf(ca) !== -1) {
	        return {
	          type: "align",
	          align: ca
	        };
	      }

	      throw new ParseError("Unknown column alignment: " + ca, nde);
	    });

	    if (cols.length > 1) {
	      throw new ParseError("{subarray} can contain only one column");
	    }

	    var res = {
	      cols,
	      hskipBeforeAndAfter: false,
	      arraystretch: 0.5
	    };
	    res = parseArray(context.parser, res, "script");

	    if (res.body.length > 0 && res.body[0].length > 1) {
	      throw new ParseError("{subarray} can contain only one column");
	    }

	    return res;
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	}); // A cases environment (in amsmath.sty) is almost equivalent to
	// \def\arraystretch{1.2}%
	// \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.
	// {dcases} is a {cases} environment where cells are set in \displaystyle,
	// as defined in mathtools.sty.
	// {rcases} is another mathtools environment. It's brace is on the right side.

	defineEnvironment({
	  type: "array",
	  names: ["cases", "dcases", "rcases", "drcases"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    var payload = {
	      arraystretch: 1.2,
	      cols: [{
	        type: "align",
	        align: "l",
	        pregap: 0,
	        // TODO(kevinb) get the current style.
	        // For now we use the metrics for TEXT style which is what we were
	        // doing before.  Before attempting to get the current style we
	        // should look at TeX's behavior especially for \over and matrices.
	        postgap: 1.0
	        /* 1em quad */

	      }, {
	        type: "align",
	        align: "l",
	        pregap: 0,
	        postgap: 0
	      }]
	    };
	    var res = parseArray(context.parser, payload, dCellStyle(context.envName));
	    return {
	      type: "leftright",
	      mode: context.mode,
	      body: [res],
	      left: context.envName.indexOf("r") > -1 ? "." : "\\{",
	      right: context.envName.indexOf("r") > -1 ? "\\}" : ".",
	      rightColor: undefined
	    };
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	}); // In the align environment, one uses ampersands, &, to specify number of
	// columns in each row, and to locate spacing between each column.
	// align gets automatic numbering. align* and aligned do not.
	// The alignedat environment can be used in math mode.
	// Note that we assume \nomallineskiplimit to be zero,
	// so that \strut@ is the same as \strut.

	defineEnvironment({
	  type: "array",
	  names: ["align", "align*", "aligned", "split"],
	  props: {
	    numArgs: 0
	  },
	  handler: alignedHandler,
	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	}); // A gathered environment is like an array environment with one centered
	// column, but where rows are considered lines so get \jot line spacing
	// and contents are set in \displaystyle.

	defineEnvironment({
	  type: "array",
	  names: ["gathered", "gather", "gather*"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    if (utils.contains(["gather", "gather*"], context.envName)) {
	      validateAmsEnvironmentContext(context);
	    }

	    var res = {
	      cols: [{
	        type: "align",
	        align: "c"
	      }],
	      addJot: true,
	      colSeparationType: "gather",
	      autoTag: getAutoTag(context.envName),
	      emptySingleRow: true,
	      leqno: context.parser.settings.leqno
	    };
	    return parseArray(context.parser, res, "display");
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	}); // alignat environment is like an align environment, but one must explicitly
	// specify maximum number of columns in each row, and can adjust spacing between
	// each columns.

	defineEnvironment({
	  type: "array",
	  names: ["alignat", "alignat*", "alignedat"],
	  props: {
	    numArgs: 1
	  },
	  handler: alignedHandler,
	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	});
	defineEnvironment({
	  type: "array",
	  names: ["equation", "equation*"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    validateAmsEnvironmentContext(context);
	    var res = {
	      autoTag: getAutoTag(context.envName),
	      emptySingleRow: true,
	      singleRow: true,
	      maxNumCols: 1,
	      leqno: context.parser.settings.leqno
	    };
	    return parseArray(context.parser, res, "display");
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	});
	defineEnvironment({
	  type: "array",
	  names: ["CD"],
	  props: {
	    numArgs: 0
	  },

	  handler(context) {
	    validateAmsEnvironmentContext(context);
	    return parseCD(context.parser);
	  },

	  htmlBuilder: htmlBuilder$7,
	  mathmlBuilder: mathmlBuilder$6
	});
	defineMacro("\\nonumber", "\\gdef\\@eqnsw{0}");
	defineMacro("\\notag", "\\nonumber"); // Catch \hline outside array environment

	defineFunction({
	  type: "text",
	  // Doesn't matter what this is.
	  names: ["\\hline", "\\hdashline"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    allowedInMath: true
	  },

	  handler(context, args) {
	    throw new ParseError(context.funcName + " valid only within array environment");
	  }

	});

	var environments = _environments;

	// defineEnvironment definitions.

	defineFunction({
	  type: "environment",
	  names: ["\\begin", "\\end"],
	  props: {
	    numArgs: 1,
	    argTypes: ["text"]
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var nameGroup = args[0];

	    if (nameGroup.type !== "ordgroup") {
	      throw new ParseError("Invalid environment name", nameGroup);
	    }

	    var envName = "";

	    for (var i = 0; i < nameGroup.body.length; ++i) {
	      envName += assertNodeType(nameGroup.body[i], "textord").text;
	    }

	    if (funcName === "\\begin") {
	      // begin...end is similar to left...right
	      if (!environments.hasOwnProperty(envName)) {
	        throw new ParseError("No such environment: " + envName, nameGroup);
	      } // Build the environment object. Arguments and other information will
	      // be made available to the begin and end methods using properties.


	      var env = environments[envName];
	      var {
	        args: _args,
	        optArgs
	      } = parser.parseArguments("\\begin{" + envName + "}", env);
	      var context = {
	        mode: parser.mode,
	        envName,
	        parser
	      };
	      var result = env.handler(context, _args, optArgs);
	      parser.expect("\\end", false);
	      var endNameToken = parser.nextToken;
	      var end = assertNodeType(parser.parseFunction(), "environment");

	      if (end.name !== envName) {
	        throw new ParseError("Mismatch: \\begin{" + envName + "} matched by \\end{" + end.name + "}", endNameToken);
	      } // $FlowFixMe, "environment" handler returns an environment ParseNode


	      return result;
	    }

	    return {
	      type: "environment",
	      mode: parser.mode,
	      name: envName,
	      nameGroup
	    };
	  }

	});

	var makeSpan = buildCommon.makeSpan;

	function htmlBuilder$6(group, options) {
	  var elements = buildExpression$1(group.body, options, true);
	  return makeSpan([group.mclass], elements, options);
	}

	function mathmlBuilder$5(group, options) {
	  var node;
	  var inner = buildExpression(group.body, options);

	  if (group.mclass === "minner") {
	    node = new mathMLTree.MathNode("mpadded", inner);
	  } else if (group.mclass === "mord") {
	    if (group.isCharacterBox) {
	      node = inner[0];
	      node.type = "mi";
	    } else {
	      node = new mathMLTree.MathNode("mi", inner);
	    }
	  } else {
	    if (group.isCharacterBox) {
	      node = inner[0];
	      node.type = "mo";
	    } else {
	      node = new mathMLTree.MathNode("mo", inner);
	    } // Set spacing based on what is the most likely adjacent atom type.
	    // See TeXbook p170.


	    if (group.mclass === "mbin") {
	      node.attributes.lspace = "0.22em"; // medium space

	      node.attributes.rspace = "0.22em";
	    } else if (group.mclass === "mpunct") {
	      node.attributes.lspace = "0em";
	      node.attributes.rspace = "0.17em"; // thinspace
	    } else if (group.mclass === "mopen" || group.mclass === "mclose") {
	      node.attributes.lspace = "0em";
	      node.attributes.rspace = "0em";
	    } else if (group.mclass === "minner") {
	      node.attributes.lspace = "0.0556em"; // 1 mu is the most likely option

	      node.attributes.width = "+0.1111em";
	    } // MathML <mo> default space is 5/18 em, so <mrel> needs no action.
	    // Ref: https://developer.mozilla.org/en-US/docs/Web/MathML/Element/mo

	  }

	  return node;
	} // Math class commands except \mathop


	defineFunction({
	  type: "mclass",
	  names: ["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "mclass",
	      mode: parser.mode,
	      mclass: "m" + funcName.substr(5),
	      // TODO(kevinb): don't prefix with 'm'
	      body: ordargument(body),
	      isCharacterBox: utils.isCharacterBox(body)
	    };
	  },

	  htmlBuilder: htmlBuilder$6,
	  mathmlBuilder: mathmlBuilder$5
	});
	var binrelClass = arg => {
	  // \binrel@ spacing varies with (bin|rel|ord) of the atom in the argument.
	  // (by rendering separately and with {}s before and after, and measuring
	  // the change in spacing).  We'll do roughly the same by detecting the
	  // atom type directly.
	  var atom = arg.type === "ordgroup" && arg.body.length ? arg.body[0] : arg;

	  if (atom.type === "atom" && (atom.family === "bin" || atom.family === "rel")) {
	    return "m" + atom.family;
	  } else {
	    return "mord";
	  }
	}; // \@binrel{x}{y} renders like y but as mbin/mrel/mord if x is mbin/mrel/mord.
	// This is equivalent to \binrel@{x}\binrel@@{y} in AMSTeX.

	defineFunction({
	  type: "mclass",
	  names: ["\\@binrel"],
	  props: {
	    numArgs: 2
	  },

	  handler(_ref2, args) {
	    var {
	      parser
	    } = _ref2;
	    return {
	      type: "mclass",
	      mode: parser.mode,
	      mclass: binrelClass(args[0]),
	      body: ordargument(args[1]),
	      isCharacterBox: utils.isCharacterBox(args[1])
	    };
	  }

	}); // Build a relation or stacked op by placing one symbol on top of another

	defineFunction({
	  type: "mclass",
	  names: ["\\stackrel", "\\overset", "\\underset"],
	  props: {
	    numArgs: 2
	  },

	  handler(_ref3, args) {
	    var {
	      parser,
	      funcName
	    } = _ref3;
	    var baseArg = args[1];
	    var shiftedArg = args[0];
	    var mclass;

	    if (funcName !== "\\stackrel") {
	      // LaTeX applies \binrel spacing to \overset and \underset.
	      mclass = binrelClass(baseArg);
	    } else {
	      mclass = "mrel"; // for \stackrel
	    }

	    var baseOp = {
	      type: "op",
	      mode: baseArg.mode,
	      limits: true,
	      alwaysHandleSupSub: true,
	      parentIsSupSub: false,
	      symbol: false,
	      suppressBaseShift: funcName !== "\\stackrel",
	      body: ordargument(baseArg)
	    };
	    var supsub = {
	      type: "supsub",
	      mode: shiftedArg.mode,
	      base: baseOp,
	      sup: funcName === "\\underset" ? null : shiftedArg,
	      sub: funcName === "\\underset" ? shiftedArg : null
	    };
	    return {
	      type: "mclass",
	      mode: parser.mode,
	      mclass,
	      body: [supsub],
	      isCharacterBox: utils.isCharacterBox(supsub)
	    };
	  },

	  htmlBuilder: htmlBuilder$6,
	  mathmlBuilder: mathmlBuilder$5
	});

	// TODO(kevinb): implement \\sl and \\sc

	var htmlBuilder$5 = (group, options) => {
	  var font = group.font;
	  var newOptions = options.withFont(font);
	  return buildGroup$1(group.body, newOptions);
	};

	var mathmlBuilder$4 = (group, options) => {
	  var font = group.font;
	  var newOptions = options.withFont(font);
	  return buildGroup(group.body, newOptions);
	};

	var fontAliases = {
	  "\\Bbb": "\\mathbb",
	  "\\bold": "\\mathbf",
	  "\\frak": "\\mathfrak",
	  "\\bm": "\\boldsymbol"
	};
	defineFunction({
	  type: "font",
	  names: [// styles, except \boldsymbol defined below
	  "\\mathrm", "\\mathit", "\\mathbf", "\\mathnormal", // families
	  "\\mathbb", "\\mathcal", "\\mathfrak", "\\mathscr", "\\mathsf", "\\mathtt", // aliases, except \bm defined below
	  "\\Bbb", "\\bold", "\\frak"],
	  props: {
	    numArgs: 1,
	    allowedInArgument: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = normalizeArgument(args[0]);
	    var func = funcName;

	    if (func in fontAliases) {
	      func = fontAliases[func];
	    }

	    return {
	      type: "font",
	      mode: parser.mode,
	      font: func.slice(1),
	      body
	    };
	  },
	  htmlBuilder: htmlBuilder$5,
	  mathmlBuilder: mathmlBuilder$4
	});
	defineFunction({
	  type: "mclass",
	  names: ["\\boldsymbol", "\\bm"],
	  props: {
	    numArgs: 1
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser
	    } = _ref2;
	    var body = args[0];
	    var isCharacterBox = utils.isCharacterBox(body); // amsbsy.sty's \boldsymbol uses \binrel spacing to inherit the
	    // argument's bin|rel|ord status

	    return {
	      type: "mclass",
	      mode: parser.mode,
	      mclass: binrelClass(body),
	      body: [{
	        type: "font",
	        mode: parser.mode,
	        font: "boldsymbol",
	        body
	      }],
	      isCharacterBox: isCharacterBox
	    };
	  }
	}); // Old font changing functions

	defineFunction({
	  type: "font",
	  names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it", "\\cal"],
	  props: {
	    numArgs: 0,
	    allowedInText: true
	  },
	  handler: (_ref3, args) => {
	    var {
	      parser,
	      funcName,
	      breakOnTokenText
	    } = _ref3;
	    var {
	      mode
	    } = parser;
	    var body = parser.parseExpression(true, breakOnTokenText);
	    var style = "math" + funcName.slice(1);
	    return {
	      type: "font",
	      mode: mode,
	      font: style,
	      body: {
	        type: "ordgroup",
	        mode: parser.mode,
	        body
	      }
	    };
	  },
	  htmlBuilder: htmlBuilder$5,
	  mathmlBuilder: mathmlBuilder$4
	});

	var adjustStyle = (size, originalStyle) => {
	  // Figure out what style this fraction should be in based on the
	  // function used
	  var style = originalStyle;

	  if (size === "display") {
	    // Get display style as a default.
	    // If incoming style is sub/sup, use style.text() to get correct size.
	    style = style.id >= Style$1.SCRIPT.id ? style.text() : Style$1.DISPLAY;
	  } else if (size === "text" && style.size === Style$1.DISPLAY.size) {
	    // We're in a \tfrac but incoming style is displaystyle, so:
	    style = Style$1.TEXT;
	  } else if (size === "script") {
	    style = Style$1.SCRIPT;
	  } else if (size === "scriptscript") {
	    style = Style$1.SCRIPTSCRIPT;
	  }

	  return style;
	};

	var htmlBuilder$4 = (group, options) => {
	  // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).
	  var style = adjustStyle(group.size, options.style);
	  var nstyle = style.fracNum();
	  var dstyle = style.fracDen();
	  var newOptions;
	  newOptions = options.havingStyle(nstyle);
	  var numerm = buildGroup$1(group.numer, newOptions, options);

	  if (group.continued) {
	    // \cfrac inserts a \strut into the numerator.
	    // Get \strut dimensions from TeXbook page 353.
	    var hStrut = 8.5 / options.fontMetrics().ptPerEm;
	    var dStrut = 3.5 / options.fontMetrics().ptPerEm;
	    numerm.height = numerm.height < hStrut ? hStrut : numerm.height;
	    numerm.depth = numerm.depth < dStrut ? dStrut : numerm.depth;
	  }

	  newOptions = options.havingStyle(dstyle);
	  var denomm = buildGroup$1(group.denom, newOptions, options);
	  var rule;
	  var ruleWidth;
	  var ruleSpacing;

	  if (group.hasBarLine) {
	    if (group.barSize) {
	      ruleWidth = calculateSize(group.barSize, options);
	      rule = buildCommon.makeLineSpan("frac-line", options, ruleWidth);
	    } else {
	      rule = buildCommon.makeLineSpan("frac-line", options);
	    }

	    ruleWidth = rule.height;
	    ruleSpacing = rule.height;
	  } else {
	    rule = null;
	    ruleWidth = 0;
	    ruleSpacing = options.fontMetrics().defaultRuleThickness;
	  } // Rule 15b


	  var numShift;
	  var clearance;
	  var denomShift;

	  if (style.size === Style$1.DISPLAY.size || group.size === "display") {
	    numShift = options.fontMetrics().num1;

	    if (ruleWidth > 0) {
	      clearance = 3 * ruleSpacing;
	    } else {
	      clearance = 7 * ruleSpacing;
	    }

	    denomShift = options.fontMetrics().denom1;
	  } else {
	    if (ruleWidth > 0) {
	      numShift = options.fontMetrics().num2;
	      clearance = ruleSpacing;
	    } else {
	      numShift = options.fontMetrics().num3;
	      clearance = 3 * ruleSpacing;
	    }

	    denomShift = options.fontMetrics().denom2;
	  }

	  var frac;

	  if (!rule) {
	    // Rule 15c
	    var candidateClearance = numShift - numerm.depth - (denomm.height - denomShift);

	    if (candidateClearance < clearance) {
	      numShift += 0.5 * (clearance - candidateClearance);
	      denomShift += 0.5 * (clearance - candidateClearance);
	    }

	    frac = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: [{
	        type: "elem",
	        elem: denomm,
	        shift: denomShift
	      }, {
	        type: "elem",
	        elem: numerm,
	        shift: -numShift
	      }]
	    }, options);
	  } else {
	    // Rule 15d
	    var axisHeight = options.fontMetrics().axisHeight;

	    if (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {
	      numShift += clearance - (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth));
	    }

	    if (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift) < clearance) {
	      denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift));
	    }

	    var midShift = -(axisHeight - 0.5 * ruleWidth);
	    frac = buildCommon.makeVList({
	      positionType: "individualShift",
	      children: [{
	        type: "elem",
	        elem: denomm,
	        shift: denomShift
	      }, {
	        type: "elem",
	        elem: rule,
	        shift: midShift
	      }, {
	        type: "elem",
	        elem: numerm,
	        shift: -numShift
	      }]
	    }, options);
	  } // Since we manually change the style sometimes (with \dfrac or \tfrac),
	  // account for the possible size change here.


	  newOptions = options.havingStyle(style);
	  frac.height *= newOptions.sizeMultiplier / options.sizeMultiplier;
	  frac.depth *= newOptions.sizeMultiplier / options.sizeMultiplier; // Rule 15e

	  var delimSize;

	  if (style.size === Style$1.DISPLAY.size) {
	    delimSize = options.fontMetrics().delim1;
	  } else if (style.size === Style$1.SCRIPTSCRIPT.size) {
	    delimSize = options.havingStyle(Style$1.SCRIPT).fontMetrics().delim2;
	  } else {
	    delimSize = options.fontMetrics().delim2;
	  }

	  var leftDelim;
	  var rightDelim;

	  if (group.leftDelim == null) {
	    leftDelim = makeNullDelimiter(options, ["mopen"]);
	  } else {
	    leftDelim = delimiter.customSizedDelim(group.leftDelim, delimSize, true, options.havingStyle(style), group.mode, ["mopen"]);
	  }

	  if (group.continued) {
	    rightDelim = buildCommon.makeSpan([]); // zero width for \cfrac
	  } else if (group.rightDelim == null) {
	    rightDelim = makeNullDelimiter(options, ["mclose"]);
	  } else {
	    rightDelim = delimiter.customSizedDelim(group.rightDelim, delimSize, true, options.havingStyle(style), group.mode, ["mclose"]);
	  }

	  return buildCommon.makeSpan(["mord"].concat(newOptions.sizingClasses(options)), [leftDelim, buildCommon.makeSpan(["mfrac"], [frac]), rightDelim], options);
	};

	var mathmlBuilder$3 = (group, options) => {
	  var node = new mathMLTree.MathNode("mfrac", [buildGroup(group.numer, options), buildGroup(group.denom, options)]);

	  if (!group.hasBarLine) {
	    node.setAttribute("linethickness", "0px");
	  } else if (group.barSize) {
	    var ruleWidth = calculateSize(group.barSize, options);
	    node.setAttribute("linethickness", makeEm(ruleWidth));
	  }

	  var style = adjustStyle(group.size, options.style);

	  if (style.size !== options.style.size) {
	    node = new mathMLTree.MathNode("mstyle", [node]);
	    var isDisplay = style.size === Style$1.DISPLAY.size ? "true" : "false";
	    node.setAttribute("displaystyle", isDisplay);
	    node.setAttribute("scriptlevel", "0");
	  }

	  if (group.leftDelim != null || group.rightDelim != null) {
	    var withDelims = [];

	    if (group.leftDelim != null) {
	      var leftOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.leftDelim.replace("\\", ""))]);
	      leftOp.setAttribute("fence", "true");
	      withDelims.push(leftOp);
	    }

	    withDelims.push(node);

	    if (group.rightDelim != null) {
	      var rightOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.rightDelim.replace("\\", ""))]);
	      rightOp.setAttribute("fence", "true");
	      withDelims.push(rightOp);
	    }

	    return makeRow(withDelims);
	  }

	  return node;
	};

	defineFunction({
	  type: "genfrac",
	  names: ["\\dfrac", "\\frac", "\\tfrac", "\\dbinom", "\\binom", "\\tbinom", "\\\\atopfrac", // can’t be entered directly
	  "\\\\bracefrac", "\\\\brackfrac" // ditto
	  ],
	  props: {
	    numArgs: 2,
	    allowedInArgument: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var numer = args[0];
	    var denom = args[1];
	    var hasBarLine;
	    var leftDelim = null;
	    var rightDelim = null;
	    var size = "auto";

	    switch (funcName) {
	      case "\\dfrac":
	      case "\\frac":
	      case "\\tfrac":
	        hasBarLine = true;
	        break;

	      case "\\\\atopfrac":
	        hasBarLine = false;
	        break;

	      case "\\dbinom":
	      case "\\binom":
	      case "\\tbinom":
	        hasBarLine = false;
	        leftDelim = "(";
	        rightDelim = ")";
	        break;

	      case "\\\\bracefrac":
	        hasBarLine = false;
	        leftDelim = "\\{";
	        rightDelim = "\\}";
	        break;

	      case "\\\\brackfrac":
	        hasBarLine = false;
	        leftDelim = "[";
	        rightDelim = "]";
	        break;

	      default:
	        throw new Error("Unrecognized genfrac command");
	    }

	    switch (funcName) {
	      case "\\dfrac":
	      case "\\dbinom":
	        size = "display";
	        break;

	      case "\\tfrac":
	      case "\\tbinom":
	        size = "text";
	        break;
	    }

	    return {
	      type: "genfrac",
	      mode: parser.mode,
	      continued: false,
	      numer,
	      denom,
	      hasBarLine,
	      leftDelim,
	      rightDelim,
	      size,
	      barSize: null
	    };
	  },
	  htmlBuilder: htmlBuilder$4,
	  mathmlBuilder: mathmlBuilder$3
	});
	defineFunction({
	  type: "genfrac",
	  names: ["\\cfrac"],
	  props: {
	    numArgs: 2
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref2;
	    var numer = args[0];
	    var denom = args[1];
	    return {
	      type: "genfrac",
	      mode: parser.mode,
	      continued: true,
	      numer,
	      denom,
	      hasBarLine: true,
	      leftDelim: null,
	      rightDelim: null,
	      size: "display",
	      barSize: null
	    };
	  }
	}); // Infix generalized fractions -- these are not rendered directly, but replaced
	// immediately by one of the variants above.

	defineFunction({
	  type: "infix",
	  names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
	  props: {
	    numArgs: 0,
	    infix: true
	  },

	  handler(_ref3) {
	    var {
	      parser,
	      funcName,
	      token
	    } = _ref3;
	    var replaceWith;

	    switch (funcName) {
	      case "\\over":
	        replaceWith = "\\frac";
	        break;

	      case "\\choose":
	        replaceWith = "\\binom";
	        break;

	      case "\\atop":
	        replaceWith = "\\\\atopfrac";
	        break;

	      case "\\brace":
	        replaceWith = "\\\\bracefrac";
	        break;

	      case "\\brack":
	        replaceWith = "\\\\brackfrac";
	        break;

	      default:
	        throw new Error("Unrecognized infix genfrac command");
	    }

	    return {
	      type: "infix",
	      mode: parser.mode,
	      replaceWith,
	      token
	    };
	  }

	});
	var stylArray = ["display", "text", "script", "scriptscript"];

	var delimFromValue = function delimFromValue(delimString) {
	  var delim = null;

	  if (delimString.length > 0) {
	    delim = delimString;
	    delim = delim === "." ? null : delim;
	  }

	  return delim;
	};

	defineFunction({
	  type: "genfrac",
	  names: ["\\genfrac"],
	  props: {
	    numArgs: 6,
	    allowedInArgument: true,
	    argTypes: ["math", "math", "size", "text", "math", "math"]
	  },

	  handler(_ref4, args) {
	    var {
	      parser
	    } = _ref4;
	    var numer = args[4];
	    var denom = args[5]; // Look into the parse nodes to get the desired delimiters.

	    var leftNode = normalizeArgument(args[0]);
	    var leftDelim = leftNode.type === "atom" && leftNode.family === "open" ? delimFromValue(leftNode.text) : null;
	    var rightNode = normalizeArgument(args[1]);
	    var rightDelim = rightNode.type === "atom" && rightNode.family === "close" ? delimFromValue(rightNode.text) : null;
	    var barNode = assertNodeType(args[2], "size");
	    var hasBarLine;
	    var barSize = null;

	    if (barNode.isBlank) {
	      // \genfrac acts differently than \above.
	      // \genfrac treats an empty size group as a signal to use a
	      // standard bar size. \above would see size = 0 and omit the bar.
	      hasBarLine = true;
	    } else {
	      barSize = barNode.value;
	      hasBarLine = barSize.number > 0;
	    } // Find out if we want displaystyle, textstyle, etc.


	    var size = "auto";
	    var styl = args[3];

	    if (styl.type === "ordgroup") {
	      if (styl.body.length > 0) {
	        var textOrd = assertNodeType(styl.body[0], "textord");
	        size = stylArray[Number(textOrd.text)];
	      }
	    } else {
	      styl = assertNodeType(styl, "textord");
	      size = stylArray[Number(styl.text)];
	    }

	    return {
	      type: "genfrac",
	      mode: parser.mode,
	      numer,
	      denom,
	      continued: false,
	      hasBarLine,
	      barSize,
	      leftDelim,
	      rightDelim,
	      size
	    };
	  },

	  htmlBuilder: htmlBuilder$4,
	  mathmlBuilder: mathmlBuilder$3
	}); // \above is an infix fraction that also defines a fraction bar size.

	defineFunction({
	  type: "infix",
	  names: ["\\above"],
	  props: {
	    numArgs: 1,
	    argTypes: ["size"],
	    infix: true
	  },

	  handler(_ref5, args) {
	    var {
	      parser,
	      funcName,
	      token
	    } = _ref5;
	    return {
	      type: "infix",
	      mode: parser.mode,
	      replaceWith: "\\\\abovefrac",
	      size: assertNodeType(args[0], "size").value,
	      token
	    };
	  }

	});
	defineFunction({
	  type: "genfrac",
	  names: ["\\\\abovefrac"],
	  props: {
	    numArgs: 3,
	    argTypes: ["math", "size", "math"]
	  },
	  handler: (_ref6, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref6;
	    var numer = args[0];
	    var barSize = assert(assertNodeType(args[1], "infix").size);
	    var denom = args[2];
	    var hasBarLine = barSize.number > 0;
	    return {
	      type: "genfrac",
	      mode: parser.mode,
	      numer,
	      denom,
	      continued: false,
	      hasBarLine,
	      barSize,
	      leftDelim: null,
	      rightDelim: null,
	      size: "auto"
	    };
	  },
	  htmlBuilder: htmlBuilder$4,
	  mathmlBuilder: mathmlBuilder$3
	});

	// NOTE: Unlike most `htmlBuilder`s, this one handles not only "horizBrace", but
	// also "supsub" since an over/underbrace can affect super/subscripting.
	var htmlBuilder$3 = (grp, options) => {
	  var style = options.style; // Pull out the `ParseNode<"horizBrace">` if `grp` is a "supsub" node.

	  var supSubGroup;
	  var group;

	  if (grp.type === "supsub") {
	    // Ref: LaTeX source2e: }}}}\limits}
	    // i.e. LaTeX treats the brace similar to an op and passes it
	    // with \limits, so we need to assign supsub style.
	    supSubGroup = grp.sup ? buildGroup$1(grp.sup, options.havingStyle(style.sup()), options) : buildGroup$1(grp.sub, options.havingStyle(style.sub()), options);
	    group = assertNodeType(grp.base, "horizBrace");
	  } else {
	    group = assertNodeType(grp, "horizBrace");
	  } // Build the base group


	  var body = buildGroup$1(group.base, options.havingBaseStyle(Style$1.DISPLAY)); // Create the stretchy element

	  var braceBody = stretchy.svgSpan(group, options); // Generate the vlist, with the appropriate kerns        ┏━━━━━━━━┓
	  // This first vlist contains the content and the brace:   equation

	  var vlist;

	  if (group.isOver) {
	    vlist = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: body
	      }, {
	        type: "kern",
	        size: 0.1
	      }, {
	        type: "elem",
	        elem: braceBody
	      }]
	    }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

	    vlist.children[0].children[0].children[1].classes.push("svg-align");
	  } else {
	    vlist = buildCommon.makeVList({
	      positionType: "bottom",
	      positionData: body.depth + 0.1 + braceBody.height,
	      children: [{
	        type: "elem",
	        elem: braceBody
	      }, {
	        type: "kern",
	        size: 0.1
	      }, {
	        type: "elem",
	        elem: body
	      }]
	    }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

	    vlist.children[0].children[0].children[0].classes.push("svg-align");
	  }

	  if (supSubGroup) {
	    // To write the supsub, wrap the first vlist in another vlist:
	    // They can't all go in the same vlist, because the note might be
	    // wider than the equation. We want the equation to control the
	    // brace width.
	    //      note          long note           long note
	    //   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓
	    //    equation           eqn                 eqn
	    var vSpan = buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);

	    if (group.isOver) {
	      vlist = buildCommon.makeVList({
	        positionType: "firstBaseline",
	        children: [{
	          type: "elem",
	          elem: vSpan
	        }, {
	          type: "kern",
	          size: 0.2
	        }, {
	          type: "elem",
	          elem: supSubGroup
	        }]
	      }, options);
	    } else {
	      vlist = buildCommon.makeVList({
	        positionType: "bottom",
	        positionData: vSpan.depth + 0.2 + supSubGroup.height + supSubGroup.depth,
	        children: [{
	          type: "elem",
	          elem: supSubGroup
	        }, {
	          type: "kern",
	          size: 0.2
	        }, {
	          type: "elem",
	          elem: vSpan
	        }]
	      }, options);
	    }
	  }

	  return buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);
	};

	var mathmlBuilder$2 = (group, options) => {
	  var accentNode = stretchy.mathMLnode(group.label);
	  return new mathMLTree.MathNode(group.isOver ? "mover" : "munder", [buildGroup(group.base, options), accentNode]);
	}; // Horizontal stretchy braces


	defineFunction({
	  type: "horizBrace",
	  names: ["\\overbrace", "\\underbrace"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    return {
	      type: "horizBrace",
	      mode: parser.mode,
	      label: funcName,
	      isOver: /^\\over/.test(funcName),
	      base: args[0]
	    };
	  },

	  htmlBuilder: htmlBuilder$3,
	  mathmlBuilder: mathmlBuilder$2
	});

	defineFunction({
	  type: "href",
	  names: ["\\href"],
	  props: {
	    numArgs: 2,
	    argTypes: ["url", "original"],
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser
	    } = _ref;
	    var body = args[1];
	    var href = assertNodeType(args[0], "url").url;

	    if (!parser.settings.isTrusted({
	      command: "\\href",
	      url: href
	    })) {
	      return parser.formatUnsupportedCmd("\\href");
	    }

	    return {
	      type: "href",
	      mode: parser.mode,
	      href,
	      body: ordargument(body)
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var elements = buildExpression$1(group.body, options, false);
	    return buildCommon.makeAnchor(group.href, [], elements, options);
	  },
	  mathmlBuilder: (group, options) => {
	    var math = buildExpressionRow(group.body, options);

	    if (!(math instanceof MathNode)) {
	      math = new MathNode("mrow", [math]);
	    }

	    math.setAttribute("href", group.href);
	    return math;
	  }
	});
	defineFunction({
	  type: "href",
	  names: ["\\url"],
	  props: {
	    numArgs: 1,
	    argTypes: ["url"],
	    allowedInText: true
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser
	    } = _ref2;
	    var href = assertNodeType(args[0], "url").url;

	    if (!parser.settings.isTrusted({
	      command: "\\url",
	      url: href
	    })) {
	      return parser.formatUnsupportedCmd("\\url");
	    }

	    var chars = [];

	    for (var i = 0; i < href.length; i++) {
	      var c = href[i];

	      if (c === "~") {
	        c = "\\textasciitilde";
	      }

	      chars.push({
	        type: "textord",
	        mode: "text",
	        text: c
	      });
	    }

	    var body = {
	      type: "text",
	      mode: parser.mode,
	      font: "\\texttt",
	      body: chars
	    };
	    return {
	      type: "href",
	      mode: parser.mode,
	      href,
	      body: ordargument(body)
	    };
	  }
	});

	// In LaTeX, \vcenter can act only on a box, as in
	// \vcenter{\hbox{$\frac{a+b}{\dfrac{c}{d}}$}}
	// This function by itself doesn't do anything but prevent a soft line break.

	defineFunction({
	  type: "hbox",
	  names: ["\\hbox"],
	  props: {
	    numArgs: 1,
	    argTypes: ["text"],
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "hbox",
	      mode: parser.mode,
	      body: ordargument(args[0])
	    };
	  },

	  htmlBuilder(group, options) {
	    var elements = buildExpression$1(group.body, options, false);
	    return buildCommon.makeFragment(elements);
	  },

	  mathmlBuilder(group, options) {
	    return new mathMLTree.MathNode("mrow", buildExpression(group.body, options));
	  }

	});

	defineFunction({
	  type: "html",
	  names: ["\\htmlClass", "\\htmlId", "\\htmlStyle", "\\htmlData"],
	  props: {
	    numArgs: 2,
	    argTypes: ["raw", "original"],
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName,
	      token
	    } = _ref;
	    var value = assertNodeType(args[0], "raw").string;
	    var body = args[1];

	    if (parser.settings.strict) {
	      parser.settings.reportNonstrict("htmlExtension", "HTML extension is disabled on strict mode");
	    }

	    var trustContext;
	    var attributes = {};

	    switch (funcName) {
	      case "\\htmlClass":
	        attributes.class = value;
	        trustContext = {
	          command: "\\htmlClass",
	          class: value
	        };
	        break;

	      case "\\htmlId":
	        attributes.id = value;
	        trustContext = {
	          command: "\\htmlId",
	          id: value
	        };
	        break;

	      case "\\htmlStyle":
	        attributes.style = value;
	        trustContext = {
	          command: "\\htmlStyle",
	          style: value
	        };
	        break;

	      case "\\htmlData":
	        {
	          var data = value.split(",");

	          for (var i = 0; i < data.length; i++) {
	            var keyVal = data[i].split("=");

	            if (keyVal.length !== 2) {
	              throw new ParseError("Error parsing key-value for \\htmlData");
	            }

	            attributes["data-" + keyVal[0].trim()] = keyVal[1].trim();
	          }

	          trustContext = {
	            command: "\\htmlData",
	            attributes
	          };
	          break;
	        }

	      default:
	        throw new Error("Unrecognized html command");
	    }

	    if (!parser.settings.isTrusted(trustContext)) {
	      return parser.formatUnsupportedCmd(funcName);
	    }

	    return {
	      type: "html",
	      mode: parser.mode,
	      attributes,
	      body: ordargument(body)
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var elements = buildExpression$1(group.body, options, false);
	    var classes = ["enclosing"];

	    if (group.attributes.class) {
	      classes.push(...group.attributes.class.trim().split(/\s+/));
	    }

	    var span = buildCommon.makeSpan(classes, elements, options);

	    for (var attr in group.attributes) {
	      if (attr !== "class" && group.attributes.hasOwnProperty(attr)) {
	        span.setAttribute(attr, group.attributes[attr]);
	      }
	    }

	    return span;
	  },
	  mathmlBuilder: (group, options) => {
	    return buildExpressionRow(group.body, options);
	  }
	});

	defineFunction({
	  type: "htmlmathml",
	  names: ["\\html@mathml"],
	  props: {
	    numArgs: 2,
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "htmlmathml",
	      mode: parser.mode,
	      html: ordargument(args[0]),
	      mathml: ordargument(args[1])
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var elements = buildExpression$1(group.html, options, false);
	    return buildCommon.makeFragment(elements);
	  },
	  mathmlBuilder: (group, options) => {
	    return buildExpressionRow(group.mathml, options);
	  }
	});

	var sizeData = function sizeData(str) {
	  if (/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(str)) {
	    // str is a number with no unit specified.
	    // default unit is bp, per graphix package.
	    return {
	      number: +str,
	      unit: "bp"
	    };
	  } else {
	    var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(str);

	    if (!match) {
	      throw new ParseError("Invalid size: '" + str + "' in \\includegraphics");
	    }

	    var data = {
	      number: +(match[1] + match[2]),
	      // sign + magnitude, cast to number
	      unit: match[3]
	    };

	    if (!validUnit(data)) {
	      throw new ParseError("Invalid unit: '" + data.unit + "' in \\includegraphics.");
	    }

	    return data;
	  }
	};

	defineFunction({
	  type: "includegraphics",
	  names: ["\\includegraphics"],
	  props: {
	    numArgs: 1,
	    numOptionalArgs: 1,
	    argTypes: ["raw", "url"],
	    allowedInText: false
	  },
	  handler: (_ref, args, optArgs) => {
	    var {
	      parser
	    } = _ref;
	    var width = {
	      number: 0,
	      unit: "em"
	    };
	    var height = {
	      number: 0.9,
	      unit: "em"
	    }; // sorta character sized.

	    var totalheight = {
	      number: 0,
	      unit: "em"
	    };
	    var alt = "";

	    if (optArgs[0]) {
	      var attributeStr = assertNodeType(optArgs[0], "raw").string; // Parser.js does not parse key/value pairs. We get a string.

	      var attributes = attributeStr.split(",");

	      for (var i = 0; i < attributes.length; i++) {
	        var keyVal = attributes[i].split("=");

	        if (keyVal.length === 2) {
	          var str = keyVal[1].trim();

	          switch (keyVal[0].trim()) {
	            case "alt":
	              alt = str;
	              break;

	            case "width":
	              width = sizeData(str);
	              break;

	            case "height":
	              height = sizeData(str);
	              break;

	            case "totalheight":
	              totalheight = sizeData(str);
	              break;

	            default:
	              throw new ParseError("Invalid key: '" + keyVal[0] + "' in \\includegraphics.");
	          }
	        }
	      }
	    }

	    var src = assertNodeType(args[0], "url").url;

	    if (alt === "") {
	      // No alt given. Use the file name. Strip away the path.
	      alt = src;
	      alt = alt.replace(/^.*[\\/]/, '');
	      alt = alt.substring(0, alt.lastIndexOf('.'));
	    }

	    if (!parser.settings.isTrusted({
	      command: "\\includegraphics",
	      url: src
	    })) {
	      return parser.formatUnsupportedCmd("\\includegraphics");
	    }

	    return {
	      type: "includegraphics",
	      mode: parser.mode,
	      alt: alt,
	      width: width,
	      height: height,
	      totalheight: totalheight,
	      src: src
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var height = calculateSize(group.height, options);
	    var depth = 0;

	    if (group.totalheight.number > 0) {
	      depth = calculateSize(group.totalheight, options) - height;
	    }

	    var width = 0;

	    if (group.width.number > 0) {
	      width = calculateSize(group.width, options);
	    }

	    var style = {
	      height: makeEm(height + depth)
	    };

	    if (width > 0) {
	      style.width = makeEm(width);
	    }

	    if (depth > 0) {
	      style.verticalAlign = makeEm(-depth);
	    }

	    var node = new Img(group.src, group.alt, style);
	    node.height = height;
	    node.depth = depth;
	    return node;
	  },
	  mathmlBuilder: (group, options) => {
	    var node = new mathMLTree.MathNode("mglyph", []);
	    node.setAttribute("alt", group.alt);
	    var height = calculateSize(group.height, options);
	    var depth = 0;

	    if (group.totalheight.number > 0) {
	      depth = calculateSize(group.totalheight, options) - height;
	      node.setAttribute("valign", makeEm(-depth));
	    }

	    node.setAttribute("height", makeEm(height + depth));

	    if (group.width.number > 0) {
	      var width = calculateSize(group.width, options);
	      node.setAttribute("width", makeEm(width));
	    }

	    node.setAttribute("src", group.src);
	    return node;
	  }
	});

	// Horizontal spacing commands

	defineFunction({
	  type: "kern",
	  names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
	  props: {
	    numArgs: 1,
	    argTypes: ["size"],
	    primitive: true,
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var size = assertNodeType(args[0], "size");

	    if (parser.settings.strict) {
	      var mathFunction = funcName[1] === 'm'; // \mkern, \mskip

	      var muUnit = size.value.unit === 'mu';

	      if (mathFunction) {
	        if (!muUnit) {
	          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " supports only mu units, " + ("not " + size.value.unit + " units"));
	        }

	        if (parser.mode !== "math") {
	          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " works only in math mode");
	        }
	      } else {
	        // !mathFunction
	        if (muUnit) {
	          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " doesn't support mu units");
	        }
	      }
	    }

	    return {
	      type: "kern",
	      mode: parser.mode,
	      dimension: size.value
	    };
	  },

	  htmlBuilder(group, options) {
	    return buildCommon.makeGlue(group.dimension, options);
	  },

	  mathmlBuilder(group, options) {
	    var dimension = calculateSize(group.dimension, options);
	    return new mathMLTree.SpaceNode(dimension);
	  }

	});

	// Horizontal overlap functions
	defineFunction({
	  type: "lap",
	  names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "lap",
	      mode: parser.mode,
	      alignment: funcName.slice(5),
	      body
	    };
	  },
	  htmlBuilder: (group, options) => {
	    // mathllap, mathrlap, mathclap
	    var inner;

	    if (group.alignment === "clap") {
	      // ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/
	      inner = buildCommon.makeSpan([], [buildGroup$1(group.body, options)]); // wrap, since CSS will center a .clap > .inner > span

	      inner = buildCommon.makeSpan(["inner"], [inner], options);
	    } else {
	      inner = buildCommon.makeSpan(["inner"], [buildGroup$1(group.body, options)]);
	    }

	    var fix = buildCommon.makeSpan(["fix"], []);
	    var node = buildCommon.makeSpan([group.alignment], [inner, fix], options); // At this point, we have correctly set horizontal alignment of the
	    // two items involved in the lap.
	    // Next, use a strut to set the height of the HTML bounding box.
	    // Otherwise, a tall argument may be misplaced.
	    // This code resolved issue #1153

	    var strut = buildCommon.makeSpan(["strut"]);
	    strut.style.height = makeEm(node.height + node.depth);

	    if (node.depth) {
	      strut.style.verticalAlign = makeEm(-node.depth);
	    }

	    node.children.unshift(strut); // Next, prevent vertical misplacement when next to something tall.
	    // This code resolves issue #1234

	    node = buildCommon.makeSpan(["thinbox"], [node], options);
	    return buildCommon.makeSpan(["mord", "vbox"], [node], options);
	  },
	  mathmlBuilder: (group, options) => {
	    // mathllap, mathrlap, mathclap
	    var node = new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)]);

	    if (group.alignment !== "rlap") {
	      var offset = group.alignment === "llap" ? "-1" : "-0.5";
	      node.setAttribute("lspace", offset + "width");
	    }

	    node.setAttribute("width", "0px");
	    return node;
	  }
	});

	defineFunction({
	  type: "styling",
	  names: ["\\(", "$"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    allowedInMath: false
	  },

	  handler(_ref, args) {
	    var {
	      funcName,
	      parser
	    } = _ref;
	    var outerMode = parser.mode;
	    parser.switchMode("math");
	    var close = funcName === "\\(" ? "\\)" : "$";
	    var body = parser.parseExpression(false, close);
	    parser.expect(close);
	    parser.switchMode(outerMode);
	    return {
	      type: "styling",
	      mode: parser.mode,
	      style: "text",
	      body
	    };
	  }

	}); // Check for extra closing math delimiters

	defineFunction({
	  type: "text",
	  // Doesn't matter what this is.
	  names: ["\\)", "\\]"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    allowedInMath: false
	  },

	  handler(context, args) {
	    throw new ParseError("Mismatched " + context.funcName);
	  }

	});

	var chooseMathStyle = (group, options) => {
	  switch (options.style.size) {
	    case Style$1.DISPLAY.size:
	      return group.display;

	    case Style$1.TEXT.size:
	      return group.text;

	    case Style$1.SCRIPT.size:
	      return group.script;

	    case Style$1.SCRIPTSCRIPT.size:
	      return group.scriptscript;

	    default:
	      return group.text;
	  }
	};

	defineFunction({
	  type: "mathchoice",
	  names: ["\\mathchoice"],
	  props: {
	    numArgs: 4,
	    primitive: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "mathchoice",
	      mode: parser.mode,
	      display: ordargument(args[0]),
	      text: ordargument(args[1]),
	      script: ordargument(args[2]),
	      scriptscript: ordargument(args[3])
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var body = chooseMathStyle(group, options);
	    var elements = buildExpression$1(body, options, false);
	    return buildCommon.makeFragment(elements);
	  },
	  mathmlBuilder: (group, options) => {
	    var body = chooseMathStyle(group, options);
	    return buildExpressionRow(body, options);
	  }
	});

	var assembleSupSub = (base, supGroup, subGroup, options, style, slant, baseShift) => {
	  base = buildCommon.makeSpan([], [base]);
	  var subIsSingleCharacter = subGroup && utils.isCharacterBox(subGroup);
	  var sub;
	  var sup; // We manually have to handle the superscripts and subscripts. This,
	  // aside from the kern calculations, is copied from supsub.

	  if (supGroup) {
	    var elem = buildGroup$1(supGroup, options.havingStyle(style.sup()), options);
	    sup = {
	      elem,
	      kern: Math.max(options.fontMetrics().bigOpSpacing1, options.fontMetrics().bigOpSpacing3 - elem.depth)
	    };
	  }

	  if (subGroup) {
	    var _elem = buildGroup$1(subGroup, options.havingStyle(style.sub()), options);

	    sub = {
	      elem: _elem,
	      kern: Math.max(options.fontMetrics().bigOpSpacing2, options.fontMetrics().bigOpSpacing4 - _elem.height)
	    };
	  } // Build the final group as a vlist of the possible subscript, base,
	  // and possible superscript.


	  var finalGroup;

	  if (sup && sub) {
	    var bottom = options.fontMetrics().bigOpSpacing5 + sub.elem.height + sub.elem.depth + sub.kern + base.depth + baseShift;
	    finalGroup = buildCommon.makeVList({
	      positionType: "bottom",
	      positionData: bottom,
	      children: [{
	        type: "kern",
	        size: options.fontMetrics().bigOpSpacing5
	      }, {
	        type: "elem",
	        elem: sub.elem,
	        marginLeft: makeEm(-slant)
	      }, {
	        type: "kern",
	        size: sub.kern
	      }, {
	        type: "elem",
	        elem: base
	      }, {
	        type: "kern",
	        size: sup.kern
	      }, {
	        type: "elem",
	        elem: sup.elem,
	        marginLeft: makeEm(slant)
	      }, {
	        type: "kern",
	        size: options.fontMetrics().bigOpSpacing5
	      }]
	    }, options);
	  } else if (sub) {
	    var top = base.height - baseShift; // Shift the limits by the slant of the symbol. Note
	    // that we are supposed to shift the limits by 1/2 of the slant,
	    // but since we are centering the limits adding a full slant of
	    // margin will shift by 1/2 that.

	    finalGroup = buildCommon.makeVList({
	      positionType: "top",
	      positionData: top,
	      children: [{
	        type: "kern",
	        size: options.fontMetrics().bigOpSpacing5
	      }, {
	        type: "elem",
	        elem: sub.elem,
	        marginLeft: makeEm(-slant)
	      }, {
	        type: "kern",
	        size: sub.kern
	      }, {
	        type: "elem",
	        elem: base
	      }]
	    }, options);
	  } else if (sup) {
	    var _bottom = base.depth + baseShift;

	    finalGroup = buildCommon.makeVList({
	      positionType: "bottom",
	      positionData: _bottom,
	      children: [{
	        type: "elem",
	        elem: base
	      }, {
	        type: "kern",
	        size: sup.kern
	      }, {
	        type: "elem",
	        elem: sup.elem,
	        marginLeft: makeEm(slant)
	      }, {
	        type: "kern",
	        size: options.fontMetrics().bigOpSpacing5
	      }]
	    }, options);
	  } else {
	    // This case probably shouldn't occur (this would mean the
	    // supsub was sending us a group with no superscript or
	    // subscript) but be safe.
	    return base;
	  }

	  var parts = [finalGroup];

	  if (sub && slant !== 0 && !subIsSingleCharacter) {
	    // A negative margin-left was applied to the lower limit.
	    // Avoid an overlap by placing a spacer on the left on the group.
	    var spacer = buildCommon.makeSpan(["mspace"], [], options);
	    spacer.style.marginRight = makeEm(slant);
	    parts.unshift(spacer);
	  }

	  return buildCommon.makeSpan(["mop", "op-limits"], parts, options);
	};

	// Limits, symbols
	// Most operators have a large successor symbol, but these don't.
	var noSuccessor = ["\\smallint"]; // NOTE: Unlike most `htmlBuilder`s, this one handles not only "op", but also
	// "supsub" since some of them (like \int) can affect super/subscripting.

	var htmlBuilder$2 = (grp, options) => {
	  // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
	  var supGroup;
	  var subGroup;
	  var hasLimits = false;
	  var group;

	  if (grp.type === "supsub") {
	    // If we have limits, supsub will pass us its group to handle. Pull
	    // out the superscript and subscript and set the group to the op in
	    // its base.
	    supGroup = grp.sup;
	    subGroup = grp.sub;
	    group = assertNodeType(grp.base, "op");
	    hasLimits = true;
	  } else {
	    group = assertNodeType(grp, "op");
	  }

	  var style = options.style;
	  var large = false;

	  if (style.size === Style$1.DISPLAY.size && group.symbol && !utils.contains(noSuccessor, group.name)) {
	    // Most symbol operators get larger in displaystyle (rule 13)
	    large = true;
	  }

	  var base;

	  if (group.symbol) {
	    // If this is a symbol, create the symbol.
	    var fontName = large ? "Size2-Regular" : "Size1-Regular";
	    var stash = "";

	    if (group.name === "\\oiint" || group.name === "\\oiiint") {
	      // No font glyphs yet, so use a glyph w/o the oval.
	      // TODO: When font glyphs are available, delete this code.
	      stash = group.name.substr(1);
	      group.name = stash === "oiint" ? "\\iint" : "\\iiint";
	    }

	    base = buildCommon.makeSymbol(group.name, fontName, "math", options, ["mop", "op-symbol", large ? "large-op" : "small-op"]);

	    if (stash.length > 0) {
	      // We're in \oiint or \oiiint. Overlay the oval.
	      // TODO: When font glyphs are available, delete this code.
	      var italic = base.italic;
	      var oval = buildCommon.staticSvg(stash + "Size" + (large ? "2" : "1"), options);
	      base = buildCommon.makeVList({
	        positionType: "individualShift",
	        children: [{
	          type: "elem",
	          elem: base,
	          shift: 0
	        }, {
	          type: "elem",
	          elem: oval,
	          shift: large ? 0.08 : 0
	        }]
	      }, options);
	      group.name = "\\" + stash;
	      base.classes.unshift("mop"); // $FlowFixMe

	      base.italic = italic;
	    }
	  } else if (group.body) {
	    // If this is a list, compose that list.
	    var inner = buildExpression$1(group.body, options, true);

	    if (inner.length === 1 && inner[0] instanceof SymbolNode) {
	      base = inner[0];
	      base.classes[0] = "mop"; // replace old mclass
	    } else {
	      base = buildCommon.makeSpan(["mop"], inner, options);
	    }
	  } else {
	    // Otherwise, this is a text operator. Build the text from the
	    // operator's name.
	    var output = [];

	    for (var i = 1; i < group.name.length; i++) {
	      output.push(buildCommon.mathsym(group.name[i], group.mode, options));
	    }

	    base = buildCommon.makeSpan(["mop"], output, options);
	  } // If content of op is a single symbol, shift it vertically.


	  var baseShift = 0;
	  var slant = 0;

	  if ((base instanceof SymbolNode || group.name === "\\oiint" || group.name === "\\oiiint") && !group.suppressBaseShift) {
	    // We suppress the shift of the base of \overset and \underset. Otherwise,
	    // shift the symbol so its center lies on the axis (rule 13). It
	    // appears that our fonts have the centers of the symbols already
	    // almost on the axis, so these numbers are very small. Note we
	    // don't actually apply this here, but instead it is used either in
	    // the vlist creation or separately when there are no limits.
	    baseShift = (base.height - base.depth) / 2 - options.fontMetrics().axisHeight; // The slant of the symbol is just its italic correction.
	    // $FlowFixMe

	    slant = base.italic;
	  }

	  if (hasLimits) {
	    return assembleSupSub(base, supGroup, subGroup, options, style, slant, baseShift);
	  } else {
	    if (baseShift) {
	      base.style.position = "relative";
	      base.style.top = makeEm(baseShift);
	    }

	    return base;
	  }
	};

	var mathmlBuilder$1 = (group, options) => {
	  var node;

	  if (group.symbol) {
	    // This is a symbol. Just add the symbol.
	    node = new MathNode("mo", [makeText(group.name, group.mode)]);

	    if (utils.contains(noSuccessor, group.name)) {
	      node.setAttribute("largeop", "false");
	    }
	  } else if (group.body) {
	    // This is an operator with children. Add them.
	    node = new MathNode("mo", buildExpression(group.body, options));
	  } else {
	    // This is a text operator. Add all of the characters from the
	    // operator's name.
	    node = new MathNode("mi", [new TextNode(group.name.slice(1))]); // Append an <mo>&ApplyFunction;</mo>.
	    // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4

	    var operator = new MathNode("mo", [makeText("\u2061", "text")]);

	    if (group.parentIsSupSub) {
	      node = new MathNode("mrow", [node, operator]);
	    } else {
	      node = newDocumentFragment([node, operator]);
	    }
	  }

	  return node;
	};

	var singleCharBigOps = {
	  "\u220F": "\\prod",
	  "\u2210": "\\coprod",
	  "\u2211": "\\sum",
	  "\u22c0": "\\bigwedge",
	  "\u22c1": "\\bigvee",
	  "\u22c2": "\\bigcap",
	  "\u22c3": "\\bigcup",
	  "\u2a00": "\\bigodot",
	  "\u2a01": "\\bigoplus",
	  "\u2a02": "\\bigotimes",
	  "\u2a04": "\\biguplus",
	  "\u2a06": "\\bigsqcup"
	};
	defineFunction({
	  type: "op",
	  names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "\u220F", "\u2210", "\u2211", "\u22c0", "\u22c1", "\u22c2", "\u22c3", "\u2a00", "\u2a01", "\u2a02", "\u2a04", "\u2a06"],
	  props: {
	    numArgs: 0
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var fName = funcName;

	    if (fName.length === 1) {
	      fName = singleCharBigOps[fName];
	    }

	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: true,
	      parentIsSupSub: false,
	      symbol: true,
	      name: fName
	    };
	  },
	  htmlBuilder: htmlBuilder$2,
	  mathmlBuilder: mathmlBuilder$1
	}); // Note: calling defineFunction with a type that's already been defined only
	// works because the same htmlBuilder and mathmlBuilder are being used.

	defineFunction({
	  type: "op",
	  names: ["\\mathop"],
	  props: {
	    numArgs: 1,
	    primitive: true
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser
	    } = _ref2;
	    var body = args[0];
	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: false,
	      parentIsSupSub: false,
	      symbol: false,
	      body: ordargument(body)
	    };
	  },
	  htmlBuilder: htmlBuilder$2,
	  mathmlBuilder: mathmlBuilder$1
	}); // There are 2 flags for operators; whether they produce limits in
	// displaystyle, and whether they are symbols and should grow in
	// displaystyle. These four groups cover the four possible choices.

	var singleCharIntegrals = {
	  "\u222b": "\\int",
	  "\u222c": "\\iint",
	  "\u222d": "\\iiint",
	  "\u222e": "\\oint",
	  "\u222f": "\\oiint",
	  "\u2230": "\\oiiint"
	}; // No limits, not symbols

	defineFunction({
	  type: "op",
	  names: ["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"],
	  props: {
	    numArgs: 0
	  },

	  handler(_ref3) {
	    var {
	      parser,
	      funcName
	    } = _ref3;
	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: false,
	      parentIsSupSub: false,
	      symbol: false,
	      name: funcName
	    };
	  },

	  htmlBuilder: htmlBuilder$2,
	  mathmlBuilder: mathmlBuilder$1
	}); // Limits, not symbols

	defineFunction({
	  type: "op",
	  names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
	  props: {
	    numArgs: 0
	  },

	  handler(_ref4) {
	    var {
	      parser,
	      funcName
	    } = _ref4;
	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: true,
	      parentIsSupSub: false,
	      symbol: false,
	      name: funcName
	    };
	  },

	  htmlBuilder: htmlBuilder$2,
	  mathmlBuilder: mathmlBuilder$1
	}); // No limits, symbols

	defineFunction({
	  type: "op",
	  names: ["\\int", "\\iint", "\\iiint", "\\oint", "\\oiint", "\\oiiint", "\u222b", "\u222c", "\u222d", "\u222e", "\u222f", "\u2230"],
	  props: {
	    numArgs: 0
	  },

	  handler(_ref5) {
	    var {
	      parser,
	      funcName
	    } = _ref5;
	    var fName = funcName;

	    if (fName.length === 1) {
	      fName = singleCharIntegrals[fName];
	    }

	    return {
	      type: "op",
	      mode: parser.mode,
	      limits: false,
	      parentIsSupSub: false,
	      symbol: true,
	      name: fName
	    };
	  },

	  htmlBuilder: htmlBuilder$2,
	  mathmlBuilder: mathmlBuilder$1
	});

	// NOTE: Unlike most `htmlBuilder`s, this one handles not only
	// "operatorname", but also  "supsub" since \operatorname* can
	// affect super/subscripting.
	var htmlBuilder$1 = (grp, options) => {
	  // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
	  var supGroup;
	  var subGroup;
	  var hasLimits = false;
	  var group;

	  if (grp.type === "supsub") {
	    // If we have limits, supsub will pass us its group to handle. Pull
	    // out the superscript and subscript and set the group to the op in
	    // its base.
	    supGroup = grp.sup;
	    subGroup = grp.sub;
	    group = assertNodeType(grp.base, "operatorname");
	    hasLimits = true;
	  } else {
	    group = assertNodeType(grp, "operatorname");
	  }

	  var base;

	  if (group.body.length > 0) {
	    var body = group.body.map(child => {
	      // $FlowFixMe: Check if the node has a string `text` property.
	      var childText = child.text;

	      if (typeof childText === "string") {
	        return {
	          type: "textord",
	          mode: child.mode,
	          text: childText
	        };
	      } else {
	        return child;
	      }
	    }); // Consolidate function names into symbol characters.

	    var expression = buildExpression$1(body, options.withFont("mathrm"), true);

	    for (var i = 0; i < expression.length; i++) {
	      var child = expression[i];

	      if (child instanceof SymbolNode) {
	        // Per amsopn package,
	        // change minus to hyphen and \ast to asterisk
	        child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
	      }
	    }

	    base = buildCommon.makeSpan(["mop"], expression, options);
	  } else {
	    base = buildCommon.makeSpan(["mop"], [], options);
	  }

	  if (hasLimits) {
	    return assembleSupSub(base, supGroup, subGroup, options, options.style, 0, 0);
	  } else {
	    return base;
	  }
	};

	var mathmlBuilder = (group, options) => {
	  // The steps taken here are similar to the html version.
	  var expression = buildExpression(group.body, options.withFont("mathrm")); // Is expression a string or has it something like a fraction?

	  var isAllString = true; // default

	  for (var i = 0; i < expression.length; i++) {
	    var node = expression[i];

	    if (node instanceof mathMLTree.SpaceNode) ; else if (node instanceof mathMLTree.MathNode) {
	      switch (node.type) {
	        case "mi":
	        case "mn":
	        case "ms":
	        case "mspace":
	        case "mtext":
	          break;
	        // Do nothing yet.

	        case "mo":
	          {
	            var child = node.children[0];

	            if (node.children.length === 1 && child instanceof mathMLTree.TextNode) {
	              child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
	            } else {
	              isAllString = false;
	            }

	            break;
	          }

	        default:
	          isAllString = false;
	      }
	    } else {
	      isAllString = false;
	    }
	  }

	  if (isAllString) {
	    // Write a single TextNode instead of multiple nested tags.
	    var word = expression.map(node => node.toText()).join("");
	    expression = [new mathMLTree.TextNode(word)];
	  }

	  var identifier = new mathMLTree.MathNode("mi", expression);
	  identifier.setAttribute("mathvariant", "normal"); // \u2061 is the same as &ApplyFunction;
	  // ref: https://www.w3schools.com/charsets/ref_html_entities_a.asp

	  var operator = new mathMLTree.MathNode("mo", [makeText("\u2061", "text")]);

	  if (group.parentIsSupSub) {
	    return new mathMLTree.MathNode("mrow", [identifier, operator]);
	  } else {
	    return mathMLTree.newDocumentFragment([identifier, operator]);
	  }
	}; // \operatorname
	// amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@


	defineFunction({
	  type: "operatorname",
	  names: ["\\operatorname@", "\\operatornamewithlimits"],
	  props: {
	    numArgs: 1
	  },
	  handler: (_ref, args) => {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "operatorname",
	      mode: parser.mode,
	      body: ordargument(body),
	      alwaysHandleSupSub: funcName === "\\operatornamewithlimits",
	      limits: false,
	      parentIsSupSub: false
	    };
	  },
	  htmlBuilder: htmlBuilder$1,
	  mathmlBuilder
	});
	defineMacro("\\operatorname", "\\@ifstar\\operatornamewithlimits\\operatorname@");

	defineFunctionBuilders({
	  type: "ordgroup",

	  htmlBuilder(group, options) {
	    if (group.semisimple) {
	      return buildCommon.makeFragment(buildExpression$1(group.body, options, false));
	    }

	    return buildCommon.makeSpan(["mord"], buildExpression$1(group.body, options, true), options);
	  },

	  mathmlBuilder(group, options) {
	    return buildExpressionRow(group.body, options, true);
	  }

	});

	defineFunction({
	  type: "overline",
	  names: ["\\overline"],
	  props: {
	    numArgs: 1
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "overline",
	      mode: parser.mode,
	      body
	    };
	  },

	  htmlBuilder(group, options) {
	    // Overlines are handled in the TeXbook pg 443, Rule 9.
	    // Build the inner group in the cramped style.
	    var innerGroup = buildGroup$1(group.body, options.havingCrampedStyle()); // Create the line above the body

	    var line = buildCommon.makeLineSpan("overline-line", options); // Generate the vlist, with the appropriate kerns

	    var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
	    var vlist = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: innerGroup
	      }, {
	        type: "kern",
	        size: 3 * defaultRuleThickness
	      }, {
	        type: "elem",
	        elem: line
	      }, {
	        type: "kern",
	        size: defaultRuleThickness
	      }]
	    }, options);
	    return buildCommon.makeSpan(["mord", "overline"], [vlist], options);
	  },

	  mathmlBuilder(group, options) {
	    var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203e")]);
	    operator.setAttribute("stretchy", "true");
	    var node = new mathMLTree.MathNode("mover", [buildGroup(group.body, options), operator]);
	    node.setAttribute("accent", "true");
	    return node;
	  }

	});

	defineFunction({
	  type: "phantom",
	  names: ["\\phantom"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      parser
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "phantom",
	      mode: parser.mode,
	      body: ordargument(body)
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var elements = buildExpression$1(group.body, options.withPhantom(), false); // \phantom isn't supposed to affect the elements it contains.
	    // See "color" for more details.

	    return buildCommon.makeFragment(elements);
	  },
	  mathmlBuilder: (group, options) => {
	    var inner = buildExpression(group.body, options);
	    return new mathMLTree.MathNode("mphantom", inner);
	  }
	});
	defineFunction({
	  type: "hphantom",
	  names: ["\\hphantom"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref2, args) => {
	    var {
	      parser
	    } = _ref2;
	    var body = args[0];
	    return {
	      type: "hphantom",
	      mode: parser.mode,
	      body
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var node = buildCommon.makeSpan([], [buildGroup$1(group.body, options.withPhantom())]);
	    node.height = 0;
	    node.depth = 0;

	    if (node.children) {
	      for (var i = 0; i < node.children.length; i++) {
	        node.children[i].height = 0;
	        node.children[i].depth = 0;
	      }
	    } // See smash for comment re: use of makeVList


	    node = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: node
	      }]
	    }, options); // For spacing, TeX treats \smash as a math group (same spacing as ord).

	    return buildCommon.makeSpan(["mord"], [node], options);
	  },
	  mathmlBuilder: (group, options) => {
	    var inner = buildExpression(ordargument(group.body), options);
	    var phantom = new mathMLTree.MathNode("mphantom", inner);
	    var node = new mathMLTree.MathNode("mpadded", [phantom]);
	    node.setAttribute("height", "0px");
	    node.setAttribute("depth", "0px");
	    return node;
	  }
	});
	defineFunction({
	  type: "vphantom",
	  names: ["\\vphantom"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref3, args) => {
	    var {
	      parser
	    } = _ref3;
	    var body = args[0];
	    return {
	      type: "vphantom",
	      mode: parser.mode,
	      body
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var inner = buildCommon.makeSpan(["inner"], [buildGroup$1(group.body, options.withPhantom())]);
	    var fix = buildCommon.makeSpan(["fix"], []);
	    return buildCommon.makeSpan(["mord", "rlap"], [inner, fix], options);
	  },
	  mathmlBuilder: (group, options) => {
	    var inner = buildExpression(ordargument(group.body), options);
	    var phantom = new mathMLTree.MathNode("mphantom", inner);
	    var node = new mathMLTree.MathNode("mpadded", [phantom]);
	    node.setAttribute("width", "0px");
	    return node;
	  }
	});

	defineFunction({
	  type: "raisebox",
	  names: ["\\raisebox"],
	  props: {
	    numArgs: 2,
	    argTypes: ["size", "hbox"],
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    var amount = assertNodeType(args[0], "size").value;
	    var body = args[1];
	    return {
	      type: "raisebox",
	      mode: parser.mode,
	      dy: amount,
	      body
	    };
	  },

	  htmlBuilder(group, options) {
	    var body = buildGroup$1(group.body, options);
	    var dy = calculateSize(group.dy, options);
	    return buildCommon.makeVList({
	      positionType: "shift",
	      positionData: -dy,
	      children: [{
	        type: "elem",
	        elem: body
	      }]
	    }, options);
	  },

	  mathmlBuilder(group, options) {
	    var node = new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)]);
	    var dy = group.dy.number + group.dy.unit;
	    node.setAttribute("voffset", dy);
	    return node;
	  }

	});

	defineFunction({
	  type: "internal",
	  names: ["\\relax"],
	  props: {
	    numArgs: 0,
	    allowedInText: true
	  },

	  handler(_ref) {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "internal",
	      mode: parser.mode
	    };
	  }

	});

	defineFunction({
	  type: "rule",
	  names: ["\\rule"],
	  props: {
	    numArgs: 2,
	    numOptionalArgs: 1,
	    argTypes: ["size", "size", "size"]
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser
	    } = _ref;
	    var shift = optArgs[0];
	    var width = assertNodeType(args[0], "size");
	    var height = assertNodeType(args[1], "size");
	    return {
	      type: "rule",
	      mode: parser.mode,
	      shift: shift && assertNodeType(shift, "size").value,
	      width: width.value,
	      height: height.value
	    };
	  },

	  htmlBuilder(group, options) {
	    // Make an empty span for the rule
	    var rule = buildCommon.makeSpan(["mord", "rule"], [], options); // Calculate the shift, width, and height of the rule, and account for units

	    var width = calculateSize(group.width, options);
	    var height = calculateSize(group.height, options);
	    var shift = group.shift ? calculateSize(group.shift, options) : 0; // Style the rule to the right size

	    rule.style.borderRightWidth = makeEm(width);
	    rule.style.borderTopWidth = makeEm(height);
	    rule.style.bottom = makeEm(shift); // Record the height and width

	    rule.width = width;
	    rule.height = height + shift;
	    rule.depth = -shift; // Font size is the number large enough that the browser will
	    // reserve at least `absHeight` space above the baseline.
	    // The 1.125 factor was empirically determined

	    rule.maxFontSize = height * 1.125 * options.sizeMultiplier;
	    return rule;
	  },

	  mathmlBuilder(group, options) {
	    var width = calculateSize(group.width, options);
	    var height = calculateSize(group.height, options);
	    var shift = group.shift ? calculateSize(group.shift, options) : 0;
	    var color = options.color && options.getColor() || "black";
	    var rule = new mathMLTree.MathNode("mspace");
	    rule.setAttribute("mathbackground", color);
	    rule.setAttribute("width", makeEm(width));
	    rule.setAttribute("height", makeEm(height));
	    var wrapper = new mathMLTree.MathNode("mpadded", [rule]);

	    if (shift >= 0) {
	      wrapper.setAttribute("height", makeEm(shift));
	    } else {
	      wrapper.setAttribute("height", makeEm(shift));
	      wrapper.setAttribute("depth", makeEm(-shift));
	    }

	    wrapper.setAttribute("voffset", makeEm(shift));
	    return wrapper;
	  }

	});

	function sizingGroup(value, options, baseOptions) {
	  var inner = buildExpression$1(value, options, false);
	  var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier; // Add size-resetting classes to the inner list and set maxFontSize
	  // manually. Handle nested size changes.

	  for (var i = 0; i < inner.length; i++) {
	    var pos = inner[i].classes.indexOf("sizing");

	    if (pos < 0) {
	      Array.prototype.push.apply(inner[i].classes, options.sizingClasses(baseOptions));
	    } else if (inner[i].classes[pos + 1] === "reset-size" + options.size) {
	      // This is a nested size change: e.g., inner[i] is the "b" in
	      // `\Huge a \small b`. Override the old size (the `reset-` class)
	      // but not the new size.
	      inner[i].classes[pos + 1] = "reset-size" + baseOptions.size;
	    }

	    inner[i].height *= multiplier;
	    inner[i].depth *= multiplier;
	  }

	  return buildCommon.makeFragment(inner);
	}
	var sizeFuncs = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"];
	var htmlBuilder = (group, options) => {
	  // Handle sizing operators like \Huge. Real TeX doesn't actually allow
	  // these functions inside of math expressions, so we do some special
	  // handling.
	  var newOptions = options.havingSize(group.size);
	  return sizingGroup(group.body, newOptions, options);
	};
	defineFunction({
	  type: "sizing",
	  names: sizeFuncs,
	  props: {
	    numArgs: 0,
	    allowedInText: true
	  },
	  handler: (_ref, args) => {
	    var {
	      breakOnTokenText,
	      funcName,
	      parser
	    } = _ref;
	    var body = parser.parseExpression(false, breakOnTokenText);
	    return {
	      type: "sizing",
	      mode: parser.mode,
	      // Figure out what size to use based on the list of functions above
	      size: sizeFuncs.indexOf(funcName) + 1,
	      body
	    };
	  },
	  htmlBuilder,
	  mathmlBuilder: (group, options) => {
	    var newOptions = options.havingSize(group.size);
	    var inner = buildExpression(group.body, newOptions);
	    var node = new mathMLTree.MathNode("mstyle", inner); // TODO(emily): This doesn't produce the correct size for nested size
	    // changes, because we don't keep state of what style we're currently
	    // in, so we can't reset the size to normal before changing it.  Now
	    // that we're passing an options parameter we should be able to fix
	    // this.

	    node.setAttribute("mathsize", makeEm(newOptions.sizeMultiplier));
	    return node;
	  }
	});

	// smash, with optional [tb], as in AMS
	defineFunction({
	  type: "smash",
	  names: ["\\smash"],
	  props: {
	    numArgs: 1,
	    numOptionalArgs: 1,
	    allowedInText: true
	  },
	  handler: (_ref, args, optArgs) => {
	    var {
	      parser
	    } = _ref;
	    var smashHeight = false;
	    var smashDepth = false;
	    var tbArg = optArgs[0] && assertNodeType(optArgs[0], "ordgroup");

	    if (tbArg) {
	      // Optional [tb] argument is engaged.
	      // ref: amsmath: \renewcommand{\smash}[1][tb]{%
	      //               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%
	      var letter = "";

	      for (var i = 0; i < tbArg.body.length; ++i) {
	        var node = tbArg.body[i]; // $FlowFixMe: Not every node type has a `text` property.

	        letter = node.text;

	        if (letter === "t") {
	          smashHeight = true;
	        } else if (letter === "b") {
	          smashDepth = true;
	        } else {
	          smashHeight = false;
	          smashDepth = false;
	          break;
	        }
	      }
	    } else {
	      smashHeight = true;
	      smashDepth = true;
	    }

	    var body = args[0];
	    return {
	      type: "smash",
	      mode: parser.mode,
	      body,
	      smashHeight,
	      smashDepth
	    };
	  },
	  htmlBuilder: (group, options) => {
	    var node = buildCommon.makeSpan([], [buildGroup$1(group.body, options)]);

	    if (!group.smashHeight && !group.smashDepth) {
	      return node;
	    }

	    if (group.smashHeight) {
	      node.height = 0; // In order to influence makeVList, we have to reset the children.

	      if (node.children) {
	        for (var i = 0; i < node.children.length; i++) {
	          node.children[i].height = 0;
	        }
	      }
	    }

	    if (group.smashDepth) {
	      node.depth = 0;

	      if (node.children) {
	        for (var _i = 0; _i < node.children.length; _i++) {
	          node.children[_i].depth = 0;
	        }
	      }
	    } // At this point, we've reset the TeX-like height and depth values.
	    // But the span still has an HTML line height.
	    // makeVList applies "display: table-cell", which prevents the browser
	    // from acting on that line height. So we'll call makeVList now.


	    var smashedNode = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: node
	      }]
	    }, options); // For spacing, TeX treats \hphantom as a math group (same spacing as ord).

	    return buildCommon.makeSpan(["mord"], [smashedNode], options);
	  },
	  mathmlBuilder: (group, options) => {
	    var node = new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)]);

	    if (group.smashHeight) {
	      node.setAttribute("height", "0px");
	    }

	    if (group.smashDepth) {
	      node.setAttribute("depth", "0px");
	    }

	    return node;
	  }
	});

	defineFunction({
	  type: "sqrt",
	  names: ["\\sqrt"],
	  props: {
	    numArgs: 1,
	    numOptionalArgs: 1
	  },

	  handler(_ref, args, optArgs) {
	    var {
	      parser
	    } = _ref;
	    var index = optArgs[0];
	    var body = args[0];
	    return {
	      type: "sqrt",
	      mode: parser.mode,
	      body,
	      index
	    };
	  },

	  htmlBuilder(group, options) {
	    // Square roots are handled in the TeXbook pg. 443, Rule 11.
	    // First, we do the same steps as in overline to build the inner group
	    // and line
	    var inner = buildGroup$1(group.body, options.havingCrampedStyle());

	    if (inner.height === 0) {
	      // Render a small surd.
	      inner.height = options.fontMetrics().xHeight;
	    } // Some groups can return document fragments.  Handle those by wrapping
	    // them in a span.


	    inner = buildCommon.wrapFragment(inner, options); // Calculate the minimum size for the \surd delimiter

	    var metrics = options.fontMetrics();
	    var theta = metrics.defaultRuleThickness;
	    var phi = theta;

	    if (options.style.id < Style$1.TEXT.id) {
	      phi = options.fontMetrics().xHeight;
	    } // Calculate the clearance between the body and line


	    var lineClearance = theta + phi / 4;
	    var minDelimiterHeight = inner.height + inner.depth + lineClearance + theta; // Create a sqrt SVG of the required minimum size

	    var {
	      span: img,
	      ruleWidth,
	      advanceWidth
	    } = delimiter.sqrtImage(minDelimiterHeight, options);
	    var delimDepth = img.height - ruleWidth; // Adjust the clearance based on the delimiter size

	    if (delimDepth > inner.height + inner.depth + lineClearance) {
	      lineClearance = (lineClearance + delimDepth - inner.height - inner.depth) / 2;
	    } // Shift the sqrt image


	    var imgShift = img.height - inner.height - lineClearance - ruleWidth;
	    inner.style.paddingLeft = makeEm(advanceWidth); // Overlay the image and the argument.

	    var body = buildCommon.makeVList({
	      positionType: "firstBaseline",
	      children: [{
	        type: "elem",
	        elem: inner,
	        wrapperClasses: ["svg-align"]
	      }, {
	        type: "kern",
	        size: -(inner.height + imgShift)
	      }, {
	        type: "elem",
	        elem: img
	      }, {
	        type: "kern",
	        size: ruleWidth
	      }]
	    }, options);

	    if (!group.index) {
	      return buildCommon.makeSpan(["mord", "sqrt"], [body], options);
	    } else {
	      // Handle the optional root index
	      // The index is always in scriptscript style
	      var newOptions = options.havingStyle(Style$1.SCRIPTSCRIPT);
	      var rootm = buildGroup$1(group.index, newOptions, options); // The amount the index is shifted by. This is taken from the TeX
	      // source, in the definition of `\r@@t`.

	      var toShift = 0.6 * (body.height - body.depth); // Build a VList with the superscript shifted up correctly

	      var rootVList = buildCommon.makeVList({
	        positionType: "shift",
	        positionData: -toShift,
	        children: [{
	          type: "elem",
	          elem: rootm
	        }]
	      }, options); // Add a class surrounding it so we can add on the appropriate
	      // kerning

	      var rootVListWrap = buildCommon.makeSpan(["root"], [rootVList]);
	      return buildCommon.makeSpan(["mord", "sqrt"], [rootVListWrap, body], options);
	    }
	  },

	  mathmlBuilder(group, options) {
	    var {
	      body,
	      index
	    } = group;
	    return index ? new mathMLTree.MathNode("mroot", [buildGroup(body, options), buildGroup(index, options)]) : new mathMLTree.MathNode("msqrt", [buildGroup(body, options)]);
	  }

	});

	var styleMap = {
	  "display": Style$1.DISPLAY,
	  "text": Style$1.TEXT,
	  "script": Style$1.SCRIPT,
	  "scriptscript": Style$1.SCRIPTSCRIPT
	};
	defineFunction({
	  type: "styling",
	  names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
	  props: {
	    numArgs: 0,
	    allowedInText: true,
	    primitive: true
	  },

	  handler(_ref, args) {
	    var {
	      breakOnTokenText,
	      funcName,
	      parser
	    } = _ref;
	    // parse out the implicit body
	    var body = parser.parseExpression(true, breakOnTokenText); // TODO: Refactor to avoid duplicating styleMap in multiple places (e.g.
	    // here and in buildHTML and de-dupe the enumeration of all the styles).
	    // $FlowFixMe: The names above exactly match the styles.

	    var style = funcName.slice(1, funcName.length - 5);
	    return {
	      type: "styling",
	      mode: parser.mode,
	      // Figure out what style to use by pulling out the style from
	      // the function name
	      style,
	      body
	    };
	  },

	  htmlBuilder(group, options) {
	    // Style changes are handled in the TeXbook on pg. 442, Rule 3.
	    var newStyle = styleMap[group.style];
	    var newOptions = options.havingStyle(newStyle).withFont('');
	    return sizingGroup(group.body, newOptions, options);
	  },

	  mathmlBuilder(group, options) {
	    // Figure out what style we're changing to.
	    var newStyle = styleMap[group.style];
	    var newOptions = options.havingStyle(newStyle);
	    var inner = buildExpression(group.body, newOptions);
	    var node = new mathMLTree.MathNode("mstyle", inner);
	    var styleAttributes = {
	      "display": ["0", "true"],
	      "text": ["0", "false"],
	      "script": ["1", "false"],
	      "scriptscript": ["2", "false"]
	    };
	    var attr = styleAttributes[group.style];
	    node.setAttribute("scriptlevel", attr[0]);
	    node.setAttribute("displaystyle", attr[1]);
	    return node;
	  }

	});

	/**
	 * Sometimes, groups perform special rules when they have superscripts or
	 * subscripts attached to them. This function lets the `supsub` group know that
	 * Sometimes, groups perform special rules when they have superscripts or
	 * its inner element should handle the superscripts and subscripts instead of
	 * handling them itself.
	 */
	var htmlBuilderDelegate = function htmlBuilderDelegate(group, options) {
	  var base = group.base;

	  if (!base) {
	    return null;
	  } else if (base.type === "op") {
	    // Operators handle supsubs differently when they have limits
	    // (e.g. `\displaystyle\sum_2^3`)
	    var delegate = base.limits && (options.style.size === Style$1.DISPLAY.size || base.alwaysHandleSupSub);
	    return delegate ? htmlBuilder$2 : null;
	  } else if (base.type === "operatorname") {
	    var _delegate = base.alwaysHandleSupSub && (options.style.size === Style$1.DISPLAY.size || base.limits);

	    return _delegate ? htmlBuilder$1 : null;
	  } else if (base.type === "accent") {
	    return utils.isCharacterBox(base.base) ? htmlBuilder$a : null;
	  } else if (base.type === "horizBrace") {
	    var isSup = !group.sub;
	    return isSup === base.isOver ? htmlBuilder$3 : null;
	  } else {
	    return null;
	  }
	}; // Super scripts and subscripts, whose precise placement can depend on other
	// functions that precede them.


	defineFunctionBuilders({
	  type: "supsub",

	  htmlBuilder(group, options) {
	    // Superscript and subscripts are handled in the TeXbook on page
	    // 445-446, rules 18(a-f).
	    // Here is where we defer to the inner group if it should handle
	    // superscripts and subscripts itself.
	    var builderDelegate = htmlBuilderDelegate(group, options);

	    if (builderDelegate) {
	      return builderDelegate(group, options);
	    }

	    var {
	      base: valueBase,
	      sup: valueSup,
	      sub: valueSub
	    } = group;
	    var base = buildGroup$1(valueBase, options);
	    var supm;
	    var subm;
	    var metrics = options.fontMetrics(); // Rule 18a

	    var supShift = 0;
	    var subShift = 0;
	    var isCharacterBox = valueBase && utils.isCharacterBox(valueBase);

	    if (valueSup) {
	      var newOptions = options.havingStyle(options.style.sup());
	      supm = buildGroup$1(valueSup, newOptions, options);

	      if (!isCharacterBox) {
	        supShift = base.height - newOptions.fontMetrics().supDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
	      }
	    }

	    if (valueSub) {
	      var _newOptions = options.havingStyle(options.style.sub());

	      subm = buildGroup$1(valueSub, _newOptions, options);

	      if (!isCharacterBox) {
	        subShift = base.depth + _newOptions.fontMetrics().subDrop * _newOptions.sizeMultiplier / options.sizeMultiplier;
	      }
	    } // Rule 18c


	    var minSupShift;

	    if (options.style === Style$1.DISPLAY) {
	      minSupShift = metrics.sup1;
	    } else if (options.style.cramped) {
	      minSupShift = metrics.sup3;
	    } else {
	      minSupShift = metrics.sup2;
	    } // scriptspace is a font-size-independent size, so scale it
	    // appropriately for use as the marginRight.


	    var multiplier = options.sizeMultiplier;
	    var marginRight = makeEm(0.5 / metrics.ptPerEm / multiplier);
	    var marginLeft = null;

	    if (subm) {
	      // Subscripts shouldn't be shifted by the base's italic correction.
	      // Account for that by shifting the subscript back the appropriate
	      // amount. Note we only do this when the base is a single symbol.
	      var isOiint = group.base && group.base.type === "op" && group.base.name && (group.base.name === "\\oiint" || group.base.name === "\\oiiint");

	      if (base instanceof SymbolNode || isOiint) {
	        // $FlowFixMe
	        marginLeft = makeEm(-base.italic);
	      }
	    }

	    var supsub;

	    if (supm && subm) {
	      supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
	      subShift = Math.max(subShift, metrics.sub2);
	      var ruleWidth = metrics.defaultRuleThickness; // Rule 18e

	      var maxWidth = 4 * ruleWidth;

	      if (supShift - supm.depth - (subm.height - subShift) < maxWidth) {
	        subShift = maxWidth - (supShift - supm.depth) + subm.height;
	        var psi = 0.8 * metrics.xHeight - (supShift - supm.depth);

	        if (psi > 0) {
	          supShift += psi;
	          subShift -= psi;
	        }
	      }

	      var vlistElem = [{
	        type: "elem",
	        elem: subm,
	        shift: subShift,
	        marginRight,
	        marginLeft
	      }, {
	        type: "elem",
	        elem: supm,
	        shift: -supShift,
	        marginRight
	      }];
	      supsub = buildCommon.makeVList({
	        positionType: "individualShift",
	        children: vlistElem
	      }, options);
	    } else if (subm) {
	      // Rule 18b
	      subShift = Math.max(subShift, metrics.sub1, subm.height - 0.8 * metrics.xHeight);
	      var _vlistElem = [{
	        type: "elem",
	        elem: subm,
	        marginLeft,
	        marginRight
	      }];
	      supsub = buildCommon.makeVList({
	        positionType: "shift",
	        positionData: subShift,
	        children: _vlistElem
	      }, options);
	    } else if (supm) {
	      // Rule 18c, d
	      supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
	      supsub = buildCommon.makeVList({
	        positionType: "shift",
	        positionData: -supShift,
	        children: [{
	          type: "elem",
	          elem: supm,
	          marginRight
	        }]
	      }, options);
	    } else {
	      throw new Error("supsub must have either sup or sub.");
	    } // Wrap the supsub vlist in a span.msupsub to reset text-align.


	    var mclass = getTypeOfDomTree(base, "right") || "mord";
	    return buildCommon.makeSpan([mclass], [base, buildCommon.makeSpan(["msupsub"], [supsub])], options);
	  },

	  mathmlBuilder(group, options) {
	    // Is the inner group a relevant horizonal brace?
	    var isBrace = false;
	    var isOver;
	    var isSup;

	    if (group.base && group.base.type === "horizBrace") {
	      isSup = !!group.sup;

	      if (isSup === group.base.isOver) {
	        isBrace = true;
	        isOver = group.base.isOver;
	      }
	    }

	    if (group.base && (group.base.type === "op" || group.base.type === "operatorname")) {
	      group.base.parentIsSupSub = true;
	    }

	    var children = [buildGroup(group.base, options)];

	    if (group.sub) {
	      children.push(buildGroup(group.sub, options));
	    }

	    if (group.sup) {
	      children.push(buildGroup(group.sup, options));
	    }

	    var nodeType;

	    if (isBrace) {
	      nodeType = isOver ? "mover" : "munder";
	    } else if (!group.sub) {
	      var base = group.base;

	      if (base && base.type === "op" && base.limits && (options.style === Style$1.DISPLAY || base.alwaysHandleSupSub)) {
	        nodeType = "mover";
	      } else if (base && base.type === "operatorname" && base.alwaysHandleSupSub && (base.limits || options.style === Style$1.DISPLAY)) {
	        nodeType = "mover";
	      } else {
	        nodeType = "msup";
	      }
	    } else if (!group.sup) {
	      var _base = group.base;

	      if (_base && _base.type === "op" && _base.limits && (options.style === Style$1.DISPLAY || _base.alwaysHandleSupSub)) {
	        nodeType = "munder";
	      } else if (_base && _base.type === "operatorname" && _base.alwaysHandleSupSub && (_base.limits || options.style === Style$1.DISPLAY)) {
	        nodeType = "munder";
	      } else {
	        nodeType = "msub";
	      }
	    } else {
	      var _base2 = group.base;

	      if (_base2 && _base2.type === "op" && _base2.limits && options.style === Style$1.DISPLAY) {
	        nodeType = "munderover";
	      } else if (_base2 && _base2.type === "operatorname" && _base2.alwaysHandleSupSub && (options.style === Style$1.DISPLAY || _base2.limits)) {
	        nodeType = "munderover";
	      } else {
	        nodeType = "msubsup";
	      }
	    }

	    return new mathMLTree.MathNode(nodeType, children);
	  }

	});

	defineFunctionBuilders({
	  type: "atom",

	  htmlBuilder(group, options) {
	    return buildCommon.mathsym(group.text, group.mode, options, ["m" + group.family]);
	  },

	  mathmlBuilder(group, options) {
	    var node = new mathMLTree.MathNode("mo", [makeText(group.text, group.mode)]);

	    if (group.family === "bin") {
	      var variant = getVariant(group, options);

	      if (variant === "bold-italic") {
	        node.setAttribute("mathvariant", variant);
	      }
	    } else if (group.family === "punct") {
	      node.setAttribute("separator", "true");
	    } else if (group.family === "open" || group.family === "close") {
	      // Delims built here should not stretch vertically.
	      // See delimsizing.js for stretchy delims.
	      node.setAttribute("stretchy", "false");
	    }

	    return node;
	  }

	});

	// "mathord" and "textord" ParseNodes created in Parser.js from symbol Groups in
	// src/symbols.js.
	var defaultVariant = {
	  "mi": "italic",
	  "mn": "normal",
	  "mtext": "normal"
	};
	defineFunctionBuilders({
	  type: "mathord",

	  htmlBuilder(group, options) {
	    return buildCommon.makeOrd(group, options, "mathord");
	  },

	  mathmlBuilder(group, options) {
	    var node = new mathMLTree.MathNode("mi", [makeText(group.text, group.mode, options)]);
	    var variant = getVariant(group, options) || "italic";

	    if (variant !== defaultVariant[node.type]) {
	      node.setAttribute("mathvariant", variant);
	    }

	    return node;
	  }

	});
	defineFunctionBuilders({
	  type: "textord",

	  htmlBuilder(group, options) {
	    return buildCommon.makeOrd(group, options, "textord");
	  },

	  mathmlBuilder(group, options) {
	    var text = makeText(group.text, group.mode, options);
	    var variant = getVariant(group, options) || "normal";
	    var node;

	    if (group.mode === 'text') {
	      node = new mathMLTree.MathNode("mtext", [text]);
	    } else if (/[0-9]/.test(group.text)) {
	      node = new mathMLTree.MathNode("mn", [text]);
	    } else if (group.text === "\\prime") {
	      node = new mathMLTree.MathNode("mo", [text]);
	    } else {
	      node = new mathMLTree.MathNode("mi", [text]);
	    }

	    if (variant !== defaultVariant[node.type]) {
	      node.setAttribute("mathvariant", variant);
	    }

	    return node;
	  }

	});

	var cssSpace = {
	  "\\nobreak": "nobreak",
	  "\\allowbreak": "allowbreak"
	}; // A lookup table to determine whether a spacing function/symbol should be
	// treated like a regular space character.  If a symbol or command is a key
	// in this table, then it should be a regular space character.  Furthermore,
	// the associated value may have a `className` specifying an extra CSS class
	// to add to the created `span`.

	var regularSpace = {
	  " ": {},
	  "\\ ": {},
	  "~": {
	    className: "nobreak"
	  },
	  "\\space": {},
	  "\\nobreakspace": {
	    className: "nobreak"
	  }
	}; // ParseNode<"spacing"> created in Parser.js from the "spacing" symbol Groups in
	// src/symbols.js.

	defineFunctionBuilders({
	  type: "spacing",

	  htmlBuilder(group, options) {
	    if (regularSpace.hasOwnProperty(group.text)) {
	      var className = regularSpace[group.text].className || ""; // Spaces are generated by adding an actual space. Each of these
	      // things has an entry in the symbols table, so these will be turned
	      // into appropriate outputs.

	      if (group.mode === "text") {
	        var ord = buildCommon.makeOrd(group, options, "textord");
	        ord.classes.push(className);
	        return ord;
	      } else {
	        return buildCommon.makeSpan(["mspace", className], [buildCommon.mathsym(group.text, group.mode, options)], options);
	      }
	    } else if (cssSpace.hasOwnProperty(group.text)) {
	      // Spaces based on just a CSS class.
	      return buildCommon.makeSpan(["mspace", cssSpace[group.text]], [], options);
	    } else {
	      throw new ParseError("Unknown type of space \"" + group.text + "\"");
	    }
	  },

	  mathmlBuilder(group, options) {
	    var node;

	    if (regularSpace.hasOwnProperty(group.text)) {
	      node = new mathMLTree.MathNode("mtext", [new mathMLTree.TextNode("\u00a0")]);
	    } else if (cssSpace.hasOwnProperty(group.text)) {
	      // CSS-based MathML spaces (\nobreak, \allowbreak) are ignored
	      return new mathMLTree.MathNode("mspace");
	    } else {
	      throw new ParseError("Unknown type of space \"" + group.text + "\"");
	    }

	    return node;
	  }

	});

	var pad = () => {
	  var padNode = new mathMLTree.MathNode("mtd", []);
	  padNode.setAttribute("width", "50%");
	  return padNode;
	};

	defineFunctionBuilders({
	  type: "tag",

	  mathmlBuilder(group, options) {
	    var table = new mathMLTree.MathNode("mtable", [new mathMLTree.MathNode("mtr", [pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.body, options)]), pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.tag, options)])])]);
	    table.setAttribute("width", "100%");
	    return table; // TODO: Left-aligned tags.
	    // Currently, the group and options passed here do not contain
	    // enough info to set tag alignment. `leqno` is in Settings but it is
	    // not passed to Options. On the HTML side, leqno is
	    // set by a CSS class applied in buildTree.js. That would have worked
	    // in MathML if browsers supported <mlabeledtr>. Since they don't, we
	    // need to rewrite the way this function is called.
	  }

	});

	var textFontFamilies = {
	  "\\text": undefined,
	  "\\textrm": "textrm",
	  "\\textsf": "textsf",
	  "\\texttt": "texttt",
	  "\\textnormal": "textrm"
	};
	var textFontWeights = {
	  "\\textbf": "textbf",
	  "\\textmd": "textmd"
	};
	var textFontShapes = {
	  "\\textit": "textit",
	  "\\textup": "textup"
	};

	var optionsWithFont = (group, options) => {
	  var font = group.font; // Checks if the argument is a font family or a font style.

	  if (!font) {
	    return options;
	  } else if (textFontFamilies[font]) {
	    return options.withTextFontFamily(textFontFamilies[font]);
	  } else if (textFontWeights[font]) {
	    return options.withTextFontWeight(textFontWeights[font]);
	  } else {
	    return options.withTextFontShape(textFontShapes[font]);
	  }
	};

	defineFunction({
	  type: "text",
	  names: [// Font families
	  "\\text", "\\textrm", "\\textsf", "\\texttt", "\\textnormal", // Font weights
	  "\\textbf", "\\textmd", // Font Shapes
	  "\\textit", "\\textup"],
	  props: {
	    numArgs: 1,
	    argTypes: ["text"],
	    allowedInArgument: true,
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser,
	      funcName
	    } = _ref;
	    var body = args[0];
	    return {
	      type: "text",
	      mode: parser.mode,
	      body: ordargument(body),
	      font: funcName
	    };
	  },

	  htmlBuilder(group, options) {
	    var newOptions = optionsWithFont(group, options);
	    var inner = buildExpression$1(group.body, newOptions, true);
	    return buildCommon.makeSpan(["mord", "text"], inner, newOptions);
	  },

	  mathmlBuilder(group, options) {
	    var newOptions = optionsWithFont(group, options);
	    return buildExpressionRow(group.body, newOptions);
	  }

	});

	defineFunction({
	  type: "underline",
	  names: ["\\underline"],
	  props: {
	    numArgs: 1,
	    allowedInText: true
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "underline",
	      mode: parser.mode,
	      body: args[0]
	    };
	  },

	  htmlBuilder(group, options) {
	    // Underlines are handled in the TeXbook pg 443, Rule 10.
	    // Build the inner group.
	    var innerGroup = buildGroup$1(group.body, options); // Create the line to go below the body

	    var line = buildCommon.makeLineSpan("underline-line", options); // Generate the vlist, with the appropriate kerns

	    var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
	    var vlist = buildCommon.makeVList({
	      positionType: "top",
	      positionData: innerGroup.height,
	      children: [{
	        type: "kern",
	        size: defaultRuleThickness
	      }, {
	        type: "elem",
	        elem: line
	      }, {
	        type: "kern",
	        size: 3 * defaultRuleThickness
	      }, {
	        type: "elem",
	        elem: innerGroup
	      }]
	    }, options);
	    return buildCommon.makeSpan(["mord", "underline"], [vlist], options);
	  },

	  mathmlBuilder(group, options) {
	    var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203e")]);
	    operator.setAttribute("stretchy", "true");
	    var node = new mathMLTree.MathNode("munder", [buildGroup(group.body, options), operator]);
	    node.setAttribute("accentunder", "true");
	    return node;
	  }

	});

	defineFunction({
	  type: "vcenter",
	  names: ["\\vcenter"],
	  props: {
	    numArgs: 1,
	    argTypes: ["original"],
	    // In LaTeX, \vcenter can act only on a box.
	    allowedInText: false
	  },

	  handler(_ref, args) {
	    var {
	      parser
	    } = _ref;
	    return {
	      type: "vcenter",
	      mode: parser.mode,
	      body: args[0]
	    };
	  },

	  htmlBuilder(group, options) {
	    var body = buildGroup$1(group.body, options);
	    var axisHeight = options.fontMetrics().axisHeight;
	    var dy = 0.5 * (body.height - axisHeight - (body.depth + axisHeight));
	    return buildCommon.makeVList({
	      positionType: "shift",
	      positionData: dy,
	      children: [{
	        type: "elem",
	        elem: body
	      }]
	    }, options);
	  },

	  mathmlBuilder(group, options) {
	    // There is no way to do this in MathML.
	    // Write a class as a breadcrumb in case some post-processor wants
	    // to perform a vcenter adjustment.
	    return new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)], ["vcenter"]);
	  }

	});

	defineFunction({
	  type: "verb",
	  names: ["\\verb"],
	  props: {
	    numArgs: 0,
	    allowedInText: true
	  },

	  handler(context, args, optArgs) {
	    // \verb and \verb* are dealt with directly in Parser.js.
	    // If we end up here, it's because of a failure to match the two delimiters
	    // in the regex in Lexer.js.  LaTeX raises the following error when \verb is
	    // terminated by end of line (or file).
	    throw new ParseError("\\verb ended by end of line instead of matching delimiter");
	  },

	  htmlBuilder(group, options) {
	    var text = makeVerb(group);
	    var body = []; // \verb enters text mode and therefore is sized like \textstyle

	    var newOptions = options.havingStyle(options.style.text());

	    for (var i = 0; i < text.length; i++) {
	      var c = text[i];

	      if (c === '~') {
	        c = '\\textasciitilde';
	      }

	      body.push(buildCommon.makeSymbol(c, "Typewriter-Regular", group.mode, newOptions, ["mord", "texttt"]));
	    }

	    return buildCommon.makeSpan(["mord", "text"].concat(newOptions.sizingClasses(options)), buildCommon.tryCombineChars(body), newOptions);
	  },

	  mathmlBuilder(group, options) {
	    var text = new mathMLTree.TextNode(makeVerb(group));
	    var node = new mathMLTree.MathNode("mtext", [text]);
	    node.setAttribute("mathvariant", "monospace");
	    return node;
	  }

	});
	/**
	 * Converts verb group into body string.
	 *
	 * \verb* replaces each space with an open box \u2423
	 * \verb replaces each space with a no-break space \xA0
	 */

	var makeVerb = group => group.body.replace(/ /g, group.star ? '\u2423' : '\xA0');

	/** Include this to ensure that all functions are defined. */
	var functions = _functions;

	/**
	 * The Lexer class handles tokenizing the input in various ways. Since our
	 * parser expects us to be able to backtrack, the lexer allows lexing from any
	 * given starting point.
	 *
	 * Its main exposed function is the `lex` function, which takes a position to
	 * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
	 * function.
	 *
	 * The various `_innerLex` functions perform the actual lexing of different
	 * kinds.
	 */

	/* The following tokenRegex
	 * - matches typical whitespace (but not NBSP etc.) using its first group
	 * - does not match any control character \x00-\x1f except whitespace
	 * - does not match a bare backslash
	 * - matches any ASCII character except those just mentioned
	 * - does not match the BMP private use area \uE000-\uF8FF
	 * - does not match bare surrogate code units
	 * - matches any BMP character except for those just described
	 * - matches any valid Unicode surrogate pair
	 * - matches a backslash followed by one or more whitespace characters
	 * - matches a backslash followed by one or more letters then whitespace
	 * - matches a backslash followed by any BMP character
	 * Capturing groups:
	 *   [1] regular whitespace
	 *   [2] backslash followed by whitespace
	 *   [3] anything else, which may include:
	 *     [4] left character of \verb*
	 *     [5] left character of \verb
	 *     [6] backslash followed by word, excluding any trailing whitespace
	 * Just because the Lexer matches something doesn't mean it's valid input:
	 * If there is no matching function or symbol definition, the Parser will
	 * still reject the input.
	 */
	var spaceRegexString = "[ \r\n\t]";
	var controlWordRegexString = "\\\\[a-zA-Z@]+";
	var controlSymbolRegexString = "\\\\[^\uD800-\uDFFF]";
	var controlWordWhitespaceRegexString = "(" + controlWordRegexString + ")" + spaceRegexString + "*";
	var controlSpaceRegexString = "\\\\(\n|[ \r\t]+\n?)[ \r\t]*";
	var combiningDiacriticalMarkString = "[\u0300-\u036f]";
	var combiningDiacriticalMarksEndRegex = new RegExp(combiningDiacriticalMarkString + "+$");
	var tokenRegexString = "(" + spaceRegexString + "+)|" + ( // whitespace
	controlSpaceRegexString + "|") + // \whitespace
	"([!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" + ( // single codepoint
	combiningDiacriticalMarkString + "*") + // ...plus accents
	"|[\uD800-\uDBFF][\uDC00-\uDFFF]" + ( // surrogate pair
	combiningDiacriticalMarkString + "*") + // ...plus accents
	"|\\\\verb\\*([^]).*?\\4" + // \verb*
	"|\\\\verb([^*a-zA-Z]).*?\\5" + ( // \verb unstarred
	"|" + controlWordWhitespaceRegexString) + ( // \macroName + spaces
	"|" + controlSymbolRegexString + ")"); // \\, \', etc.

	/** Main Lexer class */

	class Lexer {
	  // Category codes. The lexer only supports comment characters (14) for now.
	  // MacroExpander additionally distinguishes active (13).
	  constructor(input, settings) {
	    this.input = void 0;
	    this.settings = void 0;
	    this.tokenRegex = void 0;
	    this.catcodes = void 0;
	    // Separate accents from characters
	    this.input = input;
	    this.settings = settings;
	    this.tokenRegex = new RegExp(tokenRegexString, 'g');
	    this.catcodes = {
	      "%": 14,
	      // comment character
	      "~": 13 // active character

	    };
	  }

	  setCatcode(char, code) {
	    this.catcodes[char] = code;
	  }
	  /**
	   * This function lexes a single token.
	   */


	  lex() {
	    var input = this.input;
	    var pos = this.tokenRegex.lastIndex;

	    if (pos === input.length) {
	      return new Token("EOF", new SourceLocation(this, pos, pos));
	    }

	    var match = this.tokenRegex.exec(input);

	    if (match === null || match.index !== pos) {
	      throw new ParseError("Unexpected character: '" + input[pos] + "'", new Token(input[pos], new SourceLocation(this, pos, pos + 1)));
	    }

	    var text = match[6] || match[3] || (match[2] ? "\\ " : " ");

	    if (this.catcodes[text] === 14) {
	      // comment character
	      var nlIndex = input.indexOf('\n', this.tokenRegex.lastIndex);

	      if (nlIndex === -1) {
	        this.tokenRegex.lastIndex = input.length; // EOF

	        this.settings.reportNonstrict("commentAtEnd", "% comment has no terminating newline; LaTeX would " + "fail because of commenting the end of math mode (e.g. $)");
	      } else {
	        this.tokenRegex.lastIndex = nlIndex + 1;
	      }

	      return this.lex();
	    }

	    return new Token(text, new SourceLocation(this, pos, this.tokenRegex.lastIndex));
	  }

	}

	/**
	 * A `Namespace` refers to a space of nameable things like macros or lengths,
	 * which can be `set` either globally or local to a nested group, using an
	 * undo stack similar to how TeX implements this functionality.
	 * Performance-wise, `get` and local `set` take constant time, while global
	 * `set` takes time proportional to the depth of group nesting.
	 */
	class Namespace {
	  /**
	   * Both arguments are optional.  The first argument is an object of
	   * built-in mappings which never change.  The second argument is an object
	   * of initial (global-level) mappings, which will constantly change
	   * according to any global/top-level `set`s done.
	   */
	  constructor(builtins, globalMacros) {
	    if (builtins === void 0) {
	      builtins = {};
	    }

	    if (globalMacros === void 0) {
	      globalMacros = {};
	    }

	    this.current = void 0;
	    this.builtins = void 0;
	    this.undefStack = void 0;
	    this.current = globalMacros;
	    this.builtins = builtins;
	    this.undefStack = [];
	  }
	  /**
	   * Start a new nested group, affecting future local `set`s.
	   */


	  beginGroup() {
	    this.undefStack.push({});
	  }
	  /**
	   * End current nested group, restoring values before the group began.
	   */


	  endGroup() {
	    if (this.undefStack.length === 0) {
	      throw new ParseError("Unbalanced namespace destruction: attempt " + "to pop global namespace; please report this as a bug");
	    }

	    var undefs = this.undefStack.pop();

	    for (var undef in undefs) {
	      if (undefs.hasOwnProperty(undef)) {
	        if (undefs[undef] == null) {
	          delete this.current[undef];
	        } else {
	          this.current[undef] = undefs[undef];
	        }
	      }
	    }
	  }
	  /**
	   * Ends all currently nested groups (if any), restoring values before the
	   * groups began.  Useful in case of an error in the middle of parsing.
	   */


	  endGroups() {
	    while (this.undefStack.length > 0) {
	      this.endGroup();
	    }
	  }
	  /**
	   * Detect whether `name` has a definition.  Equivalent to
	   * `get(name) != null`.
	   */


	  has(name) {
	    return this.current.hasOwnProperty(name) || this.builtins.hasOwnProperty(name);
	  }
	  /**
	   * Get the current value of a name, or `undefined` if there is no value.
	   *
	   * Note: Do not use `if (namespace.get(...))` to detect whether a macro
	   * is defined, as the definition may be the empty string which evaluates
	   * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
	   * `if (namespace.has(...))`.
	   */


	  get(name) {
	    if (this.current.hasOwnProperty(name)) {
	      return this.current[name];
	    } else {
	      return this.builtins[name];
	    }
	  }
	  /**
	   * Set the current value of a name, and optionally set it globally too.
	   * Local set() sets the current value and (when appropriate) adds an undo
	   * operation to the undo stack.  Global set() may change the undo
	   * operation at every level, so takes time linear in their number.
	   * A value of undefined means to delete existing definitions.
	   */


	  set(name, value, global) {
	    if (global === void 0) {
	      global = false;
	    }

	    if (global) {
	      // Global set is equivalent to setting in all groups.  Simulate this
	      // by destroying any undos currently scheduled for this name,
	      // and adding an undo with the *new* value (in case it later gets
	      // locally reset within this environment).
	      for (var i = 0; i < this.undefStack.length; i++) {
	        delete this.undefStack[i][name];
	      }

	      if (this.undefStack.length > 0) {
	        this.undefStack[this.undefStack.length - 1][name] = value;
	      }
	    } else {
	      // Undo this set at end of this group (possibly to `undefined`),
	      // unless an undo is already in place, in which case that older
	      // value is the correct one.
	      var top = this.undefStack[this.undefStack.length - 1];

	      if (top && !top.hasOwnProperty(name)) {
	        top[name] = this.current[name];
	      }
	    }

	    if (value == null) {
	      delete this.current[name];
	    } else {
	      this.current[name] = value;
	    }
	  }

	}

	/**
	 * Predefined macros for KaTeX.
	 * This can be used to define some commands in terms of others.
	 */
	var macros = _macros;
	// macro tools

	defineMacro("\\noexpand", function (context) {
	  // The expansion is the token itself; but that token is interpreted
	  // as if its meaning were ‘\relax’ if it is a control sequence that
	  // would ordinarily be expanded by TeX’s expansion rules.
	  var t = context.popToken();

	  if (context.isExpandable(t.text)) {
	    t.noexpand = true;
	    t.treatAsRelax = true;
	  }

	  return {
	    tokens: [t],
	    numArgs: 0
	  };
	});
	defineMacro("\\expandafter", function (context) {
	  // TeX first reads the token that comes immediately after \expandafter,
	  // without expanding it; let’s call this token t. Then TeX reads the
	  // token that comes after t (and possibly more tokens, if that token
	  // has an argument), replacing it by its expansion. Finally TeX puts
	  // t back in front of that expansion.
	  var t = context.popToken();
	  context.expandOnce(true); // expand only an expandable token

	  return {
	    tokens: [t],
	    numArgs: 0
	  };
	}); // LaTeX's \@firstoftwo{#1}{#2} expands to #1, skipping #2
	// TeX source: \long\def\@firstoftwo#1#2{#1}

	defineMacro("\\@firstoftwo", function (context) {
	  var args = context.consumeArgs(2);
	  return {
	    tokens: args[0],
	    numArgs: 0
	  };
	}); // LaTeX's \@secondoftwo{#1}{#2} expands to #2, skipping #1
	// TeX source: \long\def\@secondoftwo#1#2{#2}

	defineMacro("\\@secondoftwo", function (context) {
	  var args = context.consumeArgs(2);
	  return {
	    tokens: args[1],
	    numArgs: 0
	  };
	}); // LaTeX's \@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)
	// symbol that isn't a space, consuming any spaces but not consuming the
	// first nonspace character.  If that nonspace character matches #1, then
	// the macro expands to #2; otherwise, it expands to #3.

	defineMacro("\\@ifnextchar", function (context) {
	  var args = context.consumeArgs(3); // symbol, if, else

	  context.consumeSpaces();
	  var nextToken = context.future();

	  if (args[0].length === 1 && args[0][0].text === nextToken.text) {
	    return {
	      tokens: args[1],
	      numArgs: 0
	    };
	  } else {
	    return {
	      tokens: args[2],
	      numArgs: 0
	    };
	  }
	}); // LaTeX's \@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.
	// If it is `*`, then it consumes the symbol, and the macro expands to #1;
	// otherwise, the macro expands to #2 (without consuming the symbol).
	// TeX source: \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}

	defineMacro("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}"); // LaTeX's \TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode

	defineMacro("\\TextOrMath", function (context) {
	  var args = context.consumeArgs(2);

	  if (context.mode === 'text') {
	    return {
	      tokens: args[0],
	      numArgs: 0
	    };
	  } else {
	    return {
	      tokens: args[1],
	      numArgs: 0
	    };
	  }
	}); // Lookup table for parsing numbers in base 8 through 16

	var digitToNumber = {
	  "0": 0,
	  "1": 1,
	  "2": 2,
	  "3": 3,
	  "4": 4,
	  "5": 5,
	  "6": 6,
	  "7": 7,
	  "8": 8,
	  "9": 9,
	  "a": 10,
	  "A": 10,
	  "b": 11,
	  "B": 11,
	  "c": 12,
	  "C": 12,
	  "d": 13,
	  "D": 13,
	  "e": 14,
	  "E": 14,
	  "f": 15,
	  "F": 15
	}; // TeX \char makes a literal character (catcode 12) using the following forms:
	// (see The TeXBook, p. 43)
	//   \char123  -- decimal
	//   \char'123 -- octal
	//   \char"123 -- hex
	//   \char`x   -- character that can be written (i.e. isn't active)
	//   \char`\x  -- character that cannot be written (e.g. %)
	// These all refer to characters from the font, so we turn them into special
	// calls to a function \@char dealt with in the Parser.

	defineMacro("\\char", function (context) {
	  var token = context.popToken();
	  var base;
	  var number = '';

	  if (token.text === "'") {
	    base = 8;
	    token = context.popToken();
	  } else if (token.text === '"') {
	    base = 16;
	    token = context.popToken();
	  } else if (token.text === "`") {
	    token = context.popToken();

	    if (token.text[0] === "\\") {
	      number = token.text.charCodeAt(1);
	    } else if (token.text === "EOF") {
	      throw new ParseError("\\char` missing argument");
	    } else {
	      number = token.text.charCodeAt(0);
	    }
	  } else {
	    base = 10;
	  }

	  if (base) {
	    // Parse a number in the given base, starting with first `token`.
	    number = digitToNumber[token.text];

	    if (number == null || number >= base) {
	      throw new ParseError("Invalid base-" + base + " digit " + token.text);
	    }

	    var digit;

	    while ((digit = digitToNumber[context.future().text]) != null && digit < base) {
	      number *= base;
	      number += digit;
	      context.popToken();
	    }
	  }

	  return "\\@char{" + number + "}";
	}); // \newcommand{\macro}[args]{definition}
	// \renewcommand{\macro}[args]{definition}
	// TODO: Optional arguments: \newcommand{\macro}[args][default]{definition}

	var newcommand = (context, existsOK, nonexistsOK) => {
	  var arg = context.consumeArg().tokens;

	  if (arg.length !== 1) {
	    throw new ParseError("\\newcommand's first argument must be a macro name");
	  }

	  var name = arg[0].text;
	  var exists = context.isDefined(name);

	  if (exists && !existsOK) {
	    throw new ParseError("\\newcommand{" + name + "} attempting to redefine " + (name + "; use \\renewcommand"));
	  }

	  if (!exists && !nonexistsOK) {
	    throw new ParseError("\\renewcommand{" + name + "} when command " + name + " " + "does not yet exist; use \\newcommand");
	  }

	  var numArgs = 0;
	  arg = context.consumeArg().tokens;

	  if (arg.length === 1 && arg[0].text === "[") {
	    var argText = '';
	    var token = context.expandNextToken();

	    while (token.text !== "]" && token.text !== "EOF") {
	      // TODO: Should properly expand arg, e.g., ignore {}s
	      argText += token.text;
	      token = context.expandNextToken();
	    }

	    if (!argText.match(/^\s*[0-9]+\s*$/)) {
	      throw new ParseError("Invalid number of arguments: " + argText);
	    }

	    numArgs = parseInt(argText);
	    arg = context.consumeArg().tokens;
	  } // Final arg is the expansion of the macro


	  context.macros.set(name, {
	    tokens: arg,
	    numArgs
	  });
	  return '';
	};

	defineMacro("\\newcommand", context => newcommand(context, false, true));
	defineMacro("\\renewcommand", context => newcommand(context, true, false));
	defineMacro("\\providecommand", context => newcommand(context, true, true)); // terminal (console) tools

	defineMacro("\\message", context => {
	  var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console

	  console.log(arg.reverse().map(token => token.text).join(""));
	  return '';
	});
	defineMacro("\\errmessage", context => {
	  var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console

	  console.error(arg.reverse().map(token => token.text).join(""));
	  return '';
	});
	defineMacro("\\show", context => {
	  var tok = context.popToken();
	  var name = tok.text; // eslint-disable-next-line no-console

	  console.log(tok, context.macros.get(name), functions[name], symbols.math[name], symbols.text[name]);
	  return '';
	}); //////////////////////////////////////////////////////////////////////
	// Grouping
	// \let\bgroup={ \let\egroup=}

	defineMacro("\\bgroup", "{");
	defineMacro("\\egroup", "}"); // Symbols from latex.ltx:
	// \def~{\nobreakspace{}}
	// \def\lq{`}
	// \def\rq{'}
	// \def \aa {\r a}
	// \def \AA {\r A}

	defineMacro("~", "\\nobreakspace");
	defineMacro("\\lq", "`");
	defineMacro("\\rq", "'");
	defineMacro("\\aa", "\\r a");
	defineMacro("\\AA", "\\r A"); // Copyright (C) and registered (R) symbols. Use raw symbol in MathML.
	// \DeclareTextCommandDefault{\textcopyright}{\textcircled{c}}
	// \DeclareTextCommandDefault{\textregistered}{\textcircled{%
	//      \check@mathfonts\fontsize\sf@size\z@\math@fontsfalse\selectfont R}}
	// \DeclareRobustCommand{\copyright}{%
	//    \ifmmode{\nfss@text{\textcopyright}}\else\textcopyright\fi}

	defineMacro("\\textcopyright", "\\html@mathml{\\textcircled{c}}{\\char`©}");
	defineMacro("\\copyright", "\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");
	defineMacro("\\textregistered", "\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}"); // Characters omitted from Unicode range 1D400–1D7FF

	defineMacro("\u212C", "\\mathscr{B}"); // script

	defineMacro("\u2130", "\\mathscr{E}");
	defineMacro("\u2131", "\\mathscr{F}");
	defineMacro("\u210B", "\\mathscr{H}");
	defineMacro("\u2110", "\\mathscr{I}");
	defineMacro("\u2112", "\\mathscr{L}");
	defineMacro("\u2133", "\\mathscr{M}");
	defineMacro("\u211B", "\\mathscr{R}");
	defineMacro("\u212D", "\\mathfrak{C}"); // Fraktur

	defineMacro("\u210C", "\\mathfrak{H}");
	defineMacro("\u2128", "\\mathfrak{Z}"); // Define \Bbbk with a macro that works in both HTML and MathML.

	defineMacro("\\Bbbk", "\\Bbb{k}"); // Unicode middle dot
	// The KaTeX fonts do not contain U+00B7. Instead, \cdotp displays
	// the dot at U+22C5 and gives it punct spacing.

	defineMacro("\u00b7", "\\cdotp"); // \llap and \rlap render their contents in text mode

	defineMacro("\\llap", "\\mathllap{\\textrm{#1}}");
	defineMacro("\\rlap", "\\mathrlap{\\textrm{#1}}");
	defineMacro("\\clap", "\\mathclap{\\textrm{#1}}"); // \mathstrut from the TeXbook, p 360

	defineMacro("\\mathstrut", "\\vphantom{(}"); // \underbar from TeXbook p 353

	defineMacro("\\underbar", "\\underline{\\text{#1}}"); // \not is defined by base/fontmath.ltx via
	// \DeclareMathSymbol{\not}{\mathrel}{symbols}{"36}
	// It's thus treated like a \mathrel, but defined by a symbol that has zero
	// width but extends to the right.  We use \rlap to get that spacing.
	// For MathML we write U+0338 here. buildMathML.js will then do the overlay.

	defineMacro("\\not", '\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}'); // Negated symbols from base/fontmath.ltx:
	// \def\neq{\not=} \let\ne=\neq
	// \DeclareRobustCommand
	//   \notin{\mathrel{\m@th\mathpalette\c@ncel\in}}
	// \def\c@ncel#1#2{\m@th\ooalign{$\hfil#1\mkern1mu/\hfil$\crcr$#1#2$}}

	defineMacro("\\neq", "\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}");
	defineMacro("\\ne", "\\neq");
	defineMacro("\u2260", "\\neq");
	defineMacro("\\notin", "\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}" + "{\\mathrel{\\char`∉}}");
	defineMacro("\u2209", "\\notin"); // Unicode stacked relations

	defineMacro("\u2258", "\\html@mathml{" + "\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}" + "}{\\mathrel{\\char`\u2258}}");
	defineMacro("\u2259", "\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`\u2258}}");
	defineMacro("\u225A", "\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`\u225A}}");
	defineMacro("\u225B", "\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}" + "{\\mathrel{\\char`\u225B}}");
	defineMacro("\u225D", "\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}" + "{\\mathrel{\\char`\u225D}}");
	defineMacro("\u225E", "\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}" + "{\\mathrel{\\char`\u225E}}");
	defineMacro("\u225F", "\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`\u225F}}"); // Misc Unicode

	defineMacro("\u27C2", "\\perp");
	defineMacro("\u203C", "\\mathclose{!\\mkern-0.8mu!}");
	defineMacro("\u220C", "\\notni");
	defineMacro("\u231C", "\\ulcorner");
	defineMacro("\u231D", "\\urcorner");
	defineMacro("\u231E", "\\llcorner");
	defineMacro("\u231F", "\\lrcorner");
	defineMacro("\u00A9", "\\copyright");
	defineMacro("\u00AE", "\\textregistered");
	defineMacro("\uFE0F", "\\textregistered"); // The KaTeX fonts have corners at codepoints that don't match Unicode.
	// For MathML purposes, use the Unicode code point.

	defineMacro("\\ulcorner", "\\html@mathml{\\@ulcorner}{\\mathop{\\char\"231c}}");
	defineMacro("\\urcorner", "\\html@mathml{\\@urcorner}{\\mathop{\\char\"231d}}");
	defineMacro("\\llcorner", "\\html@mathml{\\@llcorner}{\\mathop{\\char\"231e}}");
	defineMacro("\\lrcorner", "\\html@mathml{\\@lrcorner}{\\mathop{\\char\"231f}}"); //////////////////////////////////////////////////////////////////////
	// LaTeX_2ε
	// \vdots{\vbox{\baselineskip4\p@  \lineskiplimit\z@
	// \kern6\p@\hbox{.}\hbox{.}\hbox{.}}}
	// We'll call \varvdots, which gets a glyph from symbols.js.
	// The zero-width rule gets us an equivalent to the vertical 6pt kern.

	defineMacro("\\vdots", "\\mathord{\\varvdots\\rule{0pt}{15pt}}");
	defineMacro("\u22ee", "\\vdots"); //////////////////////////////////////////////////////////////////////
	// amsmath.sty
	// http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf
	// Italic Greek capital letters.  AMS defines these with \DeclareMathSymbol,
	// but they are equivalent to \mathit{\Letter}.

	defineMacro("\\varGamma", "\\mathit{\\Gamma}");
	defineMacro("\\varDelta", "\\mathit{\\Delta}");
	defineMacro("\\varTheta", "\\mathit{\\Theta}");
	defineMacro("\\varLambda", "\\mathit{\\Lambda}");
	defineMacro("\\varXi", "\\mathit{\\Xi}");
	defineMacro("\\varPi", "\\mathit{\\Pi}");
	defineMacro("\\varSigma", "\\mathit{\\Sigma}");
	defineMacro("\\varUpsilon", "\\mathit{\\Upsilon}");
	defineMacro("\\varPhi", "\\mathit{\\Phi}");
	defineMacro("\\varPsi", "\\mathit{\\Psi}");
	defineMacro("\\varOmega", "\\mathit{\\Omega}"); //\newcommand{\substack}[1]{\subarray{c}#1\endsubarray}

	defineMacro("\\substack", "\\begin{subarray}{c}#1\\end{subarray}"); // \renewcommand{\colon}{\nobreak\mskip2mu\mathpunct{}\nonscript
	// \mkern-\thinmuskip{:}\mskip6muplus1mu\relax}

	defineMacro("\\colon", "\\nobreak\\mskip2mu\\mathpunct{}" + "\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu\\relax"); // \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}}

	defineMacro("\\boxed", "\\fbox{$\\displaystyle{#1}$}"); // \def\iff{\DOTSB\;\Longleftrightarrow\;}
	// \def\implies{\DOTSB\;\Longrightarrow\;}
	// \def\impliedby{\DOTSB\;\Longleftarrow\;}

	defineMacro("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
	defineMacro("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
	defineMacro("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;"); // AMSMath's automatic \dots, based on \mdots@@ macro.

	var dotsByToken = {
	  ',': '\\dotsc',
	  '\\not': '\\dotsb',
	  // \keybin@ checks for the following:
	  '+': '\\dotsb',
	  '=': '\\dotsb',
	  '<': '\\dotsb',
	  '>': '\\dotsb',
	  '-': '\\dotsb',
	  '*': '\\dotsb',
	  ':': '\\dotsb',
	  // Symbols whose definition starts with \DOTSB:
	  '\\DOTSB': '\\dotsb',
	  '\\coprod': '\\dotsb',
	  '\\bigvee': '\\dotsb',
	  '\\bigwedge': '\\dotsb',
	  '\\biguplus': '\\dotsb',
	  '\\bigcap': '\\dotsb',
	  '\\bigcup': '\\dotsb',
	  '\\prod': '\\dotsb',
	  '\\sum': '\\dotsb',
	  '\\bigotimes': '\\dotsb',
	  '\\bigoplus': '\\dotsb',
	  '\\bigodot': '\\dotsb',
	  '\\bigsqcup': '\\dotsb',
	  '\\And': '\\dotsb',
	  '\\longrightarrow': '\\dotsb',
	  '\\Longrightarrow': '\\dotsb',
	  '\\longleftarrow': '\\dotsb',
	  '\\Longleftarrow': '\\dotsb',
	  '\\longleftrightarrow': '\\dotsb',
	  '\\Longleftrightarrow': '\\dotsb',
	  '\\mapsto': '\\dotsb',
	  '\\longmapsto': '\\dotsb',
	  '\\hookrightarrow': '\\dotsb',
	  '\\doteq': '\\dotsb',
	  // Symbols whose definition starts with \mathbin:
	  '\\mathbin': '\\dotsb',
	  // Symbols whose definition starts with \mathrel:
	  '\\mathrel': '\\dotsb',
	  '\\relbar': '\\dotsb',
	  '\\Relbar': '\\dotsb',
	  '\\xrightarrow': '\\dotsb',
	  '\\xleftarrow': '\\dotsb',
	  // Symbols whose definition starts with \DOTSI:
	  '\\DOTSI': '\\dotsi',
	  '\\int': '\\dotsi',
	  '\\oint': '\\dotsi',
	  '\\iint': '\\dotsi',
	  '\\iiint': '\\dotsi',
	  '\\iiiint': '\\dotsi',
	  '\\idotsint': '\\dotsi',
	  // Symbols whose definition starts with \DOTSX:
	  '\\DOTSX': '\\dotsx'
	};
	defineMacro("\\dots", function (context) {
	  // TODO: If used in text mode, should expand to \textellipsis.
	  // However, in KaTeX, \textellipsis and \ldots behave the same
	  // (in text mode), and it's unlikely we'd see any of the math commands
	  // that affect the behavior of \dots when in text mode.  So fine for now
	  // (until we support \ifmmode ... \else ... \fi).
	  var thedots = '\\dotso';
	  var next = context.expandAfterFuture().text;

	  if (next in dotsByToken) {
	    thedots = dotsByToken[next];
	  } else if (next.substr(0, 4) === '\\not') {
	    thedots = '\\dotsb';
	  } else if (next in symbols.math) {
	    if (utils.contains(['bin', 'rel'], symbols.math[next].group)) {
	      thedots = '\\dotsb';
	    }
	  }

	  return thedots;
	});
	var spaceAfterDots = {
	  // \rightdelim@ checks for the following:
	  ')': true,
	  ']': true,
	  '\\rbrack': true,
	  '\\}': true,
	  '\\rbrace': true,
	  '\\rangle': true,
	  '\\rceil': true,
	  '\\rfloor': true,
	  '\\rgroup': true,
	  '\\rmoustache': true,
	  '\\right': true,
	  '\\bigr': true,
	  '\\biggr': true,
	  '\\Bigr': true,
	  '\\Biggr': true,
	  // \extra@ also tests for the following:
	  '$': true,
	  // \extrap@ checks for the following:
	  ';': true,
	  '.': true,
	  ',': true
	};
	defineMacro("\\dotso", function (context) {
	  var next = context.future().text;

	  if (next in spaceAfterDots) {
	    return "\\ldots\\,";
	  } else {
	    return "\\ldots";
	  }
	});
	defineMacro("\\dotsc", function (context) {
	  var next = context.future().text; // \dotsc uses \extra@ but not \extrap@, instead specially checking for
	  // ';' and '.', but doesn't check for ','.

	  if (next in spaceAfterDots && next !== ',') {
	    return "\\ldots\\,";
	  } else {
	    return "\\ldots";
	  }
	});
	defineMacro("\\cdots", function (context) {
	  var next = context.future().text;

	  if (next in spaceAfterDots) {
	    return "\\@cdots\\,";
	  } else {
	    return "\\@cdots";
	  }
	});
	defineMacro("\\dotsb", "\\cdots");
	defineMacro("\\dotsm", "\\cdots");
	defineMacro("\\dotsi", "\\!\\cdots"); // amsmath doesn't actually define \dotsx, but \dots followed by a macro
	// starting with \DOTSX implies \dotso, and then \extra@ detects this case
	// and forces the added `\,`.

	defineMacro("\\dotsx", "\\ldots\\,"); // \let\DOTSI\relax
	// \let\DOTSB\relax
	// \let\DOTSX\relax

	defineMacro("\\DOTSI", "\\relax");
	defineMacro("\\DOTSB", "\\relax");
	defineMacro("\\DOTSX", "\\relax"); // Spacing, based on amsmath.sty's override of LaTeX defaults
	// \DeclareRobustCommand{\tmspace}[3]{%
	//   \ifmmode\mskip#1#2\else\kern#1#3\fi\relax}

	defineMacro("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax"); // \renewcommand{\,}{\tmspace+\thinmuskip{.1667em}}
	// TODO: math mode should use \thinmuskip

	defineMacro("\\,", "\\tmspace+{3mu}{.1667em}"); // \let\thinspace\,

	defineMacro("\\thinspace", "\\,"); // \def\>{\mskip\medmuskip}
	// \renewcommand{\:}{\tmspace+\medmuskip{.2222em}}
	// TODO: \> and math mode of \: should use \medmuskip = 4mu plus 2mu minus 4mu

	defineMacro("\\>", "\\mskip{4mu}");
	defineMacro("\\:", "\\tmspace+{4mu}{.2222em}"); // \let\medspace\:

	defineMacro("\\medspace", "\\:"); // \renewcommand{\;}{\tmspace+\thickmuskip{.2777em}}
	// TODO: math mode should use \thickmuskip = 5mu plus 5mu

	defineMacro("\\;", "\\tmspace+{5mu}{.2777em}"); // \let\thickspace\;

	defineMacro("\\thickspace", "\\;"); // \renewcommand{\!}{\tmspace-\thinmuskip{.1667em}}
	// TODO: math mode should use \thinmuskip

	defineMacro("\\!", "\\tmspace-{3mu}{.1667em}"); // \let\negthinspace\!

	defineMacro("\\negthinspace", "\\!"); // \newcommand{\negmedspace}{\tmspace-\medmuskip{.2222em}}
	// TODO: math mode should use \medmuskip

	defineMacro("\\negmedspace", "\\tmspace-{4mu}{.2222em}"); // \newcommand{\negthickspace}{\tmspace-\thickmuskip{.2777em}}
	// TODO: math mode should use \thickmuskip

	defineMacro("\\negthickspace", "\\tmspace-{5mu}{.277em}"); // \def\enspace{\kern.5em }

	defineMacro("\\enspace", "\\kern.5em "); // \def\enskip{\hskip.5em\relax}

	defineMacro("\\enskip", "\\hskip.5em\\relax"); // \def\quad{\hskip1em\relax}

	defineMacro("\\quad", "\\hskip1em\\relax"); // \def\qquad{\hskip2em\relax}

	defineMacro("\\qquad", "\\hskip2em\\relax"); // \tag@in@display form of \tag

	defineMacro("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
	defineMacro("\\tag@paren", "\\tag@literal{({#1})}");
	defineMacro("\\tag@literal", context => {
	  if (context.macros.get("\\df@tag")) {
	    throw new ParseError("Multiple \\tag");
	  }

	  return "\\gdef\\df@tag{\\text{#1}}";
	}); // \renewcommand{\bmod}{\nonscript\mskip-\medmuskip\mkern5mu\mathbin
	//   {\operator@font mod}\penalty900
	//   \mkern5mu\nonscript\mskip-\medmuskip}
	// \newcommand{\pod}[1]{\allowbreak
	//   \if@display\mkern18mu\else\mkern8mu\fi(#1)}
	// \renewcommand{\pmod}[1]{\pod{{\operator@font mod}\mkern6mu#1}}
	// \newcommand{\mod}[1]{\allowbreak\if@display\mkern18mu
	//   \else\mkern12mu\fi{\operator@font mod}\,\,#1}
	// TODO: math mode should use \medmuskip = 4mu plus 2mu minus 4mu

	defineMacro("\\bmod", "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}" + "\\mathbin{\\rm mod}" + "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");
	defineMacro("\\pod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");
	defineMacro("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
	defineMacro("\\mod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}" + "{\\rm mod}\\,\\,#1"); // \pmb    --   A simulation of bold.
	// The version in ambsy.sty works by typesetting three copies of the argument
	// with small offsets. We use two copies. We omit the vertical offset because
	// of rendering problems that makeVList encounters in Safari.

	defineMacro("\\pmb", "\\html@mathml{" + "\\@binrel{#1}{\\mathrlap{#1}\\kern0.5px#1}}" + "{\\mathbf{#1}}"); //////////////////////////////////////////////////////////////////////
	// LaTeX source2e
	// \expandafter\let\expandafter\@normalcr
	//     \csname\expandafter\@gobble\string\\ \endcsname
	// \DeclareRobustCommand\newline{\@normalcr\relax}

	defineMacro("\\newline", "\\\\\\relax"); // \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX\@}
	// TODO: Doesn't normally work in math mode because \@ fails.  KaTeX doesn't
	// support \@ yet, so that's omitted, and we add \text so that the result
	// doesn't look funny in math mode.

	defineMacro("\\TeX", "\\textrm{\\html@mathml{" + "T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX" + "}{TeX}}"); // \DeclareRobustCommand{\LaTeX}{L\kern-.36em%
	//         {\sbox\z@ T%
	//          \vbox to\ht\z@{\hbox{\check@mathfonts
	//                               \fontsize\sf@size\z@
	//                               \math@fontsfalse\selectfont
	//                               A}%
	//                         \vss}%
	//         }%
	//         \kern-.15em%
	//         \TeX}
	// This code aligns the top of the A with the T (from the perspective of TeX's
	// boxes, though visually the A appears to extend above slightly).
	// We compute the corresponding \raisebox when A is rendered in \normalsize
	// \scriptstyle, which has a scale factor of 0.7 (see Options.js).

	var latexRaiseA = makeEm(fontMetricsData['Main-Regular']["T".charCodeAt(0)][1] - 0.7 * fontMetricsData['Main-Regular']["A".charCodeAt(0)][1]);
	defineMacro("\\LaTeX", "\\textrm{\\html@mathml{" + ("L\\kern-.36em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{LaTeX}}"); // New KaTeX logo based on tweaking LaTeX logo

	defineMacro("\\KaTeX", "\\textrm{\\html@mathml{" + ("K\\kern-.17em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{KaTeX}}"); // \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}
	// \def\@hspace#1{\hskip  #1\relax}
	// \def\@hspacer#1{\vrule \@width\z@\nobreak
	//                 \hskip #1\hskip \z@skip}

	defineMacro("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
	defineMacro("\\@hspace", "\\hskip #1\\relax");
	defineMacro("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax"); //////////////////////////////////////////////////////////////////////
	// mathtools.sty
	//\providecommand\ordinarycolon{:}

	defineMacro("\\ordinarycolon", ":"); //\def\vcentcolon{\mathrel{\mathop\ordinarycolon}}
	//TODO(edemaine): Not yet centered. Fix via \raisebox or #726

	defineMacro("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}"); // \providecommand*\dblcolon{\vcentcolon\mathrel{\mkern-.9mu}\vcentcolon}

	defineMacro("\\dblcolon", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}" + "{\\mathop{\\char\"2237}}"); // \providecommand*\coloneqq{\vcentcolon\mathrel{\mkern-1.2mu}=}

	defineMacro("\\coloneqq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2254}}"); // ≔
	// \providecommand*\Coloneqq{\dblcolon\mathrel{\mkern-1.2mu}=}

	defineMacro("\\Coloneqq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2237\\char\"3d}}"); // \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

	defineMacro("\\coloneq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"3a\\char\"2212}}"); // \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

	defineMacro("\\Coloneq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"2237\\char\"2212}}"); // \providecommand*\eqqcolon{=\mathrel{\mkern-1.2mu}\vcentcolon}

	defineMacro("\\eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2255}}"); // ≕
	// \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}

	defineMacro("\\Eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"3d\\char\"2237}}"); // \providecommand*\eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\vcentcolon}

	defineMacro("\\eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2239}}"); // \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}

	defineMacro("\\Eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"2212\\char\"2237}}"); // \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}

	defineMacro("\\colonapprox", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"3a\\char\"2248}}"); // \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}

	defineMacro("\\Colonapprox", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"2237\\char\"2248}}"); // \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}

	defineMacro("\\colonsim", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"3a\\char\"223c}}"); // \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}

	defineMacro("\\Colonsim", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"2237\\char\"223c}}"); // Some Unicode characters are implemented with macros to mathtools functions.

	defineMacro("\u2237", "\\dblcolon"); // ::

	defineMacro("\u2239", "\\eqcolon"); // -:

	defineMacro("\u2254", "\\coloneqq"); // :=

	defineMacro("\u2255", "\\eqqcolon"); // =:

	defineMacro("\u2A74", "\\Coloneqq"); // ::=
	//////////////////////////////////////////////////////////////////////
	// colonequals.sty
	// Alternate names for mathtools's macros:

	defineMacro("\\ratio", "\\vcentcolon");
	defineMacro("\\coloncolon", "\\dblcolon");
	defineMacro("\\colonequals", "\\coloneqq");
	defineMacro("\\coloncolonequals", "\\Coloneqq");
	defineMacro("\\equalscolon", "\\eqqcolon");
	defineMacro("\\equalscoloncolon", "\\Eqqcolon");
	defineMacro("\\colonminus", "\\coloneq");
	defineMacro("\\coloncolonminus", "\\Coloneq");
	defineMacro("\\minuscolon", "\\eqcolon");
	defineMacro("\\minuscoloncolon", "\\Eqcolon"); // \colonapprox name is same in mathtools and colonequals.

	defineMacro("\\coloncolonapprox", "\\Colonapprox"); // \colonsim name is same in mathtools and colonequals.

	defineMacro("\\coloncolonsim", "\\Colonsim"); // Additional macros, implemented by analogy with mathtools definitions:

	defineMacro("\\simcolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
	defineMacro("\\simcoloncolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");
	defineMacro("\\approxcolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
	defineMacro("\\approxcoloncolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}"); // Present in newtxmath, pxfonts and txfonts

	defineMacro("\\notni", "\\html@mathml{\\not\\ni}{\\mathrel{\\char`\u220C}}");
	defineMacro("\\limsup", "\\DOTSB\\operatorname*{lim\\,sup}");
	defineMacro("\\liminf", "\\DOTSB\\operatorname*{lim\\,inf}"); //////////////////////////////////////////////////////////////////////
	// From amsopn.sty

	defineMacro("\\injlim", "\\DOTSB\\operatorname*{inj\\,lim}");
	defineMacro("\\projlim", "\\DOTSB\\operatorname*{proj\\,lim}");
	defineMacro("\\varlimsup", "\\DOTSB\\operatorname*{\\overline{lim}}");
	defineMacro("\\varliminf", "\\DOTSB\\operatorname*{\\underline{lim}}");
	defineMacro("\\varinjlim", "\\DOTSB\\operatorname*{\\underrightarrow{lim}}");
	defineMacro("\\varprojlim", "\\DOTSB\\operatorname*{\\underleftarrow{lim}}"); //////////////////////////////////////////////////////////////////////
	// MathML alternates for KaTeX glyphs in the Unicode private area

	defineMacro("\\gvertneqq", "\\html@mathml{\\@gvertneqq}{\u2269}");
	defineMacro("\\lvertneqq", "\\html@mathml{\\@lvertneqq}{\u2268}");
	defineMacro("\\ngeqq", "\\html@mathml{\\@ngeqq}{\u2271}");
	defineMacro("\\ngeqslant", "\\html@mathml{\\@ngeqslant}{\u2271}");
	defineMacro("\\nleqq", "\\html@mathml{\\@nleqq}{\u2270}");
	defineMacro("\\nleqslant", "\\html@mathml{\\@nleqslant}{\u2270}");
	defineMacro("\\nshortmid", "\\html@mathml{\\@nshortmid}{∤}");
	defineMacro("\\nshortparallel", "\\html@mathml{\\@nshortparallel}{∦}");
	defineMacro("\\nsubseteqq", "\\html@mathml{\\@nsubseteqq}{\u2288}");
	defineMacro("\\nsupseteqq", "\\html@mathml{\\@nsupseteqq}{\u2289}");
	defineMacro("\\varsubsetneq", "\\html@mathml{\\@varsubsetneq}{⊊}");
	defineMacro("\\varsubsetneqq", "\\html@mathml{\\@varsubsetneqq}{⫋}");
	defineMacro("\\varsupsetneq", "\\html@mathml{\\@varsupsetneq}{⊋}");
	defineMacro("\\varsupsetneqq", "\\html@mathml{\\@varsupsetneqq}{⫌}");
	defineMacro("\\imath", "\\html@mathml{\\@imath}{\u0131}");
	defineMacro("\\jmath", "\\html@mathml{\\@jmath}{\u0237}"); //////////////////////////////////////////////////////////////////////
	// stmaryrd and semantic
	// The stmaryrd and semantic packages render the next four items by calling a
	// glyph. Those glyphs do not exist in the KaTeX fonts. Hence the macros.

	defineMacro("\\llbracket", "\\html@mathml{" + "\\mathopen{[\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u27e6}}");
	defineMacro("\\rrbracket", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu]}}" + "{\\mathclose{\\char`\u27e7}}");
	defineMacro("\u27e6", "\\llbracket"); // blackboard bold [

	defineMacro("\u27e7", "\\rrbracket"); // blackboard bold ]

	defineMacro("\\lBrace", "\\html@mathml{" + "\\mathopen{\\{\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u2983}}");
	defineMacro("\\rBrace", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu\\}}}" + "{\\mathclose{\\char`\u2984}}");
	defineMacro("\u2983", "\\lBrace"); // blackboard bold {

	defineMacro("\u2984", "\\rBrace"); // blackboard bold }
	// TODO: Create variable sized versions of the last two items. I believe that
	// will require new font glyphs.
	// The stmaryrd function `\minuso` provides a "Plimsoll" symbol that
	// superimposes the characters \circ and \mathminus. Used in chemistry.

	defineMacro("\\minuso", "\\mathbin{\\html@mathml{" + "{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}" + "{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}" + "{\\char`⦵}}");
	defineMacro("⦵", "\\minuso"); //////////////////////////////////////////////////////////////////////
	// texvc.sty
	// The texvc package contains macros available in mediawiki pages.
	// We omit the functions deprecated at
	// https://en.wikipedia.org/wiki/Help:Displaying_a_formula#Deprecated_syntax
	// We also omit texvc's \O, which conflicts with \text{\O}

	defineMacro("\\darr", "\\downarrow");
	defineMacro("\\dArr", "\\Downarrow");
	defineMacro("\\Darr", "\\Downarrow");
	defineMacro("\\lang", "\\langle");
	defineMacro("\\rang", "\\rangle");
	defineMacro("\\uarr", "\\uparrow");
	defineMacro("\\uArr", "\\Uparrow");
	defineMacro("\\Uarr", "\\Uparrow");
	defineMacro("\\N", "\\mathbb{N}");
	defineMacro("\\R", "\\mathbb{R}");
	defineMacro("\\Z", "\\mathbb{Z}");
	defineMacro("\\alef", "\\aleph");
	defineMacro("\\alefsym", "\\aleph");
	defineMacro("\\Alpha", "\\mathrm{A}");
	defineMacro("\\Beta", "\\mathrm{B}");
	defineMacro("\\bull", "\\bullet");
	defineMacro("\\Chi", "\\mathrm{X}");
	defineMacro("\\clubs", "\\clubsuit");
	defineMacro("\\cnums", "\\mathbb{C}");
	defineMacro("\\Complex", "\\mathbb{C}");
	defineMacro("\\Dagger", "\\ddagger");
	defineMacro("\\diamonds", "\\diamondsuit");
	defineMacro("\\empty", "\\emptyset");
	defineMacro("\\Epsilon", "\\mathrm{E}");
	defineMacro("\\Eta", "\\mathrm{H}");
	defineMacro("\\exist", "\\exists");
	defineMacro("\\harr", "\\leftrightarrow");
	defineMacro("\\hArr", "\\Leftrightarrow");
	defineMacro("\\Harr", "\\Leftrightarrow");
	defineMacro("\\hearts", "\\heartsuit");
	defineMacro("\\image", "\\Im");
	defineMacro("\\infin", "\\infty");
	defineMacro("\\Iota", "\\mathrm{I}");
	defineMacro("\\isin", "\\in");
	defineMacro("\\Kappa", "\\mathrm{K}");
	defineMacro("\\larr", "\\leftarrow");
	defineMacro("\\lArr", "\\Leftarrow");
	defineMacro("\\Larr", "\\Leftarrow");
	defineMacro("\\lrarr", "\\leftrightarrow");
	defineMacro("\\lrArr", "\\Leftrightarrow");
	defineMacro("\\Lrarr", "\\Leftrightarrow");
	defineMacro("\\Mu", "\\mathrm{M}");
	defineMacro("\\natnums", "\\mathbb{N}");
	defineMacro("\\Nu", "\\mathrm{N}");
	defineMacro("\\Omicron", "\\mathrm{O}");
	defineMacro("\\plusmn", "\\pm");
	defineMacro("\\rarr", "\\rightarrow");
	defineMacro("\\rArr", "\\Rightarrow");
	defineMacro("\\Rarr", "\\Rightarrow");
	defineMacro("\\real", "\\Re");
	defineMacro("\\reals", "\\mathbb{R}");
	defineMacro("\\Reals", "\\mathbb{R}");
	defineMacro("\\Rho", "\\mathrm{P}");
	defineMacro("\\sdot", "\\cdot");
	defineMacro("\\sect", "\\S");
	defineMacro("\\spades", "\\spadesuit");
	defineMacro("\\sub", "\\subset");
	defineMacro("\\sube", "\\subseteq");
	defineMacro("\\supe", "\\supseteq");
	defineMacro("\\Tau", "\\mathrm{T}");
	defineMacro("\\thetasym", "\\vartheta"); // TODO: defineMacro("\\varcoppa", "\\\mbox{\\coppa}");

	defineMacro("\\weierp", "\\wp");
	defineMacro("\\Zeta", "\\mathrm{Z}"); //////////////////////////////////////////////////////////////////////
	// statmath.sty
	// https://ctan.math.illinois.edu/macros/latex/contrib/statmath/statmath.pdf

	defineMacro("\\argmin", "\\DOTSB\\operatorname*{arg\\,min}");
	defineMacro("\\argmax", "\\DOTSB\\operatorname*{arg\\,max}");
	defineMacro("\\plim", "\\DOTSB\\mathop{\\operatorname{plim}}\\limits"); //////////////////////////////////////////////////////////////////////
	// braket.sty
	// http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/braket/braket.pdf

	defineMacro("\\bra", "\\mathinner{\\langle{#1}|}");
	defineMacro("\\ket", "\\mathinner{|{#1}\\rangle}");
	defineMacro("\\braket", "\\mathinner{\\langle{#1}\\rangle}");
	defineMacro("\\Bra", "\\left\\langle#1\\right|");
	defineMacro("\\Ket", "\\left|#1\\right\\rangle");

	var braketHelper = one => context => {
	  var left = context.consumeArg().tokens;
	  var middle = context.consumeArg().tokens;
	  var middleDouble = context.consumeArg().tokens;
	  var right = context.consumeArg().tokens;
	  var oldMiddle = context.macros.get("|");
	  var oldMiddleDouble = context.macros.get("\\|");
	  context.macros.beginGroup();

	  var midMacro = double => context => {
	    if (one) {
	      // Only modify the first instance of | or \|
	      context.macros.set("|", oldMiddle);

	      if (middleDouble.length) {
	        context.macros.set("\\|", oldMiddleDouble);
	      }
	    }

	    var doubled = double;

	    if (!double && middleDouble.length) {
	      // Mimic \@ifnextchar
	      var nextToken = context.future();

	      if (nextToken.text === "|") {
	        context.popToken();
	        doubled = true;
	      }
	    }

	    return {
	      tokens: doubled ? middleDouble : middle,
	      numArgs: 0
	    };
	  };

	  context.macros.set("|", midMacro(false));

	  if (middleDouble.length) {
	    context.macros.set("\\|", midMacro(true));
	  }

	  var arg = context.consumeArg().tokens;
	  var expanded = context.expandTokens([...right, ...arg, ...left // reversed
	  ]);
	  context.macros.endGroup();
	  return {
	    tokens: expanded.reverse(),
	    numArgs: 0
	  };
	};

	defineMacro("\\bra@ket", braketHelper(false));
	defineMacro("\\bra@set", braketHelper(true));
	defineMacro("\\Braket", "\\bra@ket{\\left\\langle}" + "{\\,\\middle\\vert\\,}{\\,\\middle\\vert\\,}{\\right\\rangle}");
	defineMacro("\\Set", "\\bra@set{\\left\\{\\:}" + "{\\;\\middle\\vert\\;}{\\;\\middle\\Vert\\;}{\\:\\right\\}}");
	defineMacro("\\set", "\\bra@set{\\{\\,}{\\mid}{}{\\,\\}}"); // has no support for special || or \|
	//////////////////////////////////////////////////////////////////////
	// actuarialangle.dtx

	defineMacro("\\angln", "{\\angl n}"); // Custom Khan Academy colors, should be moved to an optional package

	defineMacro("\\blue", "\\textcolor{##6495ed}{#1}");
	defineMacro("\\orange", "\\textcolor{##ffa500}{#1}");
	defineMacro("\\pink", "\\textcolor{##ff00af}{#1}");
	defineMacro("\\red", "\\textcolor{##df0030}{#1}");
	defineMacro("\\green", "\\textcolor{##28ae7b}{#1}");
	defineMacro("\\gray", "\\textcolor{gray}{#1}");
	defineMacro("\\purple", "\\textcolor{##9d38bd}{#1}");
	defineMacro("\\blueA", "\\textcolor{##ccfaff}{#1}");
	defineMacro("\\blueB", "\\textcolor{##80f6ff}{#1}");
	defineMacro("\\blueC", "\\textcolor{##63d9ea}{#1}");
	defineMacro("\\blueD", "\\textcolor{##11accd}{#1}");
	defineMacro("\\blueE", "\\textcolor{##0c7f99}{#1}");
	defineMacro("\\tealA", "\\textcolor{##94fff5}{#1}");
	defineMacro("\\tealB", "\\textcolor{##26edd5}{#1}");
	defineMacro("\\tealC", "\\textcolor{##01d1c1}{#1}");
	defineMacro("\\tealD", "\\textcolor{##01a995}{#1}");
	defineMacro("\\tealE", "\\textcolor{##208170}{#1}");
	defineMacro("\\greenA", "\\textcolor{##b6ffb0}{#1}");
	defineMacro("\\greenB", "\\textcolor{##8af281}{#1}");
	defineMacro("\\greenC", "\\textcolor{##74cf70}{#1}");
	defineMacro("\\greenD", "\\textcolor{##1fab54}{#1}");
	defineMacro("\\greenE", "\\textcolor{##0d923f}{#1}");
	defineMacro("\\goldA", "\\textcolor{##ffd0a9}{#1}");
	defineMacro("\\goldB", "\\textcolor{##ffbb71}{#1}");
	defineMacro("\\goldC", "\\textcolor{##ff9c39}{#1}");
	defineMacro("\\goldD", "\\textcolor{##e07d10}{#1}");
	defineMacro("\\goldE", "\\textcolor{##a75a05}{#1}");
	defineMacro("\\redA", "\\textcolor{##fca9a9}{#1}");
	defineMacro("\\redB", "\\textcolor{##ff8482}{#1}");
	defineMacro("\\redC", "\\textcolor{##f9685d}{#1}");
	defineMacro("\\redD", "\\textcolor{##e84d39}{#1}");
	defineMacro("\\redE", "\\textcolor{##bc2612}{#1}");
	defineMacro("\\maroonA", "\\textcolor{##ffbde0}{#1}");
	defineMacro("\\maroonB", "\\textcolor{##ff92c6}{#1}");
	defineMacro("\\maroonC", "\\textcolor{##ed5fa6}{#1}");
	defineMacro("\\maroonD", "\\textcolor{##ca337c}{#1}");
	defineMacro("\\maroonE", "\\textcolor{##9e034e}{#1}");
	defineMacro("\\purpleA", "\\textcolor{##ddd7ff}{#1}");
	defineMacro("\\purpleB", "\\textcolor{##c6b9fc}{#1}");
	defineMacro("\\purpleC", "\\textcolor{##aa87ff}{#1}");
	defineMacro("\\purpleD", "\\textcolor{##7854ab}{#1}");
	defineMacro("\\purpleE", "\\textcolor{##543b78}{#1}");
	defineMacro("\\mintA", "\\textcolor{##f5f9e8}{#1}");
	defineMacro("\\mintB", "\\textcolor{##edf2df}{#1}");
	defineMacro("\\mintC", "\\textcolor{##e0e5cc}{#1}");
	defineMacro("\\grayA", "\\textcolor{##f6f7f7}{#1}");
	defineMacro("\\grayB", "\\textcolor{##f0f1f2}{#1}");
	defineMacro("\\grayC", "\\textcolor{##e3e5e6}{#1}");
	defineMacro("\\grayD", "\\textcolor{##d6d8da}{#1}");
	defineMacro("\\grayE", "\\textcolor{##babec2}{#1}");
	defineMacro("\\grayF", "\\textcolor{##888d93}{#1}");
	defineMacro("\\grayG", "\\textcolor{##626569}{#1}");
	defineMacro("\\grayH", "\\textcolor{##3b3e40}{#1}");
	defineMacro("\\grayI", "\\textcolor{##21242c}{#1}");
	defineMacro("\\kaBlue", "\\textcolor{##314453}{#1}");
	defineMacro("\\kaGreen", "\\textcolor{##71B307}{#1}");

	/**
	 * This file contains the “gullet” where macros are expanded
	 * until only non-macro tokens remain.
	 */
	// List of commands that act like macros but aren't defined as a macro,
	// function, or symbol.  Used in `isDefined`.
	var implicitCommands = {
	  "^": true,
	  // Parser.js
	  "_": true,
	  // Parser.js
	  "\\limits": true,
	  // Parser.js
	  "\\nolimits": true // Parser.js

	};
	class MacroExpander {
	  constructor(input, settings, mode) {
	    this.settings = void 0;
	    this.expansionCount = void 0;
	    this.lexer = void 0;
	    this.macros = void 0;
	    this.stack = void 0;
	    this.mode = void 0;
	    this.settings = settings;
	    this.expansionCount = 0;
	    this.feed(input); // Make new global namespace

	    this.macros = new Namespace(macros, settings.macros);
	    this.mode = mode;
	    this.stack = []; // contains tokens in REVERSE order
	  }
	  /**
	   * Feed a new input string to the same MacroExpander
	   * (with existing macros etc.).
	   */


	  feed(input) {
	    this.lexer = new Lexer(input, this.settings);
	  }
	  /**
	   * Switches between "text" and "math" modes.
	   */


	  switchMode(newMode) {
	    this.mode = newMode;
	  }
	  /**
	   * Start a new group nesting within all namespaces.
	   */


	  beginGroup() {
	    this.macros.beginGroup();
	  }
	  /**
	   * End current group nesting within all namespaces.
	   */


	  endGroup() {
	    this.macros.endGroup();
	  }
	  /**
	   * Ends all currently nested groups (if any), restoring values before the
	   * groups began.  Useful in case of an error in the middle of parsing.
	   */


	  endGroups() {
	    this.macros.endGroups();
	  }
	  /**
	   * Returns the topmost token on the stack, without expanding it.
	   * Similar in behavior to TeX's `\futurelet`.
	   */


	  future() {
	    if (this.stack.length === 0) {
	      this.pushToken(this.lexer.lex());
	    }

	    return this.stack[this.stack.length - 1];
	  }
	  /**
	   * Remove and return the next unexpanded token.
	   */


	  popToken() {
	    this.future(); // ensure non-empty stack

	    return this.stack.pop();
	  }
	  /**
	   * Add a given token to the token stack.  In particular, this get be used
	   * to put back a token returned from one of the other methods.
	   */


	  pushToken(token) {
	    this.stack.push(token);
	  }
	  /**
	   * Append an array of tokens to the token stack.
	   */


	  pushTokens(tokens) {
	    this.stack.push(...tokens);
	  }
	  /**
	   * Find an macro argument without expanding tokens and append the array of
	   * tokens to the token stack. Uses Token as a container for the result.
	   */


	  scanArgument(isOptional) {
	    var start;
	    var end;
	    var tokens;

	    if (isOptional) {
	      this.consumeSpaces(); // \@ifnextchar gobbles any space following it

	      if (this.future().text !== "[") {
	        return null;
	      }

	      start = this.popToken(); // don't include [ in tokens

	      ({
	        tokens,
	        end
	      } = this.consumeArg(["]"]));
	    } else {
	      ({
	        tokens,
	        start,
	        end
	      } = this.consumeArg());
	    } // indicate the end of an argument


	    this.pushToken(new Token("EOF", end.loc));
	    this.pushTokens(tokens);
	    return start.range(end, "");
	  }
	  /**
	   * Consume all following space tokens, without expansion.
	   */


	  consumeSpaces() {
	    for (;;) {
	      var token = this.future();

	      if (token.text === " ") {
	        this.stack.pop();
	      } else {
	        break;
	      }
	    }
	  }
	  /**
	   * Consume an argument from the token stream, and return the resulting array
	   * of tokens and start/end token.
	   */


	  consumeArg(delims) {
	    // The argument for a delimited parameter is the shortest (possibly
	    // empty) sequence of tokens with properly nested {...} groups that is
	    // followed ... by this particular list of non-parameter tokens.
	    // The argument for an undelimited parameter is the next nonblank
	    // token, unless that token is ‘{’, when the argument will be the
	    // entire {...} group that follows.
	    var tokens = [];
	    var isDelimited = delims && delims.length > 0;

	    if (!isDelimited) {
	      // Ignore spaces between arguments.  As the TeXbook says:
	      // "After you have said ‘\def\row#1#2{...}’, you are allowed to
	      //  put spaces between the arguments (e.g., ‘\row x n’), because
	      //  TeX doesn’t use single spaces as undelimited arguments."
	      this.consumeSpaces();
	    }

	    var start = this.future();
	    var tok;
	    var depth = 0;
	    var match = 0;

	    do {
	      tok = this.popToken();
	      tokens.push(tok);

	      if (tok.text === "{") {
	        ++depth;
	      } else if (tok.text === "}") {
	        --depth;

	        if (depth === -1) {
	          throw new ParseError("Extra }", tok);
	        }
	      } else if (tok.text === "EOF") {
	        throw new ParseError("Unexpected end of input in a macro argument" + ", expected '" + (delims && isDelimited ? delims[match] : "}") + "'", tok);
	      }

	      if (delims && isDelimited) {
	        if ((depth === 0 || depth === 1 && delims[match] === "{") && tok.text === delims[match]) {
	          ++match;

	          if (match === delims.length) {
	            // don't include delims in tokens
	            tokens.splice(-match, match);
	            break;
	          }
	        } else {
	          match = 0;
	        }
	      }
	    } while (depth !== 0 || isDelimited); // If the argument found ... has the form ‘{<nested tokens>}’,
	    // ... the outermost braces enclosing the argument are removed


	    if (start.text === "{" && tokens[tokens.length - 1].text === "}") {
	      tokens.pop();
	      tokens.shift();
	    }

	    tokens.reverse(); // to fit in with stack order

	    return {
	      tokens,
	      start,
	      end: tok
	    };
	  }
	  /**
	   * Consume the specified number of (delimited) arguments from the token
	   * stream and return the resulting array of arguments.
	   */


	  consumeArgs(numArgs, delimiters) {
	    if (delimiters) {
	      if (delimiters.length !== numArgs + 1) {
	        throw new ParseError("The length of delimiters doesn't match the number of args!");
	      }

	      var delims = delimiters[0];

	      for (var i = 0; i < delims.length; i++) {
	        var tok = this.popToken();

	        if (delims[i] !== tok.text) {
	          throw new ParseError("Use of the macro doesn't match its definition", tok);
	        }
	      }
	    }

	    var args = [];

	    for (var _i = 0; _i < numArgs; _i++) {
	      args.push(this.consumeArg(delimiters && delimiters[_i + 1]).tokens);
	    }

	    return args;
	  }
	  /**
	   * Expand the next token only once if possible.
	   *
	   * If the token is expanded, the resulting tokens will be pushed onto
	   * the stack in reverse order and will be returned as an array,
	   * also in reverse order.
	   *
	   * If not, the next token will be returned without removing it
	   * from the stack.  This case can be detected by a `Token` return value
	   * instead of an `Array` return value.
	   *
	   * In either case, the next token will be on the top of the stack,
	   * or the stack will be empty.
	   *
	   * Used to implement `expandAfterFuture` and `expandNextToken`.
	   *
	   * If expandableOnly, only expandable tokens are expanded and
	   * an undefined control sequence results in an error.
	   */


	  expandOnce(expandableOnly) {
	    var topToken = this.popToken();
	    var name = topToken.text;
	    var expansion = !topToken.noexpand ? this._getExpansion(name) : null;

	    if (expansion == null || expandableOnly && expansion.unexpandable) {
	      if (expandableOnly && expansion == null && name[0] === "\\" && !this.isDefined(name)) {
	        throw new ParseError("Undefined control sequence: " + name);
	      }

	      this.pushToken(topToken);
	      return topToken;
	    }

	    this.expansionCount++;

	    if (this.expansionCount > this.settings.maxExpand) {
	      throw new ParseError("Too many expansions: infinite loop or " + "need to increase maxExpand setting");
	    }

	    var tokens = expansion.tokens;
	    var args = this.consumeArgs(expansion.numArgs, expansion.delimiters);

	    if (expansion.numArgs) {
	      // paste arguments in place of the placeholders
	      tokens = tokens.slice(); // make a shallow copy

	      for (var i = tokens.length - 1; i >= 0; --i) {
	        var tok = tokens[i];

	        if (tok.text === "#") {
	          if (i === 0) {
	            throw new ParseError("Incomplete placeholder at end of macro body", tok);
	          }

	          tok = tokens[--i]; // next token on stack

	          if (tok.text === "#") {
	            // ## → #
	            tokens.splice(i + 1, 1); // drop first #
	          } else if (/^[1-9]$/.test(tok.text)) {
	            // replace the placeholder with the indicated argument
	            tokens.splice(i, 2, ...args[+tok.text - 1]);
	          } else {
	            throw new ParseError("Not a valid argument number", tok);
	          }
	        }
	      }
	    } // Concatenate expansion onto top of stack.


	    this.pushTokens(tokens);
	    return tokens;
	  }
	  /**
	   * Expand the next token only once (if possible), and return the resulting
	   * top token on the stack (without removing anything from the stack).
	   * Similar in behavior to TeX's `\expandafter\futurelet`.
	   * Equivalent to expandOnce() followed by future().
	   */


	  expandAfterFuture() {
	    this.expandOnce();
	    return this.future();
	  }
	  /**
	   * Recursively expand first token, then return first non-expandable token.
	   */


	  expandNextToken() {
	    for (;;) {
	      var expanded = this.expandOnce(); // expandOnce returns Token if and only if it's fully expanded.

	      if (expanded instanceof Token) {
	        // the token after \noexpand is interpreted as if its meaning
	        // were ‘\relax’
	        if (expanded.treatAsRelax) {
	          expanded.text = "\\relax";
	        }

	        return this.stack.pop(); // === expanded
	      }
	    } // Flow unable to figure out that this pathway is impossible.
	    // https://github.com/facebook/flow/issues/4808


	    throw new Error(); // eslint-disable-line no-unreachable
	  }
	  /**
	   * Fully expand the given macro name and return the resulting list of
	   * tokens, or return `undefined` if no such macro is defined.
	   */


	  expandMacro(name) {
	    return this.macros.has(name) ? this.expandTokens([new Token(name)]) : undefined;
	  }
	  /**
	   * Fully expand the given token stream and return the resulting list of
	   * tokens.  Note that the input tokens are in reverse order, but the
	   * output tokens are in forward order.
	   */


	  expandTokens(tokens) {
	    var output = [];
	    var oldStackLength = this.stack.length;
	    this.pushTokens(tokens);

	    while (this.stack.length > oldStackLength) {
	      var expanded = this.expandOnce(true); // expand only expandable tokens
	      // expandOnce returns Token if and only if it's fully expanded.

	      if (expanded instanceof Token) {
	        if (expanded.treatAsRelax) {
	          // the expansion of \noexpand is the token itself
	          expanded.noexpand = false;
	          expanded.treatAsRelax = false;
	        }

	        output.push(this.stack.pop());
	      }
	    }

	    return output;
	  }
	  /**
	   * Fully expand the given macro name and return the result as a string,
	   * or return `undefined` if no such macro is defined.
	   */


	  expandMacroAsText(name) {
	    var tokens = this.expandMacro(name);

	    if (tokens) {
	      return tokens.map(token => token.text).join("");
	    } else {
	      return tokens;
	    }
	  }
	  /**
	   * Returns the expanded macro as a reversed array of tokens and a macro
	   * argument count.  Or returns `null` if no such macro.
	   */


	  _getExpansion(name) {
	    var definition = this.macros.get(name);

	    if (definition == null) {
	      // mainly checking for undefined here
	      return definition;
	    } // If a single character has an associated catcode other than 13
	    // (active character), then don't expand it.


	    if (name.length === 1) {
	      var catcode = this.lexer.catcodes[name];

	      if (catcode != null && catcode !== 13) {
	        return;
	      }
	    }

	    var expansion = typeof definition === "function" ? definition(this) : definition;

	    if (typeof expansion === "string") {
	      var numArgs = 0;

	      if (expansion.indexOf("#") !== -1) {
	        var stripped = expansion.replace(/##/g, "");

	        while (stripped.indexOf("#" + (numArgs + 1)) !== -1) {
	          ++numArgs;
	        }
	      }

	      var bodyLexer = new Lexer(expansion, this.settings);
	      var tokens = [];
	      var tok = bodyLexer.lex();

	      while (tok.text !== "EOF") {
	        tokens.push(tok);
	        tok = bodyLexer.lex();
	      }

	      tokens.reverse(); // to fit in with stack using push and pop

	      var expanded = {
	        tokens,
	        numArgs
	      };
	      return expanded;
	    }

	    return expansion;
	  }
	  /**
	   * Determine whether a command is currently "defined" (has some
	   * functionality), meaning that it's a macro (in the current group),
	   * a function, a symbol, or one of the special commands listed in
	   * `implicitCommands`.
	   */


	  isDefined(name) {
	    return this.macros.has(name) || functions.hasOwnProperty(name) || symbols.math.hasOwnProperty(name) || symbols.text.hasOwnProperty(name) || implicitCommands.hasOwnProperty(name);
	  }
	  /**
	   * Determine whether a command is expandable.
	   */


	  isExpandable(name) {
	    var macro = this.macros.get(name);
	    return macro != null ? typeof macro === "string" || typeof macro === "function" || !macro.unexpandable : functions.hasOwnProperty(name) && !functions[name].primitive;
	  }

	}

	// Helpers for Parser.js handling of Unicode (sub|super)script characters.
	var unicodeSubRegEx = /^[₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ]/;
	var uSubsAndSups = Object.freeze({
	  '₊': '+',
	  '₋': '-',
	  '₌': '=',
	  '₍': '(',
	  '₎': ')',
	  '₀': '0',
	  '₁': '1',
	  '₂': '2',
	  '₃': '3',
	  '₄': '4',
	  '₅': '5',
	  '₆': '6',
	  '₇': '7',
	  '₈': '8',
	  '₉': '9',
	  '\u2090': 'a',
	  '\u2091': 'e',
	  '\u2095': 'h',
	  '\u1D62': 'i',
	  '\u2C7C': 'j',
	  '\u2096': 'k',
	  '\u2097': 'l',
	  '\u2098': 'm',
	  '\u2099': 'n',
	  '\u2092': 'o',
	  '\u209A': 'p',
	  '\u1D63': 'r',
	  '\u209B': 's',
	  '\u209C': 't',
	  '\u1D64': 'u',
	  '\u1D65': 'v',
	  '\u2093': 'x',
	  '\u1D66': 'β',
	  '\u1D67': 'γ',
	  '\u1D68': 'ρ',
	  '\u1D69': '\u03d5',
	  '\u1D6A': 'χ',
	  '⁺': '+',
	  '⁻': '-',
	  '⁼': '=',
	  '⁽': '(',
	  '⁾': ')',
	  '⁰': '0',
	  '¹': '1',
	  '²': '2',
	  '³': '3',
	  '⁴': '4',
	  '⁵': '5',
	  '⁶': '6',
	  '⁷': '7',
	  '⁸': '8',
	  '⁹': '9',
	  '\u1D2C': 'A',
	  '\u1D2E': 'B',
	  '\u1D30': 'D',
	  '\u1D31': 'E',
	  '\u1D33': 'G',
	  '\u1D34': 'H',
	  '\u1D35': 'I',
	  '\u1D36': 'J',
	  '\u1D37': 'K',
	  '\u1D38': 'L',
	  '\u1D39': 'M',
	  '\u1D3A': 'N',
	  '\u1D3C': 'O',
	  '\u1D3E': 'P',
	  '\u1D3F': 'R',
	  '\u1D40': 'T',
	  '\u1D41': 'U',
	  '\u2C7D': 'V',
	  '\u1D42': 'W',
	  '\u1D43': 'a',
	  '\u1D47': 'b',
	  '\u1D9C': 'c',
	  '\u1D48': 'd',
	  '\u1D49': 'e',
	  '\u1DA0': 'f',
	  '\u1D4D': 'g',
	  '\u02B0': 'h',
	  '\u2071': 'i',
	  '\u02B2': 'j',
	  '\u1D4F': 'k',
	  '\u02E1': 'l',
	  '\u1D50': 'm',
	  '\u207F': 'n',
	  '\u1D52': 'o',
	  '\u1D56': 'p',
	  '\u02B3': 'r',
	  '\u02E2': 's',
	  '\u1D57': 't',
	  '\u1D58': 'u',
	  '\u1D5B': 'v',
	  '\u02B7': 'w',
	  '\u02E3': 'x',
	  '\u02B8': 'y',
	  '\u1DBB': 'z',
	  '\u1D5D': 'β',
	  '\u1D5E': 'γ',
	  '\u1D5F': 'δ',
	  '\u1D60': '\u03d5',
	  '\u1D61': 'χ',
	  '\u1DBF': 'θ'
	});

	/* eslint no-constant-condition:0 */

	var unicodeAccents = {
	  "́": {
	    "text": "\\'",
	    "math": "\\acute"
	  },
	  "̀": {
	    "text": "\\`",
	    "math": "\\grave"
	  },
	  "̈": {
	    "text": "\\\"",
	    "math": "\\ddot"
	  },
	  "̃": {
	    "text": "\\~",
	    "math": "\\tilde"
	  },
	  "̄": {
	    "text": "\\=",
	    "math": "\\bar"
	  },
	  "̆": {
	    "text": "\\u",
	    "math": "\\breve"
	  },
	  "̌": {
	    "text": "\\v",
	    "math": "\\check"
	  },
	  "̂": {
	    "text": "\\^",
	    "math": "\\hat"
	  },
	  "̇": {
	    "text": "\\.",
	    "math": "\\dot"
	  },
	  "̊": {
	    "text": "\\r",
	    "math": "\\mathring"
	  },
	  "̋": {
	    "text": "\\H"
	  },
	  "̧": {
	    "text": "\\c"
	  }
	};
	var unicodeSymbols = {
	  "á": "á",
	  "à": "à",
	  "ä": "ä",
	  "ǟ": "ǟ",
	  "ã": "ã",
	  "ā": "ā",
	  "ă": "ă",
	  "ắ": "ắ",
	  "ằ": "ằ",
	  "ẵ": "ẵ",
	  "ǎ": "ǎ",
	  "â": "â",
	  "ấ": "ấ",
	  "ầ": "ầ",
	  "ẫ": "ẫ",
	  "ȧ": "ȧ",
	  "ǡ": "ǡ",
	  "å": "å",
	  "ǻ": "ǻ",
	  "ḃ": "ḃ",
	  "ć": "ć",
	  "ḉ": "ḉ",
	  "č": "č",
	  "ĉ": "ĉ",
	  "ċ": "ċ",
	  "ç": "ç",
	  "ď": "ď",
	  "ḋ": "ḋ",
	  "ḑ": "ḑ",
	  "é": "é",
	  "è": "è",
	  "ë": "ë",
	  "ẽ": "ẽ",
	  "ē": "ē",
	  "ḗ": "ḗ",
	  "ḕ": "ḕ",
	  "ĕ": "ĕ",
	  "ḝ": "ḝ",
	  "ě": "ě",
	  "ê": "ê",
	  "ế": "ế",
	  "ề": "ề",
	  "ễ": "ễ",
	  "ė": "ė",
	  "ȩ": "ȩ",
	  "ḟ": "ḟ",
	  "ǵ": "ǵ",
	  "ḡ": "ḡ",
	  "ğ": "ğ",
	  "ǧ": "ǧ",
	  "ĝ": "ĝ",
	  "ġ": "ġ",
	  "ģ": "ģ",
	  "ḧ": "ḧ",
	  "ȟ": "ȟ",
	  "ĥ": "ĥ",
	  "ḣ": "ḣ",
	  "ḩ": "ḩ",
	  "í": "í",
	  "ì": "ì",
	  "ï": "ï",
	  "ḯ": "ḯ",
	  "ĩ": "ĩ",
	  "ī": "ī",
	  "ĭ": "ĭ",
	  "ǐ": "ǐ",
	  "î": "î",
	  "ǰ": "ǰ",
	  "ĵ": "ĵ",
	  "ḱ": "ḱ",
	  "ǩ": "ǩ",
	  "ķ": "ķ",
	  "ĺ": "ĺ",
	  "ľ": "ľ",
	  "ļ": "ļ",
	  "ḿ": "ḿ",
	  "ṁ": "ṁ",
	  "ń": "ń",
	  "ǹ": "ǹ",
	  "ñ": "ñ",
	  "ň": "ň",
	  "ṅ": "ṅ",
	  "ņ": "ņ",
	  "ó": "ó",
	  "ò": "ò",
	  "ö": "ö",
	  "ȫ": "ȫ",
	  "õ": "õ",
	  "ṍ": "ṍ",
	  "ṏ": "ṏ",
	  "ȭ": "ȭ",
	  "ō": "ō",
	  "ṓ": "ṓ",
	  "ṑ": "ṑ",
	  "ŏ": "ŏ",
	  "ǒ": "ǒ",
	  "ô": "ô",
	  "ố": "ố",
	  "ồ": "ồ",
	  "ỗ": "ỗ",
	  "ȯ": "ȯ",
	  "ȱ": "ȱ",
	  "ő": "ő",
	  "ṕ": "ṕ",
	  "ṗ": "ṗ",
	  "ŕ": "ŕ",
	  "ř": "ř",
	  "ṙ": "ṙ",
	  "ŗ": "ŗ",
	  "ś": "ś",
	  "ṥ": "ṥ",
	  "š": "š",
	  "ṧ": "ṧ",
	  "ŝ": "ŝ",
	  "ṡ": "ṡ",
	  "ş": "ş",
	  "ẗ": "ẗ",
	  "ť": "ť",
	  "ṫ": "ṫ",
	  "ţ": "ţ",
	  "ú": "ú",
	  "ù": "ù",
	  "ü": "ü",
	  "ǘ": "ǘ",
	  "ǜ": "ǜ",
	  "ǖ": "ǖ",
	  "ǚ": "ǚ",
	  "ũ": "ũ",
	  "ṹ": "ṹ",
	  "ū": "ū",
	  "ṻ": "ṻ",
	  "ŭ": "ŭ",
	  "ǔ": "ǔ",
	  "û": "û",
	  "ů": "ů",
	  "ű": "ű",
	  "ṽ": "ṽ",
	  "ẃ": "ẃ",
	  "ẁ": "ẁ",
	  "ẅ": "ẅ",
	  "ŵ": "ŵ",
	  "ẇ": "ẇ",
	  "ẘ": "ẘ",
	  "ẍ": "ẍ",
	  "ẋ": "ẋ",
	  "ý": "ý",
	  "ỳ": "ỳ",
	  "ÿ": "ÿ",
	  "ỹ": "ỹ",
	  "ȳ": "ȳ",
	  "ŷ": "ŷ",
	  "ẏ": "ẏ",
	  "ẙ": "ẙ",
	  "ź": "ź",
	  "ž": "ž",
	  "ẑ": "ẑ",
	  "ż": "ż",
	  "Á": "Á",
	  "À": "À",
	  "Ä": "Ä",
	  "Ǟ": "Ǟ",
	  "Ã": "Ã",
	  "Ā": "Ā",
	  "Ă": "Ă",
	  "Ắ": "Ắ",
	  "Ằ": "Ằ",
	  "Ẵ": "Ẵ",
	  "Ǎ": "Ǎ",
	  "Â": "Â",
	  "Ấ": "Ấ",
	  "Ầ": "Ầ",
	  "Ẫ": "Ẫ",
	  "Ȧ": "Ȧ",
	  "Ǡ": "Ǡ",
	  "Å": "Å",
	  "Ǻ": "Ǻ",
	  "Ḃ": "Ḃ",
	  "Ć": "Ć",
	  "Ḉ": "Ḉ",
	  "Č": "Č",
	  "Ĉ": "Ĉ",
	  "Ċ": "Ċ",
	  "Ç": "Ç",
	  "Ď": "Ď",
	  "Ḋ": "Ḋ",
	  "Ḑ": "Ḑ",
	  "É": "É",
	  "È": "È",
	  "Ë": "Ë",
	  "Ẽ": "Ẽ",
	  "Ē": "Ē",
	  "Ḗ": "Ḗ",
	  "Ḕ": "Ḕ",
	  "Ĕ": "Ĕ",
	  "Ḝ": "Ḝ",
	  "Ě": "Ě",
	  "Ê": "Ê",
	  "Ế": "Ế",
	  "Ề": "Ề",
	  "Ễ": "Ễ",
	  "Ė": "Ė",
	  "Ȩ": "Ȩ",
	  "Ḟ": "Ḟ",
	  "Ǵ": "Ǵ",
	  "Ḡ": "Ḡ",
	  "Ğ": "Ğ",
	  "Ǧ": "Ǧ",
	  "Ĝ": "Ĝ",
	  "Ġ": "Ġ",
	  "Ģ": "Ģ",
	  "Ḧ": "Ḧ",
	  "Ȟ": "Ȟ",
	  "Ĥ": "Ĥ",
	  "Ḣ": "Ḣ",
	  "Ḩ": "Ḩ",
	  "Í": "Í",
	  "Ì": "Ì",
	  "Ï": "Ï",
	  "Ḯ": "Ḯ",
	  "Ĩ": "Ĩ",
	  "Ī": "Ī",
	  "Ĭ": "Ĭ",
	  "Ǐ": "Ǐ",
	  "Î": "Î",
	  "İ": "İ",
	  "Ĵ": "Ĵ",
	  "Ḱ": "Ḱ",
	  "Ǩ": "Ǩ",
	  "Ķ": "Ķ",
	  "Ĺ": "Ĺ",
	  "Ľ": "Ľ",
	  "Ļ": "Ļ",
	  "Ḿ": "Ḿ",
	  "Ṁ": "Ṁ",
	  "Ń": "Ń",
	  "Ǹ": "Ǹ",
	  "Ñ": "Ñ",
	  "Ň": "Ň",
	  "Ṅ": "Ṅ",
	  "Ņ": "Ņ",
	  "Ó": "Ó",
	  "Ò": "Ò",
	  "Ö": "Ö",
	  "Ȫ": "Ȫ",
	  "Õ": "Õ",
	  "Ṍ": "Ṍ",
	  "Ṏ": "Ṏ",
	  "Ȭ": "Ȭ",
	  "Ō": "Ō",
	  "Ṓ": "Ṓ",
	  "Ṑ": "Ṑ",
	  "Ŏ": "Ŏ",
	  "Ǒ": "Ǒ",
	  "Ô": "Ô",
	  "Ố": "Ố",
	  "Ồ": "Ồ",
	  "Ỗ": "Ỗ",
	  "Ȯ": "Ȯ",
	  "Ȱ": "Ȱ",
	  "Ő": "Ő",
	  "Ṕ": "Ṕ",
	  "Ṗ": "Ṗ",
	  "Ŕ": "Ŕ",
	  "Ř": "Ř",
	  "Ṙ": "Ṙ",
	  "Ŗ": "Ŗ",
	  "Ś": "Ś",
	  "Ṥ": "Ṥ",
	  "Š": "Š",
	  "Ṧ": "Ṧ",
	  "Ŝ": "Ŝ",
	  "Ṡ": "Ṡ",
	  "Ş": "Ş",
	  "Ť": "Ť",
	  "Ṫ": "Ṫ",
	  "Ţ": "Ţ",
	  "Ú": "Ú",
	  "Ù": "Ù",
	  "Ü": "Ü",
	  "Ǘ": "Ǘ",
	  "Ǜ": "Ǜ",
	  "Ǖ": "Ǖ",
	  "Ǚ": "Ǚ",
	  "Ũ": "Ũ",
	  "Ṹ": "Ṹ",
	  "Ū": "Ū",
	  "Ṻ": "Ṻ",
	  "Ŭ": "Ŭ",
	  "Ǔ": "Ǔ",
	  "Û": "Û",
	  "Ů": "Ů",
	  "Ű": "Ű",
	  "Ṽ": "Ṽ",
	  "Ẃ": "Ẃ",
	  "Ẁ": "Ẁ",
	  "Ẅ": "Ẅ",
	  "Ŵ": "Ŵ",
	  "Ẇ": "Ẇ",
	  "Ẍ": "Ẍ",
	  "Ẋ": "Ẋ",
	  "Ý": "Ý",
	  "Ỳ": "Ỳ",
	  "Ÿ": "Ÿ",
	  "Ỹ": "Ỹ",
	  "Ȳ": "Ȳ",
	  "Ŷ": "Ŷ",
	  "Ẏ": "Ẏ",
	  "Ź": "Ź",
	  "Ž": "Ž",
	  "Ẑ": "Ẑ",
	  "Ż": "Ż",
	  "ά": "ά",
	  "ὰ": "ὰ",
	  "ᾱ": "ᾱ",
	  "ᾰ": "ᾰ",
	  "έ": "έ",
	  "ὲ": "ὲ",
	  "ή": "ή",
	  "ὴ": "ὴ",
	  "ί": "ί",
	  "ὶ": "ὶ",
	  "ϊ": "ϊ",
	  "ΐ": "ΐ",
	  "ῒ": "ῒ",
	  "ῑ": "ῑ",
	  "ῐ": "ῐ",
	  "ό": "ό",
	  "ὸ": "ὸ",
	  "ύ": "ύ",
	  "ὺ": "ὺ",
	  "ϋ": "ϋ",
	  "ΰ": "ΰ",
	  "ῢ": "ῢ",
	  "ῡ": "ῡ",
	  "ῠ": "ῠ",
	  "ώ": "ώ",
	  "ὼ": "ὼ",
	  "Ύ": "Ύ",
	  "Ὺ": "Ὺ",
	  "Ϋ": "Ϋ",
	  "Ῡ": "Ῡ",
	  "Ῠ": "Ῠ",
	  "Ώ": "Ώ",
	  "Ὼ": "Ὼ"
	};

	/**
	 * This file contains the parser used to parse out a TeX expression from the
	 * input. Since TeX isn't context-free, standard parsers don't work particularly
	 * well.
	 *
	 * The strategy of this parser is as such:
	 *
	 * The main functions (the `.parse...` ones) take a position in the current
	 * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
	 * this.gullet.lexer) also supports pulling out tokens at arbitrary places. When
	 * individual tokens are needed at a position, the lexer is called to pull out a
	 * token, which is then used.
	 *
	 * The parser has a property called "mode" indicating the mode that
	 * the parser is currently in. Currently it has to be one of "math" or
	 * "text", which denotes whether the current environment is a math-y
	 * one or a text-y one (e.g. inside \text). Currently, this serves to
	 * limit the functions which can be used in text mode.
	 *
	 * The main functions then return an object which contains the useful data that
	 * was parsed at its given point, and a new position at the end of the parsed
	 * data. The main functions can call each other and continue the parsing by
	 * using the returned position as a new starting point.
	 *
	 * There are also extra `.handle...` functions, which pull out some reused
	 * functionality into self-contained functions.
	 *
	 * The functions return ParseNodes.
	 */
	class Parser {
	  constructor(input, settings) {
	    this.mode = void 0;
	    this.gullet = void 0;
	    this.settings = void 0;
	    this.leftrightDepth = void 0;
	    this.nextToken = void 0;
	    // Start in math mode
	    this.mode = "math"; // Create a new macro expander (gullet) and (indirectly via that) also a
	    // new lexer (mouth) for this parser (stomach, in the language of TeX)

	    this.gullet = new MacroExpander(input, settings, this.mode); // Store the settings for use in parsing

	    this.settings = settings; // Count leftright depth (for \middle errors)

	    this.leftrightDepth = 0;
	  }
	  /**
	   * Checks a result to make sure it has the right type, and throws an
	   * appropriate error otherwise.
	   */


	  expect(text, consume) {
	    if (consume === void 0) {
	      consume = true;
	    }

	    if (this.fetch().text !== text) {
	      throw new ParseError("Expected '" + text + "', got '" + this.fetch().text + "'", this.fetch());
	    }

	    if (consume) {
	      this.consume();
	    }
	  }
	  /**
	   * Discards the current lookahead token, considering it consumed.
	   */


	  consume() {
	    this.nextToken = null;
	  }
	  /**
	   * Return the current lookahead token, or if there isn't one (at the
	   * beginning, or if the previous lookahead token was consume()d),
	   * fetch the next token as the new lookahead token and return it.
	   */


	  fetch() {
	    if (this.nextToken == null) {
	      this.nextToken = this.gullet.expandNextToken();
	    }

	    return this.nextToken;
	  }
	  /**
	   * Switches between "text" and "math" modes.
	   */


	  switchMode(newMode) {
	    this.mode = newMode;
	    this.gullet.switchMode(newMode);
	  }
	  /**
	   * Main parsing function, which parses an entire input.
	   */


	  parse() {
	    if (!this.settings.globalGroup) {
	      // Create a group namespace for the math expression.
	      // (LaTeX creates a new group for every $...$, $$...$$, \[...\].)
	      this.gullet.beginGroup();
	    } // Use old \color behavior (same as LaTeX's \textcolor) if requested.
	    // We do this within the group for the math expression, so it doesn't
	    // pollute settings.macros.


	    if (this.settings.colorIsTextColor) {
	      this.gullet.macros.set("\\color", "\\textcolor");
	    }

	    try {
	      // Try to parse the input
	      var parse = this.parseExpression(false); // If we succeeded, make sure there's an EOF at the end

	      this.expect("EOF"); // End the group namespace for the expression

	      if (!this.settings.globalGroup) {
	        this.gullet.endGroup();
	      }

	      return parse; // Close any leftover groups in case of a parse error.
	    } finally {
	      this.gullet.endGroups();
	    }
	  }
	  /**
	   * Fully parse a separate sequence of tokens as a separate job.
	   * Tokens should be specified in reverse order, as in a MacroDefinition.
	   */


	  subparse(tokens) {
	    // Save the next token from the current job.
	    var oldToken = this.nextToken;
	    this.consume(); // Run the new job, terminating it with an excess '}'

	    this.gullet.pushToken(new Token("}"));
	    this.gullet.pushTokens(tokens);
	    var parse = this.parseExpression(false);
	    this.expect("}"); // Restore the next token from the current job.

	    this.nextToken = oldToken;
	    return parse;
	  }

	  /**
	   * Parses an "expression", which is a list of atoms.
	   *
	   * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
	   *                 happens when functions have higher precendence han infix
	   *                 nodes in implicit parses.
	   *
	   * `breakOnTokenText`: The text of the token that the expression should end
	   *                     with, or `null` if something else should end the
	   *                     expression.
	   */
	  parseExpression(breakOnInfix, breakOnTokenText) {
	    var body = []; // Keep adding atoms to the body until we can't parse any more atoms (either
	    // we reached the end, a }, or a \right)

	    while (true) {
	      // Ignore spaces in math mode
	      if (this.mode === "math") {
	        this.consumeSpaces();
	      }

	      var lex = this.fetch();

	      if (Parser.endOfExpression.indexOf(lex.text) !== -1) {
	        break;
	      }

	      if (breakOnTokenText && lex.text === breakOnTokenText) {
	        break;
	      }

	      if (breakOnInfix && functions[lex.text] && functions[lex.text].infix) {
	        break;
	      }

	      var atom = this.parseAtom(breakOnTokenText);

	      if (!atom) {
	        break;
	      } else if (atom.type === "internal") {
	        continue;
	      }

	      body.push(atom);
	    }

	    if (this.mode === "text") {
	      this.formLigatures(body);
	    }

	    return this.handleInfixNodes(body);
	  }
	  /**
	   * Rewrites infix operators such as \over with corresponding commands such
	   * as \frac.
	   *
	   * There can only be one infix operator per group.  If there's more than one
	   * then the expression is ambiguous.  This can be resolved by adding {}.
	   */


	  handleInfixNodes(body) {
	    var overIndex = -1;
	    var funcName;

	    for (var i = 0; i < body.length; i++) {
	      if (body[i].type === "infix") {
	        if (overIndex !== -1) {
	          throw new ParseError("only one infix operator per group", body[i].token);
	        }

	        overIndex = i;
	        funcName = body[i].replaceWith;
	      }
	    }

	    if (overIndex !== -1 && funcName) {
	      var numerNode;
	      var denomNode;
	      var numerBody = body.slice(0, overIndex);
	      var denomBody = body.slice(overIndex + 1);

	      if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
	        numerNode = numerBody[0];
	      } else {
	        numerNode = {
	          type: "ordgroup",
	          mode: this.mode,
	          body: numerBody
	        };
	      }

	      if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
	        denomNode = denomBody[0];
	      } else {
	        denomNode = {
	          type: "ordgroup",
	          mode: this.mode,
	          body: denomBody
	        };
	      }

	      var node;

	      if (funcName === "\\\\abovefrac") {
	        node = this.callFunction(funcName, [numerNode, body[overIndex], denomNode], []);
	      } else {
	        node = this.callFunction(funcName, [numerNode, denomNode], []);
	      }

	      return [node];
	    } else {
	      return body;
	    }
	  }
	  /**
	   * Handle a subscript or superscript with nice errors.
	   */


	  handleSupSubscript(name // For error reporting.
	  ) {
	    var symbolToken = this.fetch();
	    var symbol = symbolToken.text;
	    this.consume();
	    this.consumeSpaces(); // ignore spaces before sup/subscript argument

	    var group = this.parseGroup(name);

	    if (!group) {
	      throw new ParseError("Expected group after '" + symbol + "'", symbolToken);
	    }

	    return group;
	  }
	  /**
	   * Converts the textual input of an unsupported command into a text node
	   * contained within a color node whose color is determined by errorColor
	   */


	  formatUnsupportedCmd(text) {
	    var textordArray = [];

	    for (var i = 0; i < text.length; i++) {
	      textordArray.push({
	        type: "textord",
	        mode: "text",
	        text: text[i]
	      });
	    }

	    var textNode = {
	      type: "text",
	      mode: this.mode,
	      body: textordArray
	    };
	    var colorNode = {
	      type: "color",
	      mode: this.mode,
	      color: this.settings.errorColor,
	      body: [textNode]
	    };
	    return colorNode;
	  }
	  /**
	   * Parses a group with optional super/subscripts.
	   */


	  parseAtom(breakOnTokenText) {
	    // The body of an atom is an implicit group, so that things like
	    // \left(x\right)^2 work correctly.
	    var base = this.parseGroup("atom", breakOnTokenText); // In text mode, we don't have superscripts or subscripts

	    if (this.mode === "text") {
	      return base;
	    } // Note that base may be empty (i.e. null) at this point.


	    var superscript;
	    var subscript;

	    while (true) {
	      // Guaranteed in math mode, so eat any spaces first.
	      this.consumeSpaces(); // Lex the first token

	      var lex = this.fetch();

	      if (lex.text === "\\limits" || lex.text === "\\nolimits") {
	        // We got a limit control
	        if (base && base.type === "op") {
	          var limits = lex.text === "\\limits";
	          base.limits = limits;
	          base.alwaysHandleSupSub = true;
	        } else if (base && base.type === "operatorname") {
	          if (base.alwaysHandleSupSub) {
	            base.limits = lex.text === "\\limits";
	          }
	        } else {
	          throw new ParseError("Limit controls must follow a math operator", lex);
	        }

	        this.consume();
	      } else if (lex.text === "^") {
	        // We got a superscript start
	        if (superscript) {
	          throw new ParseError("Double superscript", lex);
	        }

	        superscript = this.handleSupSubscript("superscript");
	      } else if (lex.text === "_") {
	        // We got a subscript start
	        if (subscript) {
	          throw new ParseError("Double subscript", lex);
	        }

	        subscript = this.handleSupSubscript("subscript");
	      } else if (lex.text === "'") {
	        // We got a prime
	        if (superscript) {
	          throw new ParseError("Double superscript", lex);
	        }

	        var prime = {
	          type: "textord",
	          mode: this.mode,
	          text: "\\prime"
	        }; // Many primes can be grouped together, so we handle this here

	        var primes = [prime];
	        this.consume(); // Keep lexing tokens until we get something that's not a prime

	        while (this.fetch().text === "'") {
	          // For each one, add another prime to the list
	          primes.push(prime);
	          this.consume();
	        } // If there's a superscript following the primes, combine that
	        // superscript in with the primes.


	        if (this.fetch().text === "^") {
	          primes.push(this.handleSupSubscript("superscript"));
	        } // Put everything into an ordgroup as the superscript


	        superscript = {
	          type: "ordgroup",
	          mode: this.mode,
	          body: primes
	        };
	      } else if (uSubsAndSups[lex.text]) {
	        // A Unicode subscript or superscript character.
	        // We treat these similarly to the unicode-math package.
	        // So we render a string of Unicode (sub|super)scripts the
	        // same as a (sub|super)script of regular characters.
	        var str = uSubsAndSups[lex.text];
	        var isSub = unicodeSubRegEx.test(lex.text);
	        this.consume(); // Continue fetching tokens to fill out the string.

	        while (true) {
	          var token = this.fetch().text;

	          if (!uSubsAndSups[token]) {
	            break;
	          }

	          if (unicodeSubRegEx.test(token) !== isSub) {
	            break;
	          }

	          this.consume();
	          str += uSubsAndSups[token];
	        } // Now create a (sub|super)script.


	        var body = new Parser(str, this.settings).parse();

	        if (isSub) {
	          subscript = {
	            type: "ordgroup",
	            mode: "math",
	            body
	          };
	        } else {
	          superscript = {
	            type: "ordgroup",
	            mode: "math",
	            body
	          };
	        }
	      } else {
	        // If it wasn't ^, _, or ', stop parsing super/subscripts
	        break;
	      }
	    } // Base must be set if superscript or subscript are set per logic above,
	    // but need to check here for type check to pass.


	    if (superscript || subscript) {
	      // If we got either a superscript or subscript, create a supsub
	      return {
	        type: "supsub",
	        mode: this.mode,
	        base: base,
	        sup: superscript,
	        sub: subscript
	      };
	    } else {
	      // Otherwise return the original body
	      return base;
	    }
	  }
	  /**
	   * Parses an entire function, including its base and all of its arguments.
	   */


	  parseFunction(breakOnTokenText, name // For determining its context
	  ) {
	    var token = this.fetch();
	    var func = token.text;
	    var funcData = functions[func];

	    if (!funcData) {
	      return null;
	    }

	    this.consume(); // consume command token

	    if (name && name !== "atom" && !funcData.allowedInArgument) {
	      throw new ParseError("Got function '" + func + "' with no arguments" + (name ? " as " + name : ""), token);
	    } else if (this.mode === "text" && !funcData.allowedInText) {
	      throw new ParseError("Can't use function '" + func + "' in text mode", token);
	    } else if (this.mode === "math" && funcData.allowedInMath === false) {
	      throw new ParseError("Can't use function '" + func + "' in math mode", token);
	    }

	    var {
	      args,
	      optArgs
	    } = this.parseArguments(func, funcData);
	    return this.callFunction(func, args, optArgs, token, breakOnTokenText);
	  }
	  /**
	   * Call a function handler with a suitable context and arguments.
	   */


	  callFunction(name, args, optArgs, token, breakOnTokenText) {
	    var context = {
	      funcName: name,
	      parser: this,
	      token,
	      breakOnTokenText
	    };
	    var func = functions[name];

	    if (func && func.handler) {
	      return func.handler(context, args, optArgs);
	    } else {
	      throw new ParseError("No function handler for " + name);
	    }
	  }
	  /**
	   * Parses the arguments of a function or environment
	   */


	  parseArguments(func, // Should look like "\name" or "\begin{name}".
	  funcData) {
	    var totalArgs = funcData.numArgs + funcData.numOptionalArgs;

	    if (totalArgs === 0) {
	      return {
	        args: [],
	        optArgs: []
	      };
	    }

	    var args = [];
	    var optArgs = [];

	    for (var i = 0; i < totalArgs; i++) {
	      var argType = funcData.argTypes && funcData.argTypes[i];
	      var isOptional = i < funcData.numOptionalArgs;

	      if (funcData.primitive && argType == null || // \sqrt expands into primitive if optional argument doesn't exist
	      funcData.type === "sqrt" && i === 1 && optArgs[0] == null) {
	        argType = "primitive";
	      }

	      var arg = this.parseGroupOfType("argument to '" + func + "'", argType, isOptional);

	      if (isOptional) {
	        optArgs.push(arg);
	      } else if (arg != null) {
	        args.push(arg);
	      } else {
	        // should be unreachable
	        throw new ParseError("Null argument, please report this as a bug");
	      }
	    }

	    return {
	      args,
	      optArgs
	    };
	  }
	  /**
	   * Parses a group when the mode is changing.
	   */


	  parseGroupOfType(name, type, optional) {
	    switch (type) {
	      case "color":
	        return this.parseColorGroup(optional);

	      case "size":
	        return this.parseSizeGroup(optional);

	      case "url":
	        return this.parseUrlGroup(optional);

	      case "math":
	      case "text":
	        return this.parseArgumentGroup(optional, type);

	      case "hbox":
	        {
	          // hbox argument type wraps the argument in the equivalent of
	          // \hbox, which is like \text but switching to \textstyle size.
	          var group = this.parseArgumentGroup(optional, "text");
	          return group != null ? {
	            type: "styling",
	            mode: group.mode,
	            body: [group],
	            style: "text" // simulate \textstyle

	          } : null;
	        }

	      case "raw":
	        {
	          var token = this.parseStringGroup("raw", optional);
	          return token != null ? {
	            type: "raw",
	            mode: "text",
	            string: token.text
	          } : null;
	        }

	      case "primitive":
	        {
	          if (optional) {
	            throw new ParseError("A primitive argument cannot be optional");
	          }

	          var _group = this.parseGroup(name);

	          if (_group == null) {
	            throw new ParseError("Expected group as " + name, this.fetch());
	          }

	          return _group;
	        }

	      case "original":
	      case null:
	      case undefined:
	        return this.parseArgumentGroup(optional);

	      default:
	        throw new ParseError("Unknown group type as " + name, this.fetch());
	    }
	  }
	  /**
	   * Discard any space tokens, fetching the next non-space token.
	   */


	  consumeSpaces() {
	    while (this.fetch().text === " ") {
	      this.consume();
	    }
	  }
	  /**
	   * Parses a group, essentially returning the string formed by the
	   * brace-enclosed tokens plus some position information.
	   */


	  parseStringGroup(modeName, // Used to describe the mode in error messages.
	  optional) {
	    var argToken = this.gullet.scanArgument(optional);

	    if (argToken == null) {
	      return null;
	    }

	    var str = "";
	    var nextToken;

	    while ((nextToken = this.fetch()).text !== "EOF") {
	      str += nextToken.text;
	      this.consume();
	    }

	    this.consume(); // consume the end of the argument

	    argToken.text = str;
	    return argToken;
	  }
	  /**
	   * Parses a regex-delimited group: the largest sequence of tokens
	   * whose concatenated strings match `regex`. Returns the string
	   * formed by the tokens plus some position information.
	   */


	  parseRegexGroup(regex, modeName // Used to describe the mode in error messages.
	  ) {
	    var firstToken = this.fetch();
	    var lastToken = firstToken;
	    var str = "";
	    var nextToken;

	    while ((nextToken = this.fetch()).text !== "EOF" && regex.test(str + nextToken.text)) {
	      lastToken = nextToken;
	      str += lastToken.text;
	      this.consume();
	    }

	    if (str === "") {
	      throw new ParseError("Invalid " + modeName + ": '" + firstToken.text + "'", firstToken);
	    }

	    return firstToken.range(lastToken, str);
	  }
	  /**
	   * Parses a color description.
	   */


	  parseColorGroup(optional) {
	    var res = this.parseStringGroup("color", optional);

	    if (res == null) {
	      return null;
	    }

	    var match = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);

	    if (!match) {
	      throw new ParseError("Invalid color: '" + res.text + "'", res);
	    }

	    var color = match[0];

	    if (/^[0-9a-f]{6}$/i.test(color)) {
	      // We allow a 6-digit HTML color spec without a leading "#".
	      // This follows the xcolor package's HTML color model.
	      // Predefined color names are all missed by this RegEx pattern.
	      color = "#" + color;
	    }

	    return {
	      type: "color-token",
	      mode: this.mode,
	      color
	    };
	  }
	  /**
	   * Parses a size specification, consisting of magnitude and unit.
	   */


	  parseSizeGroup(optional) {
	    var res;
	    var isBlank = false; // don't expand before parseStringGroup

	    this.gullet.consumeSpaces();

	    if (!optional && this.gullet.future().text !== "{") {
	      res = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size");
	    } else {
	      res = this.parseStringGroup("size", optional);
	    }

	    if (!res) {
	      return null;
	    }

	    if (!optional && res.text.length === 0) {
	      // Because we've tested for what is !optional, this block won't
	      // affect \kern, \hspace, etc. It will capture the mandatory arguments
	      // to \genfrac and \above.
	      res.text = "0pt"; // Enable \above{}

	      isBlank = true; // This is here specifically for \genfrac
	    }

	    var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);

	    if (!match) {
	      throw new ParseError("Invalid size: '" + res.text + "'", res);
	    }

	    var data = {
	      number: +(match[1] + match[2]),
	      // sign + magnitude, cast to number
	      unit: match[3]
	    };

	    if (!validUnit(data)) {
	      throw new ParseError("Invalid unit: '" + data.unit + "'", res);
	    }

	    return {
	      type: "size",
	      mode: this.mode,
	      value: data,
	      isBlank
	    };
	  }
	  /**
	   * Parses an URL, checking escaped letters and allowed protocols,
	   * and setting the catcode of % as an active character (as in \hyperref).
	   */


	  parseUrlGroup(optional) {
	    this.gullet.lexer.setCatcode("%", 13); // active character

	    this.gullet.lexer.setCatcode("~", 12); // other character

	    var res = this.parseStringGroup("url", optional);
	    this.gullet.lexer.setCatcode("%", 14); // comment character

	    this.gullet.lexer.setCatcode("~", 13); // active character

	    if (res == null) {
	      return null;
	    } // hyperref package allows backslashes alone in href, but doesn't
	    // generate valid links in such cases; we interpret this as
	    // "undefined" behaviour, and keep them as-is. Some browser will
	    // replace backslashes with forward slashes.


	    var url = res.text.replace(/\\([#$%&~_^{}])/g, '$1');
	    return {
	      type: "url",
	      mode: this.mode,
	      url
	    };
	  }
	  /**
	   * Parses an argument with the mode specified.
	   */


	  parseArgumentGroup(optional, mode) {
	    var argToken = this.gullet.scanArgument(optional);

	    if (argToken == null) {
	      return null;
	    }

	    var outerMode = this.mode;

	    if (mode) {
	      // Switch to specified mode
	      this.switchMode(mode);
	    }

	    this.gullet.beginGroup();
	    var expression = this.parseExpression(false, "EOF"); // TODO: find an alternative way to denote the end

	    this.expect("EOF"); // expect the end of the argument

	    this.gullet.endGroup();
	    var result = {
	      type: "ordgroup",
	      mode: this.mode,
	      loc: argToken.loc,
	      body: expression
	    };

	    if (mode) {
	      // Switch mode back
	      this.switchMode(outerMode);
	    }

	    return result;
	  }
	  /**
	   * Parses an ordinary group, which is either a single nucleus (like "x")
	   * or an expression in braces (like "{x+y}") or an implicit group, a group
	   * that starts at the current position, and ends right before a higher explicit
	   * group ends, or at EOF.
	   */


	  parseGroup(name, // For error reporting.
	  breakOnTokenText) {
	    var firstToken = this.fetch();
	    var text = firstToken.text;
	    var result; // Try to parse an open brace or \begingroup

	    if (text === "{" || text === "\\begingroup") {
	      this.consume();
	      var groupEnd = text === "{" ? "}" : "\\endgroup";
	      this.gullet.beginGroup(); // If we get a brace, parse an expression

	      var expression = this.parseExpression(false, groupEnd);
	      var lastToken = this.fetch();
	      this.expect(groupEnd); // Check that we got a matching closing brace

	      this.gullet.endGroup();
	      result = {
	        type: "ordgroup",
	        mode: this.mode,
	        loc: SourceLocation.range(firstToken, lastToken),
	        body: expression,
	        // A group formed by \begingroup...\endgroup is a semi-simple group
	        // which doesn't affect spacing in math mode, i.e., is transparent.
	        // https://tex.stackexchange.com/questions/1930/when-should-one-
	        // use-begingroup-instead-of-bgroup
	        semisimple: text === "\\begingroup" || undefined
	      };
	    } else {
	      // If there exists a function with this name, parse the function.
	      // Otherwise, just return a nucleus
	      result = this.parseFunction(breakOnTokenText, name) || this.parseSymbol();

	      if (result == null && text[0] === "\\" && !implicitCommands.hasOwnProperty(text)) {
	        if (this.settings.throwOnError) {
	          throw new ParseError("Undefined control sequence: " + text, firstToken);
	        }

	        result = this.formatUnsupportedCmd(text);
	        this.consume();
	      }
	    }

	    return result;
	  }
	  /**
	   * Form ligature-like combinations of characters for text mode.
	   * This includes inputs like "--", "---", "``" and "''".
	   * The result will simply replace multiple textord nodes with a single
	   * character in each value by a single textord node having multiple
	   * characters in its value.  The representation is still ASCII source.
	   * The group will be modified in place.
	   */


	  formLigatures(group) {
	    var n = group.length - 1;

	    for (var i = 0; i < n; ++i) {
	      var a = group[i]; // $FlowFixMe: Not every node type has a `text` property.

	      var v = a.text;

	      if (v === "-" && group[i + 1].text === "-") {
	        if (i + 1 < n && group[i + 2].text === "-") {
	          group.splice(i, 3, {
	            type: "textord",
	            mode: "text",
	            loc: SourceLocation.range(a, group[i + 2]),
	            text: "---"
	          });
	          n -= 2;
	        } else {
	          group.splice(i, 2, {
	            type: "textord",
	            mode: "text",
	            loc: SourceLocation.range(a, group[i + 1]),
	            text: "--"
	          });
	          n -= 1;
	        }
	      }

	      if ((v === "'" || v === "`") && group[i + 1].text === v) {
	        group.splice(i, 2, {
	          type: "textord",
	          mode: "text",
	          loc: SourceLocation.range(a, group[i + 1]),
	          text: v + v
	        });
	        n -= 1;
	      }
	    }
	  }
	  /**
	   * Parse a single symbol out of the string. Here, we handle single character
	   * symbols and special functions like \verb.
	   */


	  parseSymbol() {
	    var nucleus = this.fetch();
	    var text = nucleus.text;

	    if (/^\\verb[^a-zA-Z]/.test(text)) {
	      this.consume();
	      var arg = text.slice(5);
	      var star = arg.charAt(0) === "*";

	      if (star) {
	        arg = arg.slice(1);
	      } // Lexer's tokenRegex is constructed to always have matching
	      // first/last characters.


	      if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {
	        throw new ParseError("\\verb assertion failed --\n                    please report what input caused this bug");
	      }

	      arg = arg.slice(1, -1); // remove first and last char

	      return {
	        type: "verb",
	        mode: "text",
	        body: arg,
	        star
	      };
	    } // At this point, we should have a symbol, possibly with accents.
	    // First expand any accented base symbol according to unicodeSymbols.


	    if (unicodeSymbols.hasOwnProperty(text[0]) && !symbols[this.mode][text[0]]) {
	      // This behavior is not strict (XeTeX-compatible) in math mode.
	      if (this.settings.strict && this.mode === "math") {
	        this.settings.reportNonstrict("unicodeTextInMathMode", "Accented Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
	      }

	      text = unicodeSymbols[text[0]] + text.substr(1);
	    } // Strip off any combining characters


	    var match = combiningDiacriticalMarksEndRegex.exec(text);

	    if (match) {
	      text = text.substring(0, match.index);

	      if (text === 'i') {
	        text = '\u0131'; // dotless i, in math and text mode
	      } else if (text === 'j') {
	        text = '\u0237'; // dotless j, in math and text mode
	      }
	    } // Recognize base symbol


	    var symbol;

	    if (symbols[this.mode][text]) {
	      if (this.settings.strict && this.mode === 'math' && extraLatin.indexOf(text) >= 0) {
	        this.settings.reportNonstrict("unicodeTextInMathMode", "Latin-1/Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
	      }

	      var group = symbols[this.mode][text].group;
	      var loc = SourceLocation.range(nucleus);
	      var s;

	      if (ATOMS.hasOwnProperty(group)) {
	        // $FlowFixMe
	        var family = group;
	        s = {
	          type: "atom",
	          mode: this.mode,
	          family,
	          loc,
	          text
	        };
	      } else {
	        // $FlowFixMe
	        s = {
	          type: group,
	          mode: this.mode,
	          loc,
	          text
	        };
	      } // $FlowFixMe


	      symbol = s;
	    } else if (text.charCodeAt(0) >= 0x80) {
	      // no symbol for e.g. ^
	      if (this.settings.strict) {
	        if (!supportedCodepoint(text.charCodeAt(0))) {
	          this.settings.reportNonstrict("unknownSymbol", "Unrecognized Unicode character \"" + text[0] + "\"" + (" (" + text.charCodeAt(0) + ")"), nucleus);
	        } else if (this.mode === "math") {
	          this.settings.reportNonstrict("unicodeTextInMathMode", "Unicode text character \"" + text[0] + "\" used in math mode", nucleus);
	        }
	      } // All nonmathematical Unicode characters are rendered as if they
	      // are in text mode (wrapped in \text) because that's what it
	      // takes to render them in LaTeX.  Setting `mode: this.mode` is
	      // another natural choice (the user requested math mode), but
	      // this makes it more difficult for getCharacterMetrics() to
	      // distinguish Unicode characters without metrics and those for
	      // which we want to simulate the letter M.


	      symbol = {
	        type: "textord",
	        mode: "text",
	        loc: SourceLocation.range(nucleus),
	        text
	      };
	    } else {
	      return null; // EOF, ^, _, {, }, etc.
	    }

	    this.consume(); // Transform combining characters into accents

	    if (match) {
	      for (var i = 0; i < match[0].length; i++) {
	        var accent = match[0][i];

	        if (!unicodeAccents[accent]) {
	          throw new ParseError("Unknown accent ' " + accent + "'", nucleus);
	        }

	        var command = unicodeAccents[accent][this.mode] || unicodeAccents[accent].text;

	        if (!command) {
	          throw new ParseError("Accent " + accent + " unsupported in " + this.mode + " mode", nucleus);
	        }

	        symbol = {
	          type: "accent",
	          mode: this.mode,
	          loc: SourceLocation.range(nucleus),
	          label: command,
	          isStretchy: false,
	          isShifty: true,
	          // $FlowFixMe
	          base: symbol
	        };
	      }
	    } // $FlowFixMe


	    return symbol;
	  }

	}
	Parser.endOfExpression = ["}", "\\endgroup", "\\end", "\\right", "&"];

	/**
	 * Provides a single function for parsing an expression using a Parser
	 * TODO(emily): Remove this
	 */

	/**
	 * Parses an expression using a Parser, then returns the parsed result.
	 */
	var parseTree = function parseTree(toParse, settings) {
	  if (!(typeof toParse === 'string' || toParse instanceof String)) {
	    throw new TypeError('KaTeX can only parse string typed expression');
	  }

	  var parser = new Parser(toParse, settings); // Blank out any \df@tag to avoid spurious "Duplicate \tag" errors

	  delete parser.gullet.macros.current["\\df@tag"];
	  var tree = parser.parse(); // Prevent a color definition from persisting between calls to katex.render().

	  delete parser.gullet.macros.current["\\current@color"];
	  delete parser.gullet.macros.current["\\color"]; // If the input used \tag, it will set the \df@tag macro to the tag.
	  // In this case, we separately parse the tag and wrap the tree.

	  if (parser.gullet.macros.get("\\df@tag")) {
	    if (!settings.displayMode) {
	      throw new ParseError("\\tag works only in display equations");
	    }

	    tree = [{
	      type: "tag",
	      mode: "text",
	      body: tree,
	      tag: parser.subparse([new Token("\\df@tag")])
	    }];
	  }

	  return tree;
	};

	/* eslint no-console:0 */

	/**
	 * Parse and build an expression, and place that expression in the DOM node
	 * given.
	 */
	var render = function render(expression, baseNode, options) {
	  baseNode.textContent = "";
	  var node = renderToDomTree(expression, options).toNode();
	  baseNode.appendChild(node);
	}; // KaTeX's styles don't work properly in quirks mode. Print out an error, and
	// disable rendering.


	if (typeof document !== "undefined") {
	  if (document.compatMode !== "CSS1Compat") {
	    typeof console !== "undefined" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your " + "website has a suitable doctype.");

	    render = function render() {
	      throw new ParseError("KaTeX doesn't work in quirks mode.");
	    };
	  }
	}
	/**
	 * Parse and build an expression, and return the markup for that.
	 */


	var renderToString = function renderToString(expression, options) {
	  var markup = renderToDomTree(expression, options).toMarkup();
	  return markup;
	};
	/**
	 * Parse an expression and return the parse tree.
	 */


	var generateParseTree = function generateParseTree(expression, options) {
	  var settings = new Settings(options);
	  return parseTree(expression, settings);
	};
	/**
	 * If the given error is a KaTeX ParseError and options.throwOnError is false,
	 * renders the invalid LaTeX as a span with hover title giving the KaTeX
	 * error message.  Otherwise, simply throws the error.
	 */


	var renderError = function renderError(error, expression, options) {
	  if (options.throwOnError || !(error instanceof ParseError)) {
	    throw error;
	  }

	  var node = buildCommon.makeSpan(["katex-error"], [new SymbolNode(expression)]);
	  node.setAttribute("title", error.toString());
	  node.setAttribute("style", "color:" + options.errorColor);
	  return node;
	};
	/**
	 * Generates and returns the katex build tree. This is used for advanced
	 * use cases (like rendering to custom output).
	 */


	var renderToDomTree = function renderToDomTree(expression, options) {
	  var settings = new Settings(options);

	  try {
	    var tree = parseTree(expression, settings);
	    return buildTree(tree, expression, settings);
	  } catch (error) {
	    return renderError(error, expression, settings);
	  }
	};
	/**
	 * Generates and returns the katex build tree, with just HTML (no MathML).
	 * This is used for advanced use cases (like rendering to custom output).
	 */


	var renderToHTMLTree = function renderToHTMLTree(expression, options) {
	  var settings = new Settings(options);

	  try {
	    var tree = parseTree(expression, settings);
	    return buildHTMLTree(tree, expression, settings);
	  } catch (error) {
	    return renderError(error, expression, settings);
	  }
	};

	var katex = {
	  /**
	   * Current KaTeX version
	   */
	  version: "0.15.6",

	  /**
	   * Renders the given LaTeX into an HTML+MathML combination, and adds
	   * it as a child to the specified DOM node.
	   */
	  render,

	  /**
	   * Renders the given LaTeX into an HTML+MathML combination string,
	   * for sending to the client.
	   */
	  renderToString,

	  /**
	   * KaTeX error, usually during parsing.
	   */
	  ParseError,

	  /**
	   * The shema of Settings
	   */
	  SETTINGS_SCHEMA,

	  /**
	   * Parses the given LaTeX into KaTeX's internal parse tree structure,
	   * without rendering to HTML or MathML.
	   *
	   * NOTE: This method is not currently recommended for public use.
	   * The internal tree representation is unstable and is very likely
	   * to change. Use at your own risk.
	   */
	  __parse: generateParseTree,

	  /**
	   * Renders the given LaTeX into an HTML+MathML internal DOM tree
	   * representation, without flattening that representation to a string.
	   *
	   * NOTE: This method is not currently recommended for public use.
	   * The internal tree representation is unstable and is very likely
	   * to change. Use at your own risk.
	   */
	  __renderToDomTree: renderToDomTree,

	  /**
	   * Renders the given LaTeX into an HTML internal DOM tree representation,
	   * without MathML and without flattening that representation to a string.
	   *
	   * NOTE: This method is not currently recommended for public use.
	   * The internal tree representation is unstable and is very likely
	   * to change. Use at your own risk.
	   */
	  __renderToHTMLTree: renderToHTMLTree,

	  /**
	   * extends internal font metrics object with a new object
	   * each key in the new object represents a font name
	  */
	  __setFontMetrics: setFontMetrics,

	  /**
	   * adds a new symbol to builtin symbols table
	   */
	  __defineSymbol: defineSymbol,

	  /**
	   * adds a new macro to builtin macro list
	   */
	  __defineMacro: defineMacro,

	  /**
	   * Expose the dom tree node types, which can be useful for type checking nodes.
	   *
	   * NOTE: This method is not currently recommended for public use.
	   * The internal tree representation is unstable and is very likely
	   * to change. Use at your own risk.
	   */
	  __domTree: {
	    Span,
	    Anchor: Anchor$1,
	    SymbolNode,
	    SvgNode,
	    PathNode,
	    LineNode
	  }
	};

	/* node_modules/svelte-katex/Katex.svelte generated by Svelte v4.2.19 */
	const file$y = "node_modules/svelte-katex/Katex.svelte";

	function create_fragment$G(ctx) {
		let span0;
		let t;
		let span1;
		let current;
		const default_slot_template = /*#slots*/ ctx[4].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

		const block = {
			c: function create() {
				span0 = element("span");
				if (default_slot) default_slot.c();
				t = space();
				span1 = element("span");
				set_style(span0, "display", "none");
				add_location(span0, file$y, 12, 0, 337);
				add_location(span1, file$y, 17, 0, 434);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, span0, anchor);

				if (default_slot) {
					default_slot.m(span0, null);
				}

				/*span0_binding*/ ctx[5](span0);
				insert_dev(target, t, anchor);
				insert_dev(target, span1, anchor);
				/*span1_binding*/ ctx[6](span1);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[3],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(span0);
					detach_dev(t);
					detach_dev(span1);
				}

				if (default_slot) default_slot.d(detaching);
				/*span0_binding*/ ctx[5](null);
				/*span1_binding*/ ctx[6](null);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$G.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$m($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Katex', slots, ['default']);
		let { displayMode = false } = $$props;
		let output;
		let latex;

		// trigger re-rendering on state change
		afterUpdate(async () => {
			katex.render(latex.textContent, output, { displayMode });
		});

		const writable_props = ['displayMode'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Katex> was created with unknown prop '${key}'`);
		});

		function span0_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				latex = $$value;
				$$invalidate(1, latex);
			});
		}

		function span1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				output = $$value;
				$$invalidate(0, output);
			});
		}

		$$self.$$set = $$props => {
			if ('displayMode' in $$props) $$invalidate(2, displayMode = $$props.displayMode);
			if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			katex,
			afterUpdate,
			displayMode,
			output,
			latex
		});

		$$self.$inject_state = $$props => {
			if ('displayMode' in $$props) $$invalidate(2, displayMode = $$props.displayMode);
			if ('output' in $$props) $$invalidate(0, output = $$props.output);
			if ('latex' in $$props) $$invalidate(1, latex = $$props.latex);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [output, latex, displayMode, $$scope, slots, span0_binding, span1_binding];
	}

	class Katex extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$m, create_fragment$G, safe_not_equal, { displayMode: 2 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Katex",
				options,
				id: create_fragment$G.name
			});
		}

		get displayMode() {
			throw new Error("<Katex>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set displayMode(value) {
			throw new Error("<Katex>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	// functions for computing the reward and visualizing the Environment

	// calculate reward
	function gaussianPDF(x, y, mean, variance) {
	const dx = x - mean.x;
	const dy = y - mean.y;
	// simplified pdf as we do not allow covariance
	return Math.exp(-(dx ** 2 + dy ** 2) / (2 * variance)) / (2 * Math.PI * variance);
	}


	// Density (reward for whole grid)
	function computeDensity(grid, gaussians) {
	  const { x, y } = grid;
	  const density = Array.from({ length: x.length }, () => Array(y.length).fill(0));
	  for (const { mean, variance } of gaussians) {
	    for (let i = 0; i < x.length; i++) {
	      for (let j = 0; j < y.length; j++) {
	        density[j][i] += gaussianPDF(x[i], y[j], mean, variance);
	      }
	    }
	  }
	  return density;
	}
	function plotEnvironment(Plotly, containerId, gaussians, options = {}) {
	  const gridSize = options.gridSize || 100;
	  const alpha2D = options.alpha2D || 1.0;
	  const alpha3D = options.alpha3D || 0.8;

	  // Generate grid
	  const range = [-3, 3];
	  const x = Array.from({ length: gridSize }, (_, i) => range[0] + i * (range[1] - range[0]) / (gridSize - 1));
	  const y = Array.from({ length: gridSize }, (_, i) => range[0] + i * (range[1] - range[0]) / (gridSize - 1));

	  const density = computeDensity({ x, y }, gaussians);

	  // 2D plot data
	  const contourData = {
	    x: x,
	    y: y,
	    z: density,
	    type: "contour",
	    colorscale: "Viridis",
	    opacity: alpha2D,
	    contours: { coloring: "fill", showlines: false },
	    //colorbar: { len: 0.8, x: 0.45, thickness: 20 }, // Position shared colorbar in the middle
	    showscale: false
	  };

	  // 3D plot data
	  const surfaceData = {
	    x: x,
	    y: y,
	    z: density,
	    type: "surface",
	    colorscale: "Viridis",
	    opacity: alpha3D,
	    showscale: false,
	  };

	  const layout_both = {
	    title: options.title || null,
	    grid: { rows: 1, columns: 2, pattern: "independent" },
	    xaxis: { title: "x", domain: [0, 0.45] }, // Left plot domain
	    yaxis: { title: "y", scaleanchor: "x" },
	    scene: { domain: { x: [0.55, 1] } }, // Right plot domain for 3D scene
	    margin: { t: 50, b: 50, l: 50, r: 50 },
	  };

	  const layout_2d = {
	    width: 300,
	    height: 300,
	    showlegend: false,
	    title: options.title || null,
	    xaxis: { title: null, range: [-3, 3] },
	    yaxis: { title: null, scaleanchor: "x", range: [-3, 3] },
	    margin: { t: 10, b: 25, l: 25, r: 10 },
	  };

	  const layout_3d = {
	    width: 600,
	    height: 600,
	    showlegend: false,
	    title: options.title || null,
	    scene: {
	        xaxis: { title: "x", range: [-3, 3] },
	        yaxis: { title: "y", range: [-3, 3] },
	        zaxis: { title: "Reward", range: [0,1] } // Rename the Z axis
	    },
	    margin: { t: 10, b: 10, l: 10, r: 10 },
	  };

	  const config = {
	    staticplot: true,
	    displayModeBar: false, // Hide toolbar
	  };

	  if (containerId === "plot-container" || containerId === "plot-container2") {
	    Plotly.react(containerId, [contourData, surfaceData], layout_both, config);
	  } else if (containerId === "plot-container2d") {
	    Plotly.react(containerId, [contourData], layout_2d, config);
	  } else if (containerId === "plot-container3d") {
	    Plotly.react(containerId, [surfaceData], layout_3d, config);
	  }

	}

	function linspace(start, stop, num) {
	    const step = (stop - start) / (num-1);
	    return Array.from({length: num}, (_, i) => start + step * i);
	}

	function plotStates(Plotly, gaussians, states, losses, options = {}) {
	    const {
	        levels = 10,
	        alpha = 1.0,
	        gridSize = 100,
	        colormap = 'Viridis',
	    } = options;

	    let sec_col = 'rgb(51, 51, 51)';
	    let f_col = "rgb(120, 208, 78)";
	    // Extract final states
	    const x = states.map(s => s[0]);
	    const y = states.map(s => s[1]);

	    // Create grid for density plot
	    //const [xGrid, yGrid, gridPoints] = grid(gridSize);
	    const ls = linspace(-3, 3, gridSize);

	    let densityEnv = computeDensity({x:ls,y:ls}, gaussians);
	    densityEnv = densityEnv.map(row => row.slice());
	    const densityEnvTransposed = densityEnv[0].map((_, colIndex) => densityEnv.map(row => row[colIndex]));

	    // Compute marginal densities
	    const densityX = densityEnv.reduce((sum, row) => sum.map((v, i) => v + row[i]), Array(gridSize).fill(0));
	    const densityY = densityEnvTransposed.reduce((sum, row) => sum.map((v, i) => v + row[i]), Array(gridSize).fill(0));

	    // Normalize marginals
	    const normfact = 6/((gridSize-1)*gaussians.length);
	    densityX.forEach((v, i) => densityX[i] *= normfact);
	    densityY.forEach((v, i) => densityY[i] *= normfact);

	    // Prepare losses
	    const iters = Array.from(Array(losses['n_iterations']+1),(x,i)=>i);

	    // Contour plot for density
	    const contourTrace = {
	        x: ls,
	        y: ls,
	        z: densityEnv,
	        type: 'contour',
	        colorscale: colormap,
	        showscale:false,
	        contours: { coloring: 'lines'},
	        line:{width: 2},
	        showlegend:false,
	    };

	    // Scatter plot for sampled states
	    const samplesTrace = {
	        x: x,
	        y: y,
	        mode: 'markers',
	        type: 'scatter',
	        marker: { color: sec_col, symbol: 137, opacity: alpha },
	        showlegend:false,
	    };

	    // Marginal histograms
	    const histX = {
	        x: x,
	        type: 'histogram',
	        histnorm: 'probability density',
	        marker: { color: sec_col },
	        xaxis: 'x2',
	        yaxis: 'y2',
	        xbins: {size:0.2},
	        showlegend:false,
	    };
	    const histY = {
	        y: y,
	        type: 'histogram',
	        histnorm: 'probability density',
	        marker: { color: sec_col },
	        xaxis: 'x3',
	        yaxis: 'y3',
	        orientation: 'h',
	        ybins: {size:0.2},
	        showlegend:false,
	    };

	    // Marginal lines
	    const densX = {
	        x: ls,
	        y: densityX,
	        type: 'scatter',
	        xaxis: 'x2',
	        yaxis: 'y2',
	        mode:'lines',
	        marker: { color: f_col },
	        showlegend:false,
	    };
	    const densY = {
	        y: ls,
	        x: densityY,
	        type: 'scatter',
	        xaxis: 'x3',
	        yaxis: 'y3',
	        orientation: 'h',
	        mode:'lines',
	        marker: { color: f_col },
	        showlegend:false,
	    };

	    //Losses
	    const lossplot = {
	        x:iters,
	        y:losses['losses'],
	        name: 'Loss',
	        textposition: 'top',
	        type:'scatter',
	        mode:'lines',
	        xaxis: 'x4',
	        yaxis: 'y4',
	        line: { color: '#1f77b4', width: 1},
	    };
	    const logzplot = {
	        x:iters,
	        y:losses['logzs'],
	        name: 'logZ',
	        type:'scatter',
	        mode:'lines',
	        xaxis: 'x4',
	        yaxis: 'y4',
	        line: { color: '#ff7f0e', width: 1},
	    };
	    const truelogzplot = {
	        x:iters,
	        y:losses['truelogz'],
	        name: 'True logZ',
	        type:'scatter',
	        mode:'lines',
	        xaxis: 'x4',
	        yaxis: 'y4',
	        line: { color: '#d62728', width: 1},
	    };

	    // Layout configuration
	    const layout = {
	        title: `Iteration ${losses['losses'].length}/${losses['n_iterations']} `,
	        showlegend:true,
	        legend: {
	            x: 0.75,
	            y: 1,
	            xanchor: 'right',
	            yanchor: 'top',
	        },
	        autosize: false,
	        width: 775,
	        height: 775,
	        grid: { rows: 2, columns: 2, subplots: [['xy', 'x2y2'], ['x3y3', 'x4y4']] },
	        xaxis: { domain: [0, 0.75], title: "x", range: [-3, 3] },
	        yaxis: { domain: [0, 0.75], title: "y", range: [-3, 3] },
	        xaxis2: { domain: [0, 0.75], showticklabels: false, title: 'Marginal of x', side:'top', anchor: 'y2',scaleanchor:'x',  range: [-3, 3]},
	        yaxis2: { domain: [0.8, 1], showticklabels: true, range:[0, 0.61] },
	        xaxis3: { domain: [0.8, 1], showticklabels: true, range:[0, 0.61] },
	        yaxis3: { domain: [0, 0.75], showticklabels: false, title: 'Marginal of y', side:'right', anchor: 'x3', scaleanchor:'y', range: [-3,3]},
	        xaxis4: { domain: [0.8, 1], showticklabels: true, range:[0, losses['n_iterations']] },
	        yaxis4: { domain: [0.8, 1], showticklabels: true, range: [-1, 3]}
	    };

	    const allplots = [contourTrace, samplesTrace, histX, histY, densY, densX, lossplot, logzplot, truelogzplot];
	    Plotly.react('trainplot', allplots, layout);
	}

	function plot_flow(p, vectors) {
	    const scl = 50;
	    let cols, rows;
	    let particles = [];
	    let flowfield;

	    p.setup = () => {
	      p.createCanvas(vectors.cols*scl, vectors.rows*scl);
	      cols = Math.ceil(vectors.cols);
	      rows = Math.ceil(vectors.rows);

	      //generate flowfield from passed vectors
	      flowfield = new Array(vectors.cols * vectors.rows);

	      for (let i = 0; i < flowfield.length; i++) {
	        let vData = vectors.vectors[i];
	        flowfield[i] = p.createVector(vData.x, vData.y);
	    }

	      for (let i = 0; i < 1000; i++) {
	        particles[i] = new Particle();
	      }
	    };

	    p.draw = () => {
	      p.translate(p.height / 2, p.height / 2);
	      p.scale(1, -1);
	      p.fill(0, 10);
	      p.rect(-p.width, -p.height, 2 * p.width, 2 * p.height);

	      for (let i = 0; i < particles.length; i++) {
	        particles[i].follow(flowfield);
	        particles[i].update();
	        particles[i].edges();
	      }
	    };

	    class Particle {
	      constructor() {
	        this.pos = p.createVector(p.random(-p.width / 2, p.width / 2), p.random(-p.height / 2, p.height / 2));
	        this.vel = p.createVector(0, 0);
	        this.acc = p.createVector(0, 0);
	        this.maxspeed = 1;
	        this.steerStrength = 0.4;
	        this.prevPos = this.pos.copy();
	        this.size = 4;
	      }

	      update() {
	        this.vel.add(this.acc);
	        this.vel.limit(this.maxspeed);
	        this.pos.add(this.vel);
	        this.acc.mult(0);
	        p.noStroke();
	        p.fill(255);
	        p.circle(this.pos.x, this.pos.y, this.size);
	      }

	      follow(vectors) {
	        let x = Math.floor(p.map(this.pos.x, -p.width / 2, p.width / 2, 0, cols - 1, true));
	        let y = Math.floor(p.map(this.pos.y, -p.height / 2, p.height / 2, 0, rows - 1, true));
	        let index = y * cols + x;
	        let force = vectors[index].copy();
	        force.mult(this.steerStrength);
	        this.applyForce(force);
	      }

	      applyForce(force) {
	        this.acc.add(force);
	      }

	      updatePrev() {
	        this.prevPos.x = this.pos.x;
	        this.prevPos.y = this.pos.y;
	      }

	      edges() {
	        if (this.pos.x > p.width / 2 || this.pos.x < -p.width / 2 ||
	        this.pos.y > p.height / 2 || this.pos.y < -p.height / 2) {

	        // Respawn at a random position inside the canvas
	        this.pos = p.createVector(
	            p.random(-p.width / 2, p.width / 2),
	            p.random(-p.height / 2, p.height / 2)
	        );

	        // Reset velocity and acceleration to zero
	        this.vel.set(0, 0);
	        this.acc.set(0, 0);

	        // Update previous position for smooth movement
	        this.updatePrev();

	        }
	      }
	    }
	  }

	function classMap(classObj) {
	    return Object.entries(classObj)
	        .filter(([name, value]) => name !== '' && value)
	        .map(([name]) => name)
	        .join(' ');
	}

	function dispatch(element, eventType, detail, eventInit = { bubbles: true }, 
	/** This is an internal thing used by SMUI to duplicate some SMUI events as MDC events. */
	duplicateEventForMDC = false) {
	    if (typeof Event === 'undefined') {
	        throw new Error('Event not defined.');
	    }
	    if (!element) {
	        throw new Error('Tried to dipatch event without element.');
	    }
	    const event = new CustomEvent(eventType, Object.assign(Object.assign({}, eventInit), { detail }));
	    element === null || element === void 0 ? void 0 : element.dispatchEvent(event);
	    if (duplicateEventForMDC && eventType.startsWith('SMUI')) {
	        const duplicateEvent = new CustomEvent(eventType.replace(/^SMUI/g, () => 'MDC'), Object.assign(Object.assign({}, eventInit), { detail }));
	        element === null || element === void 0 ? void 0 : element.dispatchEvent(duplicateEvent);
	        if (duplicateEvent.defaultPrevented) {
	            event.preventDefault();
	        }
	    }
	    return event;
	}

	function exclude(obj, keys) {
	    let names = Object.getOwnPropertyNames(obj);
	    const newObj = {};
	    for (let i = 0; i < names.length; i++) {
	        const name = names[i];
	        const cashIndex = name.indexOf('$');
	        if (cashIndex !== -1 &&
	            keys.indexOf(name.substring(0, cashIndex + 1)) !== -1) {
	            continue;
	        }
	        if (keys.indexOf(name) !== -1) {
	            continue;
	        }
	        newObj[name] = obj[name];
	    }
	    return newObj;
	}

	// Match old modifiers. (only works on DOM events)
	const oldModifierRegex = /^[a-z]+(?::(?:preventDefault|stopPropagation|passive|nonpassive|capture|once|self))+$/;
	// Match new modifiers.
	const newModifierRegex = /^[^$]+(?:\$(?:preventDefault|stopPropagation|passive|nonpassive|capture|once|self))+$/;
	function forwardEventsBuilder(component) {
	    // This is our pseudo $on function. It is defined on component mount.
	    let $on;
	    // This is a list of events bound before mount.
	    let events = [];
	    // And we override the $on function to forward all bound events.
	    component.$on = (fullEventType, callback) => {
	        let eventType = fullEventType;
	        let destructor = () => { };
	        if ($on) {
	            // The event was bound programmatically.
	            destructor = $on(eventType, callback);
	        }
	        else {
	            // The event was bound before mount by Svelte.
	            events.push([eventType, callback]);
	        }
	        const oldModifierMatch = eventType.match(oldModifierRegex);
	        if (oldModifierMatch && console) {
	            console.warn('Event modifiers in SMUI now use "$" instead of ":", so that ' +
	                'all events can be bound with modifiers. Please update your ' +
	                'event binding: ', eventType);
	        }
	        return () => {
	            destructor();
	        };
	    };
	    function bubble(e) {
	        // Internally bubble the event up from Svelte components.
	        const callbacks = component.$$.callbacks[e.type];
	        if (callbacks) {
	            // @ts-ignore
	            callbacks.slice().forEach((fn) => fn.call(this, e));
	        }
	    }
	    return (node) => {
	        const destructors = [];
	        const forwardDestructors = {};
	        // This function is responsible for listening and forwarding
	        // all bound events.
	        $on = (fullEventType, callback) => {
	            let eventType = fullEventType;
	            let handler = callback;
	            // DOM addEventListener options argument.
	            let options = false;
	            const oldModifierMatch = eventType.match(oldModifierRegex);
	            const newModifierMatch = eventType.match(newModifierRegex);
	            const modifierMatch = oldModifierMatch || newModifierMatch;
	            if (eventType.match(/^SMUI:\w+:/)) {
	                const newEventTypeParts = eventType.split(':');
	                let newEventType = '';
	                for (let i = 0; i < newEventTypeParts.length; i++) {
	                    newEventType +=
	                        i === newEventTypeParts.length - 1
	                            ? ':' + newEventTypeParts[i]
	                            : newEventTypeParts[i]
	                                .split('-')
	                                .map((value) => value.slice(0, 1).toUpperCase() + value.slice(1))
	                                .join('');
	                }
	                console.warn(`The event ${eventType.split('$')[0]} has been renamed to ${newEventType.split('$')[0]}.`);
	                eventType = newEventType;
	            }
	            if (modifierMatch) {
	                // Parse the event modifiers.
	                // Supported modifiers:
	                // - preventDefault
	                // - stopPropagation
	                // - stopImmediatePropagation
	                // - passive
	                // - nonpassive
	                // - capture
	                // - once
	                // - self
	                // - trusted
	                const parts = eventType.split(oldModifierMatch ? ':' : '$');
	                eventType = parts[0];
	                const eventOptions = parts.slice(1).reduce((obj, mod) => {
	                    obj[mod] = true;
	                    return obj;
	                }, {});
	                if (eventOptions.passive) {
	                    options = options || {};
	                    options.passive = true;
	                }
	                if (eventOptions.nonpassive) {
	                    options = options || {};
	                    options.passive = false;
	                }
	                if (eventOptions.capture) {
	                    options = options || {};
	                    options.capture = true;
	                }
	                if (eventOptions.once) {
	                    options = options || {};
	                    options.once = true;
	                }
	                if (eventOptions.preventDefault) {
	                    handler = prevent_default(handler);
	                }
	                if (eventOptions.stopPropagation) {
	                    handler = stop_propagation(handler);
	                }
	                if (eventOptions.stopImmediatePropagation) {
	                    handler = stop_immediate_propagation(handler);
	                }
	                if (eventOptions.self) {
	                    handler = self_event(node, handler);
	                }
	                if (eventOptions.trusted) {
	                    handler = trusted_event(handler);
	                }
	            }
	            // Listen for the event directly, with the given options.
	            const off = listen(node, eventType, handler, options);
	            const destructor = () => {
	                off();
	                const idx = destructors.indexOf(destructor);
	                if (idx > -1) {
	                    destructors.splice(idx, 1);
	                }
	            };
	            destructors.push(destructor);
	            // Forward the event from Svelte.
	            if (!(eventType in forwardDestructors)) {
	                forwardDestructors[eventType] = listen(node, eventType, bubble);
	            }
	            return destructor;
	        };
	        for (let i = 0; i < events.length; i++) {
	            // Listen to all the events added before mount.
	            $on(events[i][0], events[i][1]);
	        }
	        return {
	            destroy: () => {
	                // Remove all event listeners.
	                for (let i = 0; i < destructors.length; i++) {
	                    destructors[i]();
	                }
	                // Remove all event forwarders.
	                for (let entry of Object.entries(forwardDestructors)) {
	                    entry[1]();
	                }
	            },
	        };
	    };
	}
	function listen(node, event, handler, options) {
	    node.addEventListener(event, handler, options);
	    return () => node.removeEventListener(event, handler, options);
	}
	function prevent_default(fn) {
	    return function (event) {
	        event.preventDefault();
	        // @ts-ignore
	        return fn.call(this, event);
	    };
	}
	function stop_propagation(fn) {
	    return function (event) {
	        event.stopPropagation();
	        // @ts-ignore
	        return fn.call(this, event);
	    };
	}
	function stop_immediate_propagation(fn) {
	    return function (event) {
	        event.stopImmediatePropagation();
	        // @ts-ignore
	        return fn.call(this, event);
	    };
	}
	function self_event(node, fn) {
	    return function (event) {
	        if (event.target !== node) {
	            return;
	        }
	        // @ts-ignore
	        return fn.call(this, event);
	    };
	}
	function trusted_event(fn) {
	    return function (event) {
	        if (!event.isTrusted) {
	            return;
	        }
	        // @ts-ignore
	        return fn.call(this, event);
	    };
	}

	function prefixFilter(obj, prefix) {
	    let names = Object.getOwnPropertyNames(obj);
	    const newObj = {};
	    for (let i = 0; i < names.length; i++) {
	        const name = names[i];
	        if (name.substring(0, prefix.length) === prefix) {
	            newObj[name.substring(prefix.length)] = obj[name];
	        }
	    }
	    return newObj;
	}

	function useActions(node, actions) {
	    let actionReturns = [];
	    if (actions) {
	        for (let i = 0; i < actions.length; i++) {
	            const actionEntry = actions[i];
	            const action = Array.isArray(actionEntry) ? actionEntry[0] : actionEntry;
	            if (Array.isArray(actionEntry) && actionEntry.length > 1) {
	                actionReturns.push(action(node, actionEntry[1]));
	            }
	            else {
	                actionReturns.push(action(node));
	            }
	        }
	    }
	    return {
	        update(actions) {
	            if (((actions && actions.length) || 0) != actionReturns.length) {
	                throw new Error('You must not change the length of an actions array.');
	            }
	            if (actions) {
	                for (let i = 0; i < actions.length; i++) {
	                    const returnEntry = actionReturns[i];
	                    if (returnEntry && returnEntry.update) {
	                        const actionEntry = actions[i];
	                        if (Array.isArray(actionEntry) && actionEntry.length > 1) {
	                            returnEntry.update(actionEntry[1]);
	                        }
	                        else {
	                            returnEntry.update();
	                        }
	                    }
	                }
	            }
	        },
	        destroy() {
	            for (let i = 0; i < actionReturns.length; i++) {
	                const returnEntry = actionReturns[i];
	                if (returnEntry && returnEntry.destroy) {
	                    returnEntry.destroy();
	                }
	            }
	        },
	    };
	}

	/* node_modules/@smui-extra/accordion/dist/Accordion.svelte generated by Svelte v4.2.19 */
	const file$x = "node_modules/@smui-extra/accordion/dist/Accordion.svelte";

	function create_fragment$F(ctx) {
		let div;
		let div_class_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[13].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

		let div_levels = [
			{
				class: div_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'smui-accordion': true,
					'smui-accordion--multiple': /*multiple*/ ctx[2],
					'smui-accordion--with-open-dialog': /*withOpenDialog*/ ctx[4]
				})
			},
			/*$$restProps*/ ctx[10]
		];

		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$x, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding*/ ctx[14](div);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[5].call(null, div)),
						listen_dev(div, "SMUIAccordionPanel:mount", /*handlePanelMount*/ ctx[6], false, false, false, false),
						listen_dev(div, "SMUIAccordionPanel:unmount", /*handlePanelUnmount*/ ctx[7], false, false, false, false),
						listen_dev(div, "SMUIAccordionPanel:activate", /*handlePanelActivate*/ ctx[8], false, false, false, false),
						listen_dev(div, "SMUIAccordionPanel:opening", /*handlePanelOpening*/ ctx[9], false, false, false, false),
						listen_dev(div, "SMUIDialog:opening", /*SMUIDialog_opening_handler*/ ctx[15], true, false, false, false),
						listen_dev(div, "SMUIDialog:closed", /*SMUIDialog_closed_handler*/ ctx[16], true, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[12],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
							null
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					(!current || dirty & /*className, multiple, withOpenDialog*/ 22 && div_class_value !== (div_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'smui-accordion': true,
						'smui-accordion--multiple': /*multiple*/ ctx[2],
						'smui-accordion--with-open-dialog': /*withOpenDialog*/ ctx[4]
					}))) && { class: div_class_value },
					dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding*/ ctx[14](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$F.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$l($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","class","multiple","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Accordion', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { multiple = false } = $$props;
		let element;
		let panelAccessorSet = new Set();
		let withOpenDialog = false;

		function handlePanelMount(event) {
			const accessor = event.detail;

			// Stop propagation so accordion's above this one don't receive the event.
			event.stopPropagation();

			if (!multiple && accessor.open) {
				const currentOpen = Array.from(panelAccessorSet).find(accessor => accessor.open);

				if (currentOpen) {
					currentOpen.setOpen(false);
				}
			}

			panelAccessorSet.add(accessor);
		}

		function handlePanelUnmount(event) {
			const accessor = event.detail;

			// Nested check.
			if (!panelAccessorSet.has(accessor)) {
				return;
			}

			// Stop propagation so accordion's above this one don't receive the event.
			event.stopPropagation();

			panelAccessorSet.delete(accessor);
		}

		function handlePanelActivate(event) {
			const { accessor } = event.detail;

			// Nested check.
			if (!panelAccessorSet.has(accessor)) {
				return;
			}

			if (!multiple && !accessor.open) {
				const currentOpen = Array.from(panelAccessorSet).find(accessor => accessor.open);

				if (currentOpen) {
					currentOpen.setOpen(false);
				}
			}

			accessor.setOpen(!accessor.open);
		}

		function handlePanelOpening(event) {
			const { accessor } = event.detail;

			// Nested check.
			if (!panelAccessorSet.has(accessor)) {
				return;
			}

			if (!multiple) {
				const otherOpen = Array.from(panelAccessorSet).filter(checkAccessor => checkAccessor !== accessor && checkAccessor.open);
				otherOpen.forEach(accessor => accessor.setOpen(false));
			}
		}

		function getElement() {
			return element;
		}

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(3, element);
			});
		}

		const SMUIDialog_opening_handler = () => $$invalidate(4, withOpenDialog = true);
		const SMUIDialog_closed_handler = () => $$invalidate(4, withOpenDialog = false);

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('multiple' in $$new_props) $$invalidate(2, multiple = $$new_props.multiple);
			if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			forwardEvents,
			use,
			className,
			multiple,
			element,
			panelAccessorSet,
			withOpenDialog,
			handlePanelMount,
			handlePanelUnmount,
			handlePanelActivate,
			handlePanelOpening,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('multiple' in $$props) $$invalidate(2, multiple = $$new_props.multiple);
			if ('element' in $$props) $$invalidate(3, element = $$new_props.element);
			if ('panelAccessorSet' in $$props) panelAccessorSet = $$new_props.panelAccessorSet;
			if ('withOpenDialog' in $$props) $$invalidate(4, withOpenDialog = $$new_props.withOpenDialog);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			multiple,
			element,
			withOpenDialog,
			forwardEvents,
			handlePanelMount,
			handlePanelUnmount,
			handlePanelActivate,
			handlePanelOpening,
			$$restProps,
			getElement,
			$$scope,
			slots,
			div_binding,
			SMUIDialog_opening_handler,
			SMUIDialog_closed_handler
		];
	}

	class Accordion extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$l, create_fragment$F, safe_not_equal, {
				use: 0,
				class: 1,
				multiple: 2,
				getElement: 11
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Accordion",
				options,
				id: create_fragment$F.name
			});
		}

		get use() {
			throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get multiple() {
			throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set multiple(value) {
			throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[11];
		}

		set getElement(value) {
			throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/paper/dist/Paper.svelte generated by Svelte v4.2.19 */
	const file$w = "node_modules/@smui/paper/dist/Paper.svelte";

	function create_fragment$E(ctx) {
		let div;
		let div_class_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[12].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

		let div_levels = [
			{
				class: div_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'smui-paper': true,
					'smui-paper--raised': /*variant*/ ctx[2] === 'raised',
					'smui-paper--unelevated': /*variant*/ ctx[2] === 'unelevated',
					'smui-paper--outlined': /*variant*/ ctx[2] === 'outlined',
					['smui-paper--elevation-z' + /*elevation*/ ctx[5]]: /*elevation*/ ctx[5] !== 0 && /*variant*/ ctx[2] === 'raised',
					'smui-paper--rounded': !/*square*/ ctx[3],
					['smui-paper--color-' + /*color*/ ctx[4]]: /*color*/ ctx[4] !== 'default',
					'smui-paper-transition': /*transition*/ ctx[6]
				})
			},
			/*$$restProps*/ ctx[9]
		];

		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$w, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding*/ ctx[13](div);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[8].call(null, div))
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[11],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
							null
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					(!current || dirty & /*className, variant, elevation, square, color, transition*/ 126 && div_class_value !== (div_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'smui-paper': true,
						'smui-paper--raised': /*variant*/ ctx[2] === 'raised',
						'smui-paper--unelevated': /*variant*/ ctx[2] === 'unelevated',
						'smui-paper--outlined': /*variant*/ ctx[2] === 'outlined',
						['smui-paper--elevation-z' + /*elevation*/ ctx[5]]: /*elevation*/ ctx[5] !== 0 && /*variant*/ ctx[2] === 'raised',
						'smui-paper--rounded': !/*square*/ ctx[3],
						['smui-paper--color-' + /*color*/ ctx[4]]: /*color*/ ctx[4] !== 'default',
						'smui-paper-transition': /*transition*/ ctx[6]
					}))) && { class: div_class_value },
					dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding*/ ctx[13](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$E.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$k($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","class","variant","square","color","elevation","transition","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Paper', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { variant = 'raised' } = $$props;
		let { square = false } = $$props;
		let { color = 'default' } = $$props;
		let { elevation = 1 } = $$props;
		let { transition = false } = $$props;
		let element;

		function getElement() {
			return element;
		}

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(7, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('variant' in $$new_props) $$invalidate(2, variant = $$new_props.variant);
			if ('square' in $$new_props) $$invalidate(3, square = $$new_props.square);
			if ('color' in $$new_props) $$invalidate(4, color = $$new_props.color);
			if ('elevation' in $$new_props) $$invalidate(5, elevation = $$new_props.elevation);
			if ('transition' in $$new_props) $$invalidate(6, transition = $$new_props.transition);
			if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			forwardEvents,
			use,
			className,
			variant,
			square,
			color,
			elevation,
			transition,
			element,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('variant' in $$props) $$invalidate(2, variant = $$new_props.variant);
			if ('square' in $$props) $$invalidate(3, square = $$new_props.square);
			if ('color' in $$props) $$invalidate(4, color = $$new_props.color);
			if ('elevation' in $$props) $$invalidate(5, elevation = $$new_props.elevation);
			if ('transition' in $$props) $$invalidate(6, transition = $$new_props.transition);
			if ('element' in $$props) $$invalidate(7, element = $$new_props.element);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			variant,
			square,
			color,
			elevation,
			transition,
			element,
			forwardEvents,
			$$restProps,
			getElement,
			$$scope,
			slots,
			div_binding
		];
	}

	class Paper extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$k, create_fragment$E, safe_not_equal, {
				use: 0,
				class: 1,
				variant: 2,
				square: 3,
				color: 4,
				elevation: 5,
				transition: 6,
				getElement: 10
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Paper",
				options,
				id: create_fragment$E.name
			});
		}

		get use() {
			throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get variant() {
			throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set variant(value) {
			throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get square() {
			throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set square(value) {
			throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get color() {
			throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set color(value) {
			throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get elevation() {
			throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set elevation(value) {
			throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get transition() {
			throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set transition(value) {
			throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[10];
		}

		set getElement(value) {
			throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/common/dist/CommonLabel.svelte generated by Svelte v4.2.19 */

	// (1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     'mdc-button__label': context === 'button',     'mdc-fab__label': context === 'fab',     'mdc-tab__text-label': context === 'tab',     'mdc-image-list__label': context === 'image-list',     'mdc-snackbar__label': context === 'snackbar',     'mdc-banner__text': context === 'banner',     'mdc-segmented-button__label': context === 'segmented-button',     'mdc-data-table__pagination-rows-per-page-label':       context === 'data-table:pagination',     'mdc-data-table__header-cell-label':       context === 'data-table:sortable-header-cell',   })}   {...context === 'snackbar' ? { 'aria-atomic': 'false' } : {}}   {tabindex}   {...$$restProps}>
	function create_default_slot$f(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[10].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[12],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$f.name,
			type: "slot",
			source: "(1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     'mdc-button__label': context === 'button',     'mdc-fab__label': context === 'fab',     'mdc-tab__text-label': context === 'tab',     'mdc-image-list__label': context === 'image-list',     'mdc-snackbar__label': context === 'snackbar',     'mdc-banner__text': context === 'banner',     'mdc-segmented-button__label': context === 'segmented-button',     'mdc-data-table__pagination-rows-per-page-label':       context === 'data-table:pagination',     'mdc-data-table__header-cell-label':       context === 'data-table:sortable-header-cell',   })}   {...context === 'snackbar' ? { 'aria-atomic': 'false' } : {}}   {tabindex}   {...$$restProps}>",
			ctx
		});

		return block;
	}

	function create_fragment$D(ctx) {
		let switch_instance;
		let switch_instance_anchor;
		let current;

		const switch_instance_spread_levels = [
			{ tag: /*tag*/ ctx[3] },
			{
				use: [/*forwardEvents*/ ctx[5], .../*use*/ ctx[0]]
			},
			{
				class: classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-button__label': /*context*/ ctx[6] === 'button',
					'mdc-fab__label': /*context*/ ctx[6] === 'fab',
					'mdc-tab__text-label': /*context*/ ctx[6] === 'tab',
					'mdc-image-list__label': /*context*/ ctx[6] === 'image-list',
					'mdc-snackbar__label': /*context*/ ctx[6] === 'snackbar',
					'mdc-banner__text': /*context*/ ctx[6] === 'banner',
					'mdc-segmented-button__label': /*context*/ ctx[6] === 'segmented-button',
					'mdc-data-table__pagination-rows-per-page-label': /*context*/ ctx[6] === 'data-table:pagination',
					'mdc-data-table__header-cell-label': /*context*/ ctx[6] === 'data-table:sortable-header-cell'
				})
			},
			/*context*/ ctx[6] === 'snackbar'
			? { 'aria-atomic': 'false' }
			: {},
			{ tabindex: /*tabindex*/ ctx[7] },
			/*$$restProps*/ ctx[8]
		];

		var switch_value = /*component*/ ctx[2];

		function switch_props(ctx, dirty) {
			let switch_instance_props = {
				$$slots: { default: [create_default_slot$f] },
				$$scope: { ctx }
			};

			for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
				switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
			}

			if (dirty !== undefined && dirty & /*tag, forwardEvents, use, className, context, tabindex, $$restProps*/ 491) {
				switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [
					dirty & /*tag*/ 8 && { tag: /*tag*/ ctx[3] },
					dirty & /*forwardEvents, use*/ 33 && {
						use: [/*forwardEvents*/ ctx[5], .../*use*/ ctx[0]]
					},
					dirty & /*className, context*/ 66 && {
						class: classMap({
							[/*className*/ ctx[1]]: true,
							'mdc-button__label': /*context*/ ctx[6] === 'button',
							'mdc-fab__label': /*context*/ ctx[6] === 'fab',
							'mdc-tab__text-label': /*context*/ ctx[6] === 'tab',
							'mdc-image-list__label': /*context*/ ctx[6] === 'image-list',
							'mdc-snackbar__label': /*context*/ ctx[6] === 'snackbar',
							'mdc-banner__text': /*context*/ ctx[6] === 'banner',
							'mdc-segmented-button__label': /*context*/ ctx[6] === 'segmented-button',
							'mdc-data-table__pagination-rows-per-page-label': /*context*/ ctx[6] === 'data-table:pagination',
							'mdc-data-table__header-cell-label': /*context*/ ctx[6] === 'data-table:sortable-header-cell'
						})
					},
					dirty & /*context*/ 64 && get_spread_object(/*context*/ ctx[6] === 'snackbar'
					? { 'aria-atomic': 'false' }
					: {}),
					dirty & /*tabindex*/ 128 && { tabindex: /*tabindex*/ ctx[7] },
					dirty & /*$$restProps*/ 256 && get_spread_object(/*$$restProps*/ ctx[8])
				]));
			}

			return {
				props: switch_instance_props,
				$$inline: true
			};
		}

		if (switch_value) {
			switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
			/*switch_instance_binding*/ ctx[11](switch_instance);
		}

		const block = {
			c: function create() {
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (switch_instance) mount_component(switch_instance, target, anchor);
				insert_dev(target, switch_instance_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*component*/ 4 && switch_value !== (switch_value = /*component*/ ctx[2])) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx, dirty));
						/*switch_instance_binding*/ ctx[11](switch_instance);
						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					const switch_instance_changes = (dirty & /*tag, forwardEvents, use, className, context, tabindex, $$restProps*/ 491)
					? get_spread_update(switch_instance_spread_levels, [
							dirty & /*tag*/ 8 && { tag: /*tag*/ ctx[3] },
							dirty & /*forwardEvents, use*/ 33 && {
								use: [/*forwardEvents*/ ctx[5], .../*use*/ ctx[0]]
							},
							dirty & /*className, context*/ 66 && {
								class: classMap({
									[/*className*/ ctx[1]]: true,
									'mdc-button__label': /*context*/ ctx[6] === 'button',
									'mdc-fab__label': /*context*/ ctx[6] === 'fab',
									'mdc-tab__text-label': /*context*/ ctx[6] === 'tab',
									'mdc-image-list__label': /*context*/ ctx[6] === 'image-list',
									'mdc-snackbar__label': /*context*/ ctx[6] === 'snackbar',
									'mdc-banner__text': /*context*/ ctx[6] === 'banner',
									'mdc-segmented-button__label': /*context*/ ctx[6] === 'segmented-button',
									'mdc-data-table__pagination-rows-per-page-label': /*context*/ ctx[6] === 'data-table:pagination',
									'mdc-data-table__header-cell-label': /*context*/ ctx[6] === 'data-table:sortable-header-cell'
								})
							},
							dirty & /*context*/ 64 && get_spread_object(/*context*/ ctx[6] === 'snackbar'
							? { 'aria-atomic': 'false' }
							: {}),
							dirty & /*tabindex*/ 128 && { tabindex: /*tabindex*/ ctx[7] },
							dirty & /*$$restProps*/ 256 && get_spread_object(/*$$restProps*/ ctx[8])
						])
					: {};

					if (dirty & /*$$scope*/ 4096) {
						switch_instance_changes.$$scope = { dirty, ctx };
					}

					switch_instance.$set(switch_instance_changes);
				}
			},
			i: function intro(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(switch_instance_anchor);
				}

				/*switch_instance_binding*/ ctx[11](null);
				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$D.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$j($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","class","component","tag","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('CommonLabel', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let element;
		let { component = SmuiElement } = $$props;
		let { tag = component === SmuiElement ? 'span' : undefined } = $$props;
		const context = getContext('SMUI:label:context');
		const tabindex = getContext('SMUI:label:tabindex');

		function getElement() {
			return element.getElement();
		}

		function switch_instance_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(4, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('component' in $$new_props) $$invalidate(2, component = $$new_props.component);
			if ('tag' in $$new_props) $$invalidate(3, tag = $$new_props.tag);
			if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			getContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			SmuiElement,
			forwardEvents,
			use,
			className,
			element,
			component,
			tag,
			context,
			tabindex,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('element' in $$props) $$invalidate(4, element = $$new_props.element);
			if ('component' in $$props) $$invalidate(2, component = $$new_props.component);
			if ('tag' in $$props) $$invalidate(3, tag = $$new_props.tag);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			component,
			tag,
			element,
			forwardEvents,
			context,
			tabindex,
			$$restProps,
			getElement,
			slots,
			switch_instance_binding,
			$$scope
		];
	}

	class CommonLabel extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$j, create_fragment$D, safe_not_equal, {
				use: 0,
				class: 1,
				component: 2,
				tag: 3,
				getElement: 9
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "CommonLabel",
				options,
				id: create_fragment$D.name
			});
		}

		get use() {
			throw new Error("<CommonLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<CommonLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<CommonLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<CommonLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get component() {
			throw new Error("<CommonLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set component(value) {
			throw new Error("<CommonLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tag() {
			throw new Error("<CommonLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tag(value) {
			throw new Error("<CommonLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[9];
		}

		set getElement(value) {
			throw new Error("<CommonLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/common/dist/CommonIcon.svelte generated by Svelte v4.2.19 */

	// (1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     'mdc-button__icon': context === 'button',     'mdc-fab__icon': context === 'fab',     'mdc-icon-button__icon': context === 'icon-button',     'mdc-icon-button__icon--on': context === 'icon-button' && on,     'mdc-tab__icon': context === 'tab',     'mdc-banner__icon': context === 'banner',     'mdc-segmented-button__icon': context === 'segmented-button',   })}   aria-hidden="true"   {...svg ? { focusable: 'false', tabindex: '-1' } : {}}   {...$$restProps}>
	function create_default_slot$e(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[11].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[13],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$e.name,
			type: "slot",
			source: "(1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     'mdc-button__icon': context === 'button',     'mdc-fab__icon': context === 'fab',     'mdc-icon-button__icon': context === 'icon-button',     'mdc-icon-button__icon--on': context === 'icon-button' && on,     'mdc-tab__icon': context === 'tab',     'mdc-banner__icon': context === 'banner',     'mdc-segmented-button__icon': context === 'segmented-button',   })}   aria-hidden=\\\"true\\\"   {...svg ? { focusable: 'false', tabindex: '-1' } : {}}   {...$$restProps}>",
			ctx
		});

		return block;
	}

	function create_fragment$C(ctx) {
		let switch_instance;
		let switch_instance_anchor;
		let current;

		const switch_instance_spread_levels = [
			{ tag: /*tag*/ ctx[4] },
			{
				use: [/*forwardEvents*/ ctx[6], .../*use*/ ctx[0]]
			},
			{
				class: classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-button__icon': /*context*/ ctx[8] === 'button',
					'mdc-fab__icon': /*context*/ ctx[8] === 'fab',
					'mdc-icon-button__icon': /*context*/ ctx[8] === 'icon-button',
					'mdc-icon-button__icon--on': /*context*/ ctx[8] === 'icon-button' && /*on*/ ctx[2],
					'mdc-tab__icon': /*context*/ ctx[8] === 'tab',
					'mdc-banner__icon': /*context*/ ctx[8] === 'banner',
					'mdc-segmented-button__icon': /*context*/ ctx[8] === 'segmented-button'
				})
			},
			{ "aria-hidden": "true" },
			/*svg*/ ctx[7]
			? { focusable: 'false', tabindex: '-1' }
			: {},
			/*$$restProps*/ ctx[9]
		];

		var switch_value = /*component*/ ctx[3];

		function switch_props(ctx, dirty) {
			let switch_instance_props = {
				$$slots: { default: [create_default_slot$e] },
				$$scope: { ctx }
			};

			for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
				switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
			}

			if (dirty !== undefined && dirty & /*tag, forwardEvents, use, className, context, on, svg, $$restProps*/ 983) {
				switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [
					dirty & /*tag*/ 16 && { tag: /*tag*/ ctx[4] },
					dirty & /*forwardEvents, use*/ 65 && {
						use: [/*forwardEvents*/ ctx[6], .../*use*/ ctx[0]]
					},
					dirty & /*className, context, on*/ 262 && {
						class: classMap({
							[/*className*/ ctx[1]]: true,
							'mdc-button__icon': /*context*/ ctx[8] === 'button',
							'mdc-fab__icon': /*context*/ ctx[8] === 'fab',
							'mdc-icon-button__icon': /*context*/ ctx[8] === 'icon-button',
							'mdc-icon-button__icon--on': /*context*/ ctx[8] === 'icon-button' && /*on*/ ctx[2],
							'mdc-tab__icon': /*context*/ ctx[8] === 'tab',
							'mdc-banner__icon': /*context*/ ctx[8] === 'banner',
							'mdc-segmented-button__icon': /*context*/ ctx[8] === 'segmented-button'
						})
					},
					switch_instance_spread_levels[3],
					dirty & /*svg*/ 128 && get_spread_object(/*svg*/ ctx[7]
					? { focusable: 'false', tabindex: '-1' }
					: {}),
					dirty & /*$$restProps*/ 512 && get_spread_object(/*$$restProps*/ ctx[9])
				]));
			}

			return {
				props: switch_instance_props,
				$$inline: true
			};
		}

		if (switch_value) {
			switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
			/*switch_instance_binding*/ ctx[12](switch_instance);
		}

		const block = {
			c: function create() {
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (switch_instance) mount_component(switch_instance, target, anchor);
				insert_dev(target, switch_instance_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*component*/ 8 && switch_value !== (switch_value = /*component*/ ctx[3])) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx, dirty));
						/*switch_instance_binding*/ ctx[12](switch_instance);
						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					const switch_instance_changes = (dirty & /*tag, forwardEvents, use, className, context, on, svg, $$restProps*/ 983)
					? get_spread_update(switch_instance_spread_levels, [
							dirty & /*tag*/ 16 && { tag: /*tag*/ ctx[4] },
							dirty & /*forwardEvents, use*/ 65 && {
								use: [/*forwardEvents*/ ctx[6], .../*use*/ ctx[0]]
							},
							dirty & /*className, context, on*/ 262 && {
								class: classMap({
									[/*className*/ ctx[1]]: true,
									'mdc-button__icon': /*context*/ ctx[8] === 'button',
									'mdc-fab__icon': /*context*/ ctx[8] === 'fab',
									'mdc-icon-button__icon': /*context*/ ctx[8] === 'icon-button',
									'mdc-icon-button__icon--on': /*context*/ ctx[8] === 'icon-button' && /*on*/ ctx[2],
									'mdc-tab__icon': /*context*/ ctx[8] === 'tab',
									'mdc-banner__icon': /*context*/ ctx[8] === 'banner',
									'mdc-segmented-button__icon': /*context*/ ctx[8] === 'segmented-button'
								})
							},
							switch_instance_spread_levels[3],
							dirty & /*svg*/ 128 && get_spread_object(/*svg*/ ctx[7]
							? { focusable: 'false', tabindex: '-1' }
							: {}),
							dirty & /*$$restProps*/ 512 && get_spread_object(/*$$restProps*/ ctx[9])
						])
					: {};

					if (dirty & /*$$scope*/ 8192) {
						switch_instance_changes.$$scope = { dirty, ctx };
					}

					switch_instance.$set(switch_instance_changes);
				}
			},
			i: function intro(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(switch_instance_anchor);
				}

				/*switch_instance_binding*/ ctx[12](null);
				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$C.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$i($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","class","on","component","tag","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('CommonIcon', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { on = false } = $$props;
		let element;
		let { component = SmuiElement } = $$props;
		let { tag = component === SmuiElement ? 'i' : undefined } = $$props;
		const svg = component === Svg;
		const context = getContext('SMUI:icon:context');

		function getElement() {
			return element.getElement();
		}

		function switch_instance_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(5, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('on' in $$new_props) $$invalidate(2, on = $$new_props.on);
			if ('component' in $$new_props) $$invalidate(3, component = $$new_props.component);
			if ('tag' in $$new_props) $$invalidate(4, tag = $$new_props.tag);
			if ('$$scope' in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			getContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			SmuiElement,
			Svg,
			forwardEvents,
			use,
			className,
			on,
			element,
			component,
			tag,
			svg,
			context,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('on' in $$props) $$invalidate(2, on = $$new_props.on);
			if ('element' in $$props) $$invalidate(5, element = $$new_props.element);
			if ('component' in $$props) $$invalidate(3, component = $$new_props.component);
			if ('tag' in $$props) $$invalidate(4, tag = $$new_props.tag);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			on,
			component,
			tag,
			element,
			forwardEvents,
			svg,
			context,
			$$restProps,
			getElement,
			slots,
			switch_instance_binding,
			$$scope
		];
	}

	class CommonIcon extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$i, create_fragment$C, safe_not_equal, {
				use: 0,
				class: 1,
				on: 2,
				component: 3,
				tag: 4,
				getElement: 10
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "CommonIcon",
				options,
				id: create_fragment$C.name
			});
		}

		get use() {
			throw new Error("<CommonIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<CommonIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<CommonIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<CommonIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get on() {
			throw new Error("<CommonIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set on(value) {
			throw new Error("<CommonIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get component() {
			throw new Error("<CommonIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set component(value) {
			throw new Error("<CommonIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tag() {
			throw new Error("<CommonIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tag(value) {
			throw new Error("<CommonIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[10];
		}

		set getElement(value) {
			throw new Error("<CommonIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/common/dist/SmuiElement.svelte generated by Svelte v4.2.19 */
	const file$v = "node_modules/@smui/common/dist/SmuiElement.svelte";

	// (16:0) {:else}
	function create_else_block$7(ctx) {
		let previous_tag = /*tag*/ ctx[1];
		let svelte_element_anchor;
		let current;
		validate_dynamic_element(/*tag*/ ctx[1]);
		validate_void_dynamic_element(/*tag*/ ctx[1]);
		let svelte_element = /*tag*/ ctx[1] && create_dynamic_element_1(ctx);

		const block = {
			c: function create() {
				if (svelte_element) svelte_element.c();
				svelte_element_anchor = empty();
			},
			m: function mount(target, anchor) {
				if (svelte_element) svelte_element.m(target, anchor);
				insert_dev(target, svelte_element_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (/*tag*/ ctx[1]) {
					if (!previous_tag) {
						svelte_element = create_dynamic_element_1(ctx);
						previous_tag = /*tag*/ ctx[1];
						svelte_element.c();
						svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
					} else if (safe_not_equal(previous_tag, /*tag*/ ctx[1])) {
						svelte_element.d(1);
						validate_dynamic_element(/*tag*/ ctx[1]);
						validate_void_dynamic_element(/*tag*/ ctx[1]);
						svelte_element = create_dynamic_element_1(ctx);
						previous_tag = /*tag*/ ctx[1];
						svelte_element.c();
						svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
					} else {
						svelte_element.p(ctx, dirty);
					}
				} else if (previous_tag) {
					svelte_element.d(1);
					svelte_element = null;
					previous_tag = /*tag*/ ctx[1];
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(svelte_element, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(svelte_element, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svelte_element_anchor);
				}

				if (svelte_element) svelte_element.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$7.name,
			type: "else",
			source: "(16:0) {:else}",
			ctx
		});

		return block;
	}

	// (8:22) 
	function create_if_block_1$8(ctx) {
		let previous_tag = /*tag*/ ctx[1];
		let svelte_element_anchor;
		validate_dynamic_element(/*tag*/ ctx[1]);
		let svelte_element = /*tag*/ ctx[1] && create_dynamic_element(ctx);

		const block = {
			c: function create() {
				if (svelte_element) svelte_element.c();
				svelte_element_anchor = empty();
			},
			m: function mount(target, anchor) {
				if (svelte_element) svelte_element.m(target, anchor);
				insert_dev(target, svelte_element_anchor, anchor);
			},
			p: function update(ctx, dirty) {
				if (/*tag*/ ctx[1]) {
					if (!previous_tag) {
						svelte_element = create_dynamic_element(ctx);
						previous_tag = /*tag*/ ctx[1];
						svelte_element.c();
						svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
					} else if (safe_not_equal(previous_tag, /*tag*/ ctx[1])) {
						svelte_element.d(1);
						validate_dynamic_element(/*tag*/ ctx[1]);
						svelte_element = create_dynamic_element(ctx);
						previous_tag = /*tag*/ ctx[1];
						svelte_element.c();
						svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
					} else {
						svelte_element.p(ctx, dirty);
					}
				} else if (previous_tag) {
					svelte_element.d(1);
					svelte_element = null;
					previous_tag = /*tag*/ ctx[1];
				}
			},
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svelte_element_anchor);
				}

				if (svelte_element) svelte_element.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$8.name,
			type: "if",
			source: "(8:22) ",
			ctx
		});

		return block;
	}

	// (1:0) {#if tag === 'svg'}
	function create_if_block$h(ctx) {
		let svg;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[8].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
		let svg_levels = [/*$$restProps*/ ctx[5]];
		let svg_data = {};

		for (let i = 0; i < svg_levels.length; i += 1) {
			svg_data = assign(svg_data, svg_levels[i]);
		}

		const block = {
			c: function create() {
				svg = svg_element("svg");
				if (default_slot) default_slot.c();
				set_svg_attributes(svg, svg_data);
				add_location(svg, file$v, 1, 2, 22);
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);

				if (default_slot) {
					default_slot.m(svg, null);
				}

				/*svg_binding*/ ctx[9](svg);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, svg, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[4].call(null, svg))
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[7],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
							null
						);
					}
				}

				set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]]));
				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
				}

				if (default_slot) default_slot.d(detaching);
				/*svg_binding*/ ctx[9](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$h.name,
			type: "if",
			source: "(1:0) {#if tag === 'svg'}",
			ctx
		});

		return block;
	}

	// (17:2) <svelte:element     this={tag}     bind:this={element}     use:useActions={use}     use:forwardEvents     {...$$restProps}>
	function create_dynamic_element_1(ctx) {
		let svelte_element;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[8].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
		let svelte_element_levels = [/*$$restProps*/ ctx[5]];
		let svelte_element_data = {};

		for (let i = 0; i < svelte_element_levels.length; i += 1) {
			svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
		}

		const block = {
			c: function create() {
				svelte_element = element(/*tag*/ ctx[1]);
				if (default_slot) default_slot.c();
				set_dynamic_element_data(/*tag*/ ctx[1])(svelte_element, svelte_element_data);
				add_location(svelte_element, file$v, 16, 2, 300);
			},
			m: function mount(target, anchor) {
				insert_dev(target, svelte_element, anchor);

				if (default_slot) {
					default_slot.m(svelte_element, null);
				}

				/*svelte_element_binding_1*/ ctx[11](svelte_element);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, svelte_element, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[4].call(null, svelte_element))
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[7],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
							null
						);
					}
				}

				set_dynamic_element_data(/*tag*/ ctx[1])(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]]));
				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svelte_element);
				}

				if (default_slot) default_slot.d(detaching);
				/*svelte_element_binding_1*/ ctx[11](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_dynamic_element_1.name,
			type: "child_dynamic_element",
			source: "(17:2) <svelte:element     this={tag}     bind:this={element}     use:useActions={use}     use:forwardEvents     {...$$restProps}>",
			ctx
		});

		return block;
	}

	// (9:2) <svelte:element     this={tag}     bind:this={element}     use:useActions={use}     use:forwardEvents     {...$$restProps}   />
	function create_dynamic_element(ctx) {
		let svelte_element;
		let useActions_action;
		let mounted;
		let dispose;
		let svelte_element_levels = [/*$$restProps*/ ctx[5]];
		let svelte_element_data = {};

		for (let i = 0; i < svelte_element_levels.length; i += 1) {
			svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
		}

		const block = {
			c: function create() {
				svelte_element = element(/*tag*/ ctx[1]);
				set_dynamic_element_data(/*tag*/ ctx[1])(svelte_element, svelte_element_data);
				add_location(svelte_element, file$v, 8, 2, 162);
			},
			m: function mount(target, anchor) {
				insert_dev(target, svelte_element, anchor);
				/*svelte_element_binding*/ ctx[10](svelte_element);

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, svelte_element, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[4].call(null, svelte_element))
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				set_dynamic_element_data(/*tag*/ ctx[1])(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]]));
				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svelte_element);
				}

				/*svelte_element_binding*/ ctx[10](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_dynamic_element.name,
			type: "child_dynamic_element",
			source: "(9:2) <svelte:element     this={tag}     bind:this={element}     use:useActions={use}     use:forwardEvents     {...$$restProps}   />",
			ctx
		});

		return block;
	}

	function create_fragment$B(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$h, create_if_block_1$8, create_else_block$7];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*tag*/ ctx[1] === 'svg') return 0;
			if (/*selfClosing*/ ctx[3]) return 1;
			return 2;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$B.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$h($$self, $$props, $$invalidate) {
		let selfClosing;
		const omit_props_names = ["use","tag","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('SmuiElement', slots, ['default']);
		let { use = [] } = $$props;
		let { tag } = $$props;
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let element;

		function getElement() {
			return element;
		}

		$$self.$$.on_mount.push(function () {
			if (tag === undefined && !('tag' in $$props || $$self.$$.bound[$$self.$$.props['tag']])) {
				console.warn("<SmuiElement> was created without expected prop 'tag'");
			}
		});

		function svg_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(2, element);
			});
		}

		function svelte_element_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(2, element);
			});
		}

		function svelte_element_binding_1($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(2, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('tag' in $$new_props) $$invalidate(1, tag = $$new_props.tag);
			if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			get_current_component,
			forwardEventsBuilder,
			useActions,
			use,
			tag,
			forwardEvents,
			element,
			getElement,
			selfClosing
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('tag' in $$props) $$invalidate(1, tag = $$new_props.tag);
			if ('element' in $$props) $$invalidate(2, element = $$new_props.element);
			if ('selfClosing' in $$props) $$invalidate(3, selfClosing = $$new_props.selfClosing);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*tag*/ 2) {
				$$invalidate(3, selfClosing = [
					'area',
					'base',
					'br',
					'col',
					'embed',
					'hr',
					'img',
					'input',
					'link',
					'meta',
					'param',
					'source',
					'track',
					'wbr'
				].indexOf(tag) > -1);
			}
		};

		return [
			use,
			tag,
			element,
			selfClosing,
			forwardEvents,
			$$restProps,
			getElement,
			$$scope,
			slots,
			svg_binding,
			svelte_element_binding,
			svelte_element_binding_1
		];
	}

	class SmuiElement extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$h, create_fragment$B, safe_not_equal, { use: 0, tag: 1, getElement: 6 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "SmuiElement",
				options,
				id: create_fragment$B.name
			});
		}

		get use() {
			throw new Error("<SmuiElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<SmuiElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tag() {
			throw new Error("<SmuiElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tag(value) {
			throw new Error("<SmuiElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[6];
		}

		set getElement(value) {
			throw new Error("<SmuiElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/common/dist/Svg.svelte generated by Svelte v4.2.19 */
	const file$u = "node_modules/@smui/common/dist/Svg.svelte";

	function create_fragment$A(ctx) {
		let svg;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[6].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
		let svg_levels = [/*$$restProps*/ ctx[3]];
		let svg_data = {};

		for (let i = 0; i < svg_levels.length; i += 1) {
			svg_data = assign(svg_data, svg_levels[i]);
		}

		const block = {
			c: function create() {
				svg = svg_element("svg");
				if (default_slot) default_slot.c();
				set_svg_attributes(svg, svg_data);
				add_location(svg, file$u, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);

				if (default_slot) {
					default_slot.m(svg, null);
				}

				/*svg_binding*/ ctx[7](svg);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, svg, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[2].call(null, svg))
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[5],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
							null
						);
					}
				}

				set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
				}

				if (default_slot) default_slot.d(detaching);
				/*svg_binding*/ ctx[7](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$A.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$g($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Svg', slots, ['default']);

		if (console && console.warn) {
			console.warn('The @smui/common Svg component is deprecated. You can use `tag="svg"` now.');
		}

		let { use = [] } = $$props;
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let element;

		function getElement() {
			return element;
		}

		function svg_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(1, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			get_current_component,
			forwardEventsBuilder,
			useActions,
			use,
			forwardEvents,
			element,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			element,
			forwardEvents,
			$$restProps,
			getElement,
			$$scope,
			slots,
			svg_binding
		];
	}

	class Svg extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$g, create_fragment$A, safe_not_equal, { use: 0, getElement: 4 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Svg",
				options,
				id: create_fragment$A.name
			});
		}

		get use() {
			throw new Error("<Svg>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[4];
		}

		set getElement(value) {
			throw new Error("<Svg>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/common/dist/ContextFragment.svelte generated by Svelte v4.2.19 */

	function create_fragment$z(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[4].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[3],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$z.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$f($$self, $$props, $$invalidate) {
		let $storeValue;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('ContextFragment', slots, ['default']);
		let { key } = $$props;
		let { value } = $$props;
		const storeValue = writable(value);
		validate_store(storeValue, 'storeValue');
		component_subscribe($$self, storeValue, value => $$invalidate(5, $storeValue = value));
		setContext(key, storeValue);

		onDestroy(() => {
			storeValue.set(undefined);
		});

		$$self.$$.on_mount.push(function () {
			if (key === undefined && !('key' in $$props || $$self.$$.bound[$$self.$$.props['key']])) {
				console.warn("<ContextFragment> was created without expected prop 'key'");
			}

			if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
				console.warn("<ContextFragment> was created without expected prop 'value'");
			}
		});

		const writable_props = ['key', 'value'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ContextFragment> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('key' in $$props) $$invalidate(1, key = $$props.key);
			if ('value' in $$props) $$invalidate(2, value = $$props.value);
			if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			onDestroy,
			setContext,
			writable,
			key,
			value,
			storeValue,
			$storeValue
		});

		$$self.$inject_state = $$props => {
			if ('key' in $$props) $$invalidate(1, key = $$props.key);
			if ('value' in $$props) $$invalidate(2, value = $$props.value);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*value*/ 4) {
				set_store_value(storeValue, $storeValue = value, $storeValue);
			}
		};

		return [storeValue, key, value, $$scope, slots];
	}

	class ContextFragment extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$f, create_fragment$z, safe_not_equal, { key: 1, value: 2 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "ContextFragment",
				options,
				id: create_fragment$z.name
			});
		}

		get key() {
			throw new Error("<ContextFragment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set key(value) {
			throw new Error("<ContextFragment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<ContextFragment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<ContextFragment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/common/dist/classadder/ClassAdder.svelte generated by Svelte v4.2.19 */

	// (1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     [smuiClass]: true,     ...smuiClassMap,   })}   {...props}   {...$$restProps}>
	function create_default_slot$d(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[11].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[13],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$d.name,
			type: "slot",
			source: "(1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     [smuiClass]: true,     ...smuiClassMap,   })}   {...props}   {...$$restProps}>",
			ctx
		});

		return block;
	}

	function create_fragment$y(ctx) {
		let switch_instance;
		let switch_instance_anchor;
		let current;

		const switch_instance_spread_levels = [
			{ tag: /*tag*/ ctx[3] },
			{
				use: [/*forwardEvents*/ ctx[8], .../*use*/ ctx[0]]
			},
			{
				class: classMap({
					[/*className*/ ctx[1]]: true,
					[/*smuiClass*/ ctx[6]]: true,
					.../*smuiClassMap*/ ctx[5]
				})
			},
			/*props*/ ctx[7],
			/*$$restProps*/ ctx[9]
		];

		var switch_value = /*component*/ ctx[2];

		function switch_props(ctx, dirty) {
			let switch_instance_props = {
				$$slots: { default: [create_default_slot$d] },
				$$scope: { ctx }
			};

			for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
				switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
			}

			if (dirty !== undefined && dirty & /*tag, forwardEvents, use, className, smuiClass, smuiClassMap, props, $$restProps*/ 1003) {
				switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [
					dirty & /*tag*/ 8 && { tag: /*tag*/ ctx[3] },
					dirty & /*forwardEvents, use*/ 257 && {
						use: [/*forwardEvents*/ ctx[8], .../*use*/ ctx[0]]
					},
					dirty & /*className, smuiClass, smuiClassMap*/ 98 && {
						class: classMap({
							[/*className*/ ctx[1]]: true,
							[/*smuiClass*/ ctx[6]]: true,
							.../*smuiClassMap*/ ctx[5]
						})
					},
					dirty & /*props*/ 128 && get_spread_object(/*props*/ ctx[7]),
					dirty & /*$$restProps*/ 512 && get_spread_object(/*$$restProps*/ ctx[9])
				]));
			}

			return {
				props: switch_instance_props,
				$$inline: true
			};
		}

		if (switch_value) {
			switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
			/*switch_instance_binding*/ ctx[12](switch_instance);
		}

		const block = {
			c: function create() {
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (switch_instance) mount_component(switch_instance, target, anchor);
				insert_dev(target, switch_instance_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*component*/ 4 && switch_value !== (switch_value = /*component*/ ctx[2])) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx, dirty));
						/*switch_instance_binding*/ ctx[12](switch_instance);
						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					const switch_instance_changes = (dirty & /*tag, forwardEvents, use, className, smuiClass, smuiClassMap, props, $$restProps*/ 1003)
					? get_spread_update(switch_instance_spread_levels, [
							dirty & /*tag*/ 8 && { tag: /*tag*/ ctx[3] },
							dirty & /*forwardEvents, use*/ 257 && {
								use: [/*forwardEvents*/ ctx[8], .../*use*/ ctx[0]]
							},
							dirty & /*className, smuiClass, smuiClassMap*/ 98 && {
								class: classMap({
									[/*className*/ ctx[1]]: true,
									[/*smuiClass*/ ctx[6]]: true,
									.../*smuiClassMap*/ ctx[5]
								})
							},
							dirty & /*props*/ 128 && get_spread_object(/*props*/ ctx[7]),
							dirty & /*$$restProps*/ 512 && get_spread_object(/*$$restProps*/ ctx[9])
						])
					: {};

					if (dirty & /*$$scope*/ 8192) {
						switch_instance_changes.$$scope = { dirty, ctx };
					}

					switch_instance.$set(switch_instance_changes);
				}
			},
			i: function intro(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(switch_instance_anchor);
				}

				/*switch_instance_binding*/ ctx[12](null);
				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$y.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const internals = {
		component: SmuiElement,
		tag: 'div',
		class: '',
		classMap: {},
		contexts: {},
		props: {}
	};

	function instance$e($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","class","component","tag","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('ClassAdder', slots, ['default']);
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let element;
		const smuiClass = internals.class;
		const smuiClassMap = {};
		const smuiClassUnsubscribes = [];
		const contexts = internals.contexts;
		const props = internals.props;
		let { component = internals.component } = $$props;
		let { tag = component === SmuiElement ? internals.tag : undefined } = $$props;

		Object.entries(internals.classMap).forEach(([name, context]) => {
			const store = getContext(context);

			if (store && 'subscribe' in store) {
				smuiClassUnsubscribes.push(store.subscribe(value => {
					$$invalidate(5, smuiClassMap[name] = value, smuiClassMap);
				}));
			}
		});

		const forwardEvents = forwardEventsBuilder(get_current_component());

		for (let context in contexts) {
			if (contexts.hasOwnProperty(context)) {
				setContext(context, contexts[context]);
			}
		}

		onDestroy(() => {
			for (const unsubscribe of smuiClassUnsubscribes) {
				unsubscribe();
			}
		});

		function getElement() {
			return element.getElement();
		}

		function switch_instance_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(4, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('component' in $$new_props) $$invalidate(2, component = $$new_props.component);
			if ('tag' in $$new_props) $$invalidate(3, tag = $$new_props.tag);
			if ('$$scope' in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			SmuiElement,
			internals,
			onDestroy,
			getContext,
			setContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			use,
			className,
			element,
			smuiClass,
			smuiClassMap,
			smuiClassUnsubscribes,
			contexts,
			props,
			component,
			tag,
			forwardEvents,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('element' in $$props) $$invalidate(4, element = $$new_props.element);
			if ('component' in $$props) $$invalidate(2, component = $$new_props.component);
			if ('tag' in $$props) $$invalidate(3, tag = $$new_props.tag);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			component,
			tag,
			element,
			smuiClassMap,
			smuiClass,
			props,
			forwardEvents,
			$$restProps,
			getElement,
			slots,
			switch_instance_binding,
			$$scope
		];
	}

	class ClassAdder extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$e, create_fragment$y, safe_not_equal, {
				use: 0,
				class: 1,
				component: 2,
				tag: 3,
				getElement: 10
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "ClassAdder",
				options,
				id: create_fragment$y.name
			});
		}

		get use() {
			throw new Error("<ClassAdder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<ClassAdder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<ClassAdder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<ClassAdder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get component() {
			throw new Error("<ClassAdder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set component(value) {
			throw new Error("<ClassAdder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tag() {
			throw new Error("<ClassAdder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tag(value) {
			throw new Error("<ClassAdder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[10];
		}

		set getElement(value) {
			throw new Error("<ClassAdder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	// @ts-ignore: Internals is exported... argh.
	const defaults = Object.assign({}, internals);
	function classAdderBuilder(props) {
	    return new Proxy(ClassAdder, {
	        construct: function (target, args) {
	            Object.assign(internals, defaults, props);
	            // @ts-ignore: Need spread arg.
	            return new target(...args);
	        },
	        get: function (target, prop) {
	            Object.assign(internals, defaults, props);
	            return target[prop];
	        },
	    });
	}

	var Content = classAdderBuilder({
	    class: 'smui-paper__content',
	    tag: 'div',
	});

	classAdderBuilder({
	    class: 'smui-paper__title',
	    tag: 'h5',
	});

	classAdderBuilder({
	    class: 'smui-paper__subtitle',
	    tag: 'h6',
	});

	/* node_modules/@smui-extra/accordion/dist/Panel.svelte generated by Svelte v4.2.19 */

	// (1:0) <Paper   bind:this={element}   use={usePass}   class={classMap({     [className]: true,     'smui-accordion__panel': true,     'smui-accordion__panel--open': open,     'smui-accordion__panel--opened': opened,     'smui-accordion__panel--disabled': disabled,     'smui-accordion__panel--non-interactive': nonInteractive,     'smui-accordion__panel--raised': variant === 'raised',     'smui-accordion__panel--extend': extend,     ['smui-accordion__panel--elevation-z' +     (extend && open ? extendedElevation : elevation)]:       (elevation !== 0 && variant === 'raised') ||       (extendedElevation !== 0 && variant === 'raised' && extend && open),   })}   {color}   variant={variant === 'raised' ? 'unelevated' : variant}   on:SMUIAccordionHeader:activate={handleHeaderActivate}   {...$$restProps}>
	function create_default_slot$c(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[23].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[25], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 33554432)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[25],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[25])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[25], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$c.name,
			type: "slot",
			source: "(1:0) <Paper   bind:this={element}   use={usePass}   class={classMap({     [className]: true,     'smui-accordion__panel': true,     'smui-accordion__panel--open': open,     'smui-accordion__panel--opened': opened,     'smui-accordion__panel--disabled': disabled,     'smui-accordion__panel--non-interactive': nonInteractive,     'smui-accordion__panel--raised': variant === 'raised',     'smui-accordion__panel--extend': extend,     ['smui-accordion__panel--elevation-z' +     (extend && open ? extendedElevation : elevation)]:       (elevation !== 0 && variant === 'raised') ||       (extendedElevation !== 0 && variant === 'raised' && extend && open),   })}   {color}   variant={variant === 'raised' ? 'unelevated' : variant}   on:SMUIAccordionHeader:activate={handleHeaderActivate}   {...$$restProps}>",
			ctx
		});

		return block;
	}

	function create_fragment$x(ctx) {
		let paper;
		let current;

		const paper_spread_levels = [
			{ use: /*usePass*/ ctx[11] },
			{
				class: classMap({
					[/*className*/ ctx[1]]: true,
					'smui-accordion__panel': true,
					'smui-accordion__panel--open': /*open*/ ctx[0],
					'smui-accordion__panel--opened': /*opened*/ ctx[10],
					'smui-accordion__panel--disabled': /*disabled*/ ctx[5],
					'smui-accordion__panel--non-interactive': /*nonInteractive*/ ctx[6],
					'smui-accordion__panel--raised': /*variant*/ ctx[2] === 'raised',
					'smui-accordion__panel--extend': /*extend*/ ctx[7],
					['smui-accordion__panel--elevation-z' + (/*extend*/ ctx[7] && /*open*/ ctx[0]
					? /*extendedElevation*/ ctx[8]
					: /*elevation*/ ctx[4])]: /*elevation*/ ctx[4] !== 0 && /*variant*/ ctx[2] === 'raised' || /*extendedElevation*/ ctx[8] !== 0 && /*variant*/ ctx[2] === 'raised' && /*extend*/ ctx[7] && /*open*/ ctx[0]
				})
			},
			{ color: /*color*/ ctx[3] },
			{
				variant: /*variant*/ ctx[2] === 'raised'
				? 'unelevated'
				: /*variant*/ ctx[2]
			},
			/*$$restProps*/ ctx[16]
		];

		let paper_props = {
			$$slots: { default: [create_default_slot$c] },
			$$scope: { ctx }
		};

		for (let i = 0; i < paper_spread_levels.length; i += 1) {
			paper_props = assign(paper_props, paper_spread_levels[i]);
		}

		paper = new Paper({ props: paper_props, $$inline: true });
		/*paper_binding*/ ctx[24](paper);
		paper.$on("SMUIAccordionHeader:activate", /*handleHeaderActivate*/ ctx[15]);

		const block = {
			c: function create() {
				create_component(paper.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(paper, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const paper_changes = (dirty & /*usePass, className, open, opened, disabled, nonInteractive, variant, extend, extendedElevation, elevation, color, $$restProps*/ 69119)
				? get_spread_update(paper_spread_levels, [
						dirty & /*usePass*/ 2048 && { use: /*usePass*/ ctx[11] },
						dirty & /*className, open, opened, disabled, nonInteractive, variant, extend, extendedElevation, elevation*/ 1527 && {
							class: classMap({
								[/*className*/ ctx[1]]: true,
								'smui-accordion__panel': true,
								'smui-accordion__panel--open': /*open*/ ctx[0],
								'smui-accordion__panel--opened': /*opened*/ ctx[10],
								'smui-accordion__panel--disabled': /*disabled*/ ctx[5],
								'smui-accordion__panel--non-interactive': /*nonInteractive*/ ctx[6],
								'smui-accordion__panel--raised': /*variant*/ ctx[2] === 'raised',
								'smui-accordion__panel--extend': /*extend*/ ctx[7],
								['smui-accordion__panel--elevation-z' + (/*extend*/ ctx[7] && /*open*/ ctx[0]
								? /*extendedElevation*/ ctx[8]
								: /*elevation*/ ctx[4])]: /*elevation*/ ctx[4] !== 0 && /*variant*/ ctx[2] === 'raised' || /*extendedElevation*/ ctx[8] !== 0 && /*variant*/ ctx[2] === 'raised' && /*extend*/ ctx[7] && /*open*/ ctx[0]
							})
						},
						dirty & /*color*/ 8 && { color: /*color*/ ctx[3] },
						dirty & /*variant*/ 4 && {
							variant: /*variant*/ ctx[2] === 'raised'
							? 'unelevated'
							: /*variant*/ ctx[2]
						},
						dirty & /*$$restProps*/ 65536 && get_spread_object(/*$$restProps*/ ctx[16])
					])
				: {};

				if (dirty & /*$$scope*/ 33554432) {
					paper_changes.$$scope = { dirty, ctx };
				}

				paper.$set(paper_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(paper.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(paper.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				/*paper_binding*/ ctx[24](null);
				destroy_component(paper, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$x.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$d($$self, $$props, $$invalidate) {
		let usePass;

		const omit_props_names = [
			"use","class","variant","color","elevation","open","disabled","nonInteractive","extend","extendedElevation","isOpen","setOpen","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $openStore;
		let $nonInteractiveStore;
		let $disabledStore;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Panel', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { variant = 'raised' } = $$props;
		let { color = 'default' } = $$props;
		let { elevation = 1 } = $$props;
		let { open = false } = $$props;
		let { disabled = false } = $$props;
		let { nonInteractive = false } = $$props;
		let { extend = false } = $$props;
		let { extendedElevation = 3 } = $$props;
		let element;
		let accessor;
		let opened = open;
		const disabledStore = writable(disabled);
		validate_store(disabledStore, 'disabledStore');
		component_subscribe($$self, disabledStore, value => $$invalidate(28, $disabledStore = value));
		setContext('SMUI:accordion:panel:disabled', disabledStore);
		const nonInteractiveStore = writable(nonInteractive);
		validate_store(nonInteractiveStore, 'nonInteractiveStore');
		component_subscribe($$self, nonInteractiveStore, value => $$invalidate(27, $nonInteractiveStore = value));
		setContext('SMUI:accordion:panel:nonInteractive', nonInteractiveStore);
		const openStore = writable(open);
		validate_store(openStore, 'openStore');
		component_subscribe($$self, openStore, value => $$invalidate(26, $openStore = value));
		setContext('SMUI:accordion:panel:open', openStore);
		let previousOpen = open;

		onMount(() => {
			$$invalidate(21, accessor = {
				get open() {
					return open;
				},
				setOpen
			});

			// Set the ari-hidden property on content children.
			Array.from(getElement().children).forEach(child => {
				if (child.classList.contains('smui-paper__content')) {
					const content = child;
					content.setAttribute('aria-hidden', open ? 'false' : 'true');
				}
			});

			dispatch(getElement(), 'SMUIAccordionPanel:mount', accessor);

			return () => {
				dispatch(getElement(), 'SMUIAccordionPanel:unmount', accessor);
			};
		});

		function handleHeaderActivate(event) {
			event.stopPropagation();

			if (disabled || nonInteractive) {
				return;
			}

			dispatch(getElement(), 'SMUIAccordionPanel:activate', { accessor, event });
		}

		function isOpen() {
			return open;
		}

		function setOpen(value) {
			$$invalidate(0, open = value);
		}

		function getElement() {
			return element.getElement();
		}

		function paper_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(9, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(17, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('variant' in $$new_props) $$invalidate(2, variant = $$new_props.variant);
			if ('color' in $$new_props) $$invalidate(3, color = $$new_props.color);
			if ('elevation' in $$new_props) $$invalidate(4, elevation = $$new_props.elevation);
			if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
			if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
			if ('nonInteractive' in $$new_props) $$invalidate(6, nonInteractive = $$new_props.nonInteractive);
			if ('extend' in $$new_props) $$invalidate(7, extend = $$new_props.extend);
			if ('extendedElevation' in $$new_props) $$invalidate(8, extendedElevation = $$new_props.extendedElevation);
			if ('$$scope' in $$new_props) $$invalidate(25, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			onMount,
			setContext,
			writable,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			dispatch,
			Paper,
			forwardEvents,
			use,
			className,
			variant,
			color,
			elevation,
			open,
			disabled,
			nonInteractive,
			extend,
			extendedElevation,
			element,
			accessor,
			opened,
			disabledStore,
			nonInteractiveStore,
			openStore,
			previousOpen,
			handleHeaderActivate,
			isOpen,
			setOpen,
			getElement,
			usePass,
			$openStore,
			$nonInteractiveStore,
			$disabledStore
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(17, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('variant' in $$props) $$invalidate(2, variant = $$new_props.variant);
			if ('color' in $$props) $$invalidate(3, color = $$new_props.color);
			if ('elevation' in $$props) $$invalidate(4, elevation = $$new_props.elevation);
			if ('open' in $$props) $$invalidate(0, open = $$new_props.open);
			if ('disabled' in $$props) $$invalidate(5, disabled = $$new_props.disabled);
			if ('nonInteractive' in $$props) $$invalidate(6, nonInteractive = $$new_props.nonInteractive);
			if ('extend' in $$props) $$invalidate(7, extend = $$new_props.extend);
			if ('extendedElevation' in $$props) $$invalidate(8, extendedElevation = $$new_props.extendedElevation);
			if ('element' in $$props) $$invalidate(9, element = $$new_props.element);
			if ('accessor' in $$props) $$invalidate(21, accessor = $$new_props.accessor);
			if ('opened' in $$props) $$invalidate(10, opened = $$new_props.opened);
			if ('previousOpen' in $$props) $$invalidate(22, previousOpen = $$new_props.previousOpen);
			if ('usePass' in $$props) $$invalidate(11, usePass = $$new_props.usePass);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*use*/ 131072) {
				$$invalidate(11, usePass = [forwardEvents, ...use]);
			}

			if ($$self.$$.dirty & /*disabled*/ 32) {
				set_store_value(disabledStore, $disabledStore = disabled, $disabledStore);
			}

			if ($$self.$$.dirty & /*nonInteractive*/ 64) {
				set_store_value(nonInteractiveStore, $nonInteractiveStore = nonInteractive, $nonInteractiveStore);
			}

			if ($$self.$$.dirty & /*open*/ 1) {
				set_store_value(openStore, $openStore = open, $openStore);
			}

			if ($$self.$$.dirty & /*previousOpen, open, accessor*/ 6291457) {
				if (previousOpen !== open) {
					$$invalidate(22, previousOpen = open);

					Array.from(getElement().children).forEach(child => {
						if (child.classList.contains('smui-paper__content')) {
							const content = child;

							// Calculate the height of the content and apply it. This lets the CSS
							// animation run properly.
							if (open) {
								content.classList.add('smui-accordion__content--no-transition');
								content.classList.add('smui-accordion__content--force-open');

								// Force a reflow to get the height.
								const { height } = content.getBoundingClientRect();

								content.classList.remove('smui-accordion__content--force-open');

								// Force another reflow to reset the height.
								content.getBoundingClientRect();

								content.classList.remove('smui-accordion__content--no-transition');
								content.style.height = height + 'px';

								content.addEventListener(
									'transitionend',
									() => {
										if (content) {
											content.style.height = '';
										}

										// Assign only when the panel is fully opened.
										$$invalidate(10, opened = open);

										dispatch(getElement(), 'SMUIAccordionPanel:opened', { accessor });
									},
									{ once: true }
								);
							} else {
								content.style.height = content.getBoundingClientRect().height + 'px';

								// Force a reflow.
								content.getBoundingClientRect();

								requestAnimationFrame(() => {
									if (content) {
										content.style.height = '';
									}

									dispatch(getElement(), 'SMUIAccordionPanel:closed', { accessor });
								});

								// Assign as soon as the panel is closing.
								$$invalidate(10, opened = false);
							}

							// Set the aria-hidden property.
							content.setAttribute('aria-hidden', open ? 'false' : 'true');
						}
					});

					dispatch(
						getElement(),
						open
						? 'SMUIAccordionPanel:opening'
						: 'SMUIAccordionPanel:closing',
						{ accessor }
					);
				}
			}
		};

		return [
			open,
			className,
			variant,
			color,
			elevation,
			disabled,
			nonInteractive,
			extend,
			extendedElevation,
			element,
			opened,
			usePass,
			disabledStore,
			nonInteractiveStore,
			openStore,
			handleHeaderActivate,
			$$restProps,
			use,
			isOpen,
			setOpen,
			getElement,
			accessor,
			previousOpen,
			slots,
			paper_binding,
			$$scope
		];
	}

	class Panel extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$d, create_fragment$x, safe_not_equal, {
				use: 17,
				class: 1,
				variant: 2,
				color: 3,
				elevation: 4,
				open: 0,
				disabled: 5,
				nonInteractive: 6,
				extend: 7,
				extendedElevation: 8,
				isOpen: 18,
				setOpen: 19,
				getElement: 20
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Panel",
				options,
				id: create_fragment$x.name
			});
		}

		get use() {
			throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get variant() {
			throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set variant(value) {
			throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get color() {
			throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set color(value) {
			throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get elevation() {
			throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set elevation(value) {
			throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get open() {
			throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set open(value) {
			throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get disabled() {
			throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set disabled(value) {
			throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get nonInteractive() {
			throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set nonInteractive(value) {
			throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get extend() {
			throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set extend(value) {
			throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get extendedElevation() {
			throw new Error("<Panel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set extendedElevation(value) {
			throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isOpen() {
			return this.$$.ctx[18];
		}

		set isOpen(value) {
			throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get setOpen() {
			return this.$$.ctx[19];
		}

		set setOpen(value) {
			throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[20];
		}

		set getElement(value) {
			throw new Error("<Panel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/**
	 * Stores result from supportsCssVariables to avoid redundant processing to
	 * detect CSS custom variable support.
	 */
	var supportsCssVariables_;
	function supportsCssVariables(windowObj, forceRefresh) {
	    if (forceRefresh === void 0) { forceRefresh = false; }
	    var CSS = windowObj.CSS;
	    var supportsCssVars = supportsCssVariables_;
	    if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
	        return supportsCssVariables_;
	    }
	    var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';
	    if (!supportsFunctionPresent) {
	        return false;
	    }
	    var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes');
	    // See: https://bugs.webkit.org/show_bug.cgi?id=154669
	    // See: README section on Safari
	    var weAreFeatureDetectingSafari10plus = (CSS.supports('(--css-vars: yes)') &&
	        CSS.supports('color', '#00000000'));
	    supportsCssVars =
	        explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;
	    if (!forceRefresh) {
	        supportsCssVariables_ = supportsCssVars;
	    }
	    return supportsCssVars;
	}
	function getNormalizedEventCoords(evt, pageOffset, clientRect) {
	    if (!evt) {
	        return { x: 0, y: 0 };
	    }
	    var x = pageOffset.x, y = pageOffset.y;
	    var documentX = x + clientRect.left;
	    var documentY = y + clientRect.top;
	    var normalizedX;
	    var normalizedY;
	    // Determine touch point relative to the ripple container.
	    if (evt.type === 'touchstart') {
	        var touchEvent = evt;
	        normalizedX = touchEvent.changedTouches[0].pageX - documentX;
	        normalizedY = touchEvent.changedTouches[0].pageY - documentY;
	    }
	    else {
	        var mouseEvent = evt;
	        normalizedX = mouseEvent.pageX - documentX;
	        normalizedY = mouseEvent.pageY - documentY;
	    }
	    return { x: normalizedX, y: normalizedY };
	}

	/******************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

	var extendStatics = function(d, b) {
	  extendStatics = Object.setPrototypeOf ||
	      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	  return extendStatics(d, b);
	};

	function __extends(d, b) {
	  if (typeof b !== "function" && b !== null)
	      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	  extendStatics(d, b);
	  function __() { this.constructor = d; }
	  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	var __assign = function() {
	  __assign = Object.assign || function __assign(t) {
	      for (var s, i = 1, n = arguments.length; i < n; i++) {
	          s = arguments[i];
	          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	      }
	      return t;
	  };
	  return __assign.apply(this, arguments);
	};

	function __awaiter(thisArg, _arguments, P, generator) {
	  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	  return new (P || (P = Promise))(function (resolve, reject) {
	      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	      step((generator = generator.apply(thisArg, _arguments || [])).next());
	  });
	}

	function __generator(thisArg, body) {
	  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
	  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	  function verb(n) { return function (v) { return step([n, v]); }; }
	  function step(op) {
	      if (f) throw new TypeError("Generator is already executing.");
	      while (g && (g = 0, op[0] && (_ = 0)), _) try {
	          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	          if (y = 0, t) op = [op[0] & 2, t.value];
	          switch (op[0]) {
	              case 0: case 1: t = op; break;
	              case 4: _.label++; return { value: op[1], done: false };
	              case 5: _.label++; y = op[1]; op = [0]; continue;
	              case 7: op = _.ops.pop(); _.trys.pop(); continue;
	              default:
	                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                  if (t[2]) _.ops.pop();
	                  _.trys.pop(); continue;
	          }
	          op = body.call(thisArg, _);
	      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	  }
	}

	function __values(o) {
	  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	  if (m) return m.call(o);
	  if (o && typeof o.length === "number") return {
	      next: function () {
	          if (o && i >= o.length) o = void 0;
	          return { value: o && o[i++], done: !o };
	      }
	  };
	  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	}

	function __read(o, n) {
	  var m = typeof Symbol === "function" && o[Symbol.iterator];
	  if (!m) return o;
	  var i = m.call(o), r, ar = [], e;
	  try {
	      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	  }
	  catch (error) { e = { error: error }; }
	  finally {
	      try {
	          if (r && !r.done && (m = i["return"])) m.call(i);
	      }
	      finally { if (e) throw e.error; }
	  }
	  return ar;
	}

	function __spreadArray(to, from, pack) {
	  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	      if (ar || !(i in from)) {
	          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	          ar[i] = from[i];
	      }
	  }
	  return to.concat(ar || Array.prototype.slice.call(from));
	}

	typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
	  var e = new Error(message);
	  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCFoundation = /** @class */ (function () {
	    function MDCFoundation(adapter) {
	        if (adapter === void 0) { adapter = {}; }
	        this.adapter = adapter;
	    }
	    Object.defineProperty(MDCFoundation, "cssClasses", {
	        get: function () {
	            // Classes extending MDCFoundation should implement this method to return an object which exports every
	            // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
	            return {};
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCFoundation, "strings", {
	        get: function () {
	            // Classes extending MDCFoundation should implement this method to return an object which exports all
	            // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
	            return {};
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCFoundation, "numbers", {
	        get: function () {
	            // Classes extending MDCFoundation should implement this method to return an object which exports all
	            // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
	            return {};
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCFoundation, "defaultAdapter", {
	        get: function () {
	            // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
	            // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
	            // validation.
	            return {};
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCFoundation.prototype.init = function () {
	        // Subclasses should override this method to perform initialization routines (registering events, etc.)
	    };
	    MDCFoundation.prototype.destroy = function () {
	        // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
	    };
	    return MDCFoundation;
	}());

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * Determine whether the current browser supports passive event listeners, and
	 * if so, use them.
	 */
	function applyPassive$1(globalObj) {
	    if (globalObj === void 0) { globalObj = window; }
	    return supportsPassiveOption(globalObj) ?
	        { passive: true } :
	        false;
	}
	function supportsPassiveOption(globalObj) {
	    if (globalObj === void 0) { globalObj = window; }
	    // See
	    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
	    var passiveSupported = false;
	    try {
	        var options = {
	            // This function will be called when the browser
	            // attempts to access the passive property.
	            get passive() {
	                passiveSupported = true;
	                return false;
	            }
	        };
	        var handler = function () { };
	        globalObj.document.addEventListener('test', handler, options);
	        globalObj.document.removeEventListener('test', handler, options);
	    }
	    catch (err) {
	        passiveSupported = false;
	    }
	    return passiveSupported;
	}

	var events = /*#__PURE__*/Object.freeze({
		__proto__: null,
		applyPassive: applyPassive$1
	});

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * @fileoverview A "ponyfill" is a polyfill that doesn't modify the global prototype chain.
	 * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.
	 */
	function closest(element, selector) {
	    if (element.closest) {
	        return element.closest(selector);
	    }
	    var el = element;
	    while (el) {
	        if (matches$1(el, selector)) {
	            return el;
	        }
	        el = el.parentElement;
	    }
	    return null;
	}
	function matches$1(element, selector) {
	    var nativeMatches = element.matches
	        || element.webkitMatchesSelector
	        || element.msMatchesSelector;
	    return nativeMatches.call(element, selector);
	}
	/**
	 * Used to compute the estimated scroll width of elements. When an element is
	 * hidden due to display: none; being applied to a parent element, the width is
	 * returned as 0. However, the element will have a true width once no longer
	 * inside a display: none context. This method computes an estimated width when
	 * the element is hidden or returns the true width when the element is visble.
	 * @param {Element} element the element whose width to estimate
	 */
	function estimateScrollWidth(element) {
	    // Check the offsetParent. If the element inherits display: none from any
	    // parent, the offsetParent property will be null (see
	    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent).
	    // This check ensures we only clone the node when necessary.
	    var htmlEl = element;
	    if (htmlEl.offsetParent !== null) {
	        return htmlEl.scrollWidth;
	    }
	    var clone = htmlEl.cloneNode(true);
	    clone.style.setProperty('position', 'absolute');
	    clone.style.setProperty('transform', 'translate(-9999px, -9999px)');
	    document.documentElement.appendChild(clone);
	    var scrollWidth = clone.scrollWidth;
	    document.documentElement.removeChild(clone);
	    return scrollWidth;
	}

	var ponyfill = /*#__PURE__*/Object.freeze({
		__proto__: null,
		closest: closest,
		estimateScrollWidth: estimateScrollWidth,
		matches: matches$1
	});

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$g = {
	    // Ripple is a special case where the "root" component is really a "mixin" of sorts,
	    // given that it's an 'upgrade' to an existing component. That being said it is the root
	    // CSS class that all other CSS classes derive from.
	    BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
	    FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
	    FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',
	    ROOT: 'mdc-ripple-upgraded',
	    UNBOUNDED: 'mdc-ripple-upgraded--unbounded',
	};
	var strings$f = {
	    VAR_FG_SCALE: '--mdc-ripple-fg-scale',
	    VAR_FG_SIZE: '--mdc-ripple-fg-size',
	    VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',
	    VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
	    VAR_LEFT: '--mdc-ripple-left',
	    VAR_TOP: '--mdc-ripple-top',
	};
	var numbers$8 = {
	    DEACTIVATION_TIMEOUT_MS: 225,
	    FG_DEACTIVATION_MS: 150,
	    INITIAL_ORIGIN_SCALE: 0.6,
	    PADDING: 10,
	    TAP_DELAY_MS: 300, // Delay between touch and simulated mouse events on touch devices
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	// Activation events registered on the root element of each instance for activation
	var ACTIVATION_EVENT_TYPES = [
	    'touchstart', 'pointerdown', 'mousedown', 'keydown',
	];
	// Deactivation events registered on documentElement when a pointer-related down event occurs
	var POINTER_DEACTIVATION_EVENT_TYPES = [
	    'touchend', 'pointerup', 'mouseup', 'contextmenu',
	];
	// simultaneous nested activations
	var activatedTargets = [];
	var MDCRippleFoundation = /** @class */ (function (_super) {
	    __extends(MDCRippleFoundation, _super);
	    function MDCRippleFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCRippleFoundation.defaultAdapter), adapter)) || this;
	        _this.activationAnimationHasEnded = false;
	        _this.activationTimer = 0;
	        _this.fgDeactivationRemovalTimer = 0;
	        _this.fgScale = '0';
	        _this.frame = { width: 0, height: 0 };
	        _this.initialSize = 0;
	        _this.layoutFrame = 0;
	        _this.maxRadius = 0;
	        _this.unboundedCoords = { left: 0, top: 0 };
	        _this.activationState = _this.defaultActivationState();
	        _this.activationTimerCallback = function () {
	            _this.activationAnimationHasEnded = true;
	            _this.runDeactivationUXLogicIfReady();
	        };
	        _this.activateHandler = function (e) {
	            _this.activateImpl(e);
	        };
	        _this.deactivateHandler = function () {
	            _this.deactivateImpl();
	        };
	        _this.focusHandler = function () {
	            _this.handleFocus();
	        };
	        _this.blurHandler = function () {
	            _this.handleBlur();
	        };
	        _this.resizeHandler = function () {
	            _this.layout();
	        };
	        return _this;
	    }
	    Object.defineProperty(MDCRippleFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$g;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCRippleFoundation, "strings", {
	        get: function () {
	            return strings$f;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCRippleFoundation, "numbers", {
	        get: function () {
	            return numbers$8;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCRippleFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                browserSupportsCssVars: function () { return true; },
	                computeBoundingRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                containsEventTarget: function () { return true; },
	                deregisterDocumentInteractionHandler: function () { return undefined; },
	                deregisterInteractionHandler: function () { return undefined; },
	                deregisterResizeHandler: function () { return undefined; },
	                getWindowPageOffset: function () { return ({ x: 0, y: 0 }); },
	                isSurfaceActive: function () { return true; },
	                isSurfaceDisabled: function () { return true; },
	                isUnbounded: function () { return true; },
	                registerDocumentInteractionHandler: function () { return undefined; },
	                registerInteractionHandler: function () { return undefined; },
	                registerResizeHandler: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                updateCssVariable: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCRippleFoundation.prototype.init = function () {
	        var _this = this;
	        var supportsPressRipple = this.supportsPressRipple();
	        this.registerRootHandlers(supportsPressRipple);
	        if (supportsPressRipple) {
	            var _a = MDCRippleFoundation.cssClasses, ROOT_1 = _a.ROOT, UNBOUNDED_1 = _a.UNBOUNDED;
	            requestAnimationFrame(function () {
	                _this.adapter.addClass(ROOT_1);
	                if (_this.adapter.isUnbounded()) {
	                    _this.adapter.addClass(UNBOUNDED_1);
	                    // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple
	                    _this.layoutInternal();
	                }
	            });
	        }
	    };
	    MDCRippleFoundation.prototype.destroy = function () {
	        var _this = this;
	        if (this.supportsPressRipple()) {
	            if (this.activationTimer) {
	                clearTimeout(this.activationTimer);
	                this.activationTimer = 0;
	                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);
	            }
	            if (this.fgDeactivationRemovalTimer) {
	                clearTimeout(this.fgDeactivationRemovalTimer);
	                this.fgDeactivationRemovalTimer = 0;
	                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);
	            }
	            var _a = MDCRippleFoundation.cssClasses, ROOT_2 = _a.ROOT, UNBOUNDED_2 = _a.UNBOUNDED;
	            requestAnimationFrame(function () {
	                _this.adapter.removeClass(ROOT_2);
	                _this.adapter.removeClass(UNBOUNDED_2);
	                _this.removeCssVars();
	            });
	        }
	        this.deregisterRootHandlers();
	        this.deregisterDeactivationHandlers();
	    };
	    /**
	     * @param evt Optional event containing position information.
	     */
	    MDCRippleFoundation.prototype.activate = function (evt) {
	        this.activateImpl(evt);
	    };
	    MDCRippleFoundation.prototype.deactivate = function () {
	        this.deactivateImpl();
	    };
	    MDCRippleFoundation.prototype.layout = function () {
	        var _this = this;
	        if (this.layoutFrame) {
	            cancelAnimationFrame(this.layoutFrame);
	        }
	        this.layoutFrame = requestAnimationFrame(function () {
	            _this.layoutInternal();
	            _this.layoutFrame = 0;
	        });
	    };
	    MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {
	        var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;
	        if (unbounded) {
	            this.adapter.addClass(UNBOUNDED);
	        }
	        else {
	            this.adapter.removeClass(UNBOUNDED);
	        }
	    };
	    MDCRippleFoundation.prototype.handleFocus = function () {
	        var _this = this;
	        requestAnimationFrame(function () { return _this.adapter.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED); });
	    };
	    MDCRippleFoundation.prototype.handleBlur = function () {
	        var _this = this;
	        requestAnimationFrame(function () { return _this.adapter.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED); });
	    };
	    /**
	     * We compute this property so that we are not querying information about the client
	     * until the point in time where the foundation requests it. This prevents scenarios where
	     * client-side feature-detection may happen too early, such as when components are rendered on the server
	     * and then initialized at mount time on the client.
	     */
	    MDCRippleFoundation.prototype.supportsPressRipple = function () {
	        return this.adapter.browserSupportsCssVars();
	    };
	    MDCRippleFoundation.prototype.defaultActivationState = function () {
	        return {
	            activationEvent: undefined,
	            hasDeactivationUXRun: false,
	            isActivated: false,
	            isProgrammatic: false,
	            wasActivatedByPointer: false,
	            wasElementMadeActive: false,
	        };
	    };
	    /**
	     * supportsPressRipple Passed from init to save a redundant function call
	     */
	    MDCRippleFoundation.prototype.registerRootHandlers = function (supportsPressRipple) {
	        var e_1, _a;
	        if (supportsPressRipple) {
	            try {
	                for (var ACTIVATION_EVENT_TYPES_1 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()) {
	                    var evtType = ACTIVATION_EVENT_TYPES_1_1.value;
	                    this.adapter.registerInteractionHandler(evtType, this.activateHandler);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a = ACTIVATION_EVENT_TYPES_1.return)) _a.call(ACTIVATION_EVENT_TYPES_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	            if (this.adapter.isUnbounded()) {
	                this.adapter.registerResizeHandler(this.resizeHandler);
	            }
	        }
	        this.adapter.registerInteractionHandler('focus', this.focusHandler);
	        this.adapter.registerInteractionHandler('blur', this.blurHandler);
	    };
	    MDCRippleFoundation.prototype.registerDeactivationHandlers = function (evt) {
	        var e_2, _a;
	        if (evt.type === 'keydown') {
	            this.adapter.registerInteractionHandler('keyup', this.deactivateHandler);
	        }
	        else {
	            try {
	                for (var POINTER_DEACTIVATION_EVENT_TYPES_1 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()) {
	                    var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;
	                    this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);
	                }
	            }
	            catch (e_2_1) { e_2 = { error: e_2_1 }; }
	            finally {
	                try {
	                    if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_1.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_1);
	                }
	                finally { if (e_2) throw e_2.error; }
	            }
	        }
	    };
	    MDCRippleFoundation.prototype.deregisterRootHandlers = function () {
	        var e_3, _a;
	        try {
	            for (var ACTIVATION_EVENT_TYPES_2 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()) {
	                var evtType = ACTIVATION_EVENT_TYPES_2_1.value;
	                this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);
	            }
	        }
	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
	        finally {
	            try {
	                if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a = ACTIVATION_EVENT_TYPES_2.return)) _a.call(ACTIVATION_EVENT_TYPES_2);
	            }
	            finally { if (e_3) throw e_3.error; }
	        }
	        this.adapter.deregisterInteractionHandler('focus', this.focusHandler);
	        this.adapter.deregisterInteractionHandler('blur', this.blurHandler);
	        if (this.adapter.isUnbounded()) {
	            this.adapter.deregisterResizeHandler(this.resizeHandler);
	        }
	    };
	    MDCRippleFoundation.prototype.deregisterDeactivationHandlers = function () {
	        var e_4, _a;
	        this.adapter.deregisterInteractionHandler('keyup', this.deactivateHandler);
	        try {
	            for (var POINTER_DEACTIVATION_EVENT_TYPES_2 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()) {
	                var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;
	                this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);
	            }
	        }
	        catch (e_4_1) { e_4 = { error: e_4_1 }; }
	        finally {
	            try {
	                if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_2.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_2);
	            }
	            finally { if (e_4) throw e_4.error; }
	        }
	    };
	    MDCRippleFoundation.prototype.removeCssVars = function () {
	        var _this = this;
	        var rippleStrings = MDCRippleFoundation.strings;
	        var keys = Object.keys(rippleStrings);
	        keys.forEach(function (key) {
	            if (key.indexOf('VAR_') === 0) {
	                _this.adapter.updateCssVariable(rippleStrings[key], null);
	            }
	        });
	    };
	    MDCRippleFoundation.prototype.activateImpl = function (evt) {
	        var _this = this;
	        if (this.adapter.isSurfaceDisabled()) {
	            return;
	        }
	        var activationState = this.activationState;
	        if (activationState.isActivated) {
	            return;
	        }
	        // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction
	        var previousActivationEvent = this.previousActivationEvent;
	        var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;
	        if (isSameInteraction) {
	            return;
	        }
	        activationState.isActivated = true;
	        activationState.isProgrammatic = evt === undefined;
	        activationState.activationEvent = evt;
	        activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');
	        var hasActivatedChild = evt !== undefined &&
	            activatedTargets.length > 0 &&
	            activatedTargets.some(function (target) { return _this.adapter.containsEventTarget(target); });
	        if (hasActivatedChild) {
	            // Immediately reset activation state, while preserving logic that prevents touch follow-on events
	            this.resetActivationState();
	            return;
	        }
	        if (evt !== undefined) {
	            activatedTargets.push(evt.target);
	            this.registerDeactivationHandlers(evt);
	        }
	        activationState.wasElementMadeActive = this.checkElementMadeActive(evt);
	        if (activationState.wasElementMadeActive) {
	            this.animateActivation();
	        }
	        requestAnimationFrame(function () {
	            // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
	            activatedTargets = [];
	            if (!activationState.wasElementMadeActive
	                && evt !== undefined
	                && (evt.key === ' ' || evt.keyCode === 32)) {
	                // If space was pressed, try again within an rAF call to detect :active, because different UAs report
	                // active states inconsistently when they're called within event handling code:
	                // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
	                // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
	                // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
	                // variable is set within a rAF callback for a submit button interaction (#2241).
	                activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);
	                if (activationState.wasElementMadeActive) {
	                    _this.animateActivation();
	                }
	            }
	            if (!activationState.wasElementMadeActive) {
	                // Reset activation state immediately if element was not made active.
	                _this.activationState = _this.defaultActivationState();
	            }
	        });
	    };
	    MDCRippleFoundation.prototype.checkElementMadeActive = function (evt) {
	        return (evt !== undefined && evt.type === 'keydown') ?
	            this.adapter.isSurfaceActive() :
	            true;
	    };
	    MDCRippleFoundation.prototype.animateActivation = function () {
	        var _this = this;
	        var _a = MDCRippleFoundation.strings, VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;
	        var _b = MDCRippleFoundation.cssClasses, FG_DEACTIVATION = _b.FG_DEACTIVATION, FG_ACTIVATION = _b.FG_ACTIVATION;
	        var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;
	        this.layoutInternal();
	        var translateStart = '';
	        var translateEnd = '';
	        if (!this.adapter.isUnbounded()) {
	            var _c = this.getFgTranslationCoordinates(), startPoint = _c.startPoint, endPoint = _c.endPoint;
	            translateStart = startPoint.x + "px, " + startPoint.y + "px";
	            translateEnd = endPoint.x + "px, " + endPoint.y + "px";
	        }
	        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
	        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
	        // Cancel any ongoing activation/deactivation animations
	        clearTimeout(this.activationTimer);
	        clearTimeout(this.fgDeactivationRemovalTimer);
	        this.rmBoundedActivationClasses();
	        this.adapter.removeClass(FG_DEACTIVATION);
	        // Force layout in order to re-trigger the animation.
	        this.adapter.computeBoundingRect();
	        this.adapter.addClass(FG_ACTIVATION);
	        this.activationTimer = setTimeout(function () {
	            _this.activationTimerCallback();
	        }, DEACTIVATION_TIMEOUT_MS);
	    };
	    MDCRippleFoundation.prototype.getFgTranslationCoordinates = function () {
	        var _a = this.activationState, activationEvent = _a.activationEvent, wasActivatedByPointer = _a.wasActivatedByPointer;
	        var startPoint;
	        if (wasActivatedByPointer) {
	            startPoint = getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());
	        }
	        else {
	            startPoint = {
	                x: this.frame.width / 2,
	                y: this.frame.height / 2,
	            };
	        }
	        // Center the element around the start point.
	        startPoint = {
	            x: startPoint.x - (this.initialSize / 2),
	            y: startPoint.y - (this.initialSize / 2),
	        };
	        var endPoint = {
	            x: (this.frame.width / 2) - (this.initialSize / 2),
	            y: (this.frame.height / 2) - (this.initialSize / 2),
	        };
	        return { startPoint: startPoint, endPoint: endPoint };
	    };
	    MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady = function () {
	        var _this = this;
	        // This method is called both when a pointing device is released, and when the activation animation ends.
	        // The deactivation animation should only run after both of those occur.
	        var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
	        var _a = this.activationState, hasDeactivationUXRun = _a.hasDeactivationUXRun, isActivated = _a.isActivated;
	        var activationHasEnded = hasDeactivationUXRun || !isActivated;
	        if (activationHasEnded && this.activationAnimationHasEnded) {
	            this.rmBoundedActivationClasses();
	            this.adapter.addClass(FG_DEACTIVATION);
	            this.fgDeactivationRemovalTimer = setTimeout(function () {
	                _this.adapter.removeClass(FG_DEACTIVATION);
	            }, numbers$8.FG_DEACTIVATION_MS);
	        }
	    };
	    MDCRippleFoundation.prototype.rmBoundedActivationClasses = function () {
	        var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;
	        this.adapter.removeClass(FG_ACTIVATION);
	        this.activationAnimationHasEnded = false;
	        this.adapter.computeBoundingRect();
	    };
	    MDCRippleFoundation.prototype.resetActivationState = function () {
	        var _this = this;
	        this.previousActivationEvent = this.activationState.activationEvent;
	        this.activationState = this.defaultActivationState();
	        // Touch devices may fire additional events for the same interaction within a short time.
	        // Store the previous event until it's safe to assume that subsequent events are for new interactions.
	        setTimeout(function () { return _this.previousActivationEvent = undefined; }, MDCRippleFoundation.numbers.TAP_DELAY_MS);
	    };
	    MDCRippleFoundation.prototype.deactivateImpl = function () {
	        var _this = this;
	        var activationState = this.activationState;
	        // This can happen in scenarios such as when you have a keyup event that blurs the element.
	        if (!activationState.isActivated) {
	            return;
	        }
	        var state = __assign({}, activationState);
	        if (activationState.isProgrammatic) {
	            requestAnimationFrame(function () {
	                _this.animateDeactivation(state);
	            });
	            this.resetActivationState();
	        }
	        else {
	            this.deregisterDeactivationHandlers();
	            requestAnimationFrame(function () {
	                _this.activationState.hasDeactivationUXRun = true;
	                _this.animateDeactivation(state);
	                _this.resetActivationState();
	            });
	        }
	    };
	    MDCRippleFoundation.prototype.animateDeactivation = function (_a) {
	        var wasActivatedByPointer = _a.wasActivatedByPointer, wasElementMadeActive = _a.wasElementMadeActive;
	        if (wasActivatedByPointer || wasElementMadeActive) {
	            this.runDeactivationUXLogicIfReady();
	        }
	    };
	    MDCRippleFoundation.prototype.layoutInternal = function () {
	        var _this = this;
	        this.frame = this.adapter.computeBoundingRect();
	        var maxDim = Math.max(this.frame.height, this.frame.width);
	        // Surface diameter is treated differently for unbounded vs. bounded ripples.
	        // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
	        // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
	        // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
	        // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
	        // `overflow: hidden`.
	        var getBoundedRadius = function () {
	            var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));
	            return hypotenuse + MDCRippleFoundation.numbers.PADDING;
	        };
	        this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();
	        // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform
	        var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);
	        // Unbounded ripple size should always be even number to equally center align.
	        if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {
	            this.initialSize = initialSize - 1;
	        }
	        else {
	            this.initialSize = initialSize;
	        }
	        this.fgScale = "" + this.maxRadius / this.initialSize;
	        this.updateLayoutCssVars();
	    };
	    MDCRippleFoundation.prototype.updateLayoutCssVars = function () {
	        var _a = MDCRippleFoundation.strings, VAR_FG_SIZE = _a.VAR_FG_SIZE, VAR_LEFT = _a.VAR_LEFT, VAR_TOP = _a.VAR_TOP, VAR_FG_SCALE = _a.VAR_FG_SCALE;
	        this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + "px");
	        this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);
	        if (this.adapter.isUnbounded()) {
	            this.unboundedCoords = {
	                left: Math.round((this.frame.width / 2) - (this.initialSize / 2)),
	                top: Math.round((this.frame.height / 2) - (this.initialSize / 2)),
	            };
	            this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + "px");
	            this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + "px");
	        }
	    };
	    return MDCRippleFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * KEY provides normalized string values for keys.
	 */
	var KEY = {
	    UNKNOWN: 'Unknown',
	    BACKSPACE: 'Backspace',
	    ENTER: 'Enter',
	    SPACEBAR: 'Spacebar',
	    PAGE_UP: 'PageUp',
	    PAGE_DOWN: 'PageDown',
	    END: 'End',
	    HOME: 'Home',
	    ARROW_LEFT: 'ArrowLeft',
	    ARROW_UP: 'ArrowUp',
	    ARROW_RIGHT: 'ArrowRight',
	    ARROW_DOWN: 'ArrowDown',
	    DELETE: 'Delete',
	    ESCAPE: 'Escape',
	    TAB: 'Tab',
	};
	var normalizedKeys = new Set();
	// IE11 has no support for new Map with iterable so we need to initialize this
	// by hand.
	normalizedKeys.add(KEY.BACKSPACE);
	normalizedKeys.add(KEY.ENTER);
	normalizedKeys.add(KEY.SPACEBAR);
	normalizedKeys.add(KEY.PAGE_UP);
	normalizedKeys.add(KEY.PAGE_DOWN);
	normalizedKeys.add(KEY.END);
	normalizedKeys.add(KEY.HOME);
	normalizedKeys.add(KEY.ARROW_LEFT);
	normalizedKeys.add(KEY.ARROW_UP);
	normalizedKeys.add(KEY.ARROW_RIGHT);
	normalizedKeys.add(KEY.ARROW_DOWN);
	normalizedKeys.add(KEY.DELETE);
	normalizedKeys.add(KEY.ESCAPE);
	normalizedKeys.add(KEY.TAB);
	var KEY_CODE = {
	    BACKSPACE: 8,
	    ENTER: 13,
	    SPACEBAR: 32,
	    PAGE_UP: 33,
	    PAGE_DOWN: 34,
	    END: 35,
	    HOME: 36,
	    ARROW_LEFT: 37,
	    ARROW_UP: 38,
	    ARROW_RIGHT: 39,
	    ARROW_DOWN: 40,
	    DELETE: 46,
	    ESCAPE: 27,
	    TAB: 9,
	};
	var mappedKeyCodes = new Map();
	// IE11 has no support for new Map with iterable so we need to initialize this
	// by hand.
	mappedKeyCodes.set(KEY_CODE.BACKSPACE, KEY.BACKSPACE);
	mappedKeyCodes.set(KEY_CODE.ENTER, KEY.ENTER);
	mappedKeyCodes.set(KEY_CODE.SPACEBAR, KEY.SPACEBAR);
	mappedKeyCodes.set(KEY_CODE.PAGE_UP, KEY.PAGE_UP);
	mappedKeyCodes.set(KEY_CODE.PAGE_DOWN, KEY.PAGE_DOWN);
	mappedKeyCodes.set(KEY_CODE.END, KEY.END);
	mappedKeyCodes.set(KEY_CODE.HOME, KEY.HOME);
	mappedKeyCodes.set(KEY_CODE.ARROW_LEFT, KEY.ARROW_LEFT);
	mappedKeyCodes.set(KEY_CODE.ARROW_UP, KEY.ARROW_UP);
	mappedKeyCodes.set(KEY_CODE.ARROW_RIGHT, KEY.ARROW_RIGHT);
	mappedKeyCodes.set(KEY_CODE.ARROW_DOWN, KEY.ARROW_DOWN);
	mappedKeyCodes.set(KEY_CODE.DELETE, KEY.DELETE);
	mappedKeyCodes.set(KEY_CODE.ESCAPE, KEY.ESCAPE);
	mappedKeyCodes.set(KEY_CODE.TAB, KEY.TAB);
	var navigationKeys = new Set();
	// IE11 has no support for new Set with iterable so we need to initialize this
	// by hand.
	navigationKeys.add(KEY.PAGE_UP);
	navigationKeys.add(KEY.PAGE_DOWN);
	navigationKeys.add(KEY.END);
	navigationKeys.add(KEY.HOME);
	navigationKeys.add(KEY.ARROW_LEFT);
	navigationKeys.add(KEY.ARROW_UP);
	navigationKeys.add(KEY.ARROW_RIGHT);
	navigationKeys.add(KEY.ARROW_DOWN);
	/**
	 * normalizeKey returns the normalized string for a navigational action.
	 */
	function normalizeKey(evt) {
	    var key = evt.key;
	    // If the event already has a normalized key, return it
	    if (normalizedKeys.has(key)) {
	        return key;
	    }
	    // tslint:disable-next-line:deprecation
	    var mappedKey = mappedKeyCodes.get(evt.keyCode);
	    if (mappedKey) {
	        return mappedKey;
	    }
	    return KEY.UNKNOWN;
	}

	const { applyPassive } = events;
	const { matches } = ponyfill;
	function Ripple(node, { ripple = true, surface = false, unbounded = false, disabled = false, color, active, rippleElement, eventTarget, activeTarget, addClass = (className) => node.classList.add(className), removeClass = (className) => node.classList.remove(className), addStyle = (name, value) => node.style.setProperty(name, value), initPromise = Promise.resolve(), } = {}) {
	    let instance;
	    let addLayoutListener = getContext('SMUI:addLayoutListener');
	    let removeLayoutListener;
	    let oldActive = active;
	    let oldEventTarget = eventTarget;
	    let oldActiveTarget = activeTarget;
	    function handleProps() {
	        if (surface) {
	            addClass('mdc-ripple-surface');
	            if (color === 'primary') {
	                addClass('smui-ripple-surface--primary');
	                removeClass('smui-ripple-surface--secondary');
	            }
	            else if (color === 'secondary') {
	                removeClass('smui-ripple-surface--primary');
	                addClass('smui-ripple-surface--secondary');
	            }
	            else {
	                removeClass('smui-ripple-surface--primary');
	                removeClass('smui-ripple-surface--secondary');
	            }
	        }
	        else {
	            removeClass('mdc-ripple-surface');
	            removeClass('smui-ripple-surface--primary');
	            removeClass('smui-ripple-surface--secondary');
	        }
	        // Handle activation first.
	        if (instance && oldActive !== active) {
	            oldActive = active;
	            if (active) {
	                instance.activate();
	            }
	            else if (active === false) {
	                instance.deactivate();
	            }
	        }
	        // Then create/destroy an instance.
	        if (ripple && !instance) {
	            instance = new MDCRippleFoundation({
	                addClass,
	                browserSupportsCssVars: () => supportsCssVariables(window),
	                computeBoundingRect: () => (rippleElement || node).getBoundingClientRect(),
	                containsEventTarget: (target) => node.contains(target),
	                deregisterDocumentInteractionHandler: (evtType, handler) => document.documentElement.removeEventListener(evtType, handler, applyPassive()),
	                deregisterInteractionHandler: (evtType, handler) => (eventTarget || node).removeEventListener(evtType, handler, applyPassive()),
	                deregisterResizeHandler: (handler) => window.removeEventListener('resize', handler),
	                getWindowPageOffset: () => ({
	                    x: window.pageXOffset,
	                    y: window.pageYOffset,
	                }),
	                isSurfaceActive: () => active == null ? matches(activeTarget || node, ':active') : active,
	                isSurfaceDisabled: () => !!disabled,
	                isUnbounded: () => !!unbounded,
	                registerDocumentInteractionHandler: (evtType, handler) => document.documentElement.addEventListener(evtType, handler, applyPassive()),
	                registerInteractionHandler: (evtType, handler) => (eventTarget || node).addEventListener(evtType, handler, applyPassive()),
	                registerResizeHandler: (handler) => window.addEventListener('resize', handler),
	                removeClass,
	                updateCssVariable: addStyle,
	            });
	            initPromise.then(() => {
	                if (instance) {
	                    instance.init();
	                    instance.setUnbounded(unbounded);
	                }
	            });
	        }
	        else if (instance && !ripple) {
	            initPromise.then(() => {
	                if (instance) {
	                    instance.destroy();
	                    instance = undefined;
	                }
	            });
	        }
	        // Now handle event/active targets
	        if (instance &&
	            (oldEventTarget !== eventTarget || oldActiveTarget !== activeTarget)) {
	            oldEventTarget = eventTarget;
	            oldActiveTarget = activeTarget;
	            instance.destroy();
	            requestAnimationFrame(() => {
	                if (instance) {
	                    instance.init();
	                    instance.setUnbounded(unbounded);
	                }
	            });
	        }
	        if (!ripple && unbounded) {
	            addClass('mdc-ripple-upgraded--unbounded');
	        }
	    }
	    handleProps();
	    if (addLayoutListener) {
	        removeLayoutListener = addLayoutListener(layout);
	    }
	    function layout() {
	        if (instance) {
	            instance.layout();
	        }
	    }
	    return {
	        update(props) {
	            ({
	                ripple,
	                surface,
	                unbounded,
	                disabled,
	                color,
	                active,
	                rippleElement,
	                eventTarget,
	                activeTarget,
	                addClass,
	                removeClass,
	                addStyle,
	                initPromise,
	            } = Object.assign({ ripple: true, surface: false, unbounded: false, disabled: false, color: undefined, active: undefined, rippleElement: undefined, eventTarget: undefined, activeTarget: undefined, addClass: (className) => node.classList.add(className), removeClass: (className) => node.classList.remove(className), addStyle: (name, value) => node.style.setProperty(name, value), initPromise: Promise.resolve() }, props));
	            handleProps();
	        },
	        destroy() {
	            if (instance) {
	                instance.destroy();
	                instance = undefined;
	                removeClass('mdc-ripple-surface');
	                removeClass('smui-ripple-surface--primary');
	                removeClass('smui-ripple-surface--secondary');
	            }
	            if (removeLayoutListener) {
	                removeLayoutListener();
	            }
	        },
	    };
	}

	/* node_modules/@smui-extra/accordion/dist/Header.svelte generated by Svelte v4.2.19 */
	const file$t = "node_modules/@smui-extra/accordion/dist/Header.svelte";
	const get_icon_slot_changes = dirty => ({});
	const get_icon_slot_context = ctx => ({});
	const get_description_slot_changes = dirty => ({});
	const get_description_slot_context = ctx => ({});

	// (30:2) {#if ripple}
	function create_if_block_2$4(ctx) {
		let div;

		const block = {
			c: function create() {
				div = element("div");
				attr_dev(div, "class", "smui-accordion__header__ripple");
				add_location(div, file$t, 30, 4, 672);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_2$4.name,
			type: "if",
			source: "(30:2) {#if ripple}",
			ctx
		});

		return block;
	}

	// (41:2) {#if $$slots.description}
	function create_if_block_1$7(ctx) {
		let div;
		let current;
		const description_slot_template = /*#slots*/ ctx[23].description;
		const description_slot = create_slot(description_slot_template, ctx, /*$$scope*/ ctx[22], get_description_slot_context);

		const block = {
			c: function create() {
				div = element("div");
				if (description_slot) description_slot.c();
				attr_dev(div, "class", "smui-accordion__header__description");
				add_location(div, file$t, 41, 4, 945);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (description_slot) {
					description_slot.m(div, null);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (description_slot) {
					if (description_slot.p && (!current || dirty & /*$$scope*/ 4194304)) {
						update_slot_base(
							description_slot,
							description_slot_template,
							ctx,
							/*$$scope*/ ctx[22],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
							: get_slot_changes(description_slot_template, /*$$scope*/ ctx[22], dirty, get_description_slot_changes),
							get_description_slot_context
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(description_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(description_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (description_slot) description_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$7.name,
			type: "if",
			source: "(41:2) {#if $$slots.description}",
			ctx
		});

		return block;
	}

	// (46:2) {#if $$slots.icon}
	function create_if_block$g(ctx) {
		let div;
		let current;
		const icon_slot_template = /*#slots*/ ctx[23].icon;
		const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[22], get_icon_slot_context);

		const block = {
			c: function create() {
				div = element("div");
				if (icon_slot) icon_slot.c();
				attr_dev(div, "class", "smui-accordion__header__icon");
				add_location(div, file$t, 46, 4, 1073);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (icon_slot) {
					icon_slot.m(div, null);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (icon_slot) {
					if (icon_slot.p && (!current || dirty & /*$$scope*/ 4194304)) {
						update_slot_base(
							icon_slot,
							icon_slot_template,
							ctx,
							/*$$scope*/ ctx[22],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
							: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[22], dirty, get_icon_slot_changes),
							get_icon_slot_context
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(icon_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(icon_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (icon_slot) icon_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$g.name,
			type: "if",
			source: "(46:2) {#if $$slots.icon}",
			ctx
		});

		return block;
	}

	function create_fragment$w(ctx) {
		let div1;
		let t0;
		let div0;
		let div0_class_value;
		let t1;
		let t2;
		let div1_class_value;
		let div1_style_value;
		let div1_tabindex_value;
		let div1_aria_expanded_value;
		let useActions_action;
		let Ripple_action;
		let current;
		let mounted;
		let dispose;
		let if_block0 = /*ripple*/ ctx[3] && create_if_block_2$4(ctx);
		const default_slot_template = /*#slots*/ ctx[23].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);
		let if_block1 = /*$$slots*/ ctx[20].description && create_if_block_1$7(ctx);
		let if_block2 = /*$$slots*/ ctx[20].icon && create_if_block$g(ctx);

		let div1_levels = [
			{
				class: div1_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'smui-accordion__header': true,
					.../*internalClasses*/ ctx[5]
				})
			},
			{
				style: div1_style_value = Object.entries(/*internalStyles*/ ctx[6]).map(func$j).concat([/*style*/ ctx[2]]).join(' ')
			},
			{ role: "button" },
			{
				tabindex: div1_tabindex_value = /*$nonInteractive*/ ctx[7] ? -1 : 0
			},
			{
				"aria-expanded": div1_aria_expanded_value = /*$open*/ ctx[9] ? 'true' : 'false'
			},
			/*$$restProps*/ ctx[19]
		];

		let div_data_1 = {};

		for (let i = 0; i < div1_levels.length; i += 1) {
			div_data_1 = assign(div_data_1, div1_levels[i]);
		}

		const block = {
			c: function create() {
				div1 = element("div");
				if (if_block0) if_block0.c();
				t0 = space();
				div0 = element("div");
				if (default_slot) default_slot.c();
				t1 = space();
				if (if_block1) if_block1.c();
				t2 = space();
				if (if_block2) if_block2.c();

				attr_dev(div0, "class", div0_class_value = classMap({
					'smui-accordion__header__title': true,
					'smui-accordion__header__title--with-description': /*$$slots*/ ctx[20].description
				}));

				add_location(div0, file$t, 32, 2, 729);
				set_attributes(div1, div_data_1);
				add_location(div1, file$t, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div1, anchor);
				if (if_block0) if_block0.m(div1, null);
				append_dev(div1, t0);
				append_dev(div1, div0);

				if (default_slot) {
					default_slot.m(div0, null);
				}

				append_dev(div1, t1);
				if (if_block1) if_block1.m(div1, null);
				append_dev(div1, t2);
				if (if_block2) if_block2.m(div1, null);
				/*div1_binding*/ ctx[24](div1);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, div1, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[10].call(null, div1)),
						action_destroyer(Ripple_action = Ripple.call(null, div1, {
							ripple: /*ripple*/ ctx[3],
							unbounded: false,
							surface: !/*$nonInteractive*/ ctx[7],
							disabled: /*$disabled*/ ctx[8] || /*$nonInteractive*/ ctx[7],
							addClass: /*addClass*/ ctx[16],
							removeClass: /*removeClass*/ ctx[17],
							addStyle: /*addStyle*/ ctx[18]
						})),
						listen_dev(div1, "click", /*handleClick*/ ctx[14], false, false, false, false),
						listen_dev(div1, "keydown", /*handleKeyDown*/ ctx[15], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (/*ripple*/ ctx[3]) {
					if (if_block0) ; else {
						if_block0 = create_if_block_2$4(ctx);
						if_block0.c();
						if_block0.m(div1, t0);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4194304)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[22],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[22], dirty, null),
							null
						);
					}
				}

				if (!current || dirty & /*$$slots*/ 1048576 && div0_class_value !== (div0_class_value = classMap({
					'smui-accordion__header__title': true,
					'smui-accordion__header__title--with-description': /*$$slots*/ ctx[20].description
				}))) {
					attr_dev(div0, "class", div0_class_value);
				}

				if (/*$$slots*/ ctx[20].description) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty & /*$$slots*/ 1048576) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block_1$7(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(div1, t2);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}

				if (/*$$slots*/ ctx[20].icon) {
					if (if_block2) {
						if_block2.p(ctx, dirty);

						if (dirty & /*$$slots*/ 1048576) {
							transition_in(if_block2, 1);
						}
					} else {
						if_block2 = create_if_block$g(ctx);
						if_block2.c();
						transition_in(if_block2, 1);
						if_block2.m(div1, null);
					}
				} else if (if_block2) {
					group_outros();

					transition_out(if_block2, 1, 1, () => {
						if_block2 = null;
					});

					check_outros();
				}

				set_attributes(div1, div_data_1 = get_spread_update(div1_levels, [
					(!current || dirty & /*className, internalClasses*/ 34 && div1_class_value !== (div1_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'smui-accordion__header': true,
						.../*internalClasses*/ ctx[5]
					}))) && { class: div1_class_value },
					(!current || dirty & /*internalStyles, style*/ 68 && div1_style_value !== (div1_style_value = Object.entries(/*internalStyles*/ ctx[6]).map(func$j).concat([/*style*/ ctx[2]]).join(' '))) && { style: div1_style_value },
					{ role: "button" },
					(!current || dirty & /*$nonInteractive*/ 128 && div1_tabindex_value !== (div1_tabindex_value = /*$nonInteractive*/ ctx[7] ? -1 : 0)) && { tabindex: div1_tabindex_value },
					(!current || dirty & /*$open*/ 512 && div1_aria_expanded_value !== (div1_aria_expanded_value = /*$open*/ ctx[9] ? 'true' : 'false')) && {
						"aria-expanded": div1_aria_expanded_value
					},
					dirty & /*$$restProps*/ 524288 && /*$$restProps*/ ctx[19]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);

				if (Ripple_action && is_function(Ripple_action.update) && dirty & /*ripple, $nonInteractive, $disabled*/ 392) Ripple_action.update.call(null, {
					ripple: /*ripple*/ ctx[3],
					unbounded: false,
					surface: !/*$nonInteractive*/ ctx[7],
					disabled: /*$disabled*/ ctx[8] || /*$nonInteractive*/ ctx[7],
					addClass: /*addClass*/ ctx[16],
					removeClass: /*removeClass*/ ctx[17],
					addStyle: /*addStyle*/ ctx[18]
				});
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				transition_in(if_block1);
				transition_in(if_block2);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				transition_out(if_block1);
				transition_out(if_block2);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div1);
				}

				if (if_block0) if_block0.d();
				if (default_slot) default_slot.d(detaching);
				if (if_block1) if_block1.d();
				if (if_block2) if_block2.d();
				/*div1_binding*/ ctx[24](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$w.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$j = ([name, value]) => `${name}: ${value};`;

	function instance$c($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","class","style","ripple","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $nonInteractive;
		let $disabled;
		let $open;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Header', slots, ['default','description','icon']);
		const $$slots = compute_slots(slots);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { ripple = true } = $$props;
		let element;
		let internalClasses = {};
		let internalStyles = {};
		const disabled = getContext('SMUI:accordion:panel:disabled');
		validate_store(disabled, 'disabled');
		component_subscribe($$self, disabled, value => $$invalidate(8, $disabled = value));
		const nonInteractive = getContext('SMUI:accordion:panel:nonInteractive');
		validate_store(nonInteractive, 'nonInteractive');
		component_subscribe($$self, nonInteractive, value => $$invalidate(7, $nonInteractive = value));
		const open = getContext('SMUI:accordion:panel:open');
		validate_store(open, 'open');
		component_subscribe($$self, open, value => $$invalidate(9, $open = value));

		function handleClick(event) {
			event = event;

			if (event.button === 0) {
				dispatch(getElement(), 'SMUIAccordionHeader:activate', { event });
			}
		}

		function handleKeyDown(event) {
			event = event;

			if (event.key === 'Enter') {
				dispatch(getElement(), 'SMUIAccordionHeader:activate', { event });
			}
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(5, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(5, internalClasses[className] = false, internalClasses);
			}
		}

		function addStyle(name, value) {
			if (internalStyles[name] != value) {
				if (value === '' || value == null) {
					delete internalStyles[name];
					$$invalidate(6, internalStyles);
				} else {
					$$invalidate(6, internalStyles[name] = value, internalStyles);
				}
			}
		}

		function getElement() {
			return element;
		}

		function div1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(4, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(19, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(2, style = $$new_props.style);
			if ('ripple' in $$new_props) $$invalidate(3, ripple = $$new_props.ripple);
			if ('$$scope' in $$new_props) $$invalidate(22, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			getContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			dispatch,
			Ripple,
			forwardEvents,
			use,
			className,
			style,
			ripple,
			element,
			internalClasses,
			internalStyles,
			disabled,
			nonInteractive,
			open,
			handleClick,
			handleKeyDown,
			addClass,
			removeClass,
			addStyle,
			getElement,
			$nonInteractive,
			$disabled,
			$open
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(2, style = $$new_props.style);
			if ('ripple' in $$props) $$invalidate(3, ripple = $$new_props.ripple);
			if ('element' in $$props) $$invalidate(4, element = $$new_props.element);
			if ('internalClasses' in $$props) $$invalidate(5, internalClasses = $$new_props.internalClasses);
			if ('internalStyles' in $$props) $$invalidate(6, internalStyles = $$new_props.internalStyles);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			style,
			ripple,
			element,
			internalClasses,
			internalStyles,
			$nonInteractive,
			$disabled,
			$open,
			forwardEvents,
			disabled,
			nonInteractive,
			open,
			handleClick,
			handleKeyDown,
			addClass,
			removeClass,
			addStyle,
			$$restProps,
			$$slots,
			getElement,
			$$scope,
			slots,
			div1_binding
		];
	}

	class Header extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$c, create_fragment$w, safe_not_equal, {
				use: 0,
				class: 1,
				style: 2,
				ripple: 3,
				getElement: 21
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Header",
				options,
				id: create_fragment$w.name
			});
		}

		get use() {
			throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get ripple() {
			throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set ripple(value) {
			throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[21];
		}

		set getElement(value) {
			throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/** Slider element classes. */
	var cssClasses$f = {
	    DISABLED: 'mdc-slider--disabled',
	    DISCRETE: 'mdc-slider--discrete',
	    INPUT: 'mdc-slider__input',
	    RANGE: 'mdc-slider--range',
	    THUMB: 'mdc-slider__thumb',
	    // Applied when thumb is in the focused state.
	    THUMB_FOCUSED: 'mdc-slider__thumb--focused',
	    THUMB_KNOB: 'mdc-slider__thumb-knob',
	    // Class added to the top thumb (for overlapping thumbs in range slider).
	    THUMB_TOP: 'mdc-slider__thumb--top',
	    THUMB_WITH_INDICATOR: 'mdc-slider__thumb--with-indicator',
	    TICK_MARKS: 'mdc-slider--tick-marks',
	    TICK_MARKS_CONTAINER: 'mdc-slider__tick-marks',
	    TICK_MARK_ACTIVE: 'mdc-slider__tick-mark--active',
	    TICK_MARK_INACTIVE: 'mdc-slider__tick-mark--inactive',
	    TRACK: 'mdc-slider__track',
	    // The active track fill element that will be scaled as the value changes.
	    TRACK_ACTIVE: 'mdc-slider__track--active_fill',
	    VALUE_INDICATOR_CONTAINER: 'mdc-slider__value-indicator-container',
	    VALUE_INDICATOR_TEXT: 'mdc-slider__value-indicator-text',
	};
	/** Slider numbers. */
	var numbers$7 = {
	    // Default step size.
	    STEP_SIZE: 1,
	    // Default minimum difference between the start and end values.
	    MIN_RANGE: 0,
	    // Minimum absolute difference between clientX of move event / down event
	    // for which to update thumb, in the case of overlapping thumbs.
	    // This is needed to reduce chances of choosing the thumb based on
	    // pointer jitter.
	    THUMB_UPDATE_MIN_PX: 5,
	};
	/** Slider attributes. */
	var attributes$1 = {
	    ARIA_VALUETEXT: 'aria-valuetext',
	    INPUT_DISABLED: 'disabled',
	    INPUT_MIN: 'min',
	    INPUT_MAX: 'max',
	    INPUT_VALUE: 'value',
	    INPUT_STEP: 'step',
	    DATA_MIN_RANGE: 'data-min-range',
	};
	/** Slider strings. */
	var strings$e = {
	    VAR_VALUE_INDICATOR_CARET_LEFT: '--slider-value-indicator-caret-left',
	    VAR_VALUE_INDICATOR_CARET_RIGHT: '--slider-value-indicator-caret-right',
	    VAR_VALUE_INDICATOR_CARET_TRANSFORM: '--slider-value-indicator-caret-transform',
	    VAR_VALUE_INDICATOR_CONTAINER_LEFT: '--slider-value-indicator-container-left',
	    VAR_VALUE_INDICATOR_CONTAINER_RIGHT: '--slider-value-indicator-container-right',
	    VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM: '--slider-value-indicator-container-transform',
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * AnimationFrame provides a user-friendly abstraction around requesting
	 * and canceling animation frames.
	 */
	var AnimationFrame = /** @class */ (function () {
	    function AnimationFrame() {
	        this.rafIDs = new Map();
	    }
	    /**
	     * Requests an animation frame. Cancels any existing frame with the same key.
	     * @param {string} key The key for this callback.
	     * @param {FrameRequestCallback} callback The callback to be executed.
	     */
	    AnimationFrame.prototype.request = function (key, callback) {
	        var _this = this;
	        this.cancel(key);
	        var frameID = requestAnimationFrame(function (frame) {
	            _this.rafIDs.delete(key);
	            // Callback must come *after* the key is deleted so that nested calls to
	            // request with the same key are not deleted.
	            callback(frame);
	        });
	        this.rafIDs.set(key, frameID);
	    };
	    /**
	     * Cancels a queued callback with the given key.
	     * @param {string} key The key for this callback.
	     */
	    AnimationFrame.prototype.cancel = function (key) {
	        var rafID = this.rafIDs.get(key);
	        if (rafID) {
	            cancelAnimationFrame(rafID);
	            this.rafIDs.delete(key);
	        }
	    };
	    /**
	     * Cancels all queued callback.
	     */
	    AnimationFrame.prototype.cancelAll = function () {
	        var _this = this;
	        // Need to use forEach because it's the only iteration method supported
	        // by IE11. Suppress the underscore because we don't need it.
	        // tslint:disable-next-line:enforce-name-casing
	        this.rafIDs.forEach(function (_, key) {
	            _this.cancel(key);
	        });
	    };
	    /**
	     * Returns the queue of unexecuted callback keys.
	     */
	    AnimationFrame.prototype.getQueue = function () {
	        var queue = [];
	        // Need to use forEach because it's the only iteration method supported
	        // by IE11. Suppress the underscore because we don't need it.
	        // tslint:disable-next-line:enforce-name-casing
	        this.rafIDs.forEach(function (_, key) {
	            queue.push(key);
	        });
	        return queue;
	    };
	    return AnimationFrame;
	}());

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssPropertyNameMap = {
	    animation: {
	        prefixed: '-webkit-animation',
	        standard: 'animation',
	    },
	    transform: {
	        prefixed: '-webkit-transform',
	        standard: 'transform',
	    },
	    transition: {
	        prefixed: '-webkit-transition',
	        standard: 'transition',
	    },
	};
	function isWindow(windowObj) {
	    return Boolean(windowObj.document) && typeof windowObj.document.createElement === 'function';
	}
	function getCorrectPropertyName(windowObj, cssProperty) {
	    if (isWindow(windowObj) && cssProperty in cssPropertyNameMap) {
	        var el = windowObj.document.createElement('div');
	        var _a = cssPropertyNameMap[cssProperty], standard = _a.standard, prefixed = _a.prefixed;
	        var isStandard = standard in el.style;
	        return isStandard ? standard : prefixed;
	    }
	    return cssProperty;
	}

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/** Tick mark enum, for discrete sliders. */
	var TickMark;
	(function (TickMark) {
	    TickMark[TickMark["ACTIVE"] = 0] = "ACTIVE";
	    TickMark[TickMark["INACTIVE"] = 1] = "INACTIVE";
	})(TickMark || (TickMark = {}));
	/**
	 * Thumb types: range slider has two thumbs (START, END) whereas single point
	 * slider only has one thumb (END).
	 */
	var Thumb;
	(function (Thumb) {
	    // Thumb at start of slider (e.g. in LTR mode, left thumb on range slider).
	    Thumb[Thumb["START"] = 1] = "START";
	    // Thumb at end of slider (e.g. in LTR mode, right thumb on range slider,
	    // or only thumb on single point slider).
	    Thumb[Thumb["END"] = 2] = "END";
	})(Thumb || (Thumb = {}));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var AnimationKeys;
	(function (AnimationKeys) {
	    AnimationKeys["SLIDER_UPDATE"] = "slider_update";
	})(AnimationKeys || (AnimationKeys = {}));
	// Accessing `window` without a `typeof` check will throw on Node environments.
	var HAS_WINDOW = typeof window !== 'undefined';
	/**
	 * Foundation class for slider. Responsibilities include:
	 * - Updating slider values (internal state and DOM updates) based on client
	 *   'x' position.
	 * - Updating DOM after slider property updates (e.g. min, max).
	 */
	var MDCSliderFoundation = /** @class */ (function (_super) {
	    __extends(MDCSliderFoundation, _super);
	    function MDCSliderFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCSliderFoundation.defaultAdapter), adapter)) || this;
	        // Whether the initial styles (to position the thumb, before component
	        // initialization) have been removed.
	        _this.initialStylesRemoved = false;
	        _this.isDisabled = false;
	        _this.isDiscrete = false;
	        _this.step = numbers$7.STEP_SIZE;
	        _this.minRange = numbers$7.MIN_RANGE;
	        _this.hasTickMarks = false;
	        // The following properties are only set for range sliders.
	        _this.isRange = false;
	        // Tracks the thumb being moved across a slider pointer interaction (down,
	        // move event).
	        _this.thumb = null;
	        // `clientX` from the most recent down event. Used in subsequent move
	        // events to determine which thumb to move (in the case of
	        // overlapping thumbs).
	        _this.downEventClientX = null;
	        // Width of the start thumb knob.
	        _this.startThumbKnobWidth = 0;
	        // Width of the end thumb knob.
	        _this.endThumbKnobWidth = 0;
	        _this.animFrame = new AnimationFrame();
	        return _this;
	    }
	    Object.defineProperty(MDCSliderFoundation, "defaultAdapter", {
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same
	            // order as the adapter interface.
	            return {
	                hasClass: function () { return false; },
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                addThumbClass: function () { return undefined; },
	                removeThumbClass: function () { return undefined; },
	                getAttribute: function () { return null; },
	                getInputValue: function () { return ''; },
	                setInputValue: function () { return undefined; },
	                getInputAttribute: function () { return null; },
	                setInputAttribute: function () { return null; },
	                removeInputAttribute: function () { return null; },
	                focusInput: function () { return undefined; },
	                isInputFocused: function () { return false; },
	                shouldHideFocusStylesForPointerEvents: function () { return false; },
	                getThumbKnobWidth: function () { return 0; },
	                getValueIndicatorContainerWidth: function () { return 0; },
	                getThumbBoundingClientRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                getBoundingClientRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                isRTL: function () { return false; },
	                setThumbStyleProperty: function () { return undefined; },
	                removeThumbStyleProperty: function () { return undefined; },
	                setTrackActiveStyleProperty: function () { return undefined; },
	                removeTrackActiveStyleProperty: function () { return undefined; },
	                setValueIndicatorText: function () { return undefined; },
	                getValueToAriaValueTextFn: function () { return null; },
	                updateTickMarks: function () { return undefined; },
	                setPointerCapture: function () { return undefined; },
	                emitChangeEvent: function () { return undefined; },
	                emitInputEvent: function () { return undefined; },
	                emitDragStartEvent: function () { return undefined; },
	                emitDragEndEvent: function () { return undefined; },
	                registerEventHandler: function () { return undefined; },
	                deregisterEventHandler: function () { return undefined; },
	                registerThumbEventHandler: function () { return undefined; },
	                deregisterThumbEventHandler: function () { return undefined; },
	                registerInputEventHandler: function () { return undefined; },
	                deregisterInputEventHandler: function () { return undefined; },
	                registerBodyEventHandler: function () { return undefined; },
	                deregisterBodyEventHandler: function () { return undefined; },
	                registerWindowEventHandler: function () { return undefined; },
	                deregisterWindowEventHandler: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCSliderFoundation.prototype.init = function () {
	        var _this = this;
	        this.isDisabled = this.adapter.hasClass(cssClasses$f.DISABLED);
	        this.isDiscrete = this.adapter.hasClass(cssClasses$f.DISCRETE);
	        this.hasTickMarks = this.adapter.hasClass(cssClasses$f.TICK_MARKS);
	        this.isRange = this.adapter.hasClass(cssClasses$f.RANGE);
	        var min = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes$1.INPUT_MIN, this.isRange ? Thumb.START : Thumb.END), attributes$1.INPUT_MIN);
	        var max = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes$1.INPUT_MAX, Thumb.END), attributes$1.INPUT_MAX);
	        var value = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes$1.INPUT_VALUE, Thumb.END), attributes$1.INPUT_VALUE);
	        var valueStart = this.isRange ?
	            this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes$1.INPUT_VALUE, Thumb.START), attributes$1.INPUT_VALUE) :
	            min;
	        var stepAttr = this.adapter.getInputAttribute(attributes$1.INPUT_STEP, Thumb.END);
	        var step = stepAttr ?
	            this.convertAttributeValueToNumber(stepAttr, attributes$1.INPUT_STEP) :
	            this.step;
	        var minRangeAttr = this.adapter.getAttribute(attributes$1.DATA_MIN_RANGE);
	        var minRange = minRangeAttr ?
	            this.convertAttributeValueToNumber(minRangeAttr, attributes$1.DATA_MIN_RANGE) :
	            this.minRange;
	        this.validateProperties({ min: min, max: max, value: value, valueStart: valueStart, step: step, minRange: minRange });
	        this.min = min;
	        this.max = max;
	        this.value = value;
	        this.valueStart = valueStart;
	        this.step = step;
	        this.minRange = minRange;
	        this.numDecimalPlaces = getNumDecimalPlaces(this.step);
	        this.valueBeforeDownEvent = value;
	        this.valueStartBeforeDownEvent = valueStart;
	        this.mousedownOrTouchstartListener =
	            this.handleMousedownOrTouchstart.bind(this);
	        this.moveListener = this.handleMove.bind(this);
	        this.pointerdownListener = this.handlePointerdown.bind(this);
	        this.pointerupListener = this.handlePointerup.bind(this);
	        this.thumbMouseenterListener = this.handleThumbMouseenter.bind(this);
	        this.thumbMouseleaveListener = this.handleThumbMouseleave.bind(this);
	        this.inputStartChangeListener = function () {
	            _this.handleInputChange(Thumb.START);
	        };
	        this.inputEndChangeListener = function () {
	            _this.handleInputChange(Thumb.END);
	        };
	        this.inputStartFocusListener = function () {
	            _this.handleInputFocus(Thumb.START);
	        };
	        this.inputEndFocusListener = function () {
	            _this.handleInputFocus(Thumb.END);
	        };
	        this.inputStartBlurListener = function () {
	            _this.handleInputBlur(Thumb.START);
	        };
	        this.inputEndBlurListener = function () {
	            _this.handleInputBlur(Thumb.END);
	        };
	        this.resizeListener = this.handleResize.bind(this);
	        this.registerEventHandlers();
	    };
	    MDCSliderFoundation.prototype.destroy = function () {
	        this.deregisterEventHandlers();
	    };
	    MDCSliderFoundation.prototype.setMin = function (value) {
	        this.min = value;
	        if (!this.isRange) {
	            this.valueStart = value;
	        }
	        this.updateUI();
	    };
	    MDCSliderFoundation.prototype.setMax = function (value) {
	        this.max = value;
	        this.updateUI();
	    };
	    MDCSliderFoundation.prototype.getMin = function () {
	        return this.min;
	    };
	    MDCSliderFoundation.prototype.getMax = function () {
	        return this.max;
	    };
	    /**
	     * - For single point sliders, returns the thumb value.
	     * - For range (two-thumb) sliders, returns the end thumb's value.
	     */
	    MDCSliderFoundation.prototype.getValue = function () {
	        return this.value;
	    };
	    /**
	     * - For single point sliders, sets the thumb value.
	     * - For range (two-thumb) sliders, sets the end thumb's value.
	     */
	    MDCSliderFoundation.prototype.setValue = function (value) {
	        if (this.isRange && value < this.valueStart + this.minRange) {
	            throw new Error("end thumb value (" + value + ") must be >= start thumb " +
	                ("value (" + this.valueStart + ") + min range (" + this.minRange + ")"));
	        }
	        this.updateValue(value, Thumb.END);
	    };
	    /**
	     * Only applicable for range sliders.
	     * @return The start thumb's value.
	     */
	    MDCSliderFoundation.prototype.getValueStart = function () {
	        if (!this.isRange) {
	            throw new Error('`valueStart` is only applicable for range sliders.');
	        }
	        return this.valueStart;
	    };
	    /**
	     * Only applicable for range sliders. Sets the start thumb's value.
	     */
	    MDCSliderFoundation.prototype.setValueStart = function (valueStart) {
	        if (!this.isRange) {
	            throw new Error('`valueStart` is only applicable for range sliders.');
	        }
	        if (this.isRange && valueStart > this.value - this.minRange) {
	            throw new Error("start thumb value (" + valueStart + ") must be <= end thumb " +
	                ("value (" + this.value + ") - min range (" + this.minRange + ")"));
	        }
	        this.updateValue(valueStart, Thumb.START);
	    };
	    MDCSliderFoundation.prototype.setStep = function (value) {
	        this.step = value;
	        this.numDecimalPlaces = getNumDecimalPlaces(value);
	        this.updateUI();
	    };
	    /**
	     * Only applicable for range sliders. Sets the minimum difference between the
	     * start and end values.
	     */
	    MDCSliderFoundation.prototype.setMinRange = function (value) {
	        if (!this.isRange) {
	            throw new Error('`minRange` is only applicable for range sliders.');
	        }
	        if (value < 0) {
	            throw new Error('`minRange` must be non-negative. ' +
	                ("Current value: " + value));
	        }
	        if (this.value - this.valueStart < value) {
	            throw new Error("start thumb value (" + this.valueStart + ") and end thumb value " +
	                ("(" + this.value + ") must differ by at least " + value + "."));
	        }
	        this.minRange = value;
	    };
	    MDCSliderFoundation.prototype.setIsDiscrete = function (value) {
	        this.isDiscrete = value;
	        this.updateValueIndicatorUI();
	        this.updateTickMarksUI();
	    };
	    MDCSliderFoundation.prototype.getStep = function () {
	        return this.step;
	    };
	    MDCSliderFoundation.prototype.getMinRange = function () {
	        if (!this.isRange) {
	            throw new Error('`minRange` is only applicable for range sliders.');
	        }
	        return this.minRange;
	    };
	    MDCSliderFoundation.prototype.setHasTickMarks = function (value) {
	        this.hasTickMarks = value;
	        this.updateTickMarksUI();
	    };
	    MDCSliderFoundation.prototype.getDisabled = function () {
	        return this.isDisabled;
	    };
	    /**
	     * Sets disabled state, including updating styles and thumb tabindex.
	     */
	    MDCSliderFoundation.prototype.setDisabled = function (disabled) {
	        this.isDisabled = disabled;
	        if (disabled) {
	            this.adapter.addClass(cssClasses$f.DISABLED);
	            if (this.isRange) {
	                this.adapter.setInputAttribute(attributes$1.INPUT_DISABLED, '', Thumb.START);
	            }
	            this.adapter.setInputAttribute(attributes$1.INPUT_DISABLED, '', Thumb.END);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$f.DISABLED);
	            if (this.isRange) {
	                this.adapter.removeInputAttribute(attributes$1.INPUT_DISABLED, Thumb.START);
	            }
	            this.adapter.removeInputAttribute(attributes$1.INPUT_DISABLED, Thumb.END);
	        }
	    };
	    /** @return Whether the slider is a range slider. */
	    MDCSliderFoundation.prototype.getIsRange = function () {
	        return this.isRange;
	    };
	    /**
	     * - Syncs slider boundingClientRect with the current DOM.
	     * - Updates UI based on internal state.
	     */
	    MDCSliderFoundation.prototype.layout = function (_a) {
	        var _b = _a === void 0 ? {} : _a, skipUpdateUI = _b.skipUpdateUI;
	        this.rect = this.adapter.getBoundingClientRect();
	        if (this.isRange) {
	            this.startThumbKnobWidth = this.adapter.getThumbKnobWidth(Thumb.START);
	            this.endThumbKnobWidth = this.adapter.getThumbKnobWidth(Thumb.END);
	        }
	        if (!skipUpdateUI) {
	            this.updateUI();
	        }
	    };
	    /** Handles resize events on the window. */
	    MDCSliderFoundation.prototype.handleResize = function () {
	        this.layout();
	    };
	    /**
	     * Handles pointer down events on the slider root element.
	     */
	    MDCSliderFoundation.prototype.handleDown = function (event) {
	        if (this.isDisabled)
	            return;
	        this.valueStartBeforeDownEvent = this.valueStart;
	        this.valueBeforeDownEvent = this.value;
	        var clientX = event.clientX != null ?
	            event.clientX :
	            event.targetTouches[0].clientX;
	        this.downEventClientX = clientX;
	        var value = this.mapClientXOnSliderScale(clientX);
	        this.thumb = this.getThumbFromDownEvent(clientX, value);
	        if (this.thumb === null)
	            return;
	        this.handleDragStart(event, value, this.thumb);
	        this.updateValue(value, this.thumb, { emitInputEvent: true });
	    };
	    /**
	     * Handles pointer move events on the slider root element.
	     */
	    MDCSliderFoundation.prototype.handleMove = function (event) {
	        if (this.isDisabled)
	            return;
	        // Prevent scrolling.
	        event.preventDefault();
	        var clientX = event.clientX != null ?
	            event.clientX :
	            event.targetTouches[0].clientX;
	        var dragAlreadyStarted = this.thumb != null;
	        this.thumb = this.getThumbFromMoveEvent(clientX);
	        if (this.thumb === null)
	            return;
	        var value = this.mapClientXOnSliderScale(clientX);
	        if (!dragAlreadyStarted) {
	            this.handleDragStart(event, value, this.thumb);
	            this.adapter.emitDragStartEvent(value, this.thumb);
	        }
	        this.updateValue(value, this.thumb, { emitInputEvent: true });
	    };
	    /**
	     * Handles pointer up events on the slider root element.
	     */
	    MDCSliderFoundation.prototype.handleUp = function () {
	        var _a, _b;
	        if (this.isDisabled || this.thumb === null)
	            return;
	        // Remove the focused state and hide the value indicator(s) (if present)
	        // if focus state is meant to be hidden.
	        if ((_b = (_a = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b === void 0 ? void 0 : _b.call(_a)) {
	            this.handleInputBlur(this.thumb);
	        }
	        var oldValue = this.thumb === Thumb.START ?
	            this.valueStartBeforeDownEvent :
	            this.valueBeforeDownEvent;
	        var newValue = this.thumb === Thumb.START ? this.valueStart : this.value;
	        if (oldValue !== newValue) {
	            this.adapter.emitChangeEvent(newValue, this.thumb);
	        }
	        this.adapter.emitDragEndEvent(newValue, this.thumb);
	        this.thumb = null;
	    };
	    /**
	     * For range, discrete slider, shows the value indicator on both thumbs.
	     */
	    MDCSliderFoundation.prototype.handleThumbMouseenter = function () {
	        if (!this.isDiscrete || !this.isRange)
	            return;
	        this.adapter.addThumbClass(cssClasses$f.THUMB_WITH_INDICATOR, Thumb.START);
	        this.adapter.addThumbClass(cssClasses$f.THUMB_WITH_INDICATOR, Thumb.END);
	    };
	    /**
	     * For range, discrete slider, hides the value indicator on both thumbs.
	     */
	    MDCSliderFoundation.prototype.handleThumbMouseleave = function () {
	        var _a, _b;
	        if (!this.isDiscrete || !this.isRange)
	            return;
	        if ((!((_b = (_a = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b === void 0 ? void 0 : _b.call(_a)) &&
	            (this.adapter.isInputFocused(Thumb.START) ||
	                this.adapter.isInputFocused(Thumb.END))) ||
	            this.thumb) {
	            // Leave value indicator shown if either input is focused or the thumb is
	            // being dragged.
	            return;
	        }
	        this.adapter.removeThumbClass(cssClasses$f.THUMB_WITH_INDICATOR, Thumb.START);
	        this.adapter.removeThumbClass(cssClasses$f.THUMB_WITH_INDICATOR, Thumb.END);
	    };
	    MDCSliderFoundation.prototype.handleMousedownOrTouchstart = function (event) {
	        var _this = this;
	        var moveEventType = event.type === 'mousedown' ? 'mousemove' : 'touchmove';
	        // After a down event on the slider root, listen for move events on
	        // body (so the slider value is updated for events outside of the
	        // slider root).
	        this.adapter.registerBodyEventHandler(moveEventType, this.moveListener);
	        var upHandler = function () {
	            _this.handleUp();
	            // Once the drag is finished (up event on body), remove the move
	            // handler.
	            _this.adapter.deregisterBodyEventHandler(moveEventType, _this.moveListener);
	            // Also stop listening for subsequent up events.
	            _this.adapter.deregisterEventHandler('mouseup', upHandler);
	            _this.adapter.deregisterEventHandler('touchend', upHandler);
	        };
	        this.adapter.registerBodyEventHandler('mouseup', upHandler);
	        this.adapter.registerBodyEventHandler('touchend', upHandler);
	        this.handleDown(event);
	    };
	    MDCSliderFoundation.prototype.handlePointerdown = function (event) {
	        var isPrimaryButton = event.button === 0;
	        if (!isPrimaryButton)
	            return;
	        if (event.pointerId != null) {
	            this.adapter.setPointerCapture(event.pointerId);
	        }
	        this.adapter.registerEventHandler('pointermove', this.moveListener);
	        this.handleDown(event);
	    };
	    /**
	     * Handles input `change` event by setting internal slider value to match
	     * input's new value.
	     */
	    MDCSliderFoundation.prototype.handleInputChange = function (thumb) {
	        var value = Number(this.adapter.getInputValue(thumb));
	        if (thumb === Thumb.START) {
	            this.setValueStart(value);
	        }
	        else {
	            this.setValue(value);
	        }
	        this.adapter.emitChangeEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
	        this.adapter.emitInputEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
	    };
	    /** Shows activated state and value indicator on thumb(s). */
	    MDCSliderFoundation.prototype.handleInputFocus = function (thumb) {
	        this.adapter.addThumbClass(cssClasses$f.THUMB_FOCUSED, thumb);
	        if (!this.isDiscrete)
	            return;
	        this.adapter.addThumbClass(cssClasses$f.THUMB_WITH_INDICATOR, thumb);
	        if (this.isRange) {
	            var otherThumb = thumb === Thumb.START ? Thumb.END : Thumb.START;
	            this.adapter.addThumbClass(cssClasses$f.THUMB_WITH_INDICATOR, otherThumb);
	        }
	    };
	    /** Removes activated state and value indicator from thumb(s). */
	    MDCSliderFoundation.prototype.handleInputBlur = function (thumb) {
	        this.adapter.removeThumbClass(cssClasses$f.THUMB_FOCUSED, thumb);
	        if (!this.isDiscrete)
	            return;
	        this.adapter.removeThumbClass(cssClasses$f.THUMB_WITH_INDICATOR, thumb);
	        if (this.isRange) {
	            var otherThumb = thumb === Thumb.START ? Thumb.END : Thumb.START;
	            this.adapter.removeThumbClass(cssClasses$f.THUMB_WITH_INDICATOR, otherThumb);
	        }
	    };
	    /**
	     * Emits custom dragStart event, along with focusing the underlying input.
	     */
	    MDCSliderFoundation.prototype.handleDragStart = function (event, value, thumb) {
	        var _a, _b;
	        this.adapter.emitDragStartEvent(value, thumb);
	        this.adapter.focusInput(thumb);
	        // Restore focused state and show the value indicator(s) (if present)
	        // in case they were previously hidden on dragEnd.
	        // This is needed if the input is already focused, in which case
	        // #focusInput above wouldn't actually trigger #handleInputFocus,
	        // which is why we need to invoke it manually here.
	        if ((_b = (_a = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b === void 0 ? void 0 : _b.call(_a)) {
	            this.handleInputFocus(thumb);
	        }
	        // Prevent the input (that we just focused) from losing focus.
	        event.preventDefault();
	    };
	    /**
	     * @return The thumb to be moved based on initial down event.
	     */
	    MDCSliderFoundation.prototype.getThumbFromDownEvent = function (clientX, value) {
	        // For single point slider, thumb to be moved is always the END (only)
	        // thumb.
	        if (!this.isRange)
	            return Thumb.END;
	        // Check if event press point is in the bounds of any thumb.
	        var thumbStartRect = this.adapter.getThumbBoundingClientRect(Thumb.START);
	        var thumbEndRect = this.adapter.getThumbBoundingClientRect(Thumb.END);
	        var inThumbStartBounds = clientX >= thumbStartRect.left && clientX <= thumbStartRect.right;
	        var inThumbEndBounds = clientX >= thumbEndRect.left && clientX <= thumbEndRect.right;
	        if (inThumbStartBounds && inThumbEndBounds) {
	            // Thumbs overlapping. Thumb to be moved cannot be determined yet.
	            return null;
	        }
	        // If press is in bounds for either thumb on down event, that's the thumb
	        // to be moved.
	        if (inThumbStartBounds) {
	            return Thumb.START;
	        }
	        if (inThumbEndBounds) {
	            return Thumb.END;
	        }
	        // For presses outside the range, return whichever thumb is closer.
	        if (value < this.valueStart) {
	            return Thumb.START;
	        }
	        if (value > this.value) {
	            return Thumb.END;
	        }
	        // For presses inside the range, return whichever thumb is closer.
	        return (value - this.valueStart <= this.value - value) ? Thumb.START :
	            Thumb.END;
	    };
	    /**
	     * @return The thumb to be moved based on move event (based on drag
	     *     direction from original down event). Only applicable if thumbs
	     *     were overlapping in the down event.
	     */
	    MDCSliderFoundation.prototype.getThumbFromMoveEvent = function (clientX) {
	        // Thumb has already been chosen.
	        if (this.thumb !== null)
	            return this.thumb;
	        if (this.downEventClientX === null) {
	            throw new Error('`downEventClientX` is null after move event.');
	        }
	        var moveDistanceUnderThreshold = Math.abs(this.downEventClientX - clientX) < numbers$7.THUMB_UPDATE_MIN_PX;
	        if (moveDistanceUnderThreshold)
	            return this.thumb;
	        var draggedThumbToLeft = clientX < this.downEventClientX;
	        if (draggedThumbToLeft) {
	            return this.adapter.isRTL() ? Thumb.END : Thumb.START;
	        }
	        else {
	            return this.adapter.isRTL() ? Thumb.START : Thumb.END;
	        }
	    };
	    /**
	     * Updates UI based on internal state.
	     * @param thumb Thumb whose value is being updated. If undefined, UI is
	     *     updated for both thumbs based on current internal state.
	     */
	    MDCSliderFoundation.prototype.updateUI = function (thumb) {
	        if (thumb) {
	            this.updateThumbAndInputAttributes(thumb);
	        }
	        else {
	            this.updateThumbAndInputAttributes(Thumb.START);
	            this.updateThumbAndInputAttributes(Thumb.END);
	        }
	        this.updateThumbAndTrackUI(thumb);
	        this.updateValueIndicatorUI(thumb);
	        this.updateTickMarksUI();
	    };
	    /**
	     * Updates thumb and input attributes based on current value.
	     * @param thumb Thumb whose aria attributes to update.
	     */
	    MDCSliderFoundation.prototype.updateThumbAndInputAttributes = function (thumb) {
	        if (!thumb)
	            return;
	        var value = this.isRange && thumb === Thumb.START ? this.valueStart : this.value;
	        var valueStr = String(value);
	        this.adapter.setInputAttribute(attributes$1.INPUT_VALUE, valueStr, thumb);
	        if (this.isRange && thumb === Thumb.START) {
	            this.adapter.setInputAttribute(attributes$1.INPUT_MIN, String(value + this.minRange), Thumb.END);
	        }
	        else if (this.isRange && thumb === Thumb.END) {
	            this.adapter.setInputAttribute(attributes$1.INPUT_MAX, String(value - this.minRange), Thumb.START);
	        }
	        // Sync attribute with property.
	        if (this.adapter.getInputValue(thumb) !== valueStr) {
	            this.adapter.setInputValue(valueStr, thumb);
	        }
	        var valueToAriaValueTextFn = this.adapter.getValueToAriaValueTextFn();
	        if (valueToAriaValueTextFn) {
	            this.adapter.setInputAttribute(attributes$1.ARIA_VALUETEXT, valueToAriaValueTextFn(value, thumb), thumb);
	        }
	    };
	    /**
	     * Updates value indicator UI based on current value.
	     * @param thumb Thumb whose value indicator to update. If undefined, all
	     *     thumbs' value indicators are updated.
	     */
	    MDCSliderFoundation.prototype.updateValueIndicatorUI = function (thumb) {
	        if (!this.isDiscrete)
	            return;
	        var value = this.isRange && thumb === Thumb.START ? this.valueStart : this.value;
	        this.adapter.setValueIndicatorText(value, thumb === Thumb.START ? Thumb.START : Thumb.END);
	        if (!thumb && this.isRange) {
	            this.adapter.setValueIndicatorText(this.valueStart, Thumb.START);
	        }
	    };
	    /**
	     * Updates tick marks UI within slider, based on current min, max, and step.
	     */
	    MDCSliderFoundation.prototype.updateTickMarksUI = function () {
	        if (!this.isDiscrete || !this.hasTickMarks)
	            return;
	        var numTickMarksInactiveStart = (this.valueStart - this.min) / this.step;
	        var numTickMarksActive = (this.value - this.valueStart) / this.step + 1;
	        var numTickMarksInactiveEnd = (this.max - this.value) / this.step;
	        var tickMarksInactiveStart = Array.from({ length: numTickMarksInactiveStart })
	            .fill(TickMark.INACTIVE);
	        var tickMarksActive = Array.from({ length: numTickMarksActive })
	            .fill(TickMark.ACTIVE);
	        var tickMarksInactiveEnd = Array.from({ length: numTickMarksInactiveEnd })
	            .fill(TickMark.INACTIVE);
	        this.adapter.updateTickMarks(tickMarksInactiveStart.concat(tickMarksActive)
	            .concat(tickMarksInactiveEnd));
	    };
	    /** Maps clientX to a value on the slider scale. */
	    MDCSliderFoundation.prototype.mapClientXOnSliderScale = function (clientX) {
	        var xPos = clientX - this.rect.left;
	        var pctComplete = xPos / this.rect.width;
	        if (this.adapter.isRTL()) {
	            pctComplete = 1 - pctComplete;
	        }
	        // Fit the percentage complete between the range [min,max]
	        // by remapping from [0, 1] to [min, min+(max-min)].
	        var value = this.min + pctComplete * (this.max - this.min);
	        if (value === this.max || value === this.min) {
	            return value;
	        }
	        return Number(this.quantize(value).toFixed(this.numDecimalPlaces));
	    };
	    /** Calculates the quantized value based on step value. */
	    MDCSliderFoundation.prototype.quantize = function (value) {
	        var numSteps = Math.round((value - this.min) / this.step);
	        return this.min + numSteps * this.step;
	    };
	    /**
	     * Updates slider value (internal state and UI) based on the given value.
	     */
	    MDCSliderFoundation.prototype.updateValue = function (value, thumb, _a) {
	        var _b = _a === void 0 ? {} : _a, emitInputEvent = _b.emitInputEvent;
	        value = this.clampValue(value, thumb);
	        if (this.isRange && thumb === Thumb.START) {
	            // Exit early if current value is the same as the new value.
	            if (this.valueStart === value)
	                return;
	            this.valueStart = value;
	        }
	        else {
	            // Exit early if current value is the same as the new value.
	            if (this.value === value)
	                return;
	            this.value = value;
	        }
	        this.updateUI(thumb);
	        if (emitInputEvent) {
	            this.adapter.emitInputEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
	        }
	    };
	    /**
	     * Clamps the given value for the given thumb based on slider properties:
	     * - Restricts value within [min, max].
	     * - If range slider, clamp start value <= end value - min range, and
	     *   end value >= start value + min range.
	     */
	    MDCSliderFoundation.prototype.clampValue = function (value, thumb) {
	        // Clamp value to [min, max] range.
	        value = Math.min(Math.max(value, this.min), this.max);
	        var thumbStartMovedPastThumbEnd = this.isRange && thumb === Thumb.START &&
	            value > this.value - this.minRange;
	        if (thumbStartMovedPastThumbEnd) {
	            return this.value - this.minRange;
	        }
	        var thumbEndMovedPastThumbStart = this.isRange && thumb === Thumb.END &&
	            value < this.valueStart + this.minRange;
	        if (thumbEndMovedPastThumbStart) {
	            return this.valueStart + this.minRange;
	        }
	        return value;
	    };
	    /**
	     * Updates the active track and thumb style properties to reflect current
	     * value.
	     */
	    MDCSliderFoundation.prototype.updateThumbAndTrackUI = function (thumb) {
	        var _this = this;
	        var _a = this, max = _a.max, min = _a.min;
	        var pctComplete = (this.value - this.valueStart) / (max - min);
	        var rangePx = pctComplete * this.rect.width;
	        var isRtl = this.adapter.isRTL();
	        var transformProp = HAS_WINDOW ? getCorrectPropertyName(window, 'transform') : 'transform';
	        if (this.isRange) {
	            var thumbLeftPos_1 = this.adapter.isRTL() ?
	                (max - this.value) / (max - min) * this.rect.width :
	                (this.valueStart - min) / (max - min) * this.rect.width;
	            var thumbRightPos_1 = thumbLeftPos_1 + rangePx;
	            this.animFrame.request(AnimationKeys.SLIDER_UPDATE, function () {
	                // Set active track styles, accounting for animation direction by
	                // setting `transform-origin`.
	                var trackAnimatesFromRight = (!isRtl && thumb === Thumb.START) ||
	                    (isRtl && thumb !== Thumb.START);
	                if (trackAnimatesFromRight) {
	                    _this.adapter.setTrackActiveStyleProperty('transform-origin', 'right');
	                    _this.adapter.setTrackActiveStyleProperty('left', 'auto');
	                    _this.adapter.setTrackActiveStyleProperty('right', _this.rect.width - thumbRightPos_1 + "px");
	                }
	                else {
	                    _this.adapter.setTrackActiveStyleProperty('transform-origin', 'left');
	                    _this.adapter.setTrackActiveStyleProperty('right', 'auto');
	                    _this.adapter.setTrackActiveStyleProperty('left', thumbLeftPos_1 + "px");
	                }
	                _this.adapter.setTrackActiveStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
	                // Set thumb styles.
	                var thumbStartPos = isRtl ? thumbRightPos_1 : thumbLeftPos_1;
	                var thumbEndPos = _this.adapter.isRTL() ? thumbLeftPos_1 : thumbRightPos_1;
	                if (thumb === Thumb.START || !thumb || !_this.initialStylesRemoved) {
	                    _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbStartPos + "px)", Thumb.START);
	                    _this.alignValueIndicator(Thumb.START, thumbStartPos);
	                }
	                if (thumb === Thumb.END || !thumb || !_this.initialStylesRemoved) {
	                    _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbEndPos + "px)", Thumb.END);
	                    _this.alignValueIndicator(Thumb.END, thumbEndPos);
	                }
	                _this.removeInitialStyles(isRtl);
	                _this.updateOverlappingThumbsUI(thumbStartPos, thumbEndPos, thumb);
	            });
	        }
	        else {
	            this.animFrame.request(AnimationKeys.SLIDER_UPDATE, function () {
	                var thumbStartPos = isRtl ? _this.rect.width - rangePx : rangePx;
	                _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbStartPos + "px)", Thumb.END);
	                _this.alignValueIndicator(Thumb.END, thumbStartPos);
	                _this.adapter.setTrackActiveStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
	                _this.removeInitialStyles(isRtl);
	            });
	        }
	    };
	    /**
	     * Shifts the value indicator to either side if it would otherwise stick
	     * beyond the slider's length while keeping the caret above the knob.
	     */
	    MDCSliderFoundation.prototype.alignValueIndicator = function (thumb, thumbPos) {
	        if (!this.isDiscrete)
	            return;
	        var thumbHalfWidth = this.adapter.getThumbBoundingClientRect(thumb).width / 2;
	        var containerWidth = this.adapter.getValueIndicatorContainerWidth(thumb);
	        var sliderWidth = this.adapter.getBoundingClientRect().width;
	        if (containerWidth / 2 > thumbPos + thumbHalfWidth) {
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CARET_LEFT, thumbHalfWidth + "px", thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CARET_RIGHT, 'auto', thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CARET_TRANSFORM, 'translateX(-50%)', thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CONTAINER_LEFT, '0', thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, 'auto', thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, 'none', thumb);
	        }
	        else if (containerWidth / 2 > sliderWidth - thumbPos + thumbHalfWidth) {
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CARET_LEFT, 'auto', thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CARET_RIGHT, thumbHalfWidth + "px", thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CARET_TRANSFORM, 'translateX(50%)', thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CONTAINER_LEFT, 'auto', thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, '0', thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, 'none', thumb);
	        }
	        else {
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CARET_LEFT, '50%', thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CARET_RIGHT, 'auto', thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CARET_TRANSFORM, 'translateX(-50%)', thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CONTAINER_LEFT, '50%', thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, 'auto', thumb);
	            this.adapter.setThumbStyleProperty(strings$e.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, 'translateX(-50%)', thumb);
	        }
	    };
	    /**
	     * Removes initial inline styles if not already removed. `left:<...>%`
	     * inline styles can be added to position the thumb correctly before JS
	     * initialization. However, they need to be removed before the JS starts
	     * positioning the thumb. This is because the JS uses
	     * `transform:translateX(<...>)px` (for performance reasons) to position
	     * the thumb (which is not possible for initial styles since we need the
	     * bounding rect measurements).
	     */
	    MDCSliderFoundation.prototype.removeInitialStyles = function (isRtl) {
	        if (this.initialStylesRemoved)
	            return;
	        // Remove thumb position properties that were added for initial render.
	        var position = isRtl ? 'right' : 'left';
	        this.adapter.removeThumbStyleProperty(position, Thumb.END);
	        if (this.isRange) {
	            this.adapter.removeThumbStyleProperty(position, Thumb.START);
	        }
	        this.initialStylesRemoved = true;
	        this.resetTrackAndThumbAnimation();
	    };
	    /**
	     * Resets track/thumb animation to prevent animation when adding
	     * `transform` styles to thumb initially.
	     */
	    MDCSliderFoundation.prototype.resetTrackAndThumbAnimation = function () {
	        var _this = this;
	        if (!this.isDiscrete)
	            return;
	        // Set transition properties to default (no animation), so that the
	        // newly added `transform` styles do not animate thumb/track from
	        // their default positions.
	        var transitionProp = HAS_WINDOW ?
	            getCorrectPropertyName(window, 'transition') :
	            'transition';
	        var transitionDefault = 'none 0s ease 0s';
	        this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, Thumb.END);
	        if (this.isRange) {
	            this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, Thumb.START);
	        }
	        this.adapter.setTrackActiveStyleProperty(transitionProp, transitionDefault);
	        // In the next frame, remove the transition inline styles we just
	        // added, such that any animations added in the CSS can now take effect.
	        requestAnimationFrame(function () {
	            _this.adapter.removeThumbStyleProperty(transitionProp, Thumb.END);
	            _this.adapter.removeTrackActiveStyleProperty(transitionProp);
	            if (_this.isRange) {
	                _this.adapter.removeThumbStyleProperty(transitionProp, Thumb.START);
	            }
	        });
	    };
	    /**
	     * Adds THUMB_TOP class to active thumb if thumb knobs overlap; otherwise
	     * removes THUMB_TOP class from both thumbs.
	     * @param thumb Thumb that is active (being moved).
	     */
	    MDCSliderFoundation.prototype.updateOverlappingThumbsUI = function (thumbStartPos, thumbEndPos, thumb) {
	        var thumbsOverlap = false;
	        if (this.adapter.isRTL()) {
	            var startThumbLeftEdge = thumbStartPos - this.startThumbKnobWidth / 2;
	            var endThumbRightEdge = thumbEndPos + this.endThumbKnobWidth / 2;
	            thumbsOverlap = endThumbRightEdge >= startThumbLeftEdge;
	        }
	        else {
	            var startThumbRightEdge = thumbStartPos + this.startThumbKnobWidth / 2;
	            var endThumbLeftEdge = thumbEndPos - this.endThumbKnobWidth / 2;
	            thumbsOverlap = startThumbRightEdge >= endThumbLeftEdge;
	        }
	        if (thumbsOverlap) {
	            this.adapter.addThumbClass(cssClasses$f.THUMB_TOP, 
	            // If no thumb was dragged (in the case of initial layout), end
	            // thumb is on top by default.
	            thumb || Thumb.END);
	            this.adapter.removeThumbClass(cssClasses$f.THUMB_TOP, thumb === Thumb.START ? Thumb.END : Thumb.START);
	        }
	        else {
	            this.adapter.removeThumbClass(cssClasses$f.THUMB_TOP, Thumb.START);
	            this.adapter.removeThumbClass(cssClasses$f.THUMB_TOP, Thumb.END);
	        }
	    };
	    /**
	     * Converts attribute value to a number, e.g. '100' => 100. Throws errors
	     * for invalid values.
	     * @param attributeValue Attribute value, e.g. 100.
	     * @param attributeName Attribute name, e.g. `aria-valuemax`.
	     */
	    MDCSliderFoundation.prototype.convertAttributeValueToNumber = function (attributeValue, attributeName) {
	        if (attributeValue === null) {
	            throw new Error('MDCSliderFoundation: `' + attributeName + '` must be non-null.');
	        }
	        var value = Number(attributeValue);
	        if (isNaN(value)) {
	            throw new Error('MDCSliderFoundation: `' + attributeName + '` value is `' +
	                attributeValue + '`, but must be a number.');
	        }
	        return value;
	    };
	    /** Checks that the given properties are valid slider values. */
	    MDCSliderFoundation.prototype.validateProperties = function (_a) {
	        var min = _a.min, max = _a.max, value = _a.value, valueStart = _a.valueStart, step = _a.step, minRange = _a.minRange;
	        if (min >= max) {
	            throw new Error("MDCSliderFoundation: min must be strictly less than max. " +
	                ("Current: [min: " + min + ", max: " + max + "]"));
	        }
	        if (step <= 0) {
	            throw new Error("MDCSliderFoundation: step must be a positive number. " +
	                ("Current step: " + step));
	        }
	        if (this.isRange) {
	            if (value < min || value > max || valueStart < min || valueStart > max) {
	                throw new Error("MDCSliderFoundation: values must be in [min, max] range. " +
	                    ("Current values: [start value: " + valueStart + ", end value: ") +
	                    (value + ", min: " + min + ", max: " + max + "]"));
	            }
	            if (valueStart > value) {
	                throw new Error("MDCSliderFoundation: start value must be <= end value. " +
	                    ("Current values: [start value: " + valueStart + ", end value: " + value + "]"));
	            }
	            if (minRange < 0) {
	                throw new Error("MDCSliderFoundation: minimum range must be non-negative. " +
	                    ("Current min range: " + minRange));
	            }
	            if (value - valueStart < minRange) {
	                throw new Error("MDCSliderFoundation: start value and end value must differ by at least " +
	                    (minRange + ". Current values: [start value: " + valueStart + ", ") +
	                    ("end value: " + value + "]"));
	            }
	            var numStepsValueStartFromMin = (valueStart - min) / step;
	            var numStepsValueFromMin = (value - min) / step;
	            if (!Number.isInteger(parseFloat(numStepsValueStartFromMin.toFixed(6))) ||
	                !Number.isInteger(parseFloat(numStepsValueFromMin.toFixed(6)))) {
	                throw new Error("MDCSliderFoundation: Slider values must be valid based on the " +
	                    ("step value (" + step + "). Current values: [start value: ") +
	                    (valueStart + ", end value: " + value + ", min: " + min + "]"));
	            }
	        }
	        else { // Single point slider.
	            if (value < min || value > max) {
	                throw new Error("MDCSliderFoundation: value must be in [min, max] range. " +
	                    ("Current values: [value: " + value + ", min: " + min + ", max: " + max + "]"));
	            }
	            var numStepsValueFromMin = (value - min) / step;
	            if (!Number.isInteger(parseFloat(numStepsValueFromMin.toFixed(6)))) {
	                throw new Error("MDCSliderFoundation: Slider value must be valid based on the " +
	                    ("step value (" + step + "). Current value: " + value));
	            }
	        }
	    };
	    MDCSliderFoundation.prototype.registerEventHandlers = function () {
	        this.adapter.registerWindowEventHandler('resize', this.resizeListener);
	        if (MDCSliderFoundation.SUPPORTS_POINTER_EVENTS) {
	            // If supported, use pointer events API with #setPointerCapture.
	            this.adapter.registerEventHandler('pointerdown', this.pointerdownListener);
	            this.adapter.registerEventHandler('pointerup', this.pointerupListener);
	        }
	        else {
	            // Otherwise, fall back to mousedown/touchstart events.
	            this.adapter.registerEventHandler('mousedown', this.mousedownOrTouchstartListener);
	            this.adapter.registerEventHandler('touchstart', this.mousedownOrTouchstartListener);
	        }
	        if (this.isRange) {
	            this.adapter.registerThumbEventHandler(Thumb.START, 'mouseenter', this.thumbMouseenterListener);
	            this.adapter.registerThumbEventHandler(Thumb.START, 'mouseleave', this.thumbMouseleaveListener);
	            this.adapter.registerInputEventHandler(Thumb.START, 'change', this.inputStartChangeListener);
	            this.adapter.registerInputEventHandler(Thumb.START, 'focus', this.inputStartFocusListener);
	            this.adapter.registerInputEventHandler(Thumb.START, 'blur', this.inputStartBlurListener);
	        }
	        this.adapter.registerThumbEventHandler(Thumb.END, 'mouseenter', this.thumbMouseenterListener);
	        this.adapter.registerThumbEventHandler(Thumb.END, 'mouseleave', this.thumbMouseleaveListener);
	        this.adapter.registerInputEventHandler(Thumb.END, 'change', this.inputEndChangeListener);
	        this.adapter.registerInputEventHandler(Thumb.END, 'focus', this.inputEndFocusListener);
	        this.adapter.registerInputEventHandler(Thumb.END, 'blur', this.inputEndBlurListener);
	    };
	    MDCSliderFoundation.prototype.deregisterEventHandlers = function () {
	        this.adapter.deregisterWindowEventHandler('resize', this.resizeListener);
	        if (MDCSliderFoundation.SUPPORTS_POINTER_EVENTS) {
	            this.adapter.deregisterEventHandler('pointerdown', this.pointerdownListener);
	            this.adapter.deregisterEventHandler('pointerup', this.pointerupListener);
	        }
	        else {
	            this.adapter.deregisterEventHandler('mousedown', this.mousedownOrTouchstartListener);
	            this.adapter.deregisterEventHandler('touchstart', this.mousedownOrTouchstartListener);
	        }
	        if (this.isRange) {
	            this.adapter.deregisterThumbEventHandler(Thumb.START, 'mouseenter', this.thumbMouseenterListener);
	            this.adapter.deregisterThumbEventHandler(Thumb.START, 'mouseleave', this.thumbMouseleaveListener);
	            this.adapter.deregisterInputEventHandler(Thumb.START, 'change', this.inputStartChangeListener);
	            this.adapter.deregisterInputEventHandler(Thumb.START, 'focus', this.inputStartFocusListener);
	            this.adapter.deregisterInputEventHandler(Thumb.START, 'blur', this.inputStartBlurListener);
	        }
	        this.adapter.deregisterThumbEventHandler(Thumb.END, 'mouseenter', this.thumbMouseenterListener);
	        this.adapter.deregisterThumbEventHandler(Thumb.END, 'mouseleave', this.thumbMouseleaveListener);
	        this.adapter.deregisterInputEventHandler(Thumb.END, 'change', this.inputEndChangeListener);
	        this.adapter.deregisterInputEventHandler(Thumb.END, 'focus', this.inputEndFocusListener);
	        this.adapter.deregisterInputEventHandler(Thumb.END, 'blur', this.inputEndBlurListener);
	    };
	    MDCSliderFoundation.prototype.handlePointerup = function () {
	        this.handleUp();
	        this.adapter.deregisterEventHandler('pointermove', this.moveListener);
	    };
	    MDCSliderFoundation.SUPPORTS_POINTER_EVENTS = HAS_WINDOW && Boolean(window.PointerEvent) &&
	        // #setPointerCapture is buggy on iOS, so we can't use pointer events
	        // until the following bug is fixed:
	        // https://bugs.webkit.org/show_bug.cgi?id=220196
	        !isIOS();
	    return MDCSliderFoundation;
	}(MDCFoundation));
	function isIOS() {
	    // Source:
	    // https://stackoverflow.com/questions/9038625/detect-if-device-is-ios
	    return [
	        'iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone',
	        'iPod'
	    ].includes(navigator.platform)
	        // iPad on iOS 13 detection
	        || (navigator.userAgent.includes('Mac') && 'ontouchend' in document);
	}
	/**
	 * Given a number, returns the number of digits that appear after the
	 * decimal point.
	 * See
	 * https://stackoverflow.com/questions/9539513/is-there-a-reliable-way-in-javascript-to-obtain-the-number-of-decimal-places-of
	 */
	function getNumDecimalPlaces(n) {
	    // Pull out the fraction and the exponent.
	    var match = /(?:\.(\d+))?(?:[eE]([+\-]?\d+))?$/.exec(String(n));
	    // NaN or Infinity or integer.
	    // We arbitrarily decide that Infinity is integral.
	    if (!match)
	        return 0;
	    var fraction = match[1] || ''; // E.g. 1.234e-2 => 234
	    var exponent = match[2] || 0; // E.g. 1.234e-2 => -2
	    // Count the number of digits in the fraction and subtract the
	    // exponent to simulate moving the decimal point left by exponent places.
	    // 1.234e+2 has 1 fraction digit and '234'.length -  2 == 1
	    // 1.234e-2 has 5 fraction digit and '234'.length - -2 == 5
	    return Math.max(0, // lower limit
	    (fraction === '0' ? 0 : fraction.length) - Number(exponent));
	}

	/* node_modules/@smui/slider/dist/Slider.svelte generated by Svelte v4.2.19 */
	const file$s = "node_modules/@smui/slider/dist/Slider.svelte";

	function get_each_context$2(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[92] = list[i];
		return child_ctx;
	}

	// (56:2) {:else}
	function create_else_block_1$3(ctx) {
		let input_1;
		let input_1_class_value;
		let mounted;
		let dispose;

		let input_1_levels = [
			{
				class: input_1_class_value = classMap({
					[/*input$class*/ ctx[13]]: true,
					'mdc-slider__input': true
				})
			},
			{ type: "range" },
			{ disabled: /*disabled*/ ctx[5] },
			{ step: /*step*/ ctx[9] },
			{ min: /*min*/ ctx[10] },
			{ max: /*max*/ ctx[11] },
			/*inputProps*/ ctx[33],
			/*inputAttrs*/ ctx[24],
			prefixFilter(/*$$restProps*/ ctx[37], 'input$')
		];

		let input_data = {};

		for (let i = 0; i < input_1_levels.length; i += 1) {
			input_data = assign(input_data, input_1_levels[i]);
		}

		const block = {
			c: function create() {
				input_1 = element("input");
				set_attributes(input_1, input_data);
				add_location(input_1, file$s, 56, 4, 1267);
			},
			m: function mount(target, anchor) {
				insert_dev(target, input_1, anchor);
				if (input_1.autofocus) input_1.focus();
				/*input_1_binding*/ ctx[62](input_1);
				set_input_value(input_1, /*value*/ ctx[0]);

				if (!mounted) {
					dispose = [
						listen_dev(input_1, "change", /*input_1_change_input_handler*/ ctx[63]),
						listen_dev(input_1, "input", /*input_1_change_input_handler*/ ctx[63]),
						listen_dev(input_1, "blur", /*blur_handler_2*/ ctx[56], false, false, false, false),
						listen_dev(input_1, "focus", /*focus_handler_2*/ ctx[57], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				set_attributes(input_1, input_data = get_spread_update(input_1_levels, [
					dirty[0] & /*input$class*/ 8192 && input_1_class_value !== (input_1_class_value = classMap({
						[/*input$class*/ ctx[13]]: true,
						'mdc-slider__input': true
					})) && { class: input_1_class_value },
					{ type: "range" },
					dirty[0] & /*disabled*/ 32 && { disabled: /*disabled*/ ctx[5] },
					dirty[0] & /*step*/ 512 && { step: /*step*/ ctx[9] },
					dirty[0] & /*min*/ 1024 && { min: /*min*/ ctx[10] },
					dirty[0] & /*max*/ 2048 && { max: /*max*/ ctx[11] },
					/*inputProps*/ ctx[33],
					dirty[0] & /*inputAttrs*/ 16777216 && /*inputAttrs*/ ctx[24],
					dirty[1] & /*$$restProps*/ 64 && prefixFilter(/*$$restProps*/ ctx[37], 'input$')
				]));

				if (dirty[0] & /*value*/ 1) {
					set_input_value(input_1, /*value*/ ctx[0]);
				}
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(input_1);
				}

				/*input_1_binding*/ ctx[62](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block_1$3.name,
			type: "else",
			source: "(56:2) {:else}",
			ctx
		});

		return block;
	}

	// (20:2) {#if range}
	function create_if_block_5$3(ctx) {
		let input0;
		let input0_class_value;
		let t;
		let input1;
		let input1_class_value;
		let mounted;
		let dispose;

		let input0_levels = [
			{
				class: input0_class_value = classMap({
					[/*input$class*/ ctx[13]]: true,
					'mdc-slider__input': true
				})
			},
			{ type: "range" },
			{ disabled: /*disabled*/ ctx[5] },
			{ step: /*step*/ ctx[9] },
			{ min: /*min*/ ctx[10] },
			{ max: /*end*/ ctx[2] },
			/*inputStartAttrs*/ ctx[25],
			prefixFilter(/*$$restProps*/ ctx[37], 'input$')
		];

		let input_data_1 = {};

		for (let i = 0; i < input0_levels.length; i += 1) {
			input_data_1 = assign(input_data_1, input0_levels[i]);
		}

		let input1_levels = [
			{
				class: input1_class_value = classMap({
					[/*input$class*/ ctx[13]]: true,
					'mdc-slider__input': true
				})
			},
			{ type: "range" },
			{ disabled: /*disabled*/ ctx[5] },
			{ step: /*step*/ ctx[9] },
			{ min: /*start*/ ctx[1] },
			{ max: /*max*/ ctx[11] },
			/*inputProps*/ ctx[33],
			/*inputAttrs*/ ctx[24],
			prefixFilter(/*$$restProps*/ ctx[37], 'input$')
		];

		let input_data = {};

		for (let i = 0; i < input1_levels.length; i += 1) {
			input_data = assign(input_data, input1_levels[i]);
		}

		const block = {
			c: function create() {
				input0 = element("input");
				t = space();
				input1 = element("input");
				set_attributes(input0, input_data_1);
				add_location(input0, file$s, 20, 4, 545);
				set_attributes(input1, input_data);
				add_location(input1, file$s, 37, 4, 895);
			},
			m: function mount(target, anchor) {
				insert_dev(target, input0, anchor);
				if (input0.autofocus) input0.focus();
				/*input0_binding*/ ctx[58](input0);
				set_input_value(input0, /*start*/ ctx[1]);
				insert_dev(target, t, anchor);
				insert_dev(target, input1, anchor);
				if (input1.autofocus) input1.focus();
				/*input1_binding*/ ctx[60](input1);
				set_input_value(input1, /*end*/ ctx[2]);

				if (!mounted) {
					dispose = [
						listen_dev(input0, "change", /*input0_change_input_handler*/ ctx[59]),
						listen_dev(input0, "input", /*input0_change_input_handler*/ ctx[59]),
						listen_dev(input0, "blur", /*blur_handler*/ ctx[54], false, false, false, false),
						listen_dev(input0, "focus", /*focus_handler*/ ctx[55], false, false, false, false),
						listen_dev(input1, "change", /*input1_change_input_handler*/ ctx[61]),
						listen_dev(input1, "input", /*input1_change_input_handler*/ ctx[61]),
						listen_dev(input1, "blur", /*blur_handler_1*/ ctx[52], false, false, false, false),
						listen_dev(input1, "focus", /*focus_handler_1*/ ctx[53], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				set_attributes(input0, input_data_1 = get_spread_update(input0_levels, [
					dirty[0] & /*input$class*/ 8192 && input0_class_value !== (input0_class_value = classMap({
						[/*input$class*/ ctx[13]]: true,
						'mdc-slider__input': true
					})) && { class: input0_class_value },
					{ type: "range" },
					dirty[0] & /*disabled*/ 32 && { disabled: /*disabled*/ ctx[5] },
					dirty[0] & /*step*/ 512 && { step: /*step*/ ctx[9] },
					dirty[0] & /*min*/ 1024 && { min: /*min*/ ctx[10] },
					dirty[0] & /*end*/ 4 && { max: /*end*/ ctx[2] },
					dirty[0] & /*inputStartAttrs*/ 33554432 && /*inputStartAttrs*/ ctx[25],
					dirty[1] & /*$$restProps*/ 64 && prefixFilter(/*$$restProps*/ ctx[37], 'input$')
				]));

				if (dirty[0] & /*start*/ 2) {
					set_input_value(input0, /*start*/ ctx[1]);
				}

				set_attributes(input1, input_data = get_spread_update(input1_levels, [
					dirty[0] & /*input$class*/ 8192 && input1_class_value !== (input1_class_value = classMap({
						[/*input$class*/ ctx[13]]: true,
						'mdc-slider__input': true
					})) && { class: input1_class_value },
					{ type: "range" },
					dirty[0] & /*disabled*/ 32 && { disabled: /*disabled*/ ctx[5] },
					dirty[0] & /*step*/ 512 && { step: /*step*/ ctx[9] },
					dirty[0] & /*start*/ 2 && { min: /*start*/ ctx[1] },
					dirty[0] & /*max*/ 2048 && { max: /*max*/ ctx[11] },
					/*inputProps*/ ctx[33],
					dirty[0] & /*inputAttrs*/ 16777216 && /*inputAttrs*/ ctx[24],
					dirty[1] & /*$$restProps*/ 64 && prefixFilter(/*$$restProps*/ ctx[37], 'input$')
				]));

				if (dirty[0] & /*end*/ 4) {
					set_input_value(input1, /*end*/ ctx[2]);
				}
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(input0);
					detach_dev(t);
					detach_dev(input1);
				}

				/*input0_binding*/ ctx[58](null);
				/*input1_binding*/ ctx[60](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_5$3.name,
			type: "if",
			source: "(20:2) {#if range}",
			ctx
		});

		return block;
	}

	// (87:4) {#if discrete && tickMarks && step > 0}
	function create_if_block_4$3(ctx) {
		let div;
		let each_value = ensure_array_like_dev(/*currentTickMarks*/ ctx[31]);
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
		}

		const block = {
			c: function create() {
				div = element("div");

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				attr_dev(div, "class", "mdc-slider__tick-marks");
				add_location(div, file$s, 87, 6, 2003);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				for (let i = 0; i < each_blocks.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(div, null);
					}
				}
			},
			p: function update(ctx, dirty) {
				if (dirty[1] & /*currentTickMarks*/ 1) {
					each_value = ensure_array_like_dev(/*currentTickMarks*/ ctx[31]);
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$2(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
						} else {
							each_blocks[i] = create_each_block$2(child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(div, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}

					each_blocks.length = each_value.length;
				}
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				destroy_each(each_blocks, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_4$3.name,
			type: "if",
			source: "(87:4) {#if discrete && tickMarks && step > 0}",
			ctx
		});

		return block;
	}

	// (89:8) {#each currentTickMarks as tickMark}
	function create_each_block$2(ctx) {
		let div;
		let div_class_value;

		const block = {
			c: function create() {
				div = element("div");

				attr_dev(div, "class", div_class_value = /*tickMark*/ ctx[92] === TickMark.ACTIVE
				? 'mdc-slider__tick-mark--active'
				: 'mdc-slider__tick-mark--inactive');

				add_location(div, file$s, 89, 10, 2095);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
			},
			p: function update(ctx, dirty) {
				if (dirty[1] & /*currentTickMarks*/ 1 && div_class_value !== (div_class_value = /*tickMark*/ ctx[92] === TickMark.ACTIVE
				? 'mdc-slider__tick-mark--active'
				: 'mdc-slider__tick-mark--inactive')) {
					attr_dev(div, "class", div_class_value);
				}
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block$2.name,
			type: "each",
			source: "(89:8) {#each currentTickMarks as tickMark}",
			ctx
		});

		return block;
	}

	// (158:2) {:else}
	function create_else_block$6(ctx) {
		let div1;
		let t;
		let div0;
		let div1_class_value;
		let div1_style_value;
		let Ripple_action;
		let mounted;
		let dispose;
		let if_block = /*discrete*/ ctx[7] && create_if_block_3$3(ctx);

		const block = {
			c: function create() {
				div1 = element("div");
				if (if_block) if_block.c();
				t = space();
				div0 = element("div");
				attr_dev(div0, "class", "mdc-slider__thumb-knob");
				add_location(div0, file$s, 185, 6, 5243);

				attr_dev(div1, "class", div1_class_value = classMap({
					'mdc-slider__thumb': true,
					.../*thumbClasses*/ ctx[23]
				}));

				attr_dev(div1, "style", div1_style_value = Object.entries(/*thumbStyles*/ ctx[27]).map(func_3).join(' '));
				add_location(div1, file$s, 158, 4, 4337);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div1, anchor);
				if (if_block) if_block.m(div1, null);
				append_dev(div1, t);
				append_dev(div1, div0);
				/*div0_binding_1*/ ctx[74](div0);
				/*div1_binding_1*/ ctx[75](div1);

				if (!mounted) {
					dispose = action_destroyer(Ripple_action = Ripple.call(null, div1, {
						unbounded: true,
						disabled: /*disabled*/ ctx[5],
						active: /*thumbRippleActive*/ ctx[29],
						eventTarget: /*input*/ ctx[15],
						activeTarget: /*input*/ ctx[15],
						addClass: /*Ripple_function_6*/ ctx[76],
						removeClass: /*Ripple_function_7*/ ctx[77],
						addStyle: /*Ripple_function_8*/ ctx[78]
					}));

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (/*discrete*/ ctx[7]) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block_3$3(ctx);
						if_block.c();
						if_block.m(div1, t);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (dirty[0] & /*thumbClasses*/ 8388608 && div1_class_value !== (div1_class_value = classMap({
					'mdc-slider__thumb': true,
					.../*thumbClasses*/ ctx[23]
				}))) {
					attr_dev(div1, "class", div1_class_value);
				}

				if (dirty[0] & /*thumbStyles*/ 134217728 && div1_style_value !== (div1_style_value = Object.entries(/*thumbStyles*/ ctx[27]).map(func_3).join(' '))) {
					attr_dev(div1, "style", div1_style_value);
				}

				if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*disabled, thumbRippleActive, input*/ 536903712) Ripple_action.update.call(null, {
					unbounded: true,
					disabled: /*disabled*/ ctx[5],
					active: /*thumbRippleActive*/ ctx[29],
					eventTarget: /*input*/ ctx[15],
					activeTarget: /*input*/ ctx[15],
					addClass: /*Ripple_function_6*/ ctx[76],
					removeClass: /*Ripple_function_7*/ ctx[77],
					addStyle: /*Ripple_function_8*/ ctx[78]
				});
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div1);
				}

				if (if_block) if_block.d();
				/*div0_binding_1*/ ctx[74](null);
				/*div1_binding_1*/ ctx[75](null);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$6.name,
			type: "else",
			source: "(158:2) {:else}",
			ctx
		});

		return block;
	}

	// (99:2) {#if range}
	function create_if_block$f(ctx) {
		let div1;
		let t0;
		let div0;
		let div1_class_value;
		let div1_style_value;
		let Ripple_action;
		let t1;
		let div3;
		let t2;
		let div2;
		let div3_class_value;
		let div3_style_value;
		let Ripple_action_1;
		let mounted;
		let dispose;
		let if_block0 = /*discrete*/ ctx[7] && create_if_block_2$3(ctx);
		let if_block1 = /*discrete*/ ctx[7] && create_if_block_1$6(ctx);

		const block = {
			c: function create() {
				div1 = element("div");
				if (if_block0) if_block0.c();
				t0 = space();
				div0 = element("div");
				t1 = space();
				div3 = element("div");
				if (if_block1) if_block1.c();
				t2 = space();
				div2 = element("div");
				attr_dev(div0, "class", "mdc-slider__thumb-knob");
				add_location(div0, file$s, 126, 6, 3266);

				attr_dev(div1, "class", div1_class_value = classMap({
					'mdc-slider__thumb': true,
					.../*thumbStartClasses*/ ctx[22]
				}));

				attr_dev(div1, "style", div1_style_value = Object.entries(/*thumbStartStyles*/ ctx[28]).map(func_1$5).join(' '));
				add_location(div1, file$s, 99, 4, 2326);
				attr_dev(div2, "class", "mdc-slider__thumb-knob");
				add_location(div2, file$s, 155, 6, 4251);

				attr_dev(div3, "class", div3_class_value = classMap({
					'mdc-slider__thumb': true,
					.../*thumbClasses*/ ctx[23]
				}));

				attr_dev(div3, "style", div3_style_value = Object.entries(/*thumbStyles*/ ctx[27]).map(func_2$1).join(' '));
				add_location(div3, file$s, 128, 4, 3347);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div1, anchor);
				if (if_block0) if_block0.m(div1, null);
				append_dev(div1, t0);
				append_dev(div1, div0);
				/*div0_binding*/ ctx[64](div0);
				/*div1_binding*/ ctx[65](div1);
				insert_dev(target, t1, anchor);
				insert_dev(target, div3, anchor);
				if (if_block1) if_block1.m(div3, null);
				append_dev(div3, t2);
				append_dev(div3, div2);
				/*div2_binding*/ ctx[69](div2);
				/*div3_binding*/ ctx[70](div3);

				if (!mounted) {
					dispose = [
						action_destroyer(Ripple_action = Ripple.call(null, div1, {
							unbounded: true,
							disabled: /*disabled*/ ctx[5],
							active: /*thumbStartRippleActive*/ ctx[30],
							eventTarget: /*inputStart*/ ctx[16],
							activeTarget: /*inputStart*/ ctx[16],
							addClass: /*Ripple_function*/ ctx[66],
							removeClass: /*Ripple_function_1*/ ctx[67],
							addStyle: /*Ripple_function_2*/ ctx[68]
						})),
						action_destroyer(Ripple_action_1 = Ripple.call(null, div3, {
							unbounded: true,
							disabled: /*disabled*/ ctx[5],
							active: /*thumbRippleActive*/ ctx[29],
							eventTarget: /*input*/ ctx[15],
							activeTarget: /*input*/ ctx[15],
							addClass: /*Ripple_function_3*/ ctx[71],
							removeClass: /*Ripple_function_4*/ ctx[72],
							addStyle: /*Ripple_function_5*/ ctx[73]
						}))
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (/*discrete*/ ctx[7]) {
					if (if_block0) {
						if_block0.p(ctx, dirty);
					} else {
						if_block0 = create_if_block_2$3(ctx);
						if_block0.c();
						if_block0.m(div1, t0);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (dirty[0] & /*thumbStartClasses*/ 4194304 && div1_class_value !== (div1_class_value = classMap({
					'mdc-slider__thumb': true,
					.../*thumbStartClasses*/ ctx[22]
				}))) {
					attr_dev(div1, "class", div1_class_value);
				}

				if (dirty[0] & /*thumbStartStyles*/ 268435456 && div1_style_value !== (div1_style_value = Object.entries(/*thumbStartStyles*/ ctx[28]).map(func_1$5).join(' '))) {
					attr_dev(div1, "style", div1_style_value);
				}

				if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*disabled, thumbStartRippleActive, inputStart*/ 1073807392) Ripple_action.update.call(null, {
					unbounded: true,
					disabled: /*disabled*/ ctx[5],
					active: /*thumbStartRippleActive*/ ctx[30],
					eventTarget: /*inputStart*/ ctx[16],
					activeTarget: /*inputStart*/ ctx[16],
					addClass: /*Ripple_function*/ ctx[66],
					removeClass: /*Ripple_function_1*/ ctx[67],
					addStyle: /*Ripple_function_2*/ ctx[68]
				});

				if (/*discrete*/ ctx[7]) {
					if (if_block1) {
						if_block1.p(ctx, dirty);
					} else {
						if_block1 = create_if_block_1$6(ctx);
						if_block1.c();
						if_block1.m(div3, t2);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (dirty[0] & /*thumbClasses*/ 8388608 && div3_class_value !== (div3_class_value = classMap({
					'mdc-slider__thumb': true,
					.../*thumbClasses*/ ctx[23]
				}))) {
					attr_dev(div3, "class", div3_class_value);
				}

				if (dirty[0] & /*thumbStyles*/ 134217728 && div3_style_value !== (div3_style_value = Object.entries(/*thumbStyles*/ ctx[27]).map(func_2$1).join(' '))) {
					attr_dev(div3, "style", div3_style_value);
				}

				if (Ripple_action_1 && is_function(Ripple_action_1.update) && dirty[0] & /*disabled, thumbRippleActive, input*/ 536903712) Ripple_action_1.update.call(null, {
					unbounded: true,
					disabled: /*disabled*/ ctx[5],
					active: /*thumbRippleActive*/ ctx[29],
					eventTarget: /*input*/ ctx[15],
					activeTarget: /*input*/ ctx[15],
					addClass: /*Ripple_function_3*/ ctx[71],
					removeClass: /*Ripple_function_4*/ ctx[72],
					addStyle: /*Ripple_function_5*/ ctx[73]
				});
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div1);
					detach_dev(t1);
					detach_dev(div3);
				}

				if (if_block0) if_block0.d();
				/*div0_binding*/ ctx[64](null);
				/*div1_binding*/ ctx[65](null);
				if (if_block1) if_block1.d();
				/*div2_binding*/ ctx[69](null);
				/*div3_binding*/ ctx[70](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$f.name,
			type: "if",
			source: "(99:2) {#if range}",
			ctx
		});

		return block;
	}

	// (179:6) {#if discrete}
	function create_if_block_3$3(ctx) {
		let div1;
		let div0;
		let span;
		let t;

		const block = {
			c: function create() {
				div1 = element("div");
				div0 = element("div");
				span = element("span");
				t = text$2(/*value*/ ctx[0]);
				attr_dev(span, "class", "mdc-slider__value-indicator-text");
				add_location(span, file$s, 181, 12, 5131);
				attr_dev(div0, "class", "mdc-slider__value-indicator");
				add_location(div0, file$s, 180, 10, 5077);
				attr_dev(div1, "class", "mdc-slider__value-indicator-container");
				attr_dev(div1, "aria-hidden", "true");
				add_location(div1, file$s, 179, 8, 4996);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div1, anchor);
				append_dev(div1, div0);
				append_dev(div0, span);
				append_dev(span, t);
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*value*/ 1) set_data_dev(t, /*value*/ ctx[0]);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div1);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_3$3.name,
			type: "if",
			source: "(179:6) {#if discrete}",
			ctx
		});

		return block;
	}

	// (120:6) {#if discrete}
	function create_if_block_2$3(ctx) {
		let div1;
		let div0;
		let span;
		let t;

		const block = {
			c: function create() {
				div1 = element("div");
				div0 = element("div");
				span = element("span");
				t = text$2(/*start*/ ctx[1]);
				attr_dev(span, "class", "mdc-slider__value-indicator-text");
				add_location(span, file$s, 122, 12, 3154);
				attr_dev(div0, "class", "mdc-slider__value-indicator");
				add_location(div0, file$s, 121, 10, 3100);
				attr_dev(div1, "class", "mdc-slider__value-indicator-container");
				attr_dev(div1, "aria-hidden", "true");
				add_location(div1, file$s, 120, 8, 3019);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div1, anchor);
				append_dev(div1, div0);
				append_dev(div0, span);
				append_dev(span, t);
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*start*/ 2) set_data_dev(t, /*start*/ ctx[1]);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div1);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_2$3.name,
			type: "if",
			source: "(120:6) {#if discrete}",
			ctx
		});

		return block;
	}

	// (149:6) {#if discrete}
	function create_if_block_1$6(ctx) {
		let div1;
		let div0;
		let span;
		let t;

		const block = {
			c: function create() {
				div1 = element("div");
				div0 = element("div");
				span = element("span");
				t = text$2(/*end*/ ctx[2]);
				attr_dev(span, "class", "mdc-slider__value-indicator-text");
				add_location(span, file$s, 151, 12, 4141);
				attr_dev(div0, "class", "mdc-slider__value-indicator");
				add_location(div0, file$s, 150, 10, 4087);
				attr_dev(div1, "class", "mdc-slider__value-indicator-container");
				attr_dev(div1, "aria-hidden", "true");
				add_location(div1, file$s, 149, 8, 4006);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div1, anchor);
				append_dev(div1, div0);
				append_dev(div0, span);
				append_dev(span, t);
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*end*/ 4) set_data_dev(t, /*end*/ ctx[2]);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div1);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$6.name,
			type: "if",
			source: "(149:6) {#if discrete}",
			ctx
		});

		return block;
	}

	function create_fragment$v(ctx) {
		let div4;
		let t0;
		let div3;
		let div0;
		let t1;
		let div2;
		let div1;
		let div1_style_value;
		let t2;
		let t3;
		let div4_class_value;
		let useActions_action;
		let mounted;
		let dispose;

		function select_block_type(ctx, dirty) {
			if (/*range*/ ctx[6]) return create_if_block_5$3;
			return create_else_block_1$3;
		}

		let current_block_type = select_block_type(ctx);
		let if_block0 = current_block_type(ctx);
		let if_block1 = /*discrete*/ ctx[7] && /*tickMarks*/ ctx[8] && /*step*/ ctx[9] > 0 && create_if_block_4$3(ctx);

		function select_block_type_1(ctx, dirty) {
			if (/*range*/ ctx[6]) return create_if_block$f;
			return create_else_block$6;
		}

		let current_block_type_1 = select_block_type_1(ctx);
		let if_block2 = current_block_type_1(ctx);

		let div4_levels = [
			{
				class: div4_class_value = Object.entries({
					[/*className*/ ctx[4]]: true,
					'mdc-slider': true,
					'mdc-slider--range': /*range*/ ctx[6],
					'mdc-slider--discrete': /*discrete*/ ctx[7],
					'mdc-slider--tick-marks': /*discrete*/ ctx[7] && /*tickMarks*/ ctx[8],
					'mdc-slider--disabled': /*disabled*/ ctx[5],
					.../*internalClasses*/ ctx[21]
				}).filter(func_4).map(func_5).join(' ')
			},
			/*range*/ ctx[6]
			? {
					'data-min-range': `${/*minRange*/ ctx[12]}`
				}
			: {},
			exclude(/*$$restProps*/ ctx[37], ['input$'])
		];

		let div_data_4 = {};

		for (let i = 0; i < div4_levels.length; i += 1) {
			div_data_4 = assign(div_data_4, div4_levels[i]);
		}

		const block = {
			c: function create() {
				div4 = element("div");
				if_block0.c();
				t0 = space();
				div3 = element("div");
				div0 = element("div");
				t1 = space();
				div2 = element("div");
				div1 = element("div");
				t2 = space();
				if (if_block1) if_block1.c();
				t3 = space();
				if_block2.c();
				attr_dev(div0, "class", "mdc-slider__track--inactive");
				add_location(div0, file$s, 77, 4, 1660);
				attr_dev(div1, "class", "mdc-slider__track--active_fill");
				attr_dev(div1, "style", div1_style_value = Object.entries(/*trackActiveStyles*/ ctx[26]).map(func$i).join(' '));
				add_location(div1, file$s, 79, 6, 1754);
				attr_dev(div2, "class", "mdc-slider__track--active");
				add_location(div2, file$s, 78, 4, 1708);
				attr_dev(div3, "class", "mdc-slider__track");
				add_location(div3, file$s, 76, 2, 1624);
				set_attributes(div4, div_data_4);
				add_location(div4, file$s, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div4, anchor);
				if_block0.m(div4, null);
				append_dev(div4, t0);
				append_dev(div4, div3);
				append_dev(div3, div0);
				append_dev(div3, t1);
				append_dev(div3, div2);
				append_dev(div2, div1);
				append_dev(div3, t2);
				if (if_block1) if_block1.m(div3, null);
				append_dev(div4, t3);
				if_block2.m(div4, null);
				/*div4_binding*/ ctx[79](div4);

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, div4, /*use*/ ctx[3])),
						action_destroyer(/*forwardEvents*/ ctx[32].call(null, div4))
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0.d(1);
					if_block0 = current_block_type(ctx);

					if (if_block0) {
						if_block0.c();
						if_block0.m(div4, t0);
					}
				}

				if (dirty[0] & /*trackActiveStyles*/ 67108864 && div1_style_value !== (div1_style_value = Object.entries(/*trackActiveStyles*/ ctx[26]).map(func$i).join(' '))) {
					attr_dev(div1, "style", div1_style_value);
				}

				if (/*discrete*/ ctx[7] && /*tickMarks*/ ctx[8] && /*step*/ ctx[9] > 0) {
					if (if_block1) {
						if_block1.p(ctx, dirty);
					} else {
						if_block1 = create_if_block_4$3(ctx);
						if_block1.c();
						if_block1.m(div3, null);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2.d(1);
					if_block2 = current_block_type_1(ctx);

					if (if_block2) {
						if_block2.c();
						if_block2.m(div4, null);
					}
				}

				set_attributes(div4, div_data_4 = get_spread_update(div4_levels, [
					dirty[0] & /*className, range, discrete, tickMarks, disabled, internalClasses*/ 2097648 && div4_class_value !== (div4_class_value = Object.entries({
						[/*className*/ ctx[4]]: true,
						'mdc-slider': true,
						'mdc-slider--range': /*range*/ ctx[6],
						'mdc-slider--discrete': /*discrete*/ ctx[7],
						'mdc-slider--tick-marks': /*discrete*/ ctx[7] && /*tickMarks*/ ctx[8],
						'mdc-slider--disabled': /*disabled*/ ctx[5],
						.../*internalClasses*/ ctx[21]
					}).filter(func_4).map(func_5).join(' ')) && { class: div4_class_value },
					dirty[0] & /*range, minRange*/ 4160 && (/*range*/ ctx[6]
					? {
							'data-min-range': `${/*minRange*/ ctx[12]}`
						}
					: {}),
					dirty[1] & /*$$restProps*/ 64 && exclude(/*$$restProps*/ ctx[37], ['input$'])
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 8) useActions_action.update.call(null, /*use*/ ctx[3]);
			},
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div4);
				}

				if_block0.d();
				if (if_block1) if_block1.d();
				if_block2.d();
				/*div4_binding*/ ctx[79](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$v.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$i = ([name, value]) => `${name}: ${value};`;
	const func_1$5 = ([name, value]) => `${name}: ${value};`;
	const func_2$1 = ([name, value]) => `${name}: ${value};`;
	const func_3 = ([name, value]) => `${name}: ${value};`;
	const func_4 = ([name, value]) => name !== '' && value;
	const func_5 = ([name]) => name;

	function instance_1$j($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","disabled","range","discrete","tickMarks","step","min","max","minRange","value","start","end","valueToAriaValueTextFn","hideFocusStylesForPointerEvents","input$class","layout","getId","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Slider', slots, []);
		var _a;
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { disabled = false } = $$props;
		let { range = false } = $$props;
		let { discrete = false } = $$props;
		let { tickMarks = false } = $$props;
		let { step = 1 } = $$props;
		let { min = 0 } = $$props;
		let { max = 100 } = $$props;
		let { minRange = 0 } = $$props;
		let { value = undefined } = $$props;
		let { start = undefined } = $$props;
		let { end = undefined } = $$props;
		let { valueToAriaValueTextFn = value => `${value}` } = $$props;
		let { hideFocusStylesForPointerEvents = false } = $$props;
		let { input$class = '' } = $$props;
		let element;
		let instance;
		let input;
		let inputStart = undefined;
		let thumbEl;
		let thumbStart = undefined;
		let thumbKnob;
		let thumbKnobStart = undefined;
		let internalClasses = {};
		let thumbStartClasses = {};
		let thumbClasses = {};
		let inputAttrs = {};
		let inputStartAttrs = {};
		let trackActiveStyles = {};
		let thumbStyles = {};
		let thumbStartStyles = {};
		let thumbRippleActive = false;
		let thumbStartRippleActive = false;
		let currentTickMarks;

		let inputProps = (_a = getContext('SMUI:generic:input:props')) !== null && _a !== void 0
		? _a
		: {};

		let addLayoutListener = getContext('SMUI:addLayoutListener');
		let removeLayoutListener;
		let previousMin = min;
		let previousMax = max;
		let previousStep = step;
		let previousDiscrete = discrete;
		let previousTickMarks = tickMarks;

		if (tickMarks && step > 0) {
			const absMax = max + Math.abs(min);

			if (range && typeof start === 'number' && typeof end === 'number') {
				const absStart = start + Math.abs(min);
				const absEnd = end + Math.abs(min);

				currentTickMarks = [
					...Array(absStart / step).map(() => TickMark.INACTIVE),
					...Array(absMax / step - absStart / step - (absMax - absEnd) / step + 1).map(() => TickMark.ACTIVE),
					...Array((absMax - absEnd) / step).map(() => TickMark.INACTIVE)
				];
			} else if (typeof value === 'number') {
				const absValue = value + Math.abs(min);

				currentTickMarks = [
					...Array(absValue / step + 1).map(() => TickMark.ACTIVE),
					...Array((absMax - absValue) / step).map(() => TickMark.INACTIVE)
				];
			}
		}

		if (range && typeof start === 'number' && typeof end === 'number') {
			const percent = (end - start) / (max - min);
			const percentStart = start / (max - min);
			const percentEnd = end / (max - min);
			trackActiveStyles.transform = `scaleX(${percent})`;
			thumbStyles.left = `calc(${percentEnd * 100}% -24px)`;
			thumbStartStyles.left = `calc(${percentStart * 100}% -24px)`;
		} else if (typeof value === 'number') {
			const percent = value / (max - min);
			trackActiveStyles.transform = `scaleX(${percent})`;
			thumbStyles.left = `calc(${percent * 100}% -24px)`;
		}

		if (addLayoutListener) {
			removeLayoutListener = addLayoutListener(layout);
		}

		let previousValue = value;
		let previousStart = start;
		let previousEnd = end;

		onMount(() => {
			$$invalidate(43, instance = new MDCSliderFoundation({
					hasClass,
					addClass,
					removeClass,
					addThumbClass,
					removeThumbClass,
					getAttribute: attribute => getElement().getAttribute(attribute),
					getInputValue: thumb => {
						var _a;

						return `${(_a = range ? thumb === Thumb.START ? start : end : value) !== null && _a !== void 0
					? _a
					: 0}`;
					},
					setInputValue: (val, thumb) => {
						if (range) {
							if (thumb === Thumb.START) {
								$$invalidate(1, start = Number(val));
								$$invalidate(50, previousStart = start);
							} else {
								$$invalidate(2, end = Number(val));
								$$invalidate(51, previousEnd = end);
							}
						} else {
							$$invalidate(0, value = Number(val));
							$$invalidate(49, previousValue = value);
						}
					},
					getInputAttribute: getInputAttr,
					setInputAttribute: addInputAttr,
					removeInputAttribute: removeInputAttr,
					focusInput: thumb => {
						if (range && thumb === Thumb.START && inputStart) {
							inputStart.focus();
						} else {
							input.focus();
						}
					},
					isInputFocused: thumb => (range && thumb === Thumb.START ? inputStart : input) === document.activeElement,
					shouldHideFocusStylesForPointerEvents: () => hideFocusStylesForPointerEvents,
					getThumbKnobWidth: thumb => {
						var _a;

						return ((_a = range && thumb === Thumb.START
						? thumbKnobStart
						: thumbKnob) !== null && _a !== void 0
						? _a
						: thumbKnob).getBoundingClientRect().width;
					},
					getThumbBoundingClientRect: thumb => {
						var _a;

						return ((_a = range && thumb === Thumb.START ? thumbStart : thumbEl) !== null && _a !== void 0
						? _a
						: thumbEl).getBoundingClientRect();
					},
					getBoundingClientRect: () => getElement().getBoundingClientRect(),
					getValueIndicatorContainerWidth: thumb => {
						var _a;

						return ((_a = range && thumb === Thumb.START ? thumbStart : thumbEl) !== null && _a !== void 0
						? _a
						: thumbEl).querySelector(`.mdc-slider__value-indicator-container`).getBoundingClientRect().width;
					},
					isRTL: () => getComputedStyle(getElement()).direction === 'rtl',
					setThumbStyleProperty: addThumbStyle,
					removeThumbStyleProperty: removeThumbStyle,
					setTrackActiveStyleProperty: addTrackActiveStyle,
					removeTrackActiveStyleProperty: removeTrackActiveStyle,
					// Handled by Svelte.
					setValueIndicatorText: (_value, _thumb) => undefined,
					getValueToAriaValueTextFn: () => valueToAriaValueTextFn,
					updateTickMarks: tickMarks => {
						$$invalidate(31, currentTickMarks = tickMarks);
					},
					setPointerCapture: pointerId => {
						getElement().setPointerCapture(pointerId);
					},
					emitChangeEvent: (value, thumb) => {
						dispatch(getElement(), 'SMUISlider:change', { value, thumb }, undefined, true);
					},
					emitInputEvent: (value, thumb) => {
						dispatch(getElement(), 'SMUISlider:input', { value, thumb }, undefined, true);
					},
					emitDragStartEvent: (_, thumb) => {
						// Emitting event is not yet implemented. See issue:
						// https://github.com/material-components/material-components-web/issues/6448
						if (range && thumb === Thumb.START) {
							$$invalidate(30, thumbStartRippleActive = true);
						} else {
							$$invalidate(29, thumbRippleActive = true);
						}
					},
					emitDragEndEvent: (_, thumb) => {
						// Emitting event is not yet implemented. See issue:
						// https://github.com/material-components/material-components-web/issues/6448
						if (range && thumb === Thumb.START) {
							$$invalidate(30, thumbStartRippleActive = false);
						} else {
							$$invalidate(29, thumbRippleActive = false);
						}
					},
					registerEventHandler: (evtType, handler) => {
						getElement().addEventListener(evtType, handler);
					},
					deregisterEventHandler: (evtType, handler) => {
						getElement().removeEventListener(evtType, handler);
					},
					registerThumbEventHandler: (thumb, evtType, handler) => {
						var _a;

						(_a = range && thumb === Thumb.START ? thumbStart : thumbEl) === null || _a === void 0
						? void 0
						: _a.addEventListener(evtType, handler);
					},
					deregisterThumbEventHandler: (thumb, evtType, handler) => {
						var _a;

						(_a = range && thumb === Thumb.START ? thumbStart : thumbEl) === null || _a === void 0
						? void 0
						: _a.removeEventListener(evtType, handler);
					},
					registerInputEventHandler: (thumb, evtType, handler) => {
						var _a;

						(_a = range && thumb === Thumb.START ? inputStart : input) === null || _a === void 0
						? void 0
						: _a.addEventListener(evtType, handler);
					},
					deregisterInputEventHandler: (thumb, evtType, handler) => {
						var _a;

						(_a = range && thumb === Thumb.START ? inputStart : input) === null || _a === void 0
						? void 0
						: _a.removeEventListener(evtType, handler);
					},
					registerBodyEventHandler: (evtType, handler) => {
						document.body.addEventListener(evtType, handler);
					},
					deregisterBodyEventHandler: (evtType, handler) => {
						document.body.removeEventListener(evtType, handler);
					},
					registerWindowEventHandler: (evtType, handler) => {
						window.addEventListener(evtType, handler);
					},
					deregisterWindowEventHandler: (evtType, handler) => {
						window.removeEventListener(evtType, handler);
					}
				}));

			const accessor = {
				get element() {
					return getElement();
				},
				activateRipple() {
					if (!disabled) {
						$$invalidate(29, thumbRippleActive = true);
					}
				},
				deactivateRipple() {
					$$invalidate(29, thumbRippleActive = false);
				}
			};

			dispatch(element, 'SMUIGenericInput:mount', accessor);
			instance.init();
			instance.layout({ skipUpdateUI: true });

			return () => {
				dispatch(element, 'SMUIGenericInput:unmount', accessor);
				instance.destroy();
			};
		});

		onDestroy(() => {
			if (removeLayoutListener) {
				removeLayoutListener();
			}
		});

		function hasClass(className) {
			return className in internalClasses
			? internalClasses[className]
			: getElement().classList.contains(className);
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(21, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(21, internalClasses[className] = false, internalClasses);
			}
		}

		function addThumbClass(className, thumb) {
			if (range && thumb === Thumb.START) {
				if (!thumbStartClasses[className]) {
					$$invalidate(22, thumbStartClasses[className] = true, thumbStartClasses);
				}
			} else {
				if (!thumbClasses[className]) {
					$$invalidate(23, thumbClasses[className] = true, thumbClasses);
				}
			}
		}

		function removeThumbClass(className, thumb) {
			if (range && thumb === Thumb.START) {
				if (!(className in thumbStartClasses) || thumbStartClasses[className]) {
					$$invalidate(22, thumbStartClasses[className] = false, thumbStartClasses);
				}
			} else {
				if (!(className in thumbClasses) || thumbClasses[className]) {
					$$invalidate(23, thumbClasses[className] = false, thumbClasses);
				}
			}
		}

		function addThumbStyle(name, value, thumb) {
			if (range && thumb === Thumb.START) {
				if (thumbStartStyles[name] != value) {
					if (value === '' || value == null) {
						delete thumbStartStyles[name];
						$$invalidate(28, thumbStartStyles);
					} else {
						$$invalidate(28, thumbStartStyles[name] = value, thumbStartStyles);
					}
				}
			} else {
				if (thumbStyles[name] != value) {
					if (value === '' || value == null) {
						delete thumbStyles[name];
						$$invalidate(27, thumbStyles);
					} else {
						$$invalidate(27, thumbStyles[name] = value, thumbStyles);
					}
				}
			}
		}

		function removeThumbStyle(name, thumb) {
			if (range && thumb === Thumb.START) {
				if (name in thumbStartStyles) {
					delete thumbStartStyles[name];
					$$invalidate(28, thumbStartStyles);
				}
			} else {
				if (name in thumbStyles) {
					delete thumbStyles[name];
					$$invalidate(27, thumbStyles);
				}
			}
		}

		function getInputAttr(name, thumb) {
			var _a, _b, _c;

			// Some custom logic for "value", since Svelte doesn't seem to actually
			// set the attribute, just the DOM property.
			if (range && thumb === Thumb.START) {
				if (name === 'value') {
					return `${start}`;
				}

				return name in inputStartAttrs
				? (_a = inputStartAttrs[name]) !== null && _a !== void 0
					? _a
					: null
				: (_b = inputStart === null || inputStart === void 0
					? void 0
					: inputStart.getAttribute(name)) !== null && _b !== void 0
					? _b
					: null;
			} else {
				if (name === 'value') {
					return `${range ? end : value}`;
				}

				return name in inputAttrs
				? (_c = inputAttrs[name]) !== null && _c !== void 0
					? _c
					: null
				: input.getAttribute(name);
			}
		}

		function addInputAttr(name, value, thumb) {
			if (range && thumb === Thumb.START) {
				if (inputStartAttrs[name] !== value) {
					$$invalidate(25, inputStartAttrs[name] = value, inputStartAttrs);
				}
			} else {
				if (inputAttrs[name] !== value) {
					$$invalidate(24, inputAttrs[name] = value, inputAttrs);
				}
			}
		}

		function removeInputAttr(name, thumb) {
			if (range && thumb === Thumb.START) {
				if (!(name in inputStartAttrs) || inputStartAttrs[name] != null) {
					$$invalidate(25, inputStartAttrs[name] = undefined, inputStartAttrs);
				}
			} else {
				if (!(name in inputAttrs) || inputAttrs[name] != null) {
					$$invalidate(24, inputAttrs[name] = undefined, inputAttrs);
				}
			}
		}

		function addTrackActiveStyle(name, value) {
			if (trackActiveStyles[name] != value) {
				if (value === '' || value == null) {
					delete trackActiveStyles[name];
					$$invalidate(26, trackActiveStyles);
				} else {
					$$invalidate(26, trackActiveStyles[name] = value, trackActiveStyles);
				}
			}
		}

		function removeTrackActiveStyle(name) {
			if (name in trackActiveStyles) {
				delete trackActiveStyles[name];
				$$invalidate(26, trackActiveStyles);
			}
		}

		function layout() {
			return instance.layout();
		}

		function getId() {
			return inputProps && inputProps.id;
		}

		function getElement() {
			return element;
		}

		function blur_handler_1(event) {
			bubble.call(this, $$self, event);
		}

		function focus_handler_1(event) {
			bubble.call(this, $$self, event);
		}

		function blur_handler(event) {
			bubble.call(this, $$self, event);
		}

		function focus_handler(event) {
			bubble.call(this, $$self, event);
		}

		function blur_handler_2(event) {
			bubble.call(this, $$self, event);
		}

		function focus_handler_2(event) {
			bubble.call(this, $$self, event);
		}

		function input0_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				inputStart = $$value;
				$$invalidate(16, inputStart);
			});
		}

		function input0_change_input_handler() {
			start = to_number(this.value);
			$$invalidate(1, start);
		}

		function input1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				input = $$value;
				$$invalidate(15, input);
			});
		}

		function input1_change_input_handler() {
			end = to_number(this.value);
			$$invalidate(2, end);
		}

		function input_1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				input = $$value;
				$$invalidate(15, input);
			});
		}

		function input_1_change_input_handler() {
			value = to_number(this.value);
			$$invalidate(0, value);
		}

		function div0_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				thumbKnobStart = $$value;
				$$invalidate(20, thumbKnobStart);
			});
		}

		function div1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				thumbStart = $$value;
				$$invalidate(18, thumbStart);
			});
		}

		const Ripple_function = className => addThumbClass(className, Thumb.START);
		const Ripple_function_1 = className => removeThumbClass(className, Thumb.START);
		const Ripple_function_2 = (name, value) => addThumbStyle(name, value, Thumb.START);

		function div2_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				thumbKnob = $$value;
				$$invalidate(19, thumbKnob);
			});
		}

		function div3_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				thumbEl = $$value;
				$$invalidate(17, thumbEl);
			});
		}

		const Ripple_function_3 = className => addThumbClass(className, Thumb.END);
		const Ripple_function_4 = className => removeThumbClass(className, Thumb.END);
		const Ripple_function_5 = (name, value) => addThumbStyle(name, value, Thumb.END);

		function div0_binding_1($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				thumbKnob = $$value;
				$$invalidate(19, thumbKnob);
			});
		}

		function div1_binding_1($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				thumbEl = $$value;
				$$invalidate(17, thumbEl);
			});
		}

		const Ripple_function_6 = className => addThumbClass(className, Thumb.END);
		const Ripple_function_7 = className => removeThumbClass(className, Thumb.END);
		const Ripple_function_8 = (name, value) => addThumbStyle(name, value, Thumb.END);

		function div4_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(14, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(37, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(3, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(4, className = $$new_props.class);
			if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
			if ('range' in $$new_props) $$invalidate(6, range = $$new_props.range);
			if ('discrete' in $$new_props) $$invalidate(7, discrete = $$new_props.discrete);
			if ('tickMarks' in $$new_props) $$invalidate(8, tickMarks = $$new_props.tickMarks);
			if ('step' in $$new_props) $$invalidate(9, step = $$new_props.step);
			if ('min' in $$new_props) $$invalidate(10, min = $$new_props.min);
			if ('max' in $$new_props) $$invalidate(11, max = $$new_props.max);
			if ('minRange' in $$new_props) $$invalidate(12, minRange = $$new_props.minRange);
			if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
			if ('start' in $$new_props) $$invalidate(1, start = $$new_props.start);
			if ('end' in $$new_props) $$invalidate(2, end = $$new_props.end);
			if ('valueToAriaValueTextFn' in $$new_props) $$invalidate(38, valueToAriaValueTextFn = $$new_props.valueToAriaValueTextFn);
			if ('hideFocusStylesForPointerEvents' in $$new_props) $$invalidate(39, hideFocusStylesForPointerEvents = $$new_props.hideFocusStylesForPointerEvents);
			if ('input$class' in $$new_props) $$invalidate(13, input$class = $$new_props.input$class);
		};

		$$self.$capture_state = () => ({
			_a,
			MDCSliderFoundation,
			Thumb,
			TickMark,
			onMount,
			onDestroy,
			getContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			exclude,
			prefixFilter,
			useActions,
			dispatch,
			Ripple,
			forwardEvents,
			use,
			className,
			disabled,
			range,
			discrete,
			tickMarks,
			step,
			min,
			max,
			minRange,
			value,
			start,
			end,
			valueToAriaValueTextFn,
			hideFocusStylesForPointerEvents,
			input$class,
			element,
			instance,
			input,
			inputStart,
			thumbEl,
			thumbStart,
			thumbKnob,
			thumbKnobStart,
			internalClasses,
			thumbStartClasses,
			thumbClasses,
			inputAttrs,
			inputStartAttrs,
			trackActiveStyles,
			thumbStyles,
			thumbStartStyles,
			thumbRippleActive,
			thumbStartRippleActive,
			currentTickMarks,
			inputProps,
			addLayoutListener,
			removeLayoutListener,
			previousMin,
			previousMax,
			previousStep,
			previousDiscrete,
			previousTickMarks,
			previousValue,
			previousStart,
			previousEnd,
			hasClass,
			addClass,
			removeClass,
			addThumbClass,
			removeThumbClass,
			addThumbStyle,
			removeThumbStyle,
			getInputAttr,
			addInputAttr,
			removeInputAttr,
			addTrackActiveStyle,
			removeTrackActiveStyle,
			layout,
			getId,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('_a' in $$props) _a = $$new_props._a;
			if ('use' in $$props) $$invalidate(3, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(4, className = $$new_props.className);
			if ('disabled' in $$props) $$invalidate(5, disabled = $$new_props.disabled);
			if ('range' in $$props) $$invalidate(6, range = $$new_props.range);
			if ('discrete' in $$props) $$invalidate(7, discrete = $$new_props.discrete);
			if ('tickMarks' in $$props) $$invalidate(8, tickMarks = $$new_props.tickMarks);
			if ('step' in $$props) $$invalidate(9, step = $$new_props.step);
			if ('min' in $$props) $$invalidate(10, min = $$new_props.min);
			if ('max' in $$props) $$invalidate(11, max = $$new_props.max);
			if ('minRange' in $$props) $$invalidate(12, minRange = $$new_props.minRange);
			if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
			if ('start' in $$props) $$invalidate(1, start = $$new_props.start);
			if ('end' in $$props) $$invalidate(2, end = $$new_props.end);
			if ('valueToAriaValueTextFn' in $$props) $$invalidate(38, valueToAriaValueTextFn = $$new_props.valueToAriaValueTextFn);
			if ('hideFocusStylesForPointerEvents' in $$props) $$invalidate(39, hideFocusStylesForPointerEvents = $$new_props.hideFocusStylesForPointerEvents);
			if ('input$class' in $$props) $$invalidate(13, input$class = $$new_props.input$class);
			if ('element' in $$props) $$invalidate(14, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(43, instance = $$new_props.instance);
			if ('input' in $$props) $$invalidate(15, input = $$new_props.input);
			if ('inputStart' in $$props) $$invalidate(16, inputStart = $$new_props.inputStart);
			if ('thumbEl' in $$props) $$invalidate(17, thumbEl = $$new_props.thumbEl);
			if ('thumbStart' in $$props) $$invalidate(18, thumbStart = $$new_props.thumbStart);
			if ('thumbKnob' in $$props) $$invalidate(19, thumbKnob = $$new_props.thumbKnob);
			if ('thumbKnobStart' in $$props) $$invalidate(20, thumbKnobStart = $$new_props.thumbKnobStart);
			if ('internalClasses' in $$props) $$invalidate(21, internalClasses = $$new_props.internalClasses);
			if ('thumbStartClasses' in $$props) $$invalidate(22, thumbStartClasses = $$new_props.thumbStartClasses);
			if ('thumbClasses' in $$props) $$invalidate(23, thumbClasses = $$new_props.thumbClasses);
			if ('inputAttrs' in $$props) $$invalidate(24, inputAttrs = $$new_props.inputAttrs);
			if ('inputStartAttrs' in $$props) $$invalidate(25, inputStartAttrs = $$new_props.inputStartAttrs);
			if ('trackActiveStyles' in $$props) $$invalidate(26, trackActiveStyles = $$new_props.trackActiveStyles);
			if ('thumbStyles' in $$props) $$invalidate(27, thumbStyles = $$new_props.thumbStyles);
			if ('thumbStartStyles' in $$props) $$invalidate(28, thumbStartStyles = $$new_props.thumbStartStyles);
			if ('thumbRippleActive' in $$props) $$invalidate(29, thumbRippleActive = $$new_props.thumbRippleActive);
			if ('thumbStartRippleActive' in $$props) $$invalidate(30, thumbStartRippleActive = $$new_props.thumbStartRippleActive);
			if ('currentTickMarks' in $$props) $$invalidate(31, currentTickMarks = $$new_props.currentTickMarks);
			if ('inputProps' in $$props) $$invalidate(33, inputProps = $$new_props.inputProps);
			if ('addLayoutListener' in $$props) addLayoutListener = $$new_props.addLayoutListener;
			if ('removeLayoutListener' in $$props) removeLayoutListener = $$new_props.removeLayoutListener;
			if ('previousMin' in $$props) $$invalidate(44, previousMin = $$new_props.previousMin);
			if ('previousMax' in $$props) $$invalidate(45, previousMax = $$new_props.previousMax);
			if ('previousStep' in $$props) $$invalidate(46, previousStep = $$new_props.previousStep);
			if ('previousDiscrete' in $$props) $$invalidate(47, previousDiscrete = $$new_props.previousDiscrete);
			if ('previousTickMarks' in $$props) $$invalidate(48, previousTickMarks = $$new_props.previousTickMarks);
			if ('previousValue' in $$props) $$invalidate(49, previousValue = $$new_props.previousValue);
			if ('previousStart' in $$props) $$invalidate(50, previousStart = $$new_props.previousStart);
			if ('previousEnd' in $$props) $$invalidate(51, previousEnd = $$new_props.previousEnd);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty[0] & /*min*/ 1024 | $$self.$$.dirty[1] & /*previousMin, instance*/ 12288) {
				if (min !== previousMin) {
					if (instance) {
						instance.setMin(min);
					}

					$$invalidate(44, previousMin = min);
				}
			}

			if ($$self.$$.dirty[0] & /*max*/ 2048 | $$self.$$.dirty[1] & /*previousMax, instance*/ 20480) {
				if (max !== previousMax) {
					if (instance) {
						instance.setMax(max);
					}

					$$invalidate(45, previousMax = max);
				}
			}

			if ($$self.$$.dirty[0] & /*step*/ 512 | $$self.$$.dirty[1] & /*previousStep, instance*/ 36864) {
				if (step !== previousStep) {
					if (instance) {
						instance.setStep(step);
					}

					$$invalidate(46, previousStep = step);
				}
			}

			if ($$self.$$.dirty[0] & /*discrete*/ 128 | $$self.$$.dirty[1] & /*previousDiscrete, instance*/ 69632) {
				if (discrete !== previousDiscrete) {
					if (instance) {
						instance.setIsDiscrete(discrete);
					}

					$$invalidate(47, previousDiscrete = discrete);
				}
			}

			if ($$self.$$.dirty[0] & /*tickMarks*/ 256 | $$self.$$.dirty[1] & /*previousTickMarks, instance*/ 135168) {
				if (tickMarks !== previousTickMarks) {
					if (instance) {
						instance.setHasTickMarks(tickMarks);
					}

					$$invalidate(48, previousTickMarks = tickMarks);
				}
			}

			if ($$self.$$.dirty[0] & /*value, start, end*/ 7 | $$self.$$.dirty[1] & /*instance, previousValue, previousStart, previousEnd*/ 1839104) {
				if (instance) {
					if (previousValue !== value && typeof value === 'number') {
						instance.setValue(value);
					}

					if (previousStart !== start && typeof start === 'number') {
						instance.setValueStart(start);
					}

					if (previousEnd !== end && typeof end === 'number') {
						instance.setValue(end);
					}

					$$invalidate(49, previousValue = value);
					$$invalidate(50, previousStart = start);
					$$invalidate(51, previousEnd = end);

					// Needed for range start to take effect.
					instance.layout();
				}
			}
		};

		return [
			value,
			start,
			end,
			use,
			className,
			disabled,
			range,
			discrete,
			tickMarks,
			step,
			min,
			max,
			minRange,
			input$class,
			element,
			input,
			inputStart,
			thumbEl,
			thumbStart,
			thumbKnob,
			thumbKnobStart,
			internalClasses,
			thumbStartClasses,
			thumbClasses,
			inputAttrs,
			inputStartAttrs,
			trackActiveStyles,
			thumbStyles,
			thumbStartStyles,
			thumbRippleActive,
			thumbStartRippleActive,
			currentTickMarks,
			forwardEvents,
			inputProps,
			addThumbClass,
			removeThumbClass,
			addThumbStyle,
			$$restProps,
			valueToAriaValueTextFn,
			hideFocusStylesForPointerEvents,
			layout,
			getId,
			getElement,
			instance,
			previousMin,
			previousMax,
			previousStep,
			previousDiscrete,
			previousTickMarks,
			previousValue,
			previousStart,
			previousEnd,
			blur_handler_1,
			focus_handler_1,
			blur_handler,
			focus_handler,
			blur_handler_2,
			focus_handler_2,
			input0_binding,
			input0_change_input_handler,
			input1_binding,
			input1_change_input_handler,
			input_1_binding,
			input_1_change_input_handler,
			div0_binding,
			div1_binding,
			Ripple_function,
			Ripple_function_1,
			Ripple_function_2,
			div2_binding,
			div3_binding,
			Ripple_function_3,
			Ripple_function_4,
			Ripple_function_5,
			div0_binding_1,
			div1_binding_1,
			Ripple_function_6,
			Ripple_function_7,
			Ripple_function_8,
			div4_binding
		];
	}

	class Slider extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(
				this,
				options,
				instance_1$j,
				create_fragment$v,
				safe_not_equal,
				{
					use: 3,
					class: 4,
					disabled: 5,
					range: 6,
					discrete: 7,
					tickMarks: 8,
					step: 9,
					min: 10,
					max: 11,
					minRange: 12,
					value: 0,
					start: 1,
					end: 2,
					valueToAriaValueTextFn: 38,
					hideFocusStylesForPointerEvents: 39,
					input$class: 13,
					layout: 40,
					getId: 41,
					getElement: 42
				},
				null,
				[-1, -1, -1, -1]
			);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Slider",
				options,
				id: create_fragment$v.name
			});
		}

		get use() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get disabled() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set disabled(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get range() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set range(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get discrete() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set discrete(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tickMarks() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tickMarks(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get step() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set step(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get min() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set min(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get max() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set max(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get minRange() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set minRange(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get start() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set start(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get end() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set end(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get valueToAriaValueTextFn() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set valueToAriaValueTextFn(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get hideFocusStylesForPointerEvents() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set hideFocusStylesForPointerEvents(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get input$class() {
			throw new Error("<Slider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set input$class(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get layout() {
			return this.$$.ctx[40];
		}

		set layout(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getId() {
			return this.$$.ctx[41];
		}

		set getId(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[42];
		}

		set getElement(value) {
			throw new Error("<Slider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/button/dist/Button.svelte generated by Svelte v4.2.19 */
	const file$r = "node_modules/@smui/button/dist/Button.svelte";

	// (51:10) {#if touch}
	function create_if_block$e(ctx) {
		let div;

		const block = {
			c: function create() {
				div = element("div");
				attr_dev(div, "class", "mdc-button__touch");
				add_location(div, file$r, 50, 21, 1530);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$e.name,
			type: "if",
			source: "(51:10) {#if touch}",
			ctx
		});

		return block;
	}

	// (1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: false,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-button': true,     'mdc-button--raised': variant === 'raised',     'mdc-button--unelevated': variant === 'unelevated',     'mdc-button--outlined': variant === 'outlined',     'smui-button--color-secondary': color === 'secondary',     'mdc-button--touch': touch,     'mdc-card__action': context === 'card:action',     'mdc-card__action--button': context === 'card:action',     'mdc-dialog__button': context === 'dialog:action',     'mdc-top-app-bar__navigation-icon': context === 'top-app-bar:navigation',     'mdc-top-app-bar__action-item': context === 'top-app-bar:action',     'mdc-snackbar__action': context === 'snackbar:actions',     'mdc-banner__secondary-action': context === 'banner' && secondary,     'mdc-banner__primary-action': context === 'banner' && !secondary,     'mdc-tooltip__action': context === 'tooltip:rich-actions',     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   {...actionProp}   {...defaultProp}   {...secondaryProp}   {href}   on:click={handleClick}   {...$$restProps}   >
	function create_default_slot$b(ctx) {
		let div;
		let t;
		let if_block_anchor;
		let current;
		const default_slot_template = /*#slots*/ ctx[28].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[30], null);
		let if_block = /*touch*/ ctx[6] && create_if_block$e(ctx);

		const block = {
			c: function create() {
				div = element("div");
				t = space();
				if (default_slot) default_slot.c();
				if (if_block) if_block.c();
				if_block_anchor = empty();
				attr_dev(div, "class", "mdc-button__ripple");
				add_location(div, file$r, 49, 3, 1474);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				insert_dev(target, t, anchor);

				if (default_slot) {
					default_slot.m(target, anchor);
				}

				if (if_block) if_block.m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 1073741824)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[30],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[30])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[30], dirty, null),
							null
						);
					}
				}

				if (/*touch*/ ctx[6]) {
					if (if_block) ; else {
						if_block = create_if_block$e(ctx);
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
					detach_dev(t);
					detach_dev(if_block_anchor);
				}

				if (default_slot) default_slot.d(detaching);
				if (if_block) if_block.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$b.name,
			type: "slot",
			source: "(1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: false,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-button': true,     'mdc-button--raised': variant === 'raised',     'mdc-button--unelevated': variant === 'unelevated',     'mdc-button--outlined': variant === 'outlined',     'smui-button--color-secondary': color === 'secondary',     'mdc-button--touch': touch,     'mdc-card__action': context === 'card:action',     'mdc-card__action--button': context === 'card:action',     'mdc-dialog__button': context === 'dialog:action',     'mdc-top-app-bar__navigation-icon': context === 'top-app-bar:navigation',     'mdc-top-app-bar__action-item': context === 'top-app-bar:action',     'mdc-snackbar__action': context === 'snackbar:actions',     'mdc-banner__secondary-action': context === 'banner' && secondary,     'mdc-banner__primary-action': context === 'banner' && !secondary,     'mdc-tooltip__action': context === 'tooltip:rich-actions',     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   {...actionProp}   {...defaultProp}   {...secondaryProp}   {href}   on:click={handleClick}   {...$$restProps}   >",
			ctx
		});

		return block;
	}

	function create_fragment$u(ctx) {
		let switch_instance;
		let switch_instance_anchor;
		let current;

		const switch_instance_spread_levels = [
			{ tag: /*tag*/ ctx[10] },
			{
				use: [
					[
						Ripple,
						{
							ripple: /*ripple*/ ctx[3],
							unbounded: false,
							color: /*color*/ ctx[4],
							disabled: !!/*$$restProps*/ ctx[23].disabled,
							addClass: /*addClass*/ ctx[19],
							removeClass: /*removeClass*/ ctx[20],
							addStyle: /*addStyle*/ ctx[21]
						}
					],
					/*forwardEvents*/ ctx[17],
					.../*use*/ ctx[0]
				]
			},
			{
				class: classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-button': true,
					'mdc-button--raised': /*variant*/ ctx[5] === 'raised',
					'mdc-button--unelevated': /*variant*/ ctx[5] === 'unelevated',
					'mdc-button--outlined': /*variant*/ ctx[5] === 'outlined',
					'smui-button--color-secondary': /*color*/ ctx[4] === 'secondary',
					'mdc-button--touch': /*touch*/ ctx[6],
					'mdc-card__action': /*context*/ ctx[18] === 'card:action',
					'mdc-card__action--button': /*context*/ ctx[18] === 'card:action',
					'mdc-dialog__button': /*context*/ ctx[18] === 'dialog:action',
					'mdc-top-app-bar__navigation-icon': /*context*/ ctx[18] === 'top-app-bar:navigation',
					'mdc-top-app-bar__action-item': /*context*/ ctx[18] === 'top-app-bar:action',
					'mdc-snackbar__action': /*context*/ ctx[18] === 'snackbar:actions',
					'mdc-banner__secondary-action': /*context*/ ctx[18] === 'banner' && /*secondary*/ ctx[8],
					'mdc-banner__primary-action': /*context*/ ctx[18] === 'banner' && !/*secondary*/ ctx[8],
					'mdc-tooltip__action': /*context*/ ctx[18] === 'tooltip:rich-actions',
					.../*internalClasses*/ ctx[12]
				})
			},
			{
				style: Object.entries(/*internalStyles*/ ctx[13]).map(func$h).concat([/*style*/ ctx[2]]).join(' ')
			},
			/*actionProp*/ ctx[16],
			/*defaultProp*/ ctx[15],
			/*secondaryProp*/ ctx[14],
			{ href: /*href*/ ctx[7] },
			/*$$restProps*/ ctx[23]
		];

		var switch_value = /*component*/ ctx[9];

		function switch_props(ctx, dirty) {
			let switch_instance_props = {
				$$slots: { default: [create_default_slot$b] },
				$$scope: { ctx }
			};

			for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
				switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
			}

			if (dirty !== undefined && dirty[0] & /*tag, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use, className, variant, touch, context, secondary, internalClasses, internalStyles, style, actionProp, defaultProp, secondaryProp, href*/ 12580351) {
				switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [
					dirty[0] & /*tag*/ 1024 && { tag: /*tag*/ ctx[10] },
					dirty[0] & /*ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use*/ 12189721 && {
						use: [
							[
								Ripple,
								{
									ripple: /*ripple*/ ctx[3],
									unbounded: false,
									color: /*color*/ ctx[4],
									disabled: !!/*$$restProps*/ ctx[23].disabled,
									addClass: /*addClass*/ ctx[19],
									removeClass: /*removeClass*/ ctx[20],
									addStyle: /*addStyle*/ ctx[21]
								}
							],
							/*forwardEvents*/ ctx[17],
							.../*use*/ ctx[0]
						]
					},
					dirty[0] & /*className, variant, color, touch, context, secondary, internalClasses*/ 266610 && {
						class: classMap({
							[/*className*/ ctx[1]]: true,
							'mdc-button': true,
							'mdc-button--raised': /*variant*/ ctx[5] === 'raised',
							'mdc-button--unelevated': /*variant*/ ctx[5] === 'unelevated',
							'mdc-button--outlined': /*variant*/ ctx[5] === 'outlined',
							'smui-button--color-secondary': /*color*/ ctx[4] === 'secondary',
							'mdc-button--touch': /*touch*/ ctx[6],
							'mdc-card__action': /*context*/ ctx[18] === 'card:action',
							'mdc-card__action--button': /*context*/ ctx[18] === 'card:action',
							'mdc-dialog__button': /*context*/ ctx[18] === 'dialog:action',
							'mdc-top-app-bar__navigation-icon': /*context*/ ctx[18] === 'top-app-bar:navigation',
							'mdc-top-app-bar__action-item': /*context*/ ctx[18] === 'top-app-bar:action',
							'mdc-snackbar__action': /*context*/ ctx[18] === 'snackbar:actions',
							'mdc-banner__secondary-action': /*context*/ ctx[18] === 'banner' && /*secondary*/ ctx[8],
							'mdc-banner__primary-action': /*context*/ ctx[18] === 'banner' && !/*secondary*/ ctx[8],
							'mdc-tooltip__action': /*context*/ ctx[18] === 'tooltip:rich-actions',
							.../*internalClasses*/ ctx[12]
						})
					},
					dirty[0] & /*internalStyles, style*/ 8196 && {
						style: Object.entries(/*internalStyles*/ ctx[13]).map(func$h).concat([/*style*/ ctx[2]]).join(' ')
					},
					dirty[0] & /*actionProp*/ 65536 && get_spread_object(/*actionProp*/ ctx[16]),
					dirty[0] & /*defaultProp*/ 32768 && get_spread_object(/*defaultProp*/ ctx[15]),
					dirty[0] & /*secondaryProp*/ 16384 && get_spread_object(/*secondaryProp*/ ctx[14]),
					dirty[0] & /*href*/ 128 && { href: /*href*/ ctx[7] },
					dirty[0] & /*$$restProps*/ 8388608 && get_spread_object(/*$$restProps*/ ctx[23])
				]));
			}

			return {
				props: switch_instance_props,
				$$inline: true
			};
		}

		if (switch_value) {
			switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
			/*switch_instance_binding*/ ctx[29](switch_instance);
			switch_instance.$on("click", /*handleClick*/ ctx[22]);
		}

		const block = {
			c: function create() {
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (switch_instance) mount_component(switch_instance, target, anchor);
				insert_dev(target, switch_instance_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*component*/ 512 && switch_value !== (switch_value = /*component*/ ctx[9])) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx, dirty));
						/*switch_instance_binding*/ ctx[29](switch_instance);
						switch_instance.$on("click", /*handleClick*/ ctx[22]);
						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					const switch_instance_changes = (dirty[0] & /*tag, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use, className, variant, touch, context, secondary, internalClasses, internalStyles, style, actionProp, defaultProp, secondaryProp, href*/ 12580351)
					? get_spread_update(switch_instance_spread_levels, [
							dirty[0] & /*tag*/ 1024 && { tag: /*tag*/ ctx[10] },
							dirty[0] & /*ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use*/ 12189721 && {
								use: [
									[
										Ripple,
										{
											ripple: /*ripple*/ ctx[3],
											unbounded: false,
											color: /*color*/ ctx[4],
											disabled: !!/*$$restProps*/ ctx[23].disabled,
											addClass: /*addClass*/ ctx[19],
											removeClass: /*removeClass*/ ctx[20],
											addStyle: /*addStyle*/ ctx[21]
										}
									],
									/*forwardEvents*/ ctx[17],
									.../*use*/ ctx[0]
								]
							},
							dirty[0] & /*className, variant, color, touch, context, secondary, internalClasses*/ 266610 && {
								class: classMap({
									[/*className*/ ctx[1]]: true,
									'mdc-button': true,
									'mdc-button--raised': /*variant*/ ctx[5] === 'raised',
									'mdc-button--unelevated': /*variant*/ ctx[5] === 'unelevated',
									'mdc-button--outlined': /*variant*/ ctx[5] === 'outlined',
									'smui-button--color-secondary': /*color*/ ctx[4] === 'secondary',
									'mdc-button--touch': /*touch*/ ctx[6],
									'mdc-card__action': /*context*/ ctx[18] === 'card:action',
									'mdc-card__action--button': /*context*/ ctx[18] === 'card:action',
									'mdc-dialog__button': /*context*/ ctx[18] === 'dialog:action',
									'mdc-top-app-bar__navigation-icon': /*context*/ ctx[18] === 'top-app-bar:navigation',
									'mdc-top-app-bar__action-item': /*context*/ ctx[18] === 'top-app-bar:action',
									'mdc-snackbar__action': /*context*/ ctx[18] === 'snackbar:actions',
									'mdc-banner__secondary-action': /*context*/ ctx[18] === 'banner' && /*secondary*/ ctx[8],
									'mdc-banner__primary-action': /*context*/ ctx[18] === 'banner' && !/*secondary*/ ctx[8],
									'mdc-tooltip__action': /*context*/ ctx[18] === 'tooltip:rich-actions',
									.../*internalClasses*/ ctx[12]
								})
							},
							dirty[0] & /*internalStyles, style*/ 8196 && {
								style: Object.entries(/*internalStyles*/ ctx[13]).map(func$h).concat([/*style*/ ctx[2]]).join(' ')
							},
							dirty[0] & /*actionProp*/ 65536 && get_spread_object(/*actionProp*/ ctx[16]),
							dirty[0] & /*defaultProp*/ 32768 && get_spread_object(/*defaultProp*/ ctx[15]),
							dirty[0] & /*secondaryProp*/ 16384 && get_spread_object(/*secondaryProp*/ ctx[14]),
							dirty[0] & /*href*/ 128 && { href: /*href*/ ctx[7] },
							dirty[0] & /*$$restProps*/ 8388608 && get_spread_object(/*$$restProps*/ ctx[23])
						])
					: {};

					if (dirty[0] & /*$$scope, touch*/ 1073741888) {
						switch_instance_changes.$$scope = { dirty, ctx };
					}

					switch_instance.$set(switch_instance_changes);
				}
			},
			i: function intro(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(switch_instance_anchor);
				}

				/*switch_instance_binding*/ ctx[29](null);
				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$u.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$h = ([name, value]) => `${name}: ${value};`;

	function instance$b($$self, $$props, $$invalidate) {
		let actionProp;
		let defaultProp;
		let secondaryProp;

		const omit_props_names = [
			"use","class","style","ripple","color","variant","touch","href","action","defaultAction","secondary","component","tag","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Button', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { ripple = true } = $$props;
		let { color = 'primary' } = $$props;
		let { variant = 'text' } = $$props;
		let { touch = false } = $$props;
		let { href = undefined } = $$props;
		let { action = 'close' } = $$props;
		let { defaultAction = false } = $$props;
		let { secondary = false } = $$props;
		let element;
		let internalClasses = {};
		let internalStyles = {};
		let context = getContext('SMUI:button:context');
		let { component = SmuiElement } = $$props;

		let { tag = component === SmuiElement
		? href == null ? 'button' : 'a'
		: undefined } = $$props;

		let previousDisabled = $$restProps.disabled;
		setContext('SMUI:label:context', 'button');
		setContext('SMUI:icon:context', 'button');

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(12, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(12, internalClasses[className] = false, internalClasses);
			}
		}

		function addStyle(name, value) {
			if (internalStyles[name] != value) {
				if (value === '' || value == null) {
					delete internalStyles[name];
					$$invalidate(13, internalStyles);
				} else {
					$$invalidate(13, internalStyles[name] = value, internalStyles);
				}
			}
		}

		function handleClick() {
			if (context === 'banner') {
				dispatch(getElement(), secondary
				? 'SMUIBannerButton:secondaryActionClick'
				: 'SMUIBannerButton:primaryActionClick');
			}
		}

		function getElement() {
			return element.getElement();
		}

		function switch_instance_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(11, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$invalidate(31, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
			$$invalidate(23, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(2, style = $$new_props.style);
			if ('ripple' in $$new_props) $$invalidate(3, ripple = $$new_props.ripple);
			if ('color' in $$new_props) $$invalidate(4, color = $$new_props.color);
			if ('variant' in $$new_props) $$invalidate(5, variant = $$new_props.variant);
			if ('touch' in $$new_props) $$invalidate(6, touch = $$new_props.touch);
			if ('href' in $$new_props) $$invalidate(7, href = $$new_props.href);
			if ('action' in $$new_props) $$invalidate(24, action = $$new_props.action);
			if ('defaultAction' in $$new_props) $$invalidate(25, defaultAction = $$new_props.defaultAction);
			if ('secondary' in $$new_props) $$invalidate(8, secondary = $$new_props.secondary);
			if ('component' in $$new_props) $$invalidate(9, component = $$new_props.component);
			if ('tag' in $$new_props) $$invalidate(10, tag = $$new_props.tag);
			if ('$$scope' in $$new_props) $$invalidate(30, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			setContext,
			getContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			dispatch,
			Ripple,
			SmuiElement,
			forwardEvents,
			use,
			className,
			style,
			ripple,
			color,
			variant,
			touch,
			href,
			action,
			defaultAction,
			secondary,
			element,
			internalClasses,
			internalStyles,
			context,
			component,
			tag,
			previousDisabled,
			addClass,
			removeClass,
			addStyle,
			handleClick,
			getElement,
			secondaryProp,
			defaultProp,
			actionProp
		});

		$$self.$inject_state = $$new_props => {
			$$invalidate(31, $$props = assign(assign({}, $$props), $$new_props));
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(2, style = $$new_props.style);
			if ('ripple' in $$props) $$invalidate(3, ripple = $$new_props.ripple);
			if ('color' in $$props) $$invalidate(4, color = $$new_props.color);
			if ('variant' in $$props) $$invalidate(5, variant = $$new_props.variant);
			if ('touch' in $$props) $$invalidate(6, touch = $$new_props.touch);
			if ('href' in $$props) $$invalidate(7, href = $$new_props.href);
			if ('action' in $$props) $$invalidate(24, action = $$new_props.action);
			if ('defaultAction' in $$props) $$invalidate(25, defaultAction = $$new_props.defaultAction);
			if ('secondary' in $$props) $$invalidate(8, secondary = $$new_props.secondary);
			if ('element' in $$props) $$invalidate(11, element = $$new_props.element);
			if ('internalClasses' in $$props) $$invalidate(12, internalClasses = $$new_props.internalClasses);
			if ('internalStyles' in $$props) $$invalidate(13, internalStyles = $$new_props.internalStyles);
			if ('context' in $$props) $$invalidate(18, context = $$new_props.context);
			if ('component' in $$props) $$invalidate(9, component = $$new_props.component);
			if ('tag' in $$props) $$invalidate(10, tag = $$new_props.tag);
			if ('previousDisabled' in $$props) $$invalidate(27, previousDisabled = $$new_props.previousDisabled);
			if ('secondaryProp' in $$props) $$invalidate(14, secondaryProp = $$new_props.secondaryProp);
			if ('defaultProp' in $$props) $$invalidate(15, defaultProp = $$new_props.defaultProp);
			if ('actionProp' in $$props) $$invalidate(16, actionProp = $$new_props.actionProp);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			$$invalidate(16, actionProp = context === 'dialog:action' && action != null
			? { 'data-mdc-dialog-action': action }
			: { action: $$props.action });

			$$invalidate(15, defaultProp = context === 'dialog:action' && defaultAction
			? { 'data-mdc-dialog-button-default': '' }
			: { default: $$props.default });

			$$invalidate(14, secondaryProp = context === 'banner'
			? {}
			: { secondary: $$props.secondary });

			if (previousDisabled !== $$restProps.disabled) {
				if (element) {
					const el = getElement();

					if ('blur' in el) {
						el.blur();
					}
				}

				$$invalidate(27, previousDisabled = $$restProps.disabled);
			}
		};

		$$props = exclude_internal_props($$props);

		return [
			use,
			className,
			style,
			ripple,
			color,
			variant,
			touch,
			href,
			secondary,
			component,
			tag,
			element,
			internalClasses,
			internalStyles,
			secondaryProp,
			defaultProp,
			actionProp,
			forwardEvents,
			context,
			addClass,
			removeClass,
			addStyle,
			handleClick,
			$$restProps,
			action,
			defaultAction,
			getElement,
			previousDisabled,
			slots,
			switch_instance_binding,
			$$scope
		];
	}

	class Button extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(
				this,
				options,
				instance$b,
				create_fragment$u,
				safe_not_equal,
				{
					use: 0,
					class: 1,
					style: 2,
					ripple: 3,
					color: 4,
					variant: 5,
					touch: 6,
					href: 7,
					action: 24,
					defaultAction: 25,
					secondary: 8,
					component: 9,
					tag: 10,
					getElement: 26
				},
				null,
				[-1, -1]
			);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Button",
				options,
				id: create_fragment$u.name
			});
		}

		get use() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get ripple() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set ripple(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get color() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set color(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get variant() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set variant(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get touch() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set touch(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get href() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set href(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get action() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set action(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get defaultAction() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set defaultAction(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get secondary() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set secondary(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get component() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set component(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tag() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tag(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[26];
		}

		set getElement(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$e = {
	    ICON_BUTTON_ON: 'mdc-icon-button--on',
	    ROOT: 'mdc-icon-button',
	};
	var strings$d = {
	    ARIA_LABEL: 'aria-label',
	    ARIA_PRESSED: 'aria-pressed',
	    DATA_ARIA_LABEL_OFF: 'data-aria-label-off',
	    DATA_ARIA_LABEL_ON: 'data-aria-label-on',
	    CHANGE_EVENT: 'MDCIconButtonToggle:change',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCIconButtonToggleFoundation = /** @class */ (function (_super) {
	    __extends(MDCIconButtonToggleFoundation, _super);
	    function MDCIconButtonToggleFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCIconButtonToggleFoundation.defaultAdapter), adapter)) || this;
	        /**
	         * Whether the icon button has an aria label that changes depending on
	         * toggled state.
	         */
	        _this.hasToggledAriaLabel = false;
	        return _this;
	    }
	    Object.defineProperty(MDCIconButtonToggleFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$e;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCIconButtonToggleFoundation, "strings", {
	        get: function () {
	            return strings$d;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCIconButtonToggleFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                notifyChange: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                getAttr: function () { return null; },
	                setAttr: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCIconButtonToggleFoundation.prototype.init = function () {
	        var ariaLabelOn = this.adapter.getAttr(strings$d.DATA_ARIA_LABEL_ON);
	        var ariaLabelOff = this.adapter.getAttr(strings$d.DATA_ARIA_LABEL_OFF);
	        if (ariaLabelOn && ariaLabelOff) {
	            if (this.adapter.getAttr(strings$d.ARIA_PRESSED) !== null) {
	                throw new Error('MDCIconButtonToggleFoundation: Button should not set ' +
	                    '`aria-pressed` if it has a toggled aria label.');
	            }
	            this.hasToggledAriaLabel = true;
	        }
	        else {
	            this.adapter.setAttr(strings$d.ARIA_PRESSED, String(this.isOn()));
	        }
	    };
	    MDCIconButtonToggleFoundation.prototype.handleClick = function () {
	        this.toggle();
	        this.adapter.notifyChange({ isOn: this.isOn() });
	    };
	    MDCIconButtonToggleFoundation.prototype.isOn = function () {
	        return this.adapter.hasClass(cssClasses$e.ICON_BUTTON_ON);
	    };
	    MDCIconButtonToggleFoundation.prototype.toggle = function (isOn) {
	        if (isOn === void 0) { isOn = !this.isOn(); }
	        // Toggle UI based on state.
	        if (isOn) {
	            this.adapter.addClass(cssClasses$e.ICON_BUTTON_ON);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$e.ICON_BUTTON_ON);
	        }
	        // Toggle aria attributes based on state.
	        if (this.hasToggledAriaLabel) {
	            var ariaLabel = isOn ?
	                this.adapter.getAttr(strings$d.DATA_ARIA_LABEL_ON) :
	                this.adapter.getAttr(strings$d.DATA_ARIA_LABEL_OFF);
	            this.adapter.setAttr(strings$d.ARIA_LABEL, ariaLabel || '');
	        }
	        else {
	            this.adapter.setAttr(strings$d.ARIA_PRESSED, "" + isOn);
	        }
	    };
	    return MDCIconButtonToggleFoundation;
	}(MDCFoundation));

	/* node_modules/@smui/icon-button/dist/IconButton.svelte generated by Svelte v4.2.19 */
	const file$q = "node_modules/@smui/icon-button/dist/IconButton.svelte";

	// (65:10) {#if touch}
	function create_if_block$d(ctx) {
		let div;

		const block = {
			c: function create() {
				div = element("div");
				attr_dev(div, "class", "mdc-icon-button__touch");
				add_location(div, file$q, 64, 21, 2059);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$d.name,
			type: "if",
			source: "(65:10) {#if touch}",
			ctx
		});

		return block;
	}

	// (1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: true,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-icon-button': true,     'mdc-icon-button--on': !isUninitializedValue(pressed) && pressed,     'mdc-icon-button--touch': touch,     'mdc-icon-button--display-flex': displayFlex,     'smui-icon-button--size-button': size === 'button',     'smui-icon-button--size-mini': size === 'mini',     'mdc-icon-button--reduced-size': size === 'mini' || size === 'button',     'mdc-card__action': context === 'card:action',     'mdc-card__action--icon': context === 'card:action',     'mdc-top-app-bar__navigation-icon': context === 'top-app-bar:navigation',     'mdc-top-app-bar__action-item': context === 'top-app-bar:action',     'mdc-snackbar__dismiss': context === 'snackbar:actions',     'mdc-data-table__pagination-button': context === 'data-table:pagination',     'mdc-data-table__sort-icon-button':       context === 'data-table:sortable-header-cell',     'mdc-dialog__close':       (context === 'dialog:header' || context === 'dialog:sheet') &&       action === 'close',     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   aria-pressed={!isUninitializedValue(pressed)     ? pressed       ? 'true'       : 'false'     : null}   aria-label={pressed ? ariaLabelOn : ariaLabelOff}   data-aria-label-on={ariaLabelOn}   data-aria-label-off={ariaLabelOff}   aria-describedby={ariaDescribedby}   on:click={() => instance && instance.handleClick()}   on:click={() =>     context === 'top-app-bar:navigation' &&     dispatch(getElement(), 'SMUITopAppBarIconButton:nav')}   {href}   {...actionProp}   {...internalAttrs}   {...$$restProps}   >
	function create_default_slot$a(ctx) {
		let div;
		let t;
		let if_block_anchor;
		let current;
		const default_slot_template = /*#slots*/ ctx[33].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[37], null);
		let if_block = /*touch*/ ctx[8] && create_if_block$d(ctx);

		const block = {
			c: function create() {
				div = element("div");
				t = space();
				if (default_slot) default_slot.c();
				if (if_block) if_block.c();
				if_block_anchor = empty();
				attr_dev(div, "class", "mdc-icon-button__ripple");
				add_location(div, file$q, 63, 3, 1998);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				insert_dev(target, t, anchor);

				if (default_slot) {
					default_slot.m(target, anchor);
				}

				if (if_block) if_block.m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 64)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[37],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[37])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[37], dirty, null),
							null
						);
					}
				}

				if (/*touch*/ ctx[8]) {
					if (if_block) ; else {
						if_block = create_if_block$d(ctx);
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
					detach_dev(t);
					detach_dev(if_block_anchor);
				}

				if (default_slot) default_slot.d(detaching);
				if (if_block) if_block.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$a.name,
			type: "slot",
			source: "(1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: true,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-icon-button': true,     'mdc-icon-button--on': !isUninitializedValue(pressed) && pressed,     'mdc-icon-button--touch': touch,     'mdc-icon-button--display-flex': displayFlex,     'smui-icon-button--size-button': size === 'button',     'smui-icon-button--size-mini': size === 'mini',     'mdc-icon-button--reduced-size': size === 'mini' || size === 'button',     'mdc-card__action': context === 'card:action',     'mdc-card__action--icon': context === 'card:action',     'mdc-top-app-bar__navigation-icon': context === 'top-app-bar:navigation',     'mdc-top-app-bar__action-item': context === 'top-app-bar:action',     'mdc-snackbar__dismiss': context === 'snackbar:actions',     'mdc-data-table__pagination-button': context === 'data-table:pagination',     'mdc-data-table__sort-icon-button':       context === 'data-table:sortable-header-cell',     'mdc-dialog__close':       (context === 'dialog:header' || context === 'dialog:sheet') &&       action === 'close',     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   aria-pressed={!isUninitializedValue(pressed)     ? pressed       ? 'true'       : 'false'     : null}   aria-label={pressed ? ariaLabelOn : ariaLabelOff}   data-aria-label-on={ariaLabelOn}   data-aria-label-off={ariaLabelOff}   aria-describedby={ariaDescribedby}   on:click={() => instance && instance.handleClick()}   on:click={() =>     context === 'top-app-bar:navigation' &&     dispatch(getElement(), 'SMUITopAppBarIconButton:nav')}   {href}   {...actionProp}   {...internalAttrs}   {...$$restProps}   >",
			ctx
		});

		return block;
	}

	function create_fragment$t(ctx) {
		let switch_instance;
		let switch_instance_anchor;
		let current;

		const switch_instance_spread_levels = [
			{ tag: /*tag*/ ctx[14] },
			{
				use: [
					[
						Ripple,
						{
							ripple: /*ripple*/ ctx[4],
							unbounded: true,
							color: /*color*/ ctx[5],
							disabled: !!/*$$restProps*/ ctx[29].disabled,
							addClass: /*addClass*/ ctx[26],
							removeClass: /*removeClass*/ ctx[27],
							addStyle: /*addStyle*/ ctx[28]
						}
					],
					/*forwardEvents*/ ctx[22],
					.../*use*/ ctx[1]
				]
			},
			{
				class: classMap({
					[/*className*/ ctx[2]]: true,
					'mdc-icon-button': true,
					'mdc-icon-button--on': !/*isUninitializedValue*/ ctx[23](/*pressed*/ ctx[0]) && /*pressed*/ ctx[0],
					'mdc-icon-button--touch': /*touch*/ ctx[8],
					'mdc-icon-button--display-flex': /*displayFlex*/ ctx[9],
					'smui-icon-button--size-button': /*size*/ ctx[10] === 'button',
					'smui-icon-button--size-mini': /*size*/ ctx[10] === 'mini',
					'mdc-icon-button--reduced-size': /*size*/ ctx[10] === 'mini' || /*size*/ ctx[10] === 'button',
					'mdc-card__action': /*context*/ ctx[24] === 'card:action',
					'mdc-card__action--icon': /*context*/ ctx[24] === 'card:action',
					'mdc-top-app-bar__navigation-icon': /*context*/ ctx[24] === 'top-app-bar:navigation',
					'mdc-top-app-bar__action-item': /*context*/ ctx[24] === 'top-app-bar:action',
					'mdc-snackbar__dismiss': /*context*/ ctx[24] === 'snackbar:actions',
					'mdc-data-table__pagination-button': /*context*/ ctx[24] === 'data-table:pagination',
					'mdc-data-table__sort-icon-button': /*context*/ ctx[24] === 'data-table:sortable-header-cell',
					'mdc-dialog__close': (/*context*/ ctx[24] === 'dialog:header' || /*context*/ ctx[24] === 'dialog:sheet') && /*action*/ ctx[12] === 'close',
					.../*internalClasses*/ ctx[18]
				})
			},
			{
				style: Object.entries(/*internalStyles*/ ctx[19]).map(func$g).concat([/*style*/ ctx[3]]).join(' ')
			},
			{
				"aria-pressed": !/*isUninitializedValue*/ ctx[23](/*pressed*/ ctx[0])
				? /*pressed*/ ctx[0] ? 'true' : 'false'
				: null
			},
			{
				"aria-label": /*pressed*/ ctx[0]
				? /*ariaLabelOn*/ ctx[6]
				: /*ariaLabelOff*/ ctx[7]
			},
			{
				"data-aria-label-on": /*ariaLabelOn*/ ctx[6]
			},
			{
				"data-aria-label-off": /*ariaLabelOff*/ ctx[7]
			},
			{
				"aria-describedby": /*ariaDescribedby*/ ctx[25]
			},
			{ href: /*href*/ ctx[11] },
			/*actionProp*/ ctx[21],
			/*internalAttrs*/ ctx[20],
			/*$$restProps*/ ctx[29]
		];

		var switch_value = /*component*/ ctx[13];

		function switch_props(ctx, dirty) {
			let switch_instance_props = {
				$$slots: { default: [create_default_slot$a] },
				$$scope: { ctx }
			};

			for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
				switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
			}

			if (dirty !== undefined && dirty[0] & /*tag, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use, className, isUninitializedValue, pressed, touch, displayFlex, size, context, action, internalClasses, internalStyles, style, ariaLabelOn, ariaLabelOff, ariaDescribedby, href, actionProp, internalAttrs*/ 1073504255) {
				switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [
					dirty[0] & /*tag*/ 16384 && { tag: /*tag*/ ctx[14] },
					dirty[0] & /*ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use*/ 1010827314 && {
						use: [
							[
								Ripple,
								{
									ripple: /*ripple*/ ctx[4],
									unbounded: true,
									color: /*color*/ ctx[5],
									disabled: !!/*$$restProps*/ ctx[29].disabled,
									addClass: /*addClass*/ ctx[26],
									removeClass: /*removeClass*/ ctx[27],
									addStyle: /*addStyle*/ ctx[28]
								}
							],
							/*forwardEvents*/ ctx[22],
							.../*use*/ ctx[1]
						]
					},
					dirty[0] & /*className, isUninitializedValue, pressed, touch, displayFlex, size, context, action, internalClasses*/ 25433861 && {
						class: classMap({
							[/*className*/ ctx[2]]: true,
							'mdc-icon-button': true,
							'mdc-icon-button--on': !/*isUninitializedValue*/ ctx[23](/*pressed*/ ctx[0]) && /*pressed*/ ctx[0],
							'mdc-icon-button--touch': /*touch*/ ctx[8],
							'mdc-icon-button--display-flex': /*displayFlex*/ ctx[9],
							'smui-icon-button--size-button': /*size*/ ctx[10] === 'button',
							'smui-icon-button--size-mini': /*size*/ ctx[10] === 'mini',
							'mdc-icon-button--reduced-size': /*size*/ ctx[10] === 'mini' || /*size*/ ctx[10] === 'button',
							'mdc-card__action': /*context*/ ctx[24] === 'card:action',
							'mdc-card__action--icon': /*context*/ ctx[24] === 'card:action',
							'mdc-top-app-bar__navigation-icon': /*context*/ ctx[24] === 'top-app-bar:navigation',
							'mdc-top-app-bar__action-item': /*context*/ ctx[24] === 'top-app-bar:action',
							'mdc-snackbar__dismiss': /*context*/ ctx[24] === 'snackbar:actions',
							'mdc-data-table__pagination-button': /*context*/ ctx[24] === 'data-table:pagination',
							'mdc-data-table__sort-icon-button': /*context*/ ctx[24] === 'data-table:sortable-header-cell',
							'mdc-dialog__close': (/*context*/ ctx[24] === 'dialog:header' || /*context*/ ctx[24] === 'dialog:sheet') && /*action*/ ctx[12] === 'close',
							.../*internalClasses*/ ctx[18]
						})
					},
					dirty[0] & /*internalStyles, style*/ 524296 && {
						style: Object.entries(/*internalStyles*/ ctx[19]).map(func$g).concat([/*style*/ ctx[3]]).join(' ')
					},
					dirty[0] & /*isUninitializedValue, pressed*/ 8388609 && {
						"aria-pressed": !/*isUninitializedValue*/ ctx[23](/*pressed*/ ctx[0])
						? /*pressed*/ ctx[0] ? 'true' : 'false'
						: null
					},
					dirty[0] & /*pressed, ariaLabelOn, ariaLabelOff*/ 193 && {
						"aria-label": /*pressed*/ ctx[0]
						? /*ariaLabelOn*/ ctx[6]
						: /*ariaLabelOff*/ ctx[7]
					},
					dirty[0] & /*ariaLabelOn*/ 64 && {
						"data-aria-label-on": /*ariaLabelOn*/ ctx[6]
					},
					dirty[0] & /*ariaLabelOff*/ 128 && {
						"data-aria-label-off": /*ariaLabelOff*/ ctx[7]
					},
					dirty[0] & /*ariaDescribedby*/ 33554432 && {
						"aria-describedby": /*ariaDescribedby*/ ctx[25]
					},
					dirty[0] & /*href*/ 2048 && { href: /*href*/ ctx[11] },
					dirty[0] & /*actionProp*/ 2097152 && get_spread_object(/*actionProp*/ ctx[21]),
					dirty[0] & /*internalAttrs*/ 1048576 && get_spread_object(/*internalAttrs*/ ctx[20]),
					dirty[0] & /*$$restProps*/ 536870912 && get_spread_object(/*$$restProps*/ ctx[29])
				]));
			}

			return {
				props: switch_instance_props,
				$$inline: true
			};
		}

		if (switch_value) {
			switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
			/*switch_instance_binding*/ ctx[34](switch_instance);
			switch_instance.$on("click", /*click_handler*/ ctx[35]);
			switch_instance.$on("click", /*click_handler_1*/ ctx[36]);
		}

		const block = {
			c: function create() {
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (switch_instance) mount_component(switch_instance, target, anchor);
				insert_dev(target, switch_instance_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*component*/ 8192 && switch_value !== (switch_value = /*component*/ ctx[13])) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx, dirty));
						/*switch_instance_binding*/ ctx[34](switch_instance);
						switch_instance.$on("click", /*click_handler*/ ctx[35]);
						switch_instance.$on("click", /*click_handler_1*/ ctx[36]);
						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					const switch_instance_changes = (dirty[0] & /*tag, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use, className, isUninitializedValue, pressed, touch, displayFlex, size, context, action, internalClasses, internalStyles, style, ariaLabelOn, ariaLabelOff, ariaDescribedby, href, actionProp, internalAttrs*/ 1073504255)
					? get_spread_update(switch_instance_spread_levels, [
							dirty[0] & /*tag*/ 16384 && { tag: /*tag*/ ctx[14] },
							dirty[0] & /*ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use*/ 1010827314 && {
								use: [
									[
										Ripple,
										{
											ripple: /*ripple*/ ctx[4],
											unbounded: true,
											color: /*color*/ ctx[5],
											disabled: !!/*$$restProps*/ ctx[29].disabled,
											addClass: /*addClass*/ ctx[26],
											removeClass: /*removeClass*/ ctx[27],
											addStyle: /*addStyle*/ ctx[28]
										}
									],
									/*forwardEvents*/ ctx[22],
									.../*use*/ ctx[1]
								]
							},
							dirty[0] & /*className, isUninitializedValue, pressed, touch, displayFlex, size, context, action, internalClasses*/ 25433861 && {
								class: classMap({
									[/*className*/ ctx[2]]: true,
									'mdc-icon-button': true,
									'mdc-icon-button--on': !/*isUninitializedValue*/ ctx[23](/*pressed*/ ctx[0]) && /*pressed*/ ctx[0],
									'mdc-icon-button--touch': /*touch*/ ctx[8],
									'mdc-icon-button--display-flex': /*displayFlex*/ ctx[9],
									'smui-icon-button--size-button': /*size*/ ctx[10] === 'button',
									'smui-icon-button--size-mini': /*size*/ ctx[10] === 'mini',
									'mdc-icon-button--reduced-size': /*size*/ ctx[10] === 'mini' || /*size*/ ctx[10] === 'button',
									'mdc-card__action': /*context*/ ctx[24] === 'card:action',
									'mdc-card__action--icon': /*context*/ ctx[24] === 'card:action',
									'mdc-top-app-bar__navigation-icon': /*context*/ ctx[24] === 'top-app-bar:navigation',
									'mdc-top-app-bar__action-item': /*context*/ ctx[24] === 'top-app-bar:action',
									'mdc-snackbar__dismiss': /*context*/ ctx[24] === 'snackbar:actions',
									'mdc-data-table__pagination-button': /*context*/ ctx[24] === 'data-table:pagination',
									'mdc-data-table__sort-icon-button': /*context*/ ctx[24] === 'data-table:sortable-header-cell',
									'mdc-dialog__close': (/*context*/ ctx[24] === 'dialog:header' || /*context*/ ctx[24] === 'dialog:sheet') && /*action*/ ctx[12] === 'close',
									.../*internalClasses*/ ctx[18]
								})
							},
							dirty[0] & /*internalStyles, style*/ 524296 && {
								style: Object.entries(/*internalStyles*/ ctx[19]).map(func$g).concat([/*style*/ ctx[3]]).join(' ')
							},
							dirty[0] & /*isUninitializedValue, pressed*/ 8388609 && {
								"aria-pressed": !/*isUninitializedValue*/ ctx[23](/*pressed*/ ctx[0])
								? /*pressed*/ ctx[0] ? 'true' : 'false'
								: null
							},
							dirty[0] & /*pressed, ariaLabelOn, ariaLabelOff*/ 193 && {
								"aria-label": /*pressed*/ ctx[0]
								? /*ariaLabelOn*/ ctx[6]
								: /*ariaLabelOff*/ ctx[7]
							},
							dirty[0] & /*ariaLabelOn*/ 64 && {
								"data-aria-label-on": /*ariaLabelOn*/ ctx[6]
							},
							dirty[0] & /*ariaLabelOff*/ 128 && {
								"data-aria-label-off": /*ariaLabelOff*/ ctx[7]
							},
							dirty[0] & /*ariaDescribedby*/ 33554432 && {
								"aria-describedby": /*ariaDescribedby*/ ctx[25]
							},
							dirty[0] & /*href*/ 2048 && { href: /*href*/ ctx[11] },
							dirty[0] & /*actionProp*/ 2097152 && get_spread_object(/*actionProp*/ ctx[21]),
							dirty[0] & /*internalAttrs*/ 1048576 && get_spread_object(/*internalAttrs*/ ctx[20]),
							dirty[0] & /*$$restProps*/ 536870912 && get_spread_object(/*$$restProps*/ ctx[29])
						])
					: {};

					if (dirty[0] & /*touch*/ 256 | dirty[1] & /*$$scope*/ 64) {
						switch_instance_changes.$$scope = { dirty, ctx };
					}

					switch_instance.$set(switch_instance_changes);
				}
			},
			i: function intro(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(switch_instance_anchor);
				}

				/*switch_instance_binding*/ ctx[34](null);
				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$t.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$g = ([name, value]) => `${name}: ${value};`;

	function instance_1$i($$self, $$props, $$invalidate) {
		let actionProp;

		const omit_props_names = [
			"use","class","style","ripple","color","toggle","pressed","ariaLabelOn","ariaLabelOff","touch","displayFlex","size","href","action","component","tag","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('IconButton', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());

		let uninitializedValue = () => {
			
		};

		function isUninitializedValue(value) {
			return value === uninitializedValue;
		}

		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { ripple = true } = $$props;
		let { color = undefined } = $$props;
		let { toggle = false } = $$props;
		let { pressed = uninitializedValue } = $$props;
		let { ariaLabelOn = undefined } = $$props;
		let { ariaLabelOff = undefined } = $$props;
		let { touch = false } = $$props;
		let { displayFlex = true } = $$props;
		let { size = 'normal' } = $$props;
		let { href = undefined } = $$props;
		let { action = undefined } = $$props;
		let element;
		let instance;
		let internalClasses = {};
		let internalStyles = {};
		let internalAttrs = {};
		let context = getContext('SMUI:icon-button:context');
		let ariaDescribedby = getContext('SMUI:icon-button:aria-describedby');
		let { component = SmuiElement } = $$props;

		let { tag = component === SmuiElement
		? href == null ? 'button' : 'a'
		: undefined } = $$props;

		let previousDisabled = $$restProps.disabled;
		setContext('SMUI:icon:context', 'icon-button');
		let oldToggle = null;

		onDestroy(() => {
			instance && instance.destroy();
		});

		function hasClass(className) {
			return className in internalClasses
			? internalClasses[className]
			: getElement().classList.contains(className);
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(18, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(18, internalClasses[className] = false, internalClasses);
			}
		}

		function addStyle(name, value) {
			if (internalStyles[name] != value) {
				if (value === '' || value == null) {
					delete internalStyles[name];
					$$invalidate(19, internalStyles);
				} else {
					$$invalidate(19, internalStyles[name] = value, internalStyles);
				}
			}
		}

		function getAttr(name) {
			var _a;

			return name in internalAttrs
			? (_a = internalAttrs[name]) !== null && _a !== void 0
				? _a
				: null
			: getElement().getAttribute(name);
		}

		function addAttr(name, value) {
			if (internalAttrs[name] !== value) {
				$$invalidate(20, internalAttrs[name] = value, internalAttrs);
			}
		}

		function handleChange(evtData) {
			$$invalidate(0, pressed = evtData.isOn);
		}

		function getElement() {
			return element.getElement();
		}

		function switch_instance_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(16, element);
			});
		}

		const click_handler = () => instance && instance.handleClick();
		const click_handler_1 = () => context === 'top-app-bar:navigation' && dispatch(getElement(), 'SMUITopAppBarIconButton:nav');

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(29, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(1, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
			if ('ripple' in $$new_props) $$invalidate(4, ripple = $$new_props.ripple);
			if ('color' in $$new_props) $$invalidate(5, color = $$new_props.color);
			if ('toggle' in $$new_props) $$invalidate(30, toggle = $$new_props.toggle);
			if ('pressed' in $$new_props) $$invalidate(0, pressed = $$new_props.pressed);
			if ('ariaLabelOn' in $$new_props) $$invalidate(6, ariaLabelOn = $$new_props.ariaLabelOn);
			if ('ariaLabelOff' in $$new_props) $$invalidate(7, ariaLabelOff = $$new_props.ariaLabelOff);
			if ('touch' in $$new_props) $$invalidate(8, touch = $$new_props.touch);
			if ('displayFlex' in $$new_props) $$invalidate(9, displayFlex = $$new_props.displayFlex);
			if ('size' in $$new_props) $$invalidate(10, size = $$new_props.size);
			if ('href' in $$new_props) $$invalidate(11, href = $$new_props.href);
			if ('action' in $$new_props) $$invalidate(12, action = $$new_props.action);
			if ('component' in $$new_props) $$invalidate(13, component = $$new_props.component);
			if ('tag' in $$new_props) $$invalidate(14, tag = $$new_props.tag);
			if ('$$scope' in $$new_props) $$invalidate(37, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			MDCIconButtonToggleFoundation,
			onDestroy,
			getContext,
			setContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			dispatch,
			Ripple,
			SmuiElement,
			forwardEvents,
			uninitializedValue,
			isUninitializedValue,
			use,
			className,
			style,
			ripple,
			color,
			toggle,
			pressed,
			ariaLabelOn,
			ariaLabelOff,
			touch,
			displayFlex,
			size,
			href,
			action,
			element,
			instance,
			internalClasses,
			internalStyles,
			internalAttrs,
			context,
			ariaDescribedby,
			component,
			tag,
			previousDisabled,
			oldToggle,
			hasClass,
			addClass,
			removeClass,
			addStyle,
			getAttr,
			addAttr,
			handleChange,
			getElement,
			actionProp
		});

		$$self.$inject_state = $$new_props => {
			if ('uninitializedValue' in $$props) uninitializedValue = $$new_props.uninitializedValue;
			if ('use' in $$props) $$invalidate(1, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(3, style = $$new_props.style);
			if ('ripple' in $$props) $$invalidate(4, ripple = $$new_props.ripple);
			if ('color' in $$props) $$invalidate(5, color = $$new_props.color);
			if ('toggle' in $$props) $$invalidate(30, toggle = $$new_props.toggle);
			if ('pressed' in $$props) $$invalidate(0, pressed = $$new_props.pressed);
			if ('ariaLabelOn' in $$props) $$invalidate(6, ariaLabelOn = $$new_props.ariaLabelOn);
			if ('ariaLabelOff' in $$props) $$invalidate(7, ariaLabelOff = $$new_props.ariaLabelOff);
			if ('touch' in $$props) $$invalidate(8, touch = $$new_props.touch);
			if ('displayFlex' in $$props) $$invalidate(9, displayFlex = $$new_props.displayFlex);
			if ('size' in $$props) $$invalidate(10, size = $$new_props.size);
			if ('href' in $$props) $$invalidate(11, href = $$new_props.href);
			if ('action' in $$props) $$invalidate(12, action = $$new_props.action);
			if ('element' in $$props) $$invalidate(16, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(17, instance = $$new_props.instance);
			if ('internalClasses' in $$props) $$invalidate(18, internalClasses = $$new_props.internalClasses);
			if ('internalStyles' in $$props) $$invalidate(19, internalStyles = $$new_props.internalStyles);
			if ('internalAttrs' in $$props) $$invalidate(20, internalAttrs = $$new_props.internalAttrs);
			if ('context' in $$props) $$invalidate(24, context = $$new_props.context);
			if ('ariaDescribedby' in $$props) $$invalidate(25, ariaDescribedby = $$new_props.ariaDescribedby);
			if ('component' in $$props) $$invalidate(13, component = $$new_props.component);
			if ('tag' in $$props) $$invalidate(14, tag = $$new_props.tag);
			if ('previousDisabled' in $$props) $$invalidate(31, previousDisabled = $$new_props.previousDisabled);
			if ('oldToggle' in $$props) $$invalidate(32, oldToggle = $$new_props.oldToggle);
			if ('actionProp' in $$props) $$invalidate(21, actionProp = $$new_props.actionProp);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty[0] & /*action*/ 4096) {
				$$invalidate(21, actionProp = (() => {
					if (context === 'data-table:pagination') {
						switch (action) {
							case 'first-page':
								return { 'data-first-page': 'true' };
							case 'prev-page':
								return { 'data-prev-page': 'true' };
							case 'next-page':
								return { 'data-next-page': 'true' };
							case 'last-page':
								return { 'data-last-page': 'true' };
							default:
								return { 'data-action': 'true' };
						}
					} else if (context === 'dialog:header' || context === 'dialog:sheet') {
						return { 'data-mdc-dialog-action': action };
					} else {
						return { action };
					}
				})());
			}

			if (previousDisabled !== $$restProps.disabled) {
				if (element) {
					const el = getElement();

					if ('blur' in el) {
						el.blur();
					}
				}

				$$invalidate(31, previousDisabled = $$restProps.disabled);
			}

			if ($$self.$$.dirty[0] & /*element, toggle, instance*/ 1073938432 | $$self.$$.dirty[1] & /*oldToggle*/ 2) {
				if (element && getElement() && toggle !== oldToggle) {
					if (toggle && !instance) {
						$$invalidate(17, instance = new MDCIconButtonToggleFoundation({
								addClass,
								hasClass,
								notifyChange: evtData => {
									handleChange(evtData);
									dispatch(getElement(), 'SMUIIconButtonToggle:change', evtData, undefined, true);
								},
								removeClass,
								getAttr,
								setAttr: addAttr
							}));

						instance.init();
					} else if (!toggle && instance) {
						instance.destroy();
						$$invalidate(17, instance = undefined);
						$$invalidate(18, internalClasses = {});
						$$invalidate(20, internalAttrs = {});
					}

					$$invalidate(32, oldToggle = toggle);
				}
			}

			if ($$self.$$.dirty[0] & /*instance, pressed*/ 131073) {
				if (instance && !isUninitializedValue(pressed) && instance.isOn() !== pressed) {
					instance.toggle(pressed);
				}
			}
		};

		return [
			pressed,
			use,
			className,
			style,
			ripple,
			color,
			ariaLabelOn,
			ariaLabelOff,
			touch,
			displayFlex,
			size,
			href,
			action,
			component,
			tag,
			getElement,
			element,
			instance,
			internalClasses,
			internalStyles,
			internalAttrs,
			actionProp,
			forwardEvents,
			isUninitializedValue,
			context,
			ariaDescribedby,
			addClass,
			removeClass,
			addStyle,
			$$restProps,
			toggle,
			previousDisabled,
			oldToggle,
			slots,
			switch_instance_binding,
			click_handler,
			click_handler_1,
			$$scope
		];
	}

	class IconButton extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(
				this,
				options,
				instance_1$i,
				create_fragment$t,
				safe_not_equal,
				{
					use: 1,
					class: 2,
					style: 3,
					ripple: 4,
					color: 5,
					toggle: 30,
					pressed: 0,
					ariaLabelOn: 6,
					ariaLabelOff: 7,
					touch: 8,
					displayFlex: 9,
					size: 10,
					href: 11,
					action: 12,
					component: 13,
					tag: 14,
					getElement: 15
				},
				null,
				[-1, -1]
			);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "IconButton",
				options,
				id: create_fragment$t.name
			});
		}

		get use() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get ripple() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set ripple(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get color() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set color(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get toggle() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set toggle(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get pressed() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set pressed(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get ariaLabelOn() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set ariaLabelOn(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get ariaLabelOff() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set ariaLabelOff(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get touch() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set touch(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get displayFlex() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set displayFlex(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get size() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set size(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get href() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set href(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get action() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set action(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get component() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set component(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tag() {
			throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tag(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[15];
		}

		set getElement(value) {
			throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$d = {
	    ACTIVE: 'mdc-tab-indicator--active',
	    FADE: 'mdc-tab-indicator--fade',
	    NO_TRANSITION: 'mdc-tab-indicator--no-transition',
	};
	var strings$c = {
	    CONTENT_SELECTOR: '.mdc-tab-indicator__content',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabIndicatorFoundation = /** @class */ (function (_super) {
	    __extends(MDCTabIndicatorFoundation, _super);
	    function MDCTabIndicatorFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCTabIndicatorFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCTabIndicatorFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$d;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabIndicatorFoundation, "strings", {
	        get: function () {
	            return strings$c;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabIndicatorFoundation, "defaultAdapter", {
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                computeContentClientRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                setContentStyleProperty: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTabIndicatorFoundation.prototype.computeContentClientRect = function () {
	        return this.adapter.computeContentClientRect();
	    };
	    return MDCTabIndicatorFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/* istanbul ignore next: subclass is not a branch statement */
	var MDCFadingTabIndicatorFoundation = /** @class */ (function (_super) {
	    __extends(MDCFadingTabIndicatorFoundation, _super);
	    function MDCFadingTabIndicatorFoundation() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCFadingTabIndicatorFoundation.prototype.activate = function () {
	        this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
	    };
	    MDCFadingTabIndicatorFoundation.prototype.deactivate = function () {
	        this.adapter.removeClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
	    };
	    return MDCFadingTabIndicatorFoundation;
	}(MDCTabIndicatorFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/* istanbul ignore next: subclass is not a branch statement */
	var MDCSlidingTabIndicatorFoundation = /** @class */ (function (_super) {
	    __extends(MDCSlidingTabIndicatorFoundation, _super);
	    function MDCSlidingTabIndicatorFoundation() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCSlidingTabIndicatorFoundation.prototype.activate = function (previousIndicatorClientRect) {
	        // Early exit if no indicator is present to handle cases where an indicator
	        // may be activated without a prior indicator state
	        if (!previousIndicatorClientRect) {
	            this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
	            return;
	        }
	        // This animation uses the FLIP approach. You can read more about it at the link below:
	        // https://aerotwist.com/blog/flip-your-animations/
	        // Calculate the dimensions based on the dimensions of the previous indicator
	        var currentClientRect = this.computeContentClientRect();
	        var widthDelta = previousIndicatorClientRect.width / currentClientRect.width;
	        var xPosition = previousIndicatorClientRect.left - currentClientRect.left;
	        this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.NO_TRANSITION);
	        this.adapter.setContentStyleProperty('transform', "translateX(" + xPosition + "px) scaleX(" + widthDelta + ")");
	        // Force repaint before updating classes and transform to ensure the transform properly takes effect
	        this.computeContentClientRect();
	        this.adapter.removeClass(MDCTabIndicatorFoundation.cssClasses.NO_TRANSITION);
	        this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
	        this.adapter.setContentStyleProperty('transform', '');
	    };
	    MDCSlidingTabIndicatorFoundation.prototype.deactivate = function () {
	        this.adapter.removeClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
	    };
	    return MDCSlidingTabIndicatorFoundation;
	}(MDCTabIndicatorFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$c = {
	    ACTIVE: 'mdc-tab--active',
	};
	var strings$b = {
	    ARIA_SELECTED: 'aria-selected',
	    CONTENT_SELECTOR: '.mdc-tab__content',
	    INTERACTED_EVENT: 'MDCTab:interacted',
	    RIPPLE_SELECTOR: '.mdc-tab__ripple',
	    TABINDEX: 'tabIndex',
	    TAB_INDICATOR_SELECTOR: '.mdc-tab-indicator',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabFoundation = /** @class */ (function (_super) {
	    __extends(MDCTabFoundation, _super);
	    function MDCTabFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCTabFoundation.defaultAdapter), adapter)) || this;
	        _this.focusOnActivate = true;
	        return _this;
	    }
	    Object.defineProperty(MDCTabFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$c;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabFoundation, "strings", {
	        get: function () {
	            return strings$b;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabFoundation, "defaultAdapter", {
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                setAttr: function () { return undefined; },
	                activateIndicator: function () { return undefined; },
	                deactivateIndicator: function () { return undefined; },
	                notifyInteracted: function () { return undefined; },
	                getOffsetLeft: function () { return 0; },
	                getOffsetWidth: function () { return 0; },
	                getContentOffsetLeft: function () { return 0; },
	                getContentOffsetWidth: function () { return 0; },
	                focus: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTabFoundation.prototype.handleClick = function () {
	        // It's up to the parent component to keep track of the active Tab and
	        // ensure we don't activate a Tab that's already active.
	        this.adapter.notifyInteracted();
	    };
	    MDCTabFoundation.prototype.isActive = function () {
	        return this.adapter.hasClass(cssClasses$c.ACTIVE);
	    };
	    /**
	     * Sets whether the tab should focus itself when activated
	     */
	    MDCTabFoundation.prototype.setFocusOnActivate = function (focusOnActivate) {
	        this.focusOnActivate = focusOnActivate;
	    };
	    /**
	     * Activates the Tab
	     */
	    MDCTabFoundation.prototype.activate = function (previousIndicatorClientRect) {
	        this.adapter.addClass(cssClasses$c.ACTIVE);
	        this.adapter.setAttr(strings$b.ARIA_SELECTED, 'true');
	        this.adapter.setAttr(strings$b.TABINDEX, '0');
	        this.adapter.activateIndicator(previousIndicatorClientRect);
	        if (this.focusOnActivate) {
	            this.adapter.focus();
	        }
	    };
	    /**
	     * Deactivates the Tab
	     */
	    MDCTabFoundation.prototype.deactivate = function () {
	        // Early exit
	        if (!this.isActive()) {
	            return;
	        }
	        this.adapter.removeClass(cssClasses$c.ACTIVE);
	        this.adapter.setAttr(strings$b.ARIA_SELECTED, 'false');
	        this.adapter.setAttr(strings$b.TABINDEX, '-1');
	        this.adapter.deactivateIndicator();
	    };
	    /**
	     * Returns the dimensions of the Tab
	     */
	    MDCTabFoundation.prototype.computeDimensions = function () {
	        var rootWidth = this.adapter.getOffsetWidth();
	        var rootLeft = this.adapter.getOffsetLeft();
	        var contentWidth = this.adapter.getContentOffsetWidth();
	        var contentLeft = this.adapter.getContentOffsetLeft();
	        return {
	            contentLeft: rootLeft + contentLeft,
	            contentRight: rootLeft + contentLeft + contentWidth,
	            rootLeft: rootLeft,
	            rootRight: rootLeft + rootWidth,
	        };
	    };
	    return MDCTabFoundation;
	}(MDCFoundation));

	/* node_modules/@smui/tab/node_modules/@smui/tab-indicator/dist/TabIndicator.svelte generated by Svelte v4.2.19 */

	const file$p = "node_modules/@smui/tab/node_modules/@smui/tab-indicator/dist/TabIndicator.svelte";

	function create_fragment$s(ctx) {
		let span1;
		let span0;
		let span0_class_value;
		let span0_style_value;
		let span0_aria_hidden_value;
		let useActions_action;
		let span1_class_value;
		let useActions_action_1;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[21].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[20], null);

		let span0_levels = [
			{
				class: span0_class_value = classMap({
					[/*content$class*/ ctx[6]]: true,
					'mdc-tab-indicator__content': true,
					'mdc-tab-indicator__content--underline': /*type*/ ctx[3] === 'underline',
					'mdc-tab-indicator__content--icon': /*type*/ ctx[3] === 'icon'
				})
			},
			{
				style: span0_style_value = Object.entries(/*contentStyles*/ ctx[10]).map(func$f).join(' ')
			},
			{
				"aria-hidden": span0_aria_hidden_value = /*type*/ ctx[3] === 'icon' ? 'true' : undefined
			},
			prefixFilter(/*$$restProps*/ ctx[12], 'content$')
		];

		let span_data = {};

		for (let i = 0; i < span0_levels.length; i += 1) {
			span_data = assign(span_data, span0_levels[i]);
		}

		let span1_levels = [
			{
				class: span1_class_value = classMap({
					[/*className*/ ctx[2]]: true,
					'mdc-tab-indicator': true,
					'mdc-tab-indicator--active': /*active*/ ctx[0],
					'mdc-tab-indicator--fade': /*transition*/ ctx[4] === 'fade',
					.../*internalClasses*/ ctx[9]
				})
			},
			exclude(/*$$restProps*/ ctx[12], ['content$'])
		];

		let span_data_1 = {};

		for (let i = 0; i < span1_levels.length; i += 1) {
			span_data_1 = assign(span_data_1, span1_levels[i]);
		}

		const block = {
			c: function create() {
				span1 = element("span");
				span0 = element("span");
				if (default_slot) default_slot.c();
				set_attributes(span0, span_data);
				add_location(span0, file$p, 13, 2, 316);
				set_attributes(span1, span_data_1);
				add_location(span1, file$p, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, span1, anchor);
				append_dev(span1, span0);

				if (default_slot) {
					default_slot.m(span0, null);
				}

				/*span0_binding*/ ctx[22](span0);
				/*span1_binding*/ ctx[23](span1);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, span0, /*content$use*/ ctx[5])),
						action_destroyer(useActions_action_1 = useActions.call(null, span1, /*use*/ ctx[1])),
						action_destroyer(/*forwardEvents*/ ctx[11].call(null, span1))
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 1048576)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[20],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[20])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[20], dirty, null),
							null
						);
					}
				}

				set_attributes(span0, span_data = get_spread_update(span0_levels, [
					(!current || dirty & /*content$class, type*/ 72 && span0_class_value !== (span0_class_value = classMap({
						[/*content$class*/ ctx[6]]: true,
						'mdc-tab-indicator__content': true,
						'mdc-tab-indicator__content--underline': /*type*/ ctx[3] === 'underline',
						'mdc-tab-indicator__content--icon': /*type*/ ctx[3] === 'icon'
					}))) && { class: span0_class_value },
					(!current || dirty & /*contentStyles*/ 1024 && span0_style_value !== (span0_style_value = Object.entries(/*contentStyles*/ ctx[10]).map(func$f).join(' '))) && { style: span0_style_value },
					(!current || dirty & /*type*/ 8 && span0_aria_hidden_value !== (span0_aria_hidden_value = /*type*/ ctx[3] === 'icon' ? 'true' : undefined)) && { "aria-hidden": span0_aria_hidden_value },
					dirty & /*$$restProps*/ 4096 && prefixFilter(/*$$restProps*/ ctx[12], 'content$')
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*content$use*/ 32) useActions_action.update.call(null, /*content$use*/ ctx[5]);

				set_attributes(span1, span_data_1 = get_spread_update(span1_levels, [
					(!current || dirty & /*className, active, transition, internalClasses*/ 533 && span1_class_value !== (span1_class_value = classMap({
						[/*className*/ ctx[2]]: true,
						'mdc-tab-indicator': true,
						'mdc-tab-indicator--active': /*active*/ ctx[0],
						'mdc-tab-indicator--fade': /*transition*/ ctx[4] === 'fade',
						.../*internalClasses*/ ctx[9]
					}))) && { class: span1_class_value },
					dirty & /*$$restProps*/ 4096 && exclude(/*$$restProps*/ ctx[12], ['content$'])
				]));

				if (useActions_action_1 && is_function(useActions_action_1.update) && dirty & /*use*/ 2) useActions_action_1.update.call(null, /*use*/ ctx[1]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(span1);
				}

				if (default_slot) default_slot.d(detaching);
				/*span0_binding*/ ctx[22](null);
				/*span1_binding*/ ctx[23](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$s.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$f = ([name, value]) => `${name}: ${value};`;

	function instance_1$h($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","active","type","transition","content$use","content$class","activate","deactivate","computeContentClientRect","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('TabIndicator', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { active = false } = $$props;
		let { type = 'underline' } = $$props;
		let { transition = 'slide' } = $$props;
		let { content$use = [] } = $$props;
		let { content$class = '' } = $$props;
		let element;
		let instance;
		let content;
		let internalClasses = {};
		let contentStyles = {};
		let changeSets = [];
		let oldTransition = transition;

		onMount(() => {
			$$invalidate(17, instance = getInstance());
			instance.init();

			return () => {
				instance.destroy();
			};
		});

		function getInstance() {
			const Foundation = ({
				fade: MDCFadingTabIndicatorFoundation,
				slide: MDCSlidingTabIndicatorFoundation
			})[transition] || MDCSlidingTabIndicatorFoundation;

			return new Foundation({
					addClass: (...props) => doChange(() => addClass(...props)),
					removeClass: (...props) => doChange(() => removeClass(...props)),
					computeContentClientRect,
					setContentStyleProperty: (...props) => doChange(() => addContentStyle(...props))
				});
		}

		function doChange(fn) {
			if (changeSets.length) {
				changeSets[changeSets.length - 1].push(fn);
			} else {
				fn();
			}
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(9, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(9, internalClasses[className] = false, internalClasses);
			}
		}

		function addContentStyle(name, value) {
			if (contentStyles[name] != value) {
				if (value === '' || value == null) {
					delete contentStyles[name];
					((($$invalidate(10, contentStyles), $$invalidate(19, oldTransition)), $$invalidate(4, transition)), $$invalidate(17, instance));
				} else {
					$$invalidate(10, contentStyles[name] = value, contentStyles);
				}
			}
		}

		function activate(previousIndicatorClientRect) {
			$$invalidate(0, active = true);
			instance.activate(previousIndicatorClientRect);
		}

		function deactivate() {
			$$invalidate(0, active = false);
			instance.deactivate();
		}

		function computeContentClientRect() {
			changeSets.push([]);
			$$invalidate(18, changeSets);
			return content.getBoundingClientRect();
		}

		function getElement() {
			return element;
		}

		function span0_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				content = $$value;
				$$invalidate(8, content);
			});
		}

		function span1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(7, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(1, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
			if ('active' in $$new_props) $$invalidate(0, active = $$new_props.active);
			if ('type' in $$new_props) $$invalidate(3, type = $$new_props.type);
			if ('transition' in $$new_props) $$invalidate(4, transition = $$new_props.transition);
			if ('content$use' in $$new_props) $$invalidate(5, content$use = $$new_props.content$use);
			if ('content$class' in $$new_props) $$invalidate(6, content$class = $$new_props.content$class);
			if ('$$scope' in $$new_props) $$invalidate(20, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			MDCFadingTabIndicatorFoundation,
			MDCSlidingTabIndicatorFoundation,
			onMount,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			exclude,
			prefixFilter,
			useActions,
			forwardEvents,
			use,
			className,
			active,
			type,
			transition,
			content$use,
			content$class,
			element,
			instance,
			content,
			internalClasses,
			contentStyles,
			changeSets,
			oldTransition,
			getInstance,
			doChange,
			addClass,
			removeClass,
			addContentStyle,
			activate,
			deactivate,
			computeContentClientRect,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(1, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
			if ('active' in $$props) $$invalidate(0, active = $$new_props.active);
			if ('type' in $$props) $$invalidate(3, type = $$new_props.type);
			if ('transition' in $$props) $$invalidate(4, transition = $$new_props.transition);
			if ('content$use' in $$props) $$invalidate(5, content$use = $$new_props.content$use);
			if ('content$class' in $$props) $$invalidate(6, content$class = $$new_props.content$class);
			if ('element' in $$props) $$invalidate(7, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(17, instance = $$new_props.instance);
			if ('content' in $$props) $$invalidate(8, content = $$new_props.content);
			if ('internalClasses' in $$props) $$invalidate(9, internalClasses = $$new_props.internalClasses);
			if ('contentStyles' in $$props) $$invalidate(10, contentStyles = $$new_props.contentStyles);
			if ('changeSets' in $$props) $$invalidate(18, changeSets = $$new_props.changeSets);
			if ('oldTransition' in $$props) $$invalidate(19, oldTransition = $$new_props.oldTransition);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*oldTransition, transition, instance*/ 655376) {
				if (oldTransition !== transition) {
					$$invalidate(19, oldTransition = transition);
					instance && instance.destroy();
					$$invalidate(9, internalClasses = {});
					$$invalidate(10, contentStyles = {});
					$$invalidate(17, instance = getInstance());
					instance.init();
				}
			}

			if ($$self.$$.dirty & /*changeSets*/ 262144) {
				// Use sets of changes for DOM updates, to facilitate animations.
				if (changeSets.length) {
					requestAnimationFrame(() => {
						var _a;

						const changeSet = (_a = changeSets.shift()) !== null && _a !== void 0
						? _a
						: [];

						$$invalidate(18, changeSets);

						for (const fn of changeSet) {
							fn();
						}
					});
				}
			}
		};

		return [
			active,
			use,
			className,
			type,
			transition,
			content$use,
			content$class,
			element,
			content,
			internalClasses,
			contentStyles,
			forwardEvents,
			$$restProps,
			activate,
			deactivate,
			computeContentClientRect,
			getElement,
			instance,
			changeSets,
			oldTransition,
			$$scope,
			slots,
			span0_binding,
			span1_binding
		];
	}

	class TabIndicator extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance_1$h, create_fragment$s, safe_not_equal, {
				use: 1,
				class: 2,
				active: 0,
				type: 3,
				transition: 4,
				content$use: 5,
				content$class: 6,
				activate: 13,
				deactivate: 14,
				computeContentClientRect: 15,
				getElement: 16
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "TabIndicator",
				options,
				id: create_fragment$s.name
			});
		}

		get use() {
			throw new Error("<TabIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<TabIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get active() {
			throw new Error("<TabIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set active(value) {
			throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get type() {
			throw new Error("<TabIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set type(value) {
			throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get transition() {
			throw new Error("<TabIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set transition(value) {
			throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get content$use() {
			throw new Error("<TabIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set content$use(value) {
			throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get content$class() {
			throw new Error("<TabIndicator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set content$class(value) {
			throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get activate() {
			return this.$$.ctx[13];
		}

		set activate(value) {
			throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get deactivate() {
			return this.$$.ctx[14];
		}

		set deactivate(value) {
			throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get computeContentClientRect() {
			return this.$$.ctx[15];
		}

		set computeContentClientRect(value) {
			throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[16];
		}

		set getElement(value) {
			throw new Error("<TabIndicator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/tab/dist/Tab.svelte generated by Svelte v4.2.19 */

	const { Error: Error_1$3 } = globals;
	const file$o = "node_modules/@smui/tab/dist/Tab.svelte";
	const get_tab_indicator_slot_changes_1 = dirty => ({});
	const get_tab_indicator_slot_context_1 = ctx => ({});
	const get_tab_indicator_slot_changes = dirty => ({});
	const get_tab_indicator_slot_context = ctx => ({});

	// (49:4) {#if indicatorSpanOnlyContent}
	function create_if_block_1$5(ctx) {
		let tabindicator;
		let current;

		const tabindicator_spread_levels = [
			{ active: /*active*/ ctx[18] },
			prefixFilter(/*$$restProps*/ ctx[25], 'tabIndicator$')
		];

		let tabindicator_props = {
			$$slots: { default: [create_default_slot_2$3] },
			$$scope: { ctx }
		};

		for (let i = 0; i < tabindicator_spread_levels.length; i += 1) {
			tabindicator_props = assign(tabindicator_props, tabindicator_spread_levels[i]);
		}

		tabindicator = new TabIndicator({
				props: tabindicator_props,
				$$inline: true
			});

		/*tabindicator_binding*/ ctx[33](tabindicator);

		const block = {
			c: function create() {
				create_component(tabindicator.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(tabindicator, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const tabindicator_changes = (dirty[0] & /*active, $$restProps*/ 33816576)
				? get_spread_update(tabindicator_spread_levels, [
						dirty[0] & /*active*/ 262144 && { active: /*active*/ ctx[18] },
						dirty[0] & /*$$restProps*/ 33554432 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[25], 'tabIndicator$'))
					])
				: {};

				if (dirty[1] & /*$$scope*/ 64) {
					tabindicator_changes.$$scope = { dirty, ctx };
				}

				tabindicator.$set(tabindicator_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tabindicator.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tabindicator.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				/*tabindicator_binding*/ ctx[33](null);
				destroy_component(tabindicator, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$5.name,
			type: "if",
			source: "(49:4) {#if indicatorSpanOnlyContent}",
			ctx
		});

		return block;
	}

	// (50:6) <TabIndicator         bind:this={tabIndicator}         {active}         {...prefixFilter($$restProps, 'tabIndicator$')}         >
	function create_default_slot_2$3(ctx) {
		let current;
		const tab_indicator_slot_template = /*#slots*/ ctx[32]["tab-indicator"];
		const tab_indicator_slot = create_slot(tab_indicator_slot_template, ctx, /*$$scope*/ ctx[37], get_tab_indicator_slot_context);

		const block = {
			c: function create() {
				if (tab_indicator_slot) tab_indicator_slot.c();
			},
			m: function mount(target, anchor) {
				if (tab_indicator_slot) {
					tab_indicator_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (tab_indicator_slot) {
					if (tab_indicator_slot.p && (!current || dirty[1] & /*$$scope*/ 64)) {
						update_slot_base(
							tab_indicator_slot,
							tab_indicator_slot_template,
							ctx,
							/*$$scope*/ ctx[37],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[37])
							: get_slot_changes(tab_indicator_slot_template, /*$$scope*/ ctx[37], dirty, get_tab_indicator_slot_changes),
							get_tab_indicator_slot_context
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tab_indicator_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tab_indicator_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (tab_indicator_slot) tab_indicator_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_2$3.name,
			type: "slot",
			source: "(50:6) <TabIndicator         bind:this={tabIndicator}         {active}         {...prefixFilter($$restProps, 'tabIndicator$')}         >",
			ctx
		});

		return block;
	}

	// (58:2) {#if !indicatorSpanOnlyContent}
	function create_if_block$c(ctx) {
		let tabindicator;
		let current;

		const tabindicator_spread_levels = [
			{ active: /*active*/ ctx[18] },
			prefixFilter(/*$$restProps*/ ctx[25], 'tabIndicator$')
		];

		let tabindicator_props = {
			$$slots: { default: [create_default_slot_1$3] },
			$$scope: { ctx }
		};

		for (let i = 0; i < tabindicator_spread_levels.length; i += 1) {
			tabindicator_props = assign(tabindicator_props, tabindicator_spread_levels[i]);
		}

		tabindicator = new TabIndicator({
				props: tabindicator_props,
				$$inline: true
			});

		/*tabindicator_binding_1*/ ctx[35](tabindicator);

		const block = {
			c: function create() {
				create_component(tabindicator.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(tabindicator, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const tabindicator_changes = (dirty[0] & /*active, $$restProps*/ 33816576)
				? get_spread_update(tabindicator_spread_levels, [
						dirty[0] & /*active*/ 262144 && { active: /*active*/ ctx[18] },
						dirty[0] & /*$$restProps*/ 33554432 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[25], 'tabIndicator$'))
					])
				: {};

				if (dirty[1] & /*$$scope*/ 64) {
					tabindicator_changes.$$scope = { dirty, ctx };
				}

				tabindicator.$set(tabindicator_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tabindicator.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tabindicator.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				/*tabindicator_binding_1*/ ctx[35](null);
				destroy_component(tabindicator, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$c.name,
			type: "if",
			source: "(58:2) {#if !indicatorSpanOnlyContent}",
			ctx
		});

		return block;
	}

	// (59:4) <TabIndicator       bind:this={tabIndicator}       {active}       {...prefixFilter($$restProps, 'tabIndicator$')}       >
	function create_default_slot_1$3(ctx) {
		let current;
		const tab_indicator_slot_template = /*#slots*/ ctx[32]["tab-indicator"];
		const tab_indicator_slot = create_slot(tab_indicator_slot_template, ctx, /*$$scope*/ ctx[37], get_tab_indicator_slot_context_1);

		const block = {
			c: function create() {
				if (tab_indicator_slot) tab_indicator_slot.c();
			},
			m: function mount(target, anchor) {
				if (tab_indicator_slot) {
					tab_indicator_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (tab_indicator_slot) {
					if (tab_indicator_slot.p && (!current || dirty[1] & /*$$scope*/ 64)) {
						update_slot_base(
							tab_indicator_slot,
							tab_indicator_slot_template,
							ctx,
							/*$$scope*/ ctx[37],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[37])
							: get_slot_changes(tab_indicator_slot_template, /*$$scope*/ ctx[37], dirty, get_tab_indicator_slot_changes_1),
							get_tab_indicator_slot_context_1
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tab_indicator_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tab_indicator_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (tab_indicator_slot) tab_indicator_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_1$3.name,
			type: "slot",
			source: "(59:4) <TabIndicator       bind:this={tabIndicator}       {active}       {...prefixFilter($$restProps, 'tabIndicator$')}       >",
			ctx
		});

		return block;
	}

	// (1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: false,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-tab': true,     'mdc-tab--active': active,     'mdc-tab--stacked': stacked,     'mdc-tab--min-width': minWidth,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   role="tab"   aria-selected={active ? 'true' : 'false'}   tabindex={active || forceAccessible ? '0' : '-1'}   {href}   on:click={handleClick}   {...internalAttrs}   {...exclude($$restProps, ['content$', 'tabIndicator$'])} >
	function create_default_slot$9(ctx) {
		let span0;
		let t0;
		let span0_class_value;
		let useActions_action;
		let t1;
		let t2;
		let span1;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[32].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[37], null);
		let if_block0 = /*indicatorSpanOnlyContent*/ ctx[6] && create_if_block_1$5(ctx);

		let span0_levels = [
			{
				class: span0_class_value = classMap({
					[/*content$class*/ ctx[9]]: true,
					'mdc-tab__content': true
				})
			},
			prefixFilter(/*$$restProps*/ ctx[25], 'content$')
		];

		let span_data_1 = {};

		for (let i = 0; i < span0_levels.length; i += 1) {
			span_data_1 = assign(span_data_1, span0_levels[i]);
		}

		let if_block1 = !/*indicatorSpanOnlyContent*/ ctx[6] && create_if_block$c(ctx);

		const block = {
			c: function create() {
				span0 = element("span");
				if (default_slot) default_slot.c();
				t0 = space();
				if (if_block0) if_block0.c();
				t1 = space();
				if (if_block1) if_block1.c();
				t2 = space();
				span1 = element("span");
				set_attributes(span0, span_data_1);
				add_location(span0, file$o, 38, 2, 803);
				attr_dev(span1, "class", "mdc-tab__ripple");
				add_location(span1, file$o, 65, 2, 1482);
			},
			m: function mount(target, anchor) {
				insert_dev(target, span0, anchor);

				if (default_slot) {
					default_slot.m(span0, null);
				}

				append_dev(span0, t0);
				if (if_block0) if_block0.m(span0, null);
				/*span0_binding*/ ctx[34](span0);
				insert_dev(target, t1, anchor);
				if (if_block1) if_block1.m(target, anchor);
				insert_dev(target, t2, anchor);
				insert_dev(target, span1, anchor);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(useActions_action = useActions.call(null, span0, /*content$use*/ ctx[8]));
					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 64)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[37],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[37])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[37], dirty, null),
							null
						);
					}
				}

				if (/*indicatorSpanOnlyContent*/ ctx[6]) {
					if (if_block0) {
						if_block0.p(ctx, dirty);

						if (dirty[0] & /*indicatorSpanOnlyContent*/ 64) {
							transition_in(if_block0, 1);
						}
					} else {
						if_block0 = create_if_block_1$5(ctx);
						if_block0.c();
						transition_in(if_block0, 1);
						if_block0.m(span0, null);
					}
				} else if (if_block0) {
					group_outros();

					transition_out(if_block0, 1, 1, () => {
						if_block0 = null;
					});

					check_outros();
				}

				set_attributes(span0, span_data_1 = get_spread_update(span0_levels, [
					(!current || dirty[0] & /*content$class*/ 512 && span0_class_value !== (span0_class_value = classMap({
						[/*content$class*/ ctx[9]]: true,
						'mdc-tab__content': true
					}))) && { class: span0_class_value },
					dirty[0] & /*$$restProps*/ 33554432 && prefixFilter(/*$$restProps*/ ctx[25], 'content$')
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*content$use*/ 256) useActions_action.update.call(null, /*content$use*/ ctx[8]);

				if (!/*indicatorSpanOnlyContent*/ ctx[6]) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty[0] & /*indicatorSpanOnlyContent*/ 64) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block$c(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(t2.parentNode, t2);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				transition_in(if_block0);
				transition_in(if_block1);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				transition_out(if_block0);
				transition_out(if_block1);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(span0);
					detach_dev(t1);
					detach_dev(t2);
					detach_dev(span1);
				}

				if (default_slot) default_slot.d(detaching);
				if (if_block0) if_block0.d();
				/*span0_binding*/ ctx[34](null);
				if (if_block1) if_block1.d(detaching);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$9.name,
			type: "slot",
			source: "(1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: false,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-tab': true,     'mdc-tab--active': active,     'mdc-tab--stacked': stacked,     'mdc-tab--min-width': minWidth,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   role=\\\"tab\\\"   aria-selected={active ? 'true' : 'false'}   tabindex={active || forceAccessible ? '0' : '-1'}   {href}   on:click={handleClick}   {...internalAttrs}   {...exclude($$restProps, ['content$', 'tabIndicator$'])} >",
			ctx
		});

		return block;
	}

	function create_fragment$r(ctx) {
		let switch_instance;
		let switch_instance_anchor;
		let current;

		const switch_instance_spread_levels = [
			{ tag: /*tag*/ ctx[11] },
			{
				use: [
					[
						Ripple,
						{
							ripple: /*ripple*/ ctx[3],
							unbounded: false,
							addClass: /*addClass*/ ctx[21],
							removeClass: /*removeClass*/ ctx[22],
							addStyle: /*addStyle*/ ctx[23]
						}
					],
					/*forwardEvents*/ ctx[20],
					.../*use*/ ctx[0]
				]
			},
			{
				class: classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-tab': true,
					'mdc-tab--active': /*active*/ ctx[18],
					'mdc-tab--stacked': /*stacked*/ ctx[4],
					'mdc-tab--min-width': /*minWidth*/ ctx[5],
					.../*internalClasses*/ ctx[15]
				})
			},
			{
				style: Object.entries(/*internalStyles*/ ctx[16]).map(func$e).concat([/*style*/ ctx[2]]).join(' ')
			},
			{ role: "tab" },
			{
				"aria-selected": /*active*/ ctx[18] ? 'true' : 'false'
			},
			{
				tabindex: /*active*/ ctx[18] || /*forceAccessible*/ ctx[19]
				? '0'
				: '-1'
			},
			{ href: /*href*/ ctx[7] },
			/*internalAttrs*/ ctx[17],
			exclude(/*$$restProps*/ ctx[25], ['content$', 'tabIndicator$'])
		];

		var switch_value = /*component*/ ctx[10];

		function switch_props(ctx, dirty) {
			let switch_instance_props = {
				$$slots: { default: [create_default_slot$9] },
				$$scope: { ctx }
			};

			for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
				switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
			}

			if (dirty !== undefined && dirty[0] & /*tag, ripple, addClass, removeClass, addStyle, forwardEvents, use, className, active, stacked, minWidth, internalClasses, internalStyles, style, forceAccessible, href, internalAttrs, $$restProps*/ 50301119) {
				switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [
					dirty[0] & /*tag*/ 2048 && { tag: /*tag*/ ctx[11] },
					dirty[0] & /*ripple, addClass, removeClass, addStyle, forwardEvents, use*/ 15728649 && {
						use: [
							[
								Ripple,
								{
									ripple: /*ripple*/ ctx[3],
									unbounded: false,
									addClass: /*addClass*/ ctx[21],
									removeClass: /*removeClass*/ ctx[22],
									addStyle: /*addStyle*/ ctx[23]
								}
							],
							/*forwardEvents*/ ctx[20],
							.../*use*/ ctx[0]
						]
					},
					dirty[0] & /*className, active, stacked, minWidth, internalClasses*/ 294962 && {
						class: classMap({
							[/*className*/ ctx[1]]: true,
							'mdc-tab': true,
							'mdc-tab--active': /*active*/ ctx[18],
							'mdc-tab--stacked': /*stacked*/ ctx[4],
							'mdc-tab--min-width': /*minWidth*/ ctx[5],
							.../*internalClasses*/ ctx[15]
						})
					},
					dirty[0] & /*internalStyles, style*/ 65540 && {
						style: Object.entries(/*internalStyles*/ ctx[16]).map(func$e).concat([/*style*/ ctx[2]]).join(' ')
					},
					switch_instance_spread_levels[4],
					dirty[0] & /*active*/ 262144 && {
						"aria-selected": /*active*/ ctx[18] ? 'true' : 'false'
					},
					dirty[0] & /*active, forceAccessible*/ 786432 && {
						tabindex: /*active*/ ctx[18] || /*forceAccessible*/ ctx[19]
						? '0'
						: '-1'
					},
					dirty[0] & /*href*/ 128 && { href: /*href*/ ctx[7] },
					dirty[0] & /*internalAttrs*/ 131072 && get_spread_object(/*internalAttrs*/ ctx[17]),
					dirty[0] & /*$$restProps*/ 33554432 && get_spread_object(exclude(/*$$restProps*/ ctx[25], ['content$', 'tabIndicator$']))
				]));
			}

			return {
				props: switch_instance_props,
				$$inline: true
			};
		}

		if (switch_value) {
			switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
			/*switch_instance_binding*/ ctx[36](switch_instance);
			switch_instance.$on("click", /*handleClick*/ ctx[24]);
		}

		const block = {
			c: function create() {
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error_1$3("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (switch_instance) mount_component(switch_instance, target, anchor);
				insert_dev(target, switch_instance_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*component*/ 1024 && switch_value !== (switch_value = /*component*/ ctx[10])) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx, dirty));
						/*switch_instance_binding*/ ctx[36](switch_instance);
						switch_instance.$on("click", /*handleClick*/ ctx[24]);
						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					const switch_instance_changes = (dirty[0] & /*tag, ripple, addClass, removeClass, addStyle, forwardEvents, use, className, active, stacked, minWidth, internalClasses, internalStyles, style, forceAccessible, href, internalAttrs, $$restProps*/ 50301119)
					? get_spread_update(switch_instance_spread_levels, [
							dirty[0] & /*tag*/ 2048 && { tag: /*tag*/ ctx[11] },
							dirty[0] & /*ripple, addClass, removeClass, addStyle, forwardEvents, use*/ 15728649 && {
								use: [
									[
										Ripple,
										{
											ripple: /*ripple*/ ctx[3],
											unbounded: false,
											addClass: /*addClass*/ ctx[21],
											removeClass: /*removeClass*/ ctx[22],
											addStyle: /*addStyle*/ ctx[23]
										}
									],
									/*forwardEvents*/ ctx[20],
									.../*use*/ ctx[0]
								]
							},
							dirty[0] & /*className, active, stacked, minWidth, internalClasses*/ 294962 && {
								class: classMap({
									[/*className*/ ctx[1]]: true,
									'mdc-tab': true,
									'mdc-tab--active': /*active*/ ctx[18],
									'mdc-tab--stacked': /*stacked*/ ctx[4],
									'mdc-tab--min-width': /*minWidth*/ ctx[5],
									.../*internalClasses*/ ctx[15]
								})
							},
							dirty[0] & /*internalStyles, style*/ 65540 && {
								style: Object.entries(/*internalStyles*/ ctx[16]).map(func$e).concat([/*style*/ ctx[2]]).join(' ')
							},
							switch_instance_spread_levels[4],
							dirty[0] & /*active*/ 262144 && {
								"aria-selected": /*active*/ ctx[18] ? 'true' : 'false'
							},
							dirty[0] & /*active, forceAccessible*/ 786432 && {
								tabindex: /*active*/ ctx[18] || /*forceAccessible*/ ctx[19]
								? '0'
								: '-1'
							},
							dirty[0] & /*href*/ 128 && { href: /*href*/ ctx[7] },
							dirty[0] & /*internalAttrs*/ 131072 && get_spread_object(/*internalAttrs*/ ctx[17]),
							dirty[0] & /*$$restProps*/ 33554432 && get_spread_object(exclude(/*$$restProps*/ ctx[25], ['content$', 'tabIndicator$']))
						])
					: {};

					if (dirty[0] & /*active, $$restProps, tabIndicator, indicatorSpanOnlyContent, content$class, content, content$use*/ 33841984 | dirty[1] & /*$$scope*/ 64) {
						switch_instance_changes.$$scope = { dirty, ctx };
					}

					switch_instance.$set(switch_instance_changes);
				}
			},
			i: function intro(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(switch_instance_anchor);
				}

				/*switch_instance_binding*/ ctx[36](null);
				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$r.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$e = ([name, value]) => `${name}: ${value};`;

	function instance_1$g($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","style","tab","ripple","stacked","minWidth","indicatorSpanOnlyContent","href","content$use","content$class","component","tag","activate","deactivate","focus","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Tab', slots, ['default','tab-indicator']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { tab: tabId } = $$props;
		let { ripple = true } = $$props;
		let { stacked = false } = $$props;
		let { minWidth = false } = $$props;
		let { indicatorSpanOnlyContent = false } = $$props;
		let { href = undefined } = $$props;
		let { content$use = [] } = $$props;
		let { content$class = '' } = $$props;
		let element;
		let instance;
		let content;
		let tabIndicator;
		let internalClasses = {};
		let internalStyles = {};
		let internalAttrs = {};
		let focusOnActivate = getContext('SMUI:tab:focusOnActivate');
		let active = tabId === getContext('SMUI:tab:initialActive');
		let forceAccessible = false;
		let { component = SmuiElement } = $$props;

		let { tag = component === SmuiElement
		? href == null ? 'button' : 'a'
		: undefined } = $$props;

		setContext('SMUI:label:context', 'tab');
		setContext('SMUI:icon:context', 'tab');

		if (!tabId) {
			throw new Error('The tab property is required! It should be passed down from the TabBar to the Tab.');
		}

		onMount(() => {
			$$invalidate(31, instance = new MDCTabFoundation({
					setAttr: addAttr,
					addClass,
					removeClass,
					hasClass,
					activateIndicator: previousIndicatorClientRect => tabIndicator.activate(previousIndicatorClientRect),
					deactivateIndicator: () => tabIndicator.deactivate(),
					notifyInteracted: () => dispatch(getElement(), 'SMUITab:interacted', { tabId }, undefined, true),
					getOffsetLeft: () => getElement().offsetLeft,
					getOffsetWidth: () => getElement().offsetWidth,
					getContentOffsetLeft: () => content.offsetLeft,
					getContentOffsetWidth: () => content.offsetWidth,
					focus
				}));

			const accessor = {
				tabId,
				get element() {
					return getElement();
				},
				get active() {
					return active;
				},
				forceAccessible(accessible) {
					$$invalidate(19, forceAccessible = accessible);
				},
				computeIndicatorClientRect: () => tabIndicator.computeContentClientRect(),
				computeDimensions: () => instance.computeDimensions(),
				focus,
				activate,
				deactivate
			};

			dispatch(getElement(), 'SMUITab:mount', accessor);
			instance.init();

			return () => {
				dispatch(getElement(), 'SMUITab:unmount', accessor);
				instance.destroy();
			};
		});

		function hasClass(className) {
			return className in internalClasses
			? internalClasses[className]
			: getElement().classList.contains(className);
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(15, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(15, internalClasses[className] = false, internalClasses);
			}
		}

		function addStyle(name, value) {
			if (internalStyles[name] != value) {
				if (value === '' || value == null) {
					delete internalStyles[name];
					$$invalidate(16, internalStyles);
				} else {
					$$invalidate(16, internalStyles[name] = value, internalStyles);
				}
			}
		}

		function addAttr(name, value) {
			if (internalAttrs[name] !== value) {
				$$invalidate(17, internalAttrs[name] = value, internalAttrs);
			}
		}

		function handleClick(event) {
			if (!event.defaultPrevented && instance) {
				instance.handleClick();
			}
		}

		function activate(previousIndicatorClientRect, skipFocus) {
			$$invalidate(18, active = true);

			if (skipFocus) {
				instance.setFocusOnActivate(false);
			}

			instance.activate(previousIndicatorClientRect);

			if (skipFocus) {
				instance.setFocusOnActivate(focusOnActivate);
			}
		}

		function deactivate() {
			$$invalidate(18, active = false);
			instance.deactivate();
		}

		function focus() {
			getElement().focus();
		}

		function getElement() {
			return element.getElement();
		}

		$$self.$$.on_mount.push(function () {
			if (tabId === undefined && !('tab' in $$props || $$self.$$.bound[$$self.$$.props['tab']])) {
				console.warn("<Tab> was created without expected prop 'tab'");
			}
		});

		function tabindicator_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				tabIndicator = $$value;
				$$invalidate(14, tabIndicator);
			});
		}

		function span0_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				content = $$value;
				$$invalidate(13, content);
			});
		}

		function tabindicator_binding_1($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				tabIndicator = $$value;
				$$invalidate(14, tabIndicator);
			});
		}

		function switch_instance_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(12, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(25, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(2, style = $$new_props.style);
			if ('tab' in $$new_props) $$invalidate(26, tabId = $$new_props.tab);
			if ('ripple' in $$new_props) $$invalidate(3, ripple = $$new_props.ripple);
			if ('stacked' in $$new_props) $$invalidate(4, stacked = $$new_props.stacked);
			if ('minWidth' in $$new_props) $$invalidate(5, minWidth = $$new_props.minWidth);
			if ('indicatorSpanOnlyContent' in $$new_props) $$invalidate(6, indicatorSpanOnlyContent = $$new_props.indicatorSpanOnlyContent);
			if ('href' in $$new_props) $$invalidate(7, href = $$new_props.href);
			if ('content$use' in $$new_props) $$invalidate(8, content$use = $$new_props.content$use);
			if ('content$class' in $$new_props) $$invalidate(9, content$class = $$new_props.content$class);
			if ('component' in $$new_props) $$invalidate(10, component = $$new_props.component);
			if ('tag' in $$new_props) $$invalidate(11, tag = $$new_props.tag);
			if ('$$scope' in $$new_props) $$invalidate(37, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			MDCTabFoundation,
			onMount,
			setContext,
			getContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			exclude,
			prefixFilter,
			useActions,
			dispatch,
			Ripple,
			SmuiElement,
			TabIndicator,
			forwardEvents,
			use,
			className,
			style,
			tabId,
			ripple,
			stacked,
			minWidth,
			indicatorSpanOnlyContent,
			href,
			content$use,
			content$class,
			element,
			instance,
			content,
			tabIndicator,
			internalClasses,
			internalStyles,
			internalAttrs,
			focusOnActivate,
			active,
			forceAccessible,
			component,
			tag,
			hasClass,
			addClass,
			removeClass,
			addStyle,
			addAttr,
			handleClick,
			activate,
			deactivate,
			focus,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(2, style = $$new_props.style);
			if ('tabId' in $$props) $$invalidate(26, tabId = $$new_props.tabId);
			if ('ripple' in $$props) $$invalidate(3, ripple = $$new_props.ripple);
			if ('stacked' in $$props) $$invalidate(4, stacked = $$new_props.stacked);
			if ('minWidth' in $$props) $$invalidate(5, minWidth = $$new_props.minWidth);
			if ('indicatorSpanOnlyContent' in $$props) $$invalidate(6, indicatorSpanOnlyContent = $$new_props.indicatorSpanOnlyContent);
			if ('href' in $$props) $$invalidate(7, href = $$new_props.href);
			if ('content$use' in $$props) $$invalidate(8, content$use = $$new_props.content$use);
			if ('content$class' in $$props) $$invalidate(9, content$class = $$new_props.content$class);
			if ('element' in $$props) $$invalidate(12, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(31, instance = $$new_props.instance);
			if ('content' in $$props) $$invalidate(13, content = $$new_props.content);
			if ('tabIndicator' in $$props) $$invalidate(14, tabIndicator = $$new_props.tabIndicator);
			if ('internalClasses' in $$props) $$invalidate(15, internalClasses = $$new_props.internalClasses);
			if ('internalStyles' in $$props) $$invalidate(16, internalStyles = $$new_props.internalStyles);
			if ('internalAttrs' in $$props) $$invalidate(17, internalAttrs = $$new_props.internalAttrs);
			if ('focusOnActivate' in $$props) $$invalidate(38, focusOnActivate = $$new_props.focusOnActivate);
			if ('active' in $$props) $$invalidate(18, active = $$new_props.active);
			if ('forceAccessible' in $$props) $$invalidate(19, forceAccessible = $$new_props.forceAccessible);
			if ('component' in $$props) $$invalidate(10, component = $$new_props.component);
			if ('tag' in $$props) $$invalidate(11, tag = $$new_props.tag);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty[1] & /*instance*/ 1) {
				if (instance) {
					instance.setFocusOnActivate(focusOnActivate);
				}
			}
		};

		return [
			use,
			className,
			style,
			ripple,
			stacked,
			minWidth,
			indicatorSpanOnlyContent,
			href,
			content$use,
			content$class,
			component,
			tag,
			element,
			content,
			tabIndicator,
			internalClasses,
			internalStyles,
			internalAttrs,
			active,
			forceAccessible,
			forwardEvents,
			addClass,
			removeClass,
			addStyle,
			handleClick,
			$$restProps,
			tabId,
			activate,
			deactivate,
			focus,
			getElement,
			instance,
			slots,
			tabindicator_binding,
			span0_binding,
			tabindicator_binding_1,
			switch_instance_binding,
			$$scope
		];
	}

	class Tab extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(
				this,
				options,
				instance_1$g,
				create_fragment$r,
				safe_not_equal,
				{
					use: 0,
					class: 1,
					style: 2,
					tab: 26,
					ripple: 3,
					stacked: 4,
					minWidth: 5,
					indicatorSpanOnlyContent: 6,
					href: 7,
					content$use: 8,
					content$class: 9,
					component: 10,
					tag: 11,
					activate: 27,
					deactivate: 28,
					focus: 29,
					getElement: 30
				},
				null,
				[-1, -1]
			);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Tab",
				options,
				id: create_fragment$r.name
			});
		}

		get use() {
			throw new Error_1$3("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error_1$3("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error_1$3("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tab() {
			throw new Error_1$3("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tab(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get ripple() {
			throw new Error_1$3("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set ripple(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get stacked() {
			throw new Error_1$3("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set stacked(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get minWidth() {
			throw new Error_1$3("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set minWidth(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get indicatorSpanOnlyContent() {
			throw new Error_1$3("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set indicatorSpanOnlyContent(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get href() {
			throw new Error_1$3("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set href(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get content$use() {
			throw new Error_1$3("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set content$use(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get content$class() {
			throw new Error_1$3("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set content$class(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get component() {
			throw new Error_1$3("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set component(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tag() {
			throw new Error_1$3("<Tab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tag(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get activate() {
			return this.$$.ctx[27];
		}

		set activate(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get deactivate() {
			return this.$$.ctx[28];
		}

		set deactivate(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get focus() {
			return this.$$.ctx[29];
		}

		set focus(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[30];
		}

		set getElement(value) {
			throw new Error_1$3("<Tab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$b = {
	    ANIMATING: 'mdc-tab-scroller--animating',
	    SCROLL_AREA_SCROLL: 'mdc-tab-scroller__scroll-area--scroll',
	    SCROLL_TEST: 'mdc-tab-scroller__test',
	};
	var strings$a = {
	    AREA_SELECTOR: '.mdc-tab-scroller__scroll-area',
	    CONTENT_SELECTOR: '.mdc-tab-scroller__scroll-content',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabScrollerRTL = /** @class */ (function () {
	    function MDCTabScrollerRTL(adapter) {
	        this.adapter = adapter;
	    }
	    return MDCTabScrollerRTL;
	}());

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabScrollerRTLDefault = /** @class */ (function (_super) {
	    __extends(MDCTabScrollerRTLDefault, _super);
	    function MDCTabScrollerRTLDefault() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTabScrollerRTLDefault.prototype.getScrollPositionRTL = function () {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        var right = this.calculateScrollEdges().right;
	        // Scroll values on most browsers are ints instead of floats so we round
	        return Math.round(right - currentScrollLeft);
	    };
	    MDCTabScrollerRTLDefault.prototype.scrollToRTL = function (scrollX) {
	        var edges = this.calculateScrollEdges();
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        var clampedScrollLeft = this.clampScrollValue(edges.right - scrollX);
	        return {
	            finalScrollPosition: clampedScrollLeft,
	            scrollDelta: clampedScrollLeft - currentScrollLeft,
	        };
	    };
	    MDCTabScrollerRTLDefault.prototype.incrementScrollRTL = function (scrollX) {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        var clampedScrollLeft = this.clampScrollValue(currentScrollLeft - scrollX);
	        return {
	            finalScrollPosition: clampedScrollLeft,
	            scrollDelta: clampedScrollLeft - currentScrollLeft,
	        };
	    };
	    MDCTabScrollerRTLDefault.prototype.getAnimatingScrollPosition = function (scrollX) {
	        return scrollX;
	    };
	    MDCTabScrollerRTLDefault.prototype.calculateScrollEdges = function () {
	        var contentWidth = this.adapter.getScrollContentOffsetWidth();
	        var rootWidth = this.adapter.getScrollAreaOffsetWidth();
	        return {
	            left: 0,
	            right: contentWidth - rootWidth,
	        };
	    };
	    MDCTabScrollerRTLDefault.prototype.clampScrollValue = function (scrollX) {
	        var edges = this.calculateScrollEdges();
	        return Math.min(Math.max(edges.left, scrollX), edges.right);
	    };
	    return MDCTabScrollerRTLDefault;
	}(MDCTabScrollerRTL));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabScrollerRTLNegative = /** @class */ (function (_super) {
	    __extends(MDCTabScrollerRTLNegative, _super);
	    function MDCTabScrollerRTLNegative() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTabScrollerRTLNegative.prototype.getScrollPositionRTL = function (translateX) {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        return Math.round(translateX - currentScrollLeft);
	    };
	    MDCTabScrollerRTLNegative.prototype.scrollToRTL = function (scrollX) {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        var clampedScrollLeft = this.clampScrollValue(-scrollX);
	        return {
	            finalScrollPosition: clampedScrollLeft,
	            scrollDelta: clampedScrollLeft - currentScrollLeft,
	        };
	    };
	    MDCTabScrollerRTLNegative.prototype.incrementScrollRTL = function (scrollX) {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        var clampedScrollLeft = this.clampScrollValue(currentScrollLeft - scrollX);
	        return {
	            finalScrollPosition: clampedScrollLeft,
	            scrollDelta: clampedScrollLeft - currentScrollLeft,
	        };
	    };
	    MDCTabScrollerRTLNegative.prototype.getAnimatingScrollPosition = function (scrollX, translateX) {
	        return scrollX - translateX;
	    };
	    MDCTabScrollerRTLNegative.prototype.calculateScrollEdges = function () {
	        var contentWidth = this.adapter.getScrollContentOffsetWidth();
	        var rootWidth = this.adapter.getScrollAreaOffsetWidth();
	        return {
	            left: rootWidth - contentWidth,
	            right: 0,
	        };
	    };
	    MDCTabScrollerRTLNegative.prototype.clampScrollValue = function (scrollX) {
	        var edges = this.calculateScrollEdges();
	        return Math.max(Math.min(edges.right, scrollX), edges.left);
	    };
	    return MDCTabScrollerRTLNegative;
	}(MDCTabScrollerRTL));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabScrollerRTLReverse = /** @class */ (function (_super) {
	    __extends(MDCTabScrollerRTLReverse, _super);
	    function MDCTabScrollerRTLReverse() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTabScrollerRTLReverse.prototype.getScrollPositionRTL = function (translateX) {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        // Scroll values on most browsers are ints instead of floats so we round
	        return Math.round(currentScrollLeft - translateX);
	    };
	    MDCTabScrollerRTLReverse.prototype.scrollToRTL = function (scrollX) {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        var clampedScrollLeft = this.clampScrollValue(scrollX);
	        return {
	            finalScrollPosition: clampedScrollLeft,
	            scrollDelta: currentScrollLeft - clampedScrollLeft,
	        };
	    };
	    MDCTabScrollerRTLReverse.prototype.incrementScrollRTL = function (scrollX) {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        var clampedScrollLeft = this.clampScrollValue(currentScrollLeft + scrollX);
	        return {
	            finalScrollPosition: clampedScrollLeft,
	            scrollDelta: currentScrollLeft - clampedScrollLeft,
	        };
	    };
	    MDCTabScrollerRTLReverse.prototype.getAnimatingScrollPosition = function (scrollX, translateX) {
	        return scrollX + translateX;
	    };
	    MDCTabScrollerRTLReverse.prototype.calculateScrollEdges = function () {
	        var contentWidth = this.adapter.getScrollContentOffsetWidth();
	        var rootWidth = this.adapter.getScrollAreaOffsetWidth();
	        return {
	            left: contentWidth - rootWidth,
	            right: 0,
	        };
	    };
	    MDCTabScrollerRTLReverse.prototype.clampScrollValue = function (scrollX) {
	        var edges = this.calculateScrollEdges();
	        return Math.min(Math.max(edges.right, scrollX), edges.left);
	    };
	    return MDCTabScrollerRTLReverse;
	}(MDCTabScrollerRTL));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabScrollerFoundation = /** @class */ (function (_super) {
	    __extends(MDCTabScrollerFoundation, _super);
	    function MDCTabScrollerFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCTabScrollerFoundation.defaultAdapter), adapter)) || this;
	        /**
	         * Controls whether we should handle the transitionend and interaction events during the animation.
	         */
	        _this.isAnimating = false;
	        return _this;
	    }
	    Object.defineProperty(MDCTabScrollerFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$b;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabScrollerFoundation, "strings", {
	        get: function () {
	            return strings$a;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabScrollerFoundation, "defaultAdapter", {
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                eventTargetMatchesSelector: function () { return false; },
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                addScrollAreaClass: function () { return undefined; },
	                setScrollAreaStyleProperty: function () { return undefined; },
	                setScrollContentStyleProperty: function () { return undefined; },
	                getScrollContentStyleValue: function () { return ''; },
	                setScrollAreaScrollLeft: function () { return undefined; },
	                getScrollAreaScrollLeft: function () { return 0; },
	                getScrollContentOffsetWidth: function () { return 0; },
	                getScrollAreaOffsetWidth: function () { return 0; },
	                computeScrollAreaClientRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                computeScrollContentClientRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                computeHorizontalScrollbarHeight: function () { return 0; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTabScrollerFoundation.prototype.init = function () {
	        // Compute horizontal scrollbar height on scroller with overflow initially hidden, then update overflow to scroll
	        // and immediately adjust bottom margin to avoid the scrollbar initially appearing before JS runs.
	        var horizontalScrollbarHeight = this.adapter.computeHorizontalScrollbarHeight();
	        this.adapter.setScrollAreaStyleProperty('margin-bottom', -horizontalScrollbarHeight + 'px');
	        this.adapter.addScrollAreaClass(MDCTabScrollerFoundation.cssClasses.SCROLL_AREA_SCROLL);
	    };
	    /**
	     * Computes the current visual scroll position
	     */
	    MDCTabScrollerFoundation.prototype.getScrollPosition = function () {
	        if (this.isRTL()) {
	            return this.computeCurrentScrollPositionRTL();
	        }
	        var currentTranslateX = this.calculateCurrentTranslateX();
	        var scrollLeft = this.adapter.getScrollAreaScrollLeft();
	        return scrollLeft - currentTranslateX;
	    };
	    /**
	     * Handles interaction events that occur during transition
	     */
	    MDCTabScrollerFoundation.prototype.handleInteraction = function () {
	        // Early exit if we aren't animating
	        if (!this.isAnimating) {
	            return;
	        }
	        // Prevent other event listeners from handling this event
	        this.stopScrollAnimation();
	    };
	    /**
	     * Handles the transitionend event
	     */
	    MDCTabScrollerFoundation.prototype.handleTransitionEnd = function (evt) {
	        // Early exit if we aren't animating or the event was triggered by a different element.
	        var evtTarget = evt.target;
	        if (!this.isAnimating ||
	            !this.adapter.eventTargetMatchesSelector(evtTarget, MDCTabScrollerFoundation.strings.CONTENT_SELECTOR)) {
	            return;
	        }
	        this.isAnimating = false;
	        this.adapter.removeClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);
	    };
	    /**
	     * Increment the scroll value by the scrollXIncrement using animation.
	     * @param scrollXIncrement The value by which to increment the scroll position
	     */
	    MDCTabScrollerFoundation.prototype.incrementScroll = function (scrollXIncrement) {
	        // Early exit for non-operational increment values
	        if (scrollXIncrement === 0) {
	            return;
	        }
	        this.animate(this.getIncrementScrollOperation(scrollXIncrement));
	    };
	    /**
	     * Increment the scroll value by the scrollXIncrement without animation.
	     * @param scrollXIncrement The value by which to increment the scroll position
	     */
	    MDCTabScrollerFoundation.prototype.incrementScrollImmediate = function (scrollXIncrement) {
	        // Early exit for non-operational increment values
	        if (scrollXIncrement === 0) {
	            return;
	        }
	        var operation = this.getIncrementScrollOperation(scrollXIncrement);
	        if (operation.scrollDelta === 0) {
	            return;
	        }
	        this.stopScrollAnimation();
	        this.adapter.setScrollAreaScrollLeft(operation.finalScrollPosition);
	    };
	    /**
	     * Scrolls to the given scrollX value
	     */
	    MDCTabScrollerFoundation.prototype.scrollTo = function (scrollX) {
	        if (this.isRTL()) {
	            this.scrollToImplRTL(scrollX);
	            return;
	        }
	        this.scrollToImpl(scrollX);
	    };
	    /**
	     * @return Browser-specific {@link MDCTabScrollerRTL} instance.
	     */
	    MDCTabScrollerFoundation.prototype.getRTLScroller = function () {
	        if (!this.rtlScrollerInstance) {
	            this.rtlScrollerInstance = this.rtlScrollerFactory();
	        }
	        return this.rtlScrollerInstance;
	    };
	    /**
	     * @return translateX value from a CSS matrix transform function string.
	     */
	    MDCTabScrollerFoundation.prototype.calculateCurrentTranslateX = function () {
	        var transformValue = this.adapter.getScrollContentStyleValue('transform');
	        // Early exit if no transform is present
	        if (transformValue === 'none') {
	            return 0;
	        }
	        // The transform value comes back as a matrix transformation in the form
	        // of `matrix(a, b, c, d, tx, ty)`. We only care about tx (translateX) so
	        // we're going to grab all the parenthesized values, strip out tx, and
	        // parse it.
	        var match = /\((.+?)\)/.exec(transformValue);
	        if (!match) {
	            return 0;
	        }
	        var matrixParams = match[1];
	        // tslint:disable-next-line:ban-ts-ignore "Unused vars" should be a linter warning, not a compiler error.
	        // @ts-ignore These unused variables should retain their semantic names for clarity.
	        var _a = __read(matrixParams.split(','), 6); _a[0]; _a[1]; _a[2]; _a[3]; var tx = _a[4]; _a[5];
	        return parseFloat(tx); // tslint:disable-line:ban
	    };
	    /**
	     * Calculates a safe scroll value that is > 0 and < the max scroll value
	     * @param scrollX The distance to scroll
	     */
	    MDCTabScrollerFoundation.prototype.clampScrollValue = function (scrollX) {
	        var edges = this.calculateScrollEdges();
	        return Math.min(Math.max(edges.left, scrollX), edges.right);
	    };
	    MDCTabScrollerFoundation.prototype.computeCurrentScrollPositionRTL = function () {
	        var translateX = this.calculateCurrentTranslateX();
	        return this.getRTLScroller().getScrollPositionRTL(translateX);
	    };
	    MDCTabScrollerFoundation.prototype.calculateScrollEdges = function () {
	        var contentWidth = this.adapter.getScrollContentOffsetWidth();
	        var rootWidth = this.adapter.getScrollAreaOffsetWidth();
	        return {
	            left: 0,
	            right: contentWidth - rootWidth,
	        };
	    };
	    /**
	     * Internal scroll method
	     * @param scrollX The new scroll position
	     */
	    MDCTabScrollerFoundation.prototype.scrollToImpl = function (scrollX) {
	        var currentScrollX = this.getScrollPosition();
	        var safeScrollX = this.clampScrollValue(scrollX);
	        var scrollDelta = safeScrollX - currentScrollX;
	        this.animate({
	            finalScrollPosition: safeScrollX,
	            scrollDelta: scrollDelta,
	        });
	    };
	    /**
	     * Internal RTL scroll method
	     * @param scrollX The new scroll position
	     */
	    MDCTabScrollerFoundation.prototype.scrollToImplRTL = function (scrollX) {
	        var animation = this.getRTLScroller().scrollToRTL(scrollX);
	        this.animate(animation);
	    };
	    /**
	     * Internal method to compute the increment scroll operation values.
	     * @param scrollX The desired scroll position increment
	     * @return MDCTabScrollerAnimation with the sanitized values for performing the scroll operation.
	     */
	    MDCTabScrollerFoundation.prototype.getIncrementScrollOperation = function (scrollX) {
	        if (this.isRTL()) {
	            return this.getRTLScroller().incrementScrollRTL(scrollX);
	        }
	        var currentScrollX = this.getScrollPosition();
	        var targetScrollX = scrollX + currentScrollX;
	        var safeScrollX = this.clampScrollValue(targetScrollX);
	        var scrollDelta = safeScrollX - currentScrollX;
	        return {
	            finalScrollPosition: safeScrollX,
	            scrollDelta: scrollDelta,
	        };
	    };
	    /**
	     * Animates the tab scrolling
	     * @param animation The animation to apply
	     */
	    MDCTabScrollerFoundation.prototype.animate = function (animation) {
	        var _this = this;
	        // Early exit if translateX is 0, which means there's no animation to perform
	        if (animation.scrollDelta === 0) {
	            return;
	        }
	        this.stopScrollAnimation();
	        // This animation uses the FLIP approach.
	        // Read more here: https://aerotwist.com/blog/flip-your-animations/
	        this.adapter.setScrollAreaScrollLeft(animation.finalScrollPosition);
	        this.adapter.setScrollContentStyleProperty('transform', "translateX(" + animation.scrollDelta + "px)");
	        // Force repaint
	        this.adapter.computeScrollAreaClientRect();
	        requestAnimationFrame(function () {
	            _this.adapter.addClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);
	            _this.adapter.setScrollContentStyleProperty('transform', 'none');
	        });
	        this.isAnimating = true;
	    };
	    /**
	     * Stops scroll animation
	     */
	    MDCTabScrollerFoundation.prototype.stopScrollAnimation = function () {
	        this.isAnimating = false;
	        var currentScrollPosition = this.getAnimatingScrollPosition();
	        this.adapter.removeClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);
	        this.adapter.setScrollContentStyleProperty('transform', 'translateX(0px)');
	        this.adapter.setScrollAreaScrollLeft(currentScrollPosition);
	    };
	    /**
	     * Gets the current scroll position during animation
	     */
	    MDCTabScrollerFoundation.prototype.getAnimatingScrollPosition = function () {
	        var currentTranslateX = this.calculateCurrentTranslateX();
	        var scrollLeft = this.adapter.getScrollAreaScrollLeft();
	        if (this.isRTL()) {
	            return this.getRTLScroller().getAnimatingScrollPosition(scrollLeft, currentTranslateX);
	        }
	        return scrollLeft - currentTranslateX;
	    };
	    /**
	     * Determines the RTL Scroller to use
	     */
	    MDCTabScrollerFoundation.prototype.rtlScrollerFactory = function () {
	        // Browsers have three different implementations of scrollLeft in RTL mode,
	        // dependent on the browser. The behavior is based off the max LTR
	        // scrollLeft value and 0.
	        //
	        // * Default scrolling in RTL *
	        //    - Left-most value: 0
	        //    - Right-most value: Max LTR scrollLeft value
	        //
	        // * Negative scrolling in RTL *
	        //    - Left-most value: Negated max LTR scrollLeft value
	        //    - Right-most value: 0
	        //
	        // * Reverse scrolling in RTL *
	        //    - Left-most value: Max LTR scrollLeft value
	        //    - Right-most value: 0
	        //
	        // We use those principles below to determine which RTL scrollLeft
	        // behavior is implemented in the current browser.
	        var initialScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        this.adapter.setScrollAreaScrollLeft(initialScrollLeft - 1);
	        var newScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        // If the newScrollLeft value is negative,then we know that the browser has
	        // implemented negative RTL scrolling, since all other implementations have
	        // only positive values.
	        if (newScrollLeft < 0) {
	            // Undo the scrollLeft test check
	            this.adapter.setScrollAreaScrollLeft(initialScrollLeft);
	            return new MDCTabScrollerRTLNegative(this.adapter);
	        }
	        var rootClientRect = this.adapter.computeScrollAreaClientRect();
	        var contentClientRect = this.adapter.computeScrollContentClientRect();
	        var rightEdgeDelta = Math.round(contentClientRect.right - rootClientRect.right);
	        // Undo the scrollLeft test check
	        this.adapter.setScrollAreaScrollLeft(initialScrollLeft);
	        // By calculating the clientRect of the root element and the clientRect of
	        // the content element, we can determine how much the scroll value changed
	        // when we performed the scrollLeft subtraction above.
	        if (rightEdgeDelta === newScrollLeft) {
	            return new MDCTabScrollerRTLReverse(this.adapter);
	        }
	        return new MDCTabScrollerRTLDefault(this.adapter);
	    };
	    MDCTabScrollerFoundation.prototype.isRTL = function () {
	        return this.adapter.getScrollContentStyleValue('direction') === 'rtl';
	    };
	    return MDCTabScrollerFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * Stores result from computeHorizontalScrollbarHeight to avoid redundant processing.
	 */
	var horizontalScrollbarHeight_;
	/**
	 * Computes the height of browser-rendered horizontal scrollbars using a self-created test element.
	 * May return 0 (e.g. on OS X browsers under default configuration).
	 */
	function computeHorizontalScrollbarHeight(documentObj, shouldCacheResult) {
	    if (shouldCacheResult === void 0) { shouldCacheResult = true; }
	    if (shouldCacheResult && typeof horizontalScrollbarHeight_ !== 'undefined') {
	        return horizontalScrollbarHeight_;
	    }
	    var el = documentObj.createElement('div');
	    el.classList.add(cssClasses$b.SCROLL_TEST);
	    documentObj.body.appendChild(el);
	    var horizontalScrollbarHeight = el.offsetHeight - el.clientHeight;
	    documentObj.body.removeChild(el);
	    if (shouldCacheResult) {
	        horizontalScrollbarHeight_ = horizontalScrollbarHeight;
	    }
	    return horizontalScrollbarHeight;
	}

	var util = /*#__PURE__*/Object.freeze({
		__proto__: null,
		computeHorizontalScrollbarHeight: computeHorizontalScrollbarHeight
	});

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$9 = {
	    ARROW_LEFT_KEY: 'ArrowLeft',
	    ARROW_RIGHT_KEY: 'ArrowRight',
	    END_KEY: 'End',
	    ENTER_KEY: 'Enter',
	    HOME_KEY: 'Home',
	    SPACE_KEY: 'Space',
	    TAB_ACTIVATED_EVENT: 'MDCTabBar:activated',
	    TAB_SCROLLER_SELECTOR: '.mdc-tab-scroller',
	    TAB_SELECTOR: '.mdc-tab',
	};
	var numbers$6 = {
	    ARROW_LEFT_KEYCODE: 37,
	    ARROW_RIGHT_KEYCODE: 39,
	    END_KEYCODE: 35,
	    ENTER_KEYCODE: 13,
	    EXTRA_SCROLL_AMOUNT: 20,
	    HOME_KEYCODE: 36,
	    SPACE_KEYCODE: 32,
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var ACCEPTABLE_KEYS = new Set();
	// IE11 has no support for new Set with iterable so we need to initialize this by hand
	ACCEPTABLE_KEYS.add(strings$9.ARROW_LEFT_KEY);
	ACCEPTABLE_KEYS.add(strings$9.ARROW_RIGHT_KEY);
	ACCEPTABLE_KEYS.add(strings$9.END_KEY);
	ACCEPTABLE_KEYS.add(strings$9.HOME_KEY);
	ACCEPTABLE_KEYS.add(strings$9.ENTER_KEY);
	ACCEPTABLE_KEYS.add(strings$9.SPACE_KEY);
	var KEYCODE_MAP = new Map();
	// IE11 has no support for new Map with iterable so we need to initialize this by hand
	KEYCODE_MAP.set(numbers$6.ARROW_LEFT_KEYCODE, strings$9.ARROW_LEFT_KEY);
	KEYCODE_MAP.set(numbers$6.ARROW_RIGHT_KEYCODE, strings$9.ARROW_RIGHT_KEY);
	KEYCODE_MAP.set(numbers$6.END_KEYCODE, strings$9.END_KEY);
	KEYCODE_MAP.set(numbers$6.HOME_KEYCODE, strings$9.HOME_KEY);
	KEYCODE_MAP.set(numbers$6.ENTER_KEYCODE, strings$9.ENTER_KEY);
	KEYCODE_MAP.set(numbers$6.SPACE_KEYCODE, strings$9.SPACE_KEY);
	var MDCTabBarFoundation = /** @class */ (function (_super) {
	    __extends(MDCTabBarFoundation, _super);
	    function MDCTabBarFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCTabBarFoundation.defaultAdapter), adapter)) || this;
	        _this.useAutomaticActivation = false;
	        return _this;
	    }
	    Object.defineProperty(MDCTabBarFoundation, "strings", {
	        get: function () {
	            return strings$9;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabBarFoundation, "numbers", {
	        get: function () {
	            return numbers$6;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabBarFoundation, "defaultAdapter", {
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                scrollTo: function () { return undefined; },
	                incrementScroll: function () { return undefined; },
	                getScrollPosition: function () { return 0; },
	                getScrollContentWidth: function () { return 0; },
	                getOffsetWidth: function () { return 0; },
	                isRTL: function () { return false; },
	                setActiveTab: function () { return undefined; },
	                activateTabAtIndex: function () { return undefined; },
	                deactivateTabAtIndex: function () { return undefined; },
	                focusTabAtIndex: function () { return undefined; },
	                getTabIndicatorClientRectAtIndex: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                getTabDimensionsAtIndex: function () {
	                    return ({ rootLeft: 0, rootRight: 0, contentLeft: 0, contentRight: 0 });
	                },
	                getPreviousActiveTabIndex: function () { return -1; },
	                getFocusedTabIndex: function () { return -1; },
	                getIndexOfTabById: function () { return -1; },
	                getTabListLength: function () { return 0; },
	                notifyTabActivated: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Switches between automatic and manual activation modes.
	     * See https://www.w3.org/TR/wai-aria-practices/#tabpanel for examples.
	     */
	    MDCTabBarFoundation.prototype.setUseAutomaticActivation = function (useAutomaticActivation) {
	        this.useAutomaticActivation = useAutomaticActivation;
	    };
	    MDCTabBarFoundation.prototype.activateTab = function (index) {
	        var previousActiveIndex = this.adapter.getPreviousActiveTabIndex();
	        if (!this.indexIsInRange(index) || index === previousActiveIndex) {
	            return;
	        }
	        var previousClientRect;
	        if (previousActiveIndex !== -1) {
	            this.adapter.deactivateTabAtIndex(previousActiveIndex);
	            previousClientRect =
	                this.adapter.getTabIndicatorClientRectAtIndex(previousActiveIndex);
	        }
	        this.adapter.activateTabAtIndex(index, previousClientRect);
	        this.scrollIntoView(index);
	        this.adapter.notifyTabActivated(index);
	    };
	    MDCTabBarFoundation.prototype.handleKeyDown = function (evt) {
	        // Get the key from the event
	        var key = this.getKeyFromEvent(evt);
	        // Early exit if the event key isn't one of the keyboard navigation keys
	        if (key === undefined) {
	            return;
	        }
	        // Prevent default behavior for movement keys, but not for activation keys, since :active is used to apply ripple
	        if (!this.isActivationKey(key)) {
	            evt.preventDefault();
	        }
	        if (this.useAutomaticActivation) {
	            if (this.isActivationKey(key)) {
	                return;
	            }
	            var index = this.determineTargetFromKey(this.adapter.getPreviousActiveTabIndex(), key);
	            this.adapter.setActiveTab(index);
	            this.scrollIntoView(index);
	        }
	        else {
	            var focusedTabIndex = this.adapter.getFocusedTabIndex();
	            if (this.isActivationKey(key)) {
	                this.adapter.setActiveTab(focusedTabIndex);
	            }
	            else {
	                var index = this.determineTargetFromKey(focusedTabIndex, key);
	                this.adapter.focusTabAtIndex(index);
	                this.scrollIntoView(index);
	            }
	        }
	    };
	    /**
	     * Handles the MDCTab:interacted event
	     */
	    MDCTabBarFoundation.prototype.handleTabInteraction = function (evt) {
	        this.adapter.setActiveTab(this.adapter.getIndexOfTabById(evt.detail.tabId));
	    };
	    /**
	     * Scrolls the tab at the given index into view
	     * @param index The tab index to make visible
	     */
	    MDCTabBarFoundation.prototype.scrollIntoView = function (index) {
	        // Early exit if the index is out of range
	        if (!this.indexIsInRange(index)) {
	            return;
	        }
	        // Always scroll to 0 if scrolling to the 0th index
	        if (index === 0) {
	            this.adapter.scrollTo(0);
	            return;
	        }
	        // Always scroll to the max value if scrolling to the Nth index
	        // MDCTabScroller.scrollTo() will never scroll past the max possible value
	        if (index === this.adapter.getTabListLength() - 1) {
	            this.adapter.scrollTo(this.adapter.getScrollContentWidth());
	            return;
	        }
	        if (this.isRTL()) {
	            this.scrollIntoViewImplRTL(index);
	            return;
	        }
	        this.scrollIntoViewImpl(index);
	    };
	    /**
	     * Private method for determining the index of the destination tab based on what key was pressed
	     * @param origin The original index from which to determine the destination
	     * @param key The name of the key
	     */
	    MDCTabBarFoundation.prototype.determineTargetFromKey = function (origin, key) {
	        var isRTL = this.isRTL();
	        var maxIndex = this.adapter.getTabListLength() - 1;
	        var shouldGoToEnd = key === strings$9.END_KEY;
	        var shouldDecrement = key === strings$9.ARROW_LEFT_KEY && !isRTL || key === strings$9.ARROW_RIGHT_KEY && isRTL;
	        var shouldIncrement = key === strings$9.ARROW_RIGHT_KEY && !isRTL || key === strings$9.ARROW_LEFT_KEY && isRTL;
	        var index = origin;
	        if (shouldGoToEnd) {
	            index = maxIndex;
	        }
	        else if (shouldDecrement) {
	            index -= 1;
	        }
	        else if (shouldIncrement) {
	            index += 1;
	        }
	        else {
	            index = 0;
	        }
	        if (index < 0) {
	            index = maxIndex;
	        }
	        else if (index > maxIndex) {
	            index = 0;
	        }
	        return index;
	    };
	    /**
	     * Calculates the scroll increment that will make the tab at the given index visible
	     * @param index The index of the tab
	     * @param nextIndex The index of the next tab
	     * @param scrollPosition The current scroll position
	     * @param barWidth The width of the Tab Bar
	     */
	    MDCTabBarFoundation.prototype.calculateScrollIncrement = function (index, nextIndex, scrollPosition, barWidth) {
	        var nextTabDimensions = this.adapter.getTabDimensionsAtIndex(nextIndex);
	        var relativeContentLeft = nextTabDimensions.contentLeft - scrollPosition - barWidth;
	        var relativeContentRight = nextTabDimensions.contentRight - scrollPosition;
	        var leftIncrement = relativeContentRight - numbers$6.EXTRA_SCROLL_AMOUNT;
	        var rightIncrement = relativeContentLeft + numbers$6.EXTRA_SCROLL_AMOUNT;
	        if (nextIndex < index) {
	            return Math.min(leftIncrement, 0);
	        }
	        return Math.max(rightIncrement, 0);
	    };
	    /**
	     * Calculates the scroll increment that will make the tab at the given index visible in RTL
	     * @param index The index of the tab
	     * @param nextIndex The index of the next tab
	     * @param scrollPosition The current scroll position
	     * @param barWidth The width of the Tab Bar
	     * @param scrollContentWidth The width of the scroll content
	     */
	    MDCTabBarFoundation.prototype.calculateScrollIncrementRTL = function (index, nextIndex, scrollPosition, barWidth, scrollContentWidth) {
	        var nextTabDimensions = this.adapter.getTabDimensionsAtIndex(nextIndex);
	        var relativeContentLeft = scrollContentWidth - nextTabDimensions.contentLeft - scrollPosition;
	        var relativeContentRight = scrollContentWidth - nextTabDimensions.contentRight - scrollPosition - barWidth;
	        var leftIncrement = relativeContentRight + numbers$6.EXTRA_SCROLL_AMOUNT;
	        var rightIncrement = relativeContentLeft - numbers$6.EXTRA_SCROLL_AMOUNT;
	        if (nextIndex > index) {
	            return Math.max(leftIncrement, 0);
	        }
	        return Math.min(rightIncrement, 0);
	    };
	    /**
	     * Determines the index of the adjacent tab closest to either edge of the Tab Bar
	     * @param index The index of the tab
	     * @param tabDimensions The dimensions of the tab
	     * @param scrollPosition The current scroll position
	     * @param barWidth The width of the tab bar
	     */
	    MDCTabBarFoundation.prototype.findAdjacentTabIndexClosestToEdge = function (index, tabDimensions, scrollPosition, barWidth) {
	        /**
	         * Tabs are laid out in the Tab Scroller like this:
	         *
	         *    Scroll Position
	         *    +---+
	         *    |   |   Bar Width
	         *    |   +-----------------------------------+
	         *    |   |                                   |
	         *    |   V                                   V
	         *    |   +-----------------------------------+
	         *    V   |             Tab Scroller          |
	         *    +------------+--------------+-------------------+
	         *    |    Tab     |      Tab     |        Tab        |
	         *    +------------+--------------+-------------------+
	         *        |                                   |
	         *        +-----------------------------------+
	         *
	         * To determine the next adjacent index, we look at the Tab root left and
	         * Tab root right, both relative to the scroll position. If the Tab root
	         * left is less than 0, then we know it's out of view to the left. If the
	         * Tab root right minus the bar width is greater than 0, we know the Tab is
	         * out of view to the right. From there, we either increment or decrement
	         * the index.
	         */
	        var relativeRootLeft = tabDimensions.rootLeft - scrollPosition;
	        var relativeRootRight = tabDimensions.rootRight - scrollPosition - barWidth;
	        var relativeRootDelta = relativeRootLeft + relativeRootRight;
	        var leftEdgeIsCloser = relativeRootLeft < 0 || relativeRootDelta < 0;
	        var rightEdgeIsCloser = relativeRootRight > 0 || relativeRootDelta > 0;
	        if (leftEdgeIsCloser) {
	            return index - 1;
	        }
	        if (rightEdgeIsCloser) {
	            return index + 1;
	        }
	        return -1;
	    };
	    /**
	     * Determines the index of the adjacent tab closest to either edge of the Tab Bar in RTL
	     * @param index The index of the tab
	     * @param tabDimensions The dimensions of the tab
	     * @param scrollPosition The current scroll position
	     * @param barWidth The width of the tab bar
	     * @param scrollContentWidth The width of the scroller content
	     */
	    MDCTabBarFoundation.prototype.findAdjacentTabIndexClosestToEdgeRTL = function (index, tabDimensions, scrollPosition, barWidth, scrollContentWidth) {
	        var rootLeft = scrollContentWidth - tabDimensions.rootLeft - barWidth - scrollPosition;
	        var rootRight = scrollContentWidth - tabDimensions.rootRight - scrollPosition;
	        var rootDelta = rootLeft + rootRight;
	        var leftEdgeIsCloser = rootLeft > 0 || rootDelta > 0;
	        var rightEdgeIsCloser = rootRight < 0 || rootDelta < 0;
	        if (leftEdgeIsCloser) {
	            return index + 1;
	        }
	        if (rightEdgeIsCloser) {
	            return index - 1;
	        }
	        return -1;
	    };
	    /**
	     * Returns the key associated with a keydown event
	     * @param evt The keydown event
	     */
	    MDCTabBarFoundation.prototype.getKeyFromEvent = function (evt) {
	        if (ACCEPTABLE_KEYS.has(evt.key)) {
	            return evt.key;
	        }
	        return KEYCODE_MAP.get(evt.keyCode);
	    };
	    MDCTabBarFoundation.prototype.isActivationKey = function (key) {
	        return key === strings$9.SPACE_KEY || key === strings$9.ENTER_KEY;
	    };
	    /**
	     * Returns whether a given index is inclusively between the ends
	     * @param index The index to test
	     */
	    MDCTabBarFoundation.prototype.indexIsInRange = function (index) {
	        return index >= 0 && index < this.adapter.getTabListLength();
	    };
	    /**
	     * Returns the view's RTL property
	     */
	    MDCTabBarFoundation.prototype.isRTL = function () {
	        return this.adapter.isRTL();
	    };
	    /**
	     * Scrolls the tab at the given index into view for left-to-right user agents.
	     * @param index The index of the tab to scroll into view
	     */
	    MDCTabBarFoundation.prototype.scrollIntoViewImpl = function (index) {
	        var scrollPosition = this.adapter.getScrollPosition();
	        var barWidth = this.adapter.getOffsetWidth();
	        var tabDimensions = this.adapter.getTabDimensionsAtIndex(index);
	        var nextIndex = this.findAdjacentTabIndexClosestToEdge(index, tabDimensions, scrollPosition, barWidth);
	        if (!this.indexIsInRange(nextIndex)) {
	            return;
	        }
	        var scrollIncrement = this.calculateScrollIncrement(index, nextIndex, scrollPosition, barWidth);
	        this.adapter.incrementScroll(scrollIncrement);
	    };
	    /**
	     * Scrolls the tab at the given index into view in RTL
	     * @param index The tab index to make visible
	     */
	    MDCTabBarFoundation.prototype.scrollIntoViewImplRTL = function (index) {
	        var scrollPosition = this.adapter.getScrollPosition();
	        var barWidth = this.adapter.getOffsetWidth();
	        var tabDimensions = this.adapter.getTabDimensionsAtIndex(index);
	        var scrollWidth = this.adapter.getScrollContentWidth();
	        var nextIndex = this.findAdjacentTabIndexClosestToEdgeRTL(index, tabDimensions, scrollPosition, barWidth, scrollWidth);
	        if (!this.indexIsInRange(nextIndex)) {
	            return;
	        }
	        var scrollIncrement = this.calculateScrollIncrementRTL(index, nextIndex, scrollPosition, barWidth, scrollWidth);
	        this.adapter.incrementScroll(scrollIncrement);
	    };
	    return MDCTabBarFoundation;
	}(MDCFoundation));

	/* node_modules/@smui/tab-bar/node_modules/@smui/tab-scroller/dist/TabScroller.svelte generated by Svelte v4.2.19 */

	const file$n = "node_modules/@smui/tab-bar/node_modules/@smui/tab-scroller/dist/TabScroller.svelte";

	function create_fragment$q(ctx) {
		let div2;
		let div1;
		let div0;
		let div0_class_value;
		let div0_style_value;
		let useActions_action;
		let div1_class_value;
		let div1_style_value;
		let useActions_action_1;
		let div2_class_value;
		let useActions_action_2;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[23].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);

		let div0_levels = [
			{
				class: div0_class_value = classMap({
					[/*scrollContent$class*/ ctx[6]]: true,
					'mdc-tab-scroller__scroll-content': true
				})
			},
			{
				style: div0_style_value = Object.entries(/*scrollContentStyles*/ ctx[14]).map(func$d).join(' ')
			},
			prefixFilter(/*$$restProps*/ ctx[16], 'scrollContent$')
		];

		let div_data = {};

		for (let i = 0; i < div0_levels.length; i += 1) {
			div_data = assign(div_data, div0_levels[i]);
		}

		let div1_levels = [
			{
				class: div1_class_value = classMap({
					[/*scrollArea$class*/ ctx[4]]: true,
					'mdc-tab-scroller__scroll-area': true,
					.../*scrollAreaClasses*/ ctx[12]
				})
			},
			{
				style: div1_style_value = Object.entries(/*scrollAreaStyles*/ ctx[13]).map(func_1$4).join(' ')
			},
			prefixFilter(/*$$restProps*/ ctx[16], 'scrollArea$')
		];

		let div_data_1 = {};

		for (let i = 0; i < div1_levels.length; i += 1) {
			div_data_1 = assign(div_data_1, div1_levels[i]);
		}

		let div2_levels = [
			{
				class: div2_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-tab-scroller': true,
					'mdc-tab-scroller--align-start': /*align*/ ctx[2] === 'start',
					'mdc-tab-scroller--align-end': /*align*/ ctx[2] === 'end',
					'mdc-tab-scroller--align-center': /*align*/ ctx[2] === 'center',
					.../*internalClasses*/ ctx[11]
				})
			},
			exclude(/*$$restProps*/ ctx[16], ['scrollArea$', 'scrollContent$'])
		];

		let div_data_2 = {};

		for (let i = 0; i < div2_levels.length; i += 1) {
			div_data_2 = assign(div_data_2, div2_levels[i]);
		}

		const block = {
			c: function create() {
				div2 = element("div");
				div1 = element("div");
				div0 = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div0, div_data);
				add_location(div0, file$n, 32, 4, 1108);
				set_attributes(div1, div_data_1);
				add_location(div1, file$n, 14, 2, 406);
				set_attributes(div2, div_data_2);
				add_location(div2, file$n, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div2, anchor);
				append_dev(div2, div1);
				append_dev(div1, div0);

				if (default_slot) {
					default_slot.m(div0, null);
				}

				/*div0_binding*/ ctx[24](div0);
				/*div1_binding*/ ctx[26](div1);
				/*div2_binding*/ ctx[32](div2);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, div0, /*scrollContent$use*/ ctx[5])),
						listen_dev(div0, "transitionend", /*transitionend_handler*/ ctx[25], false, false, false, false),
						action_destroyer(useActions_action_1 = useActions.call(null, div1, /*scrollArea$use*/ ctx[3])),
						listen_dev(div1, "wheel", /*wheel_handler*/ ctx[27], { passive: true }, false, false, false),
						listen_dev(div1, "touchstart", /*touchstart_handler*/ ctx[28], { passive: true }, false, false, false),
						listen_dev(div1, "pointerdown", /*pointerdown_handler*/ ctx[29], false, false, false, false),
						listen_dev(div1, "mousedown", /*mousedown_handler*/ ctx[30], false, false, false, false),
						listen_dev(div1, "keydown", /*keydown_handler*/ ctx[31], false, false, false, false),
						action_destroyer(useActions_action_2 = useActions.call(null, div2, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[15].call(null, div2))
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 4194304)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[22],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[22], dirty, null),
							null
						);
					}
				}

				set_attributes(div0, div_data = get_spread_update(div0_levels, [
					(!current || dirty[0] & /*scrollContent$class*/ 64 && div0_class_value !== (div0_class_value = classMap({
						[/*scrollContent$class*/ ctx[6]]: true,
						'mdc-tab-scroller__scroll-content': true
					}))) && { class: div0_class_value },
					(!current || dirty[0] & /*scrollContentStyles*/ 16384 && div0_style_value !== (div0_style_value = Object.entries(/*scrollContentStyles*/ ctx[14]).map(func$d).join(' '))) && { style: div0_style_value },
					dirty[0] & /*$$restProps*/ 65536 && prefixFilter(/*$$restProps*/ ctx[16], 'scrollContent$')
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*scrollContent$use*/ 32) useActions_action.update.call(null, /*scrollContent$use*/ ctx[5]);

				set_attributes(div1, div_data_1 = get_spread_update(div1_levels, [
					(!current || dirty[0] & /*scrollArea$class, scrollAreaClasses*/ 4112 && div1_class_value !== (div1_class_value = classMap({
						[/*scrollArea$class*/ ctx[4]]: true,
						'mdc-tab-scroller__scroll-area': true,
						.../*scrollAreaClasses*/ ctx[12]
					}))) && { class: div1_class_value },
					(!current || dirty[0] & /*scrollAreaStyles*/ 8192 && div1_style_value !== (div1_style_value = Object.entries(/*scrollAreaStyles*/ ctx[13]).map(func_1$4).join(' '))) && { style: div1_style_value },
					dirty[0] & /*$$restProps*/ 65536 && prefixFilter(/*$$restProps*/ ctx[16], 'scrollArea$')
				]));

				if (useActions_action_1 && is_function(useActions_action_1.update) && dirty[0] & /*scrollArea$use*/ 8) useActions_action_1.update.call(null, /*scrollArea$use*/ ctx[3]);

				set_attributes(div2, div_data_2 = get_spread_update(div2_levels, [
					(!current || dirty[0] & /*className, align, internalClasses*/ 2054 && div2_class_value !== (div2_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-tab-scroller': true,
						'mdc-tab-scroller--align-start': /*align*/ ctx[2] === 'start',
						'mdc-tab-scroller--align-end': /*align*/ ctx[2] === 'end',
						'mdc-tab-scroller--align-center': /*align*/ ctx[2] === 'center',
						.../*internalClasses*/ ctx[11]
					}))) && { class: div2_class_value },
					dirty[0] & /*$$restProps*/ 65536 && exclude(/*$$restProps*/ ctx[16], ['scrollArea$', 'scrollContent$'])
				]));

				if (useActions_action_2 && is_function(useActions_action_2.update) && dirty[0] & /*use*/ 1) useActions_action_2.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div2);
				}

				if (default_slot) default_slot.d(detaching);
				/*div0_binding*/ ctx[24](null);
				/*div1_binding*/ ctx[26](null);
				/*div2_binding*/ ctx[32](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$q.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$d = ([name, value]) => `${name}: ${value};`;
	const func_1$4 = ([name, value]) => `${name}: ${value};`;

	function instance_1$f($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","align","scrollArea$use","scrollArea$class","scrollContent$use","scrollContent$class","getScrollPosition","getScrollContentWidth","incrementScroll","scrollTo","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('TabScroller', slots, ['default']);
		const { matches } = ponyfill;
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { align = undefined } = $$props;
		let { scrollArea$use = [] } = $$props;
		let { scrollArea$class = '' } = $$props;
		let { scrollContent$use = [] } = $$props;
		let { scrollContent$class = '' } = $$props;
		let element;
		let instance;
		let scrollArea;
		let scrollContent;
		let internalClasses = {};
		let scrollAreaClasses = {};
		let scrollAreaStyles = {};
		let scrollContentStyles = {};

		onMount(() => {
			$$invalidate(8, instance = new MDCTabScrollerFoundation({
					eventTargetMatchesSelector: (evtTarget, selector) => matches(evtTarget, selector),
					addClass,
					removeClass,
					addScrollAreaClass,
					setScrollAreaStyleProperty: addScrollAreaStyle,
					setScrollContentStyleProperty: addScrollContentStyle,
					getScrollContentStyleValue: getScrollContentStyle,
					setScrollAreaScrollLeft: scrollX => $$invalidate(9, scrollArea.scrollLeft = scrollX, scrollArea),
					getScrollAreaScrollLeft: () => scrollArea.scrollLeft,
					getScrollContentOffsetWidth: () => scrollContent.offsetWidth,
					getScrollAreaOffsetWidth: () => scrollArea.offsetWidth,
					computeScrollAreaClientRect: () => scrollArea.getBoundingClientRect(),
					computeScrollContentClientRect: () => scrollContent.getBoundingClientRect(),
					computeHorizontalScrollbarHeight: () => computeHorizontalScrollbarHeight(document)
				}));

			instance.init();

			return () => {
				instance.destroy();
			};
		});

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(11, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(11, internalClasses[className] = false, internalClasses);
			}
		}

		function addScrollAreaClass(className) {
			if (!scrollAreaClasses[className]) {
				$$invalidate(12, scrollAreaClasses[className] = true, scrollAreaClasses);
			}
		}

		function addScrollAreaStyle(name, value) {
			if (scrollAreaStyles[name] != value) {
				if (value === '' || value == null) {
					delete scrollAreaStyles[name];
					$$invalidate(13, scrollAreaStyles);
				} else {
					$$invalidate(13, scrollAreaStyles[name] = value, scrollAreaStyles);
				}
			}
		}

		function addScrollContentStyle(name, value) {
			if (scrollContentStyles[name] != value) {
				if (value === '' || value == null) {
					delete scrollContentStyles[name];
					$$invalidate(14, scrollContentStyles);
				} else {
					$$invalidate(14, scrollContentStyles[name] = value, scrollContentStyles);
				}
			}
		}

		function getScrollContentStyle(name) {
			return name in scrollContentStyles
			? scrollContentStyles[name]
			: getComputedStyle(scrollContent).getPropertyValue(name);
		}

		function getScrollPosition() {
			return instance.getScrollPosition();
		}

		function getScrollContentWidth() {
			return scrollContent.offsetWidth;
		}

		function incrementScroll(scrollXIncrement) {
			instance.incrementScroll(scrollXIncrement);
		}

		function scrollTo(scrollX) {
			instance.scrollTo(scrollX);
		}

		function getElement() {
			return element;
		}

		function div0_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				scrollContent = $$value;
				$$invalidate(10, scrollContent);
			});
		}

		const transitionend_handler = event => instance && instance.handleTransitionEnd(event);

		function div1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				scrollArea = $$value;
				$$invalidate(9, scrollArea);
			});
		}

		const wheel_handler = () => instance && instance.handleInteraction();
		const touchstart_handler = () => instance && instance.handleInteraction();
		const pointerdown_handler = () => instance && instance.handleInteraction();
		const mousedown_handler = () => instance && instance.handleInteraction();
		const keydown_handler = () => instance && instance.handleInteraction();

		function div2_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(7, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('align' in $$new_props) $$invalidate(2, align = $$new_props.align);
			if ('scrollArea$use' in $$new_props) $$invalidate(3, scrollArea$use = $$new_props.scrollArea$use);
			if ('scrollArea$class' in $$new_props) $$invalidate(4, scrollArea$class = $$new_props.scrollArea$class);
			if ('scrollContent$use' in $$new_props) $$invalidate(5, scrollContent$use = $$new_props.scrollContent$use);
			if ('scrollContent$class' in $$new_props) $$invalidate(6, scrollContent$class = $$new_props.scrollContent$class);
			if ('$$scope' in $$new_props) $$invalidate(22, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			MDCTabScrollerFoundation,
			util,
			ponyfill,
			onMount,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			exclude,
			prefixFilter,
			useActions,
			matches,
			forwardEvents,
			use,
			className,
			align,
			scrollArea$use,
			scrollArea$class,
			scrollContent$use,
			scrollContent$class,
			element,
			instance,
			scrollArea,
			scrollContent,
			internalClasses,
			scrollAreaClasses,
			scrollAreaStyles,
			scrollContentStyles,
			addClass,
			removeClass,
			addScrollAreaClass,
			addScrollAreaStyle,
			addScrollContentStyle,
			getScrollContentStyle,
			getScrollPosition,
			getScrollContentWidth,
			incrementScroll,
			scrollTo,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('align' in $$props) $$invalidate(2, align = $$new_props.align);
			if ('scrollArea$use' in $$props) $$invalidate(3, scrollArea$use = $$new_props.scrollArea$use);
			if ('scrollArea$class' in $$props) $$invalidate(4, scrollArea$class = $$new_props.scrollArea$class);
			if ('scrollContent$use' in $$props) $$invalidate(5, scrollContent$use = $$new_props.scrollContent$use);
			if ('scrollContent$class' in $$props) $$invalidate(6, scrollContent$class = $$new_props.scrollContent$class);
			if ('element' in $$props) $$invalidate(7, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(8, instance = $$new_props.instance);
			if ('scrollArea' in $$props) $$invalidate(9, scrollArea = $$new_props.scrollArea);
			if ('scrollContent' in $$props) $$invalidate(10, scrollContent = $$new_props.scrollContent);
			if ('internalClasses' in $$props) $$invalidate(11, internalClasses = $$new_props.internalClasses);
			if ('scrollAreaClasses' in $$props) $$invalidate(12, scrollAreaClasses = $$new_props.scrollAreaClasses);
			if ('scrollAreaStyles' in $$props) $$invalidate(13, scrollAreaStyles = $$new_props.scrollAreaStyles);
			if ('scrollContentStyles' in $$props) $$invalidate(14, scrollContentStyles = $$new_props.scrollContentStyles);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			align,
			scrollArea$use,
			scrollArea$class,
			scrollContent$use,
			scrollContent$class,
			element,
			instance,
			scrollArea,
			scrollContent,
			internalClasses,
			scrollAreaClasses,
			scrollAreaStyles,
			scrollContentStyles,
			forwardEvents,
			$$restProps,
			getScrollPosition,
			getScrollContentWidth,
			incrementScroll,
			scrollTo,
			getElement,
			$$scope,
			slots,
			div0_binding,
			transitionend_handler,
			div1_binding,
			wheel_handler,
			touchstart_handler,
			pointerdown_handler,
			mousedown_handler,
			keydown_handler,
			div2_binding
		];
	}

	class TabScroller extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(
				this,
				options,
				instance_1$f,
				create_fragment$q,
				safe_not_equal,
				{
					use: 0,
					class: 1,
					align: 2,
					scrollArea$use: 3,
					scrollArea$class: 4,
					scrollContent$use: 5,
					scrollContent$class: 6,
					getScrollPosition: 17,
					getScrollContentWidth: 18,
					incrementScroll: 19,
					scrollTo: 20,
					getElement: 21
				},
				null,
				[-1, -1]
			);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "TabScroller",
				options,
				id: create_fragment$q.name
			});
		}

		get use() {
			throw new Error("<TabScroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<TabScroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get align() {
			throw new Error("<TabScroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set align(value) {
			throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get scrollArea$use() {
			throw new Error("<TabScroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set scrollArea$use(value) {
			throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get scrollArea$class() {
			throw new Error("<TabScroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set scrollArea$class(value) {
			throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get scrollContent$use() {
			throw new Error("<TabScroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set scrollContent$use(value) {
			throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get scrollContent$class() {
			throw new Error("<TabScroller>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set scrollContent$class(value) {
			throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getScrollPosition() {
			return this.$$.ctx[17];
		}

		set getScrollPosition(value) {
			throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getScrollContentWidth() {
			return this.$$.ctx[18];
		}

		set getScrollContentWidth(value) {
			throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get incrementScroll() {
			return this.$$.ctx[19];
		}

		set incrementScroll(value) {
			throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get scrollTo() {
			return this.$$.ctx[20];
		}

		set scrollTo(value) {
			throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[21];
		}

		set getElement(value) {
			throw new Error("<TabScroller>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/tab-bar/dist/TabBar.svelte generated by Svelte v4.2.19 */
	const file$m = "node_modules/@smui/tab-bar/dist/TabBar.svelte";

	function get_each_context$1(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[29] = list[i];
		return child_ctx;
	}

	const get_default_slot_changes = dirty => ({ tab: dirty[0] & /*tabs*/ 4 });
	const get_default_slot_context = ctx => ({ tab: /*tab*/ ctx[29] });

	// (22:4) {#each tabs as tab (key(tab))}
	function create_each_block$1(key_2, ctx) {
		let first;
		let current;
		const default_slot_template = /*#slots*/ ctx[21].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[24], get_default_slot_context);

		const block = {
			key: key_2,
			first: null,
			c: function create() {
				first = empty();
				if (default_slot) default_slot.c();
				this.first = first;
			},
			m: function mount(target, anchor) {
				insert_dev(target, first, anchor);

				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;

				if (default_slot) {
					if (default_slot.p && (!current || dirty[0] & /*$$scope, tabs*/ 16777220)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[24],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[24])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[24], dirty, get_default_slot_changes),
							get_default_slot_context
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(first);
				}

				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block$1.name,
			type: "each",
			source: "(22:4) {#each tabs as tab (key(tab))}",
			ctx
		});

		return block;
	}

	// (18:2) <TabScroller     bind:this={tabScroller}     {...prefixFilter($$restProps, 'tabScroller$')}   >
	function create_default_slot$8(ctx) {
		let each_blocks = [];
		let each_1_lookup = new Map();
		let each_1_anchor;
		let current;
		let each_value = ensure_array_like_dev(/*tabs*/ ctx[2]);
		const get_key = ctx => /*key*/ ctx[3](/*tab*/ ctx[29]);
		validate_each_keys(ctx, each_value, get_each_context$1, get_key);

		for (let i = 0; i < each_value.length; i += 1) {
			let child_ctx = get_each_context$1(ctx, each_value, i);
			let key = get_key(child_ctx);
			each_1_lookup.set(key, each_blocks[i] = create_each_block$1(key, child_ctx));
		}

		const block = {
			c: function create() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m: function mount(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(target, anchor);
					}
				}

				insert_dev(target, each_1_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*$$scope, tabs, key*/ 16777228) {
					each_value = ensure_array_like_dev(/*tabs*/ ctx[2]);
					group_outros();
					validate_each_keys(ctx, each_value, get_each_context$1, get_key);
					each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$1, each_1_anchor, get_each_context$1);
					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o: function outro(local) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(each_1_anchor);
				}

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].d(detaching);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$8.name,
			type: "slot",
			source: "(18:2) <TabScroller     bind:this={tabScroller}     {...prefixFilter($$restProps, 'tabScroller$')}   >",
			ctx
		});

		return block;
	}

	function create_fragment$p(ctx) {
		let div;
		let tabscroller;
		let div_class_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const tabscroller_spread_levels = [prefixFilter(/*$$restProps*/ ctx[11], 'tabScroller$')];

		let tabscroller_props = {
			$$slots: { default: [create_default_slot$8] },
			$$scope: { ctx }
		};

		for (let i = 0; i < tabscroller_spread_levels.length; i += 1) {
			tabscroller_props = assign(tabscroller_props, tabscroller_spread_levels[i]);
		}

		tabscroller = new TabScroller({ props: tabscroller_props, $$inline: true });
		/*tabscroller_binding*/ ctx[22](tabscroller);

		let div_levels = [
			{
				class: div_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-tab-bar': true
				})
			},
			{ role: "tablist" },
			{ tabindex: /*tabindex*/ ctx[4] },
			exclude(/*$$restProps*/ ctx[11], ['tabScroller$'])
		];

		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				create_component(tabscroller.$$.fragment);
				set_attributes(div, div_data);
				add_location(div, file$m, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				mount_component(tabscroller, div, null);
				/*div_binding*/ ctx[23](div);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[8].call(null, div)),
						listen_dev(div, "SMUITab:mount", /*handleTabMount*/ ctx[9], false, false, false, false),
						listen_dev(div, "SMUITab:unmount", /*handleTabUnmount*/ ctx[10], false, false, false, false),
						listen_dev(
							div,
							"SMUITab:interacted",
							function () {
								if (is_function(/*instance*/ ctx[5] && /*instance*/ ctx[5].handleTabInteraction.bind(/*instance*/ ctx[5]))) (/*instance*/ ctx[5] && /*instance*/ ctx[5].handleTabInteraction.bind(/*instance*/ ctx[5])).apply(this, arguments);
							},
							false,
							false,
							false,
							false
						),
						listen_dev(
							div,
							"keydown",
							function () {
								if (is_function(/*instance*/ ctx[5] && /*instance*/ ctx[5].handleKeyDown.bind(/*instance*/ ctx[5]))) (/*instance*/ ctx[5] && /*instance*/ ctx[5].handleKeyDown.bind(/*instance*/ ctx[5])).apply(this, arguments);
							},
							false,
							false,
							false,
							false
						)
					];

					mounted = true;
				}
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;

				const tabscroller_changes = (dirty[0] & /*$$restProps*/ 2048)
				? get_spread_update(tabscroller_spread_levels, [get_spread_object(prefixFilter(/*$$restProps*/ ctx[11], 'tabScroller$'))])
				: {};

				if (dirty[0] & /*$$scope, tabs*/ 16777220) {
					tabscroller_changes.$$scope = { dirty, ctx };
				}

				tabscroller.$set(tabscroller_changes);

				set_attributes(div, div_data = get_spread_update(div_levels, [
					(!current || dirty[0] & /*className*/ 2 && div_class_value !== (div_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-tab-bar': true
					}))) && { class: div_class_value },
					{ role: "tablist" },
					(!current || dirty[0] & /*tabindex*/ 16) && { tabindex: /*tabindex*/ ctx[4] },
					dirty[0] & /*$$restProps*/ 2048 && exclude(/*$$restProps*/ ctx[11], ['tabScroller$'])
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tabscroller.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tabscroller.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				/*tabscroller_binding*/ ctx[22](null);
				destroy_component(tabscroller);
				/*div_binding*/ ctx[23](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$p.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance_1$e($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","tabs","key","focusOnActivate","focusOnProgrammatic","useAutomaticActivation","active","tabindex","scrollIntoView","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('TabBar', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { tabs = [] } = $$props;
		let { key = tab => tab } = $$props;
		let { focusOnActivate = true } = $$props;
		let { focusOnProgrammatic = false } = $$props;
		let { useAutomaticActivation = true } = $$props;
		let { active = undefined } = $$props;
		let { tabindex = 0 } = $$props;
		let element;
		let instance;
		let tabScroller;
		let activeIndex = tabs.indexOf(active);
		let tabAccessorMap = {};
		let tabAccessorWeakMap = new WeakMap();
		let skipFocus = false;
		setContext('SMUI:tab:focusOnActivate', focusOnActivate);
		setContext('SMUI:tab:initialActive', active);

		onMount(() => {
			$$invalidate(5, instance = new MDCTabBarFoundation({
					scrollTo: scrollX => tabScroller.scrollTo(scrollX),
					incrementScroll: scrollXIncrement => tabScroller.incrementScroll(scrollXIncrement),
					getScrollPosition: () => tabScroller.getScrollPosition(),
					getScrollContentWidth: () => tabScroller.getScrollContentWidth(),
					getOffsetWidth: () => getElement().offsetWidth,
					isRTL: () => getComputedStyle(getElement()).getPropertyValue('direction') === 'rtl',
					setActiveTab: index => {
						$$invalidate(12, active = tabs[index]);
						$$invalidate(18, activeIndex = index);
						instance.activateTab(index);
					},
					activateTabAtIndex: (index, clientRect) => {
						var _a;

						return (_a = getAccessor(tabs[index])) === null || _a === void 0
						? void 0
						: _a.activate(clientRect, skipFocus);
					},
					deactivateTabAtIndex: index => {
						var _a;

						return (_a = getAccessor(tabs[index])) === null || _a === void 0
						? void 0
						: _a.deactivate();
					},
					focusTabAtIndex: index => {
						var _a;

						return (_a = getAccessor(tabs[index])) === null || _a === void 0
						? void 0
						: _a.focus();
					},
					getTabIndicatorClientRectAtIndex: index => {
						var _a, _b;

						return (_b = (_a = getAccessor(tabs[index])) === null || _a === void 0
						? void 0
						: _a.computeIndicatorClientRect()) !== null && _b !== void 0
						? _b
						: new DOMRect();
					},
					getTabDimensionsAtIndex: index => {
						var _a, _b;

						return (_b = (_a = getAccessor(tabs[index])) === null || _a === void 0
						? void 0
						: _a.computeDimensions()) !== null && _b !== void 0
						? _b
						: {
								rootLeft: 0,
								rootRight: 0,
								contentLeft: 0,
								contentRight: 0
							};
					},
					getPreviousActiveTabIndex: () => {
						var _a;

						for (let i = 0; i < tabs.length; i++) {
							if ((_a = getAccessor(tabs[i])) === null || _a === void 0
							? void 0
							: _a.active) {
								return i;
							}
						}

						return -1;
					},
					getFocusedTabIndex: () => {
						const tabElements = tabs.map(tab => {
							var _a;

							return (_a = getAccessor(tab)) === null || _a === void 0
							? void 0
							: _a.element;
						});

						const activeElement = document.activeElement;
						return tabElements.indexOf(activeElement);
					},
					getIndexOfTabById: id => tabs.indexOf(id),
					getTabListLength: () => tabs.length,
					notifyTabActivated: index => dispatch(getElement(), 'SMUITabBar:activated', { index }, undefined, true)
				}));

			instance.init();

			return () => {
				instance.destroy();
			};
		});

		function handleTabMount(event) {
			const accessor = event.detail;
			addAccessor(accessor.tabId, accessor);
		}

		function handleTabUnmount(event) {
			const accessor = event.detail;
			removeAccessor(accessor.tabId);
		}

		function getAccessor(tabId) {
			return tabId instanceof Object
			? tabAccessorWeakMap.get(tabId)
			: tabAccessorMap[tabId];
		}

		function addAccessor(tabId, accessor) {
			if (tabId instanceof Object) {
				tabAccessorWeakMap.set(tabId, accessor);
				$$invalidate(20, tabAccessorWeakMap);
			} else {
				$$invalidate(19, tabAccessorMap[tabId] = accessor, tabAccessorMap);
				$$invalidate(19, tabAccessorMap);
			}
		}

		function removeAccessor(tabId) {
			if (tabId instanceof Object) {
				tabAccessorWeakMap.delete(tabId);
				$$invalidate(20, tabAccessorWeakMap);
			} else {
				delete tabAccessorMap[tabId];
				$$invalidate(19, tabAccessorMap);
			}
		}

		function scrollIntoView(index) {
			instance.scrollIntoView(index);
		}

		function getElement() {
			return element;
		}

		function tabscroller_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				tabScroller = $$value;
				$$invalidate(7, tabScroller);
			});
		}

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(6, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('tabs' in $$new_props) $$invalidate(2, tabs = $$new_props.tabs);
			if ('key' in $$new_props) $$invalidate(3, key = $$new_props.key);
			if ('focusOnActivate' in $$new_props) $$invalidate(13, focusOnActivate = $$new_props.focusOnActivate);
			if ('focusOnProgrammatic' in $$new_props) $$invalidate(14, focusOnProgrammatic = $$new_props.focusOnProgrammatic);
			if ('useAutomaticActivation' in $$new_props) $$invalidate(15, useAutomaticActivation = $$new_props.useAutomaticActivation);
			if ('active' in $$new_props) $$invalidate(12, active = $$new_props.active);
			if ('tabindex' in $$new_props) $$invalidate(4, tabindex = $$new_props.tabindex);
			if ('$$scope' in $$new_props) $$invalidate(24, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			MDCTabBarFoundation,
			onMount,
			setContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			exclude,
			prefixFilter,
			useActions,
			dispatch,
			TabScroller,
			forwardEvents,
			use,
			className,
			tabs,
			key,
			focusOnActivate,
			focusOnProgrammatic,
			useAutomaticActivation,
			active,
			tabindex,
			element,
			instance,
			tabScroller,
			activeIndex,
			tabAccessorMap,
			tabAccessorWeakMap,
			skipFocus,
			handleTabMount,
			handleTabUnmount,
			getAccessor,
			addAccessor,
			removeAccessor,
			scrollIntoView,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('tabs' in $$props) $$invalidate(2, tabs = $$new_props.tabs);
			if ('key' in $$props) $$invalidate(3, key = $$new_props.key);
			if ('focusOnActivate' in $$props) $$invalidate(13, focusOnActivate = $$new_props.focusOnActivate);
			if ('focusOnProgrammatic' in $$props) $$invalidate(14, focusOnProgrammatic = $$new_props.focusOnProgrammatic);
			if ('useAutomaticActivation' in $$props) $$invalidate(15, useAutomaticActivation = $$new_props.useAutomaticActivation);
			if ('active' in $$props) $$invalidate(12, active = $$new_props.active);
			if ('tabindex' in $$props) $$invalidate(4, tabindex = $$new_props.tabindex);
			if ('element' in $$props) $$invalidate(6, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(5, instance = $$new_props.instance);
			if ('tabScroller' in $$props) $$invalidate(7, tabScroller = $$new_props.tabScroller);
			if ('activeIndex' in $$props) $$invalidate(18, activeIndex = $$new_props.activeIndex);
			if ('tabAccessorMap' in $$props) $$invalidate(19, tabAccessorMap = $$new_props.tabAccessorMap);
			if ('tabAccessorWeakMap' in $$props) $$invalidate(20, tabAccessorWeakMap = $$new_props.tabAccessorWeakMap);
			if ('skipFocus' in $$props) skipFocus = $$new_props.skipFocus;
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty[0] & /*active, tabs, activeIndex, instance, focusOnProgrammatic*/ 282660) {
				if (active !== tabs[activeIndex]) {
					$$invalidate(18, activeIndex = tabs.indexOf(active));

					if (instance) {
						skipFocus = !focusOnProgrammatic;
						instance.activateTab(activeIndex);
						skipFocus = false;
					}
				}
			}

			if ($$self.$$.dirty[0] & /*tabs, tabAccessorWeakMap, tabAccessorMap, activeIndex*/ 1835012) {
				if (tabs.length) {
					// Manually get the accessor so it is reactive.
					const accessor = tabs[0] instanceof Object
					? tabAccessorWeakMap.get(tabs[0])
					: tabAccessorMap[tabs[0]];

					if (accessor) {
						accessor.forceAccessible(activeIndex === -1);
					}
				}
			}

			if ($$self.$$.dirty[0] & /*instance, useAutomaticActivation*/ 32800) {
				if (instance) {
					instance.setUseAutomaticActivation(useAutomaticActivation);
				}
			}
		};

		return [
			use,
			className,
			tabs,
			key,
			tabindex,
			instance,
			element,
			tabScroller,
			forwardEvents,
			handleTabMount,
			handleTabUnmount,
			$$restProps,
			active,
			focusOnActivate,
			focusOnProgrammatic,
			useAutomaticActivation,
			scrollIntoView,
			getElement,
			activeIndex,
			tabAccessorMap,
			tabAccessorWeakMap,
			slots,
			tabscroller_binding,
			div_binding,
			$$scope
		];
	}

	class TabBar extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(
				this,
				options,
				instance_1$e,
				create_fragment$p,
				safe_not_equal,
				{
					use: 0,
					class: 1,
					tabs: 2,
					key: 3,
					focusOnActivate: 13,
					focusOnProgrammatic: 14,
					useAutomaticActivation: 15,
					active: 12,
					tabindex: 4,
					scrollIntoView: 16,
					getElement: 17
				},
				null,
				[-1, -1]
			);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "TabBar",
				options,
				id: create_fragment$p.name
			});
		}

		get use() {
			throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tabs() {
			throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tabs(value) {
			throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get key() {
			throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set key(value) {
			throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get focusOnActivate() {
			throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set focusOnActivate(value) {
			throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get focusOnProgrammatic() {
			throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set focusOnProgrammatic(value) {
			throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get useAutomaticActivation() {
			throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set useAutomaticActivation(value) {
			throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get active() {
			throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set active(value) {
			throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tabindex() {
			throw new Error("<TabBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tabindex(value) {
			throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get scrollIntoView() {
			return this.$$.ctx[16];
		}

		set scrollIntoView(value) {
			throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[17];
		}

		set getElement(value) {
			throw new Error("<TabBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$a = {
	    CLOSED_CLASS: 'mdc-linear-progress--closed',
	    CLOSED_ANIMATION_OFF_CLASS: 'mdc-linear-progress--closed-animation-off',
	    INDETERMINATE_CLASS: 'mdc-linear-progress--indeterminate',
	    REVERSED_CLASS: 'mdc-linear-progress--reversed',
	    ANIMATION_READY_CLASS: 'mdc-linear-progress--animation-ready',
	};
	var strings$8 = {
	    ARIA_HIDDEN: 'aria-hidden',
	    ARIA_VALUEMAX: 'aria-valuemax',
	    ARIA_VALUEMIN: 'aria-valuemin',
	    ARIA_VALUENOW: 'aria-valuenow',
	    BUFFER_BAR_SELECTOR: '.mdc-linear-progress__buffer-bar',
	    FLEX_BASIS: 'flex-basis',
	    PRIMARY_BAR_SELECTOR: '.mdc-linear-progress__primary-bar',
	};
	// these are percentages pulled from keyframes.scss
	var animationDimensionPercentages = {
	    PRIMARY_HALF: .8367142,
	    PRIMARY_FULL: 2.00611057,
	    SECONDARY_QUARTER: .37651913,
	    SECONDARY_HALF: .84386165,
	    SECONDARY_FULL: 1.60277782,
	};

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCLinearProgressFoundation = /** @class */ (function (_super) {
	    __extends(MDCLinearProgressFoundation, _super);
	    function MDCLinearProgressFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCLinearProgressFoundation.defaultAdapter), adapter)) || this;
	        _this.observer = null;
	        return _this;
	    }
	    Object.defineProperty(MDCLinearProgressFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$a;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCLinearProgressFoundation, "strings", {
	        get: function () {
	            return strings$8;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCLinearProgressFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                attachResizeObserver: function () { return null; },
	                forceLayout: function () { return undefined; },
	                getWidth: function () { return 0; },
	                hasClass: function () { return false; },
	                setBufferBarStyle: function () { return null; },
	                setPrimaryBarStyle: function () { return null; },
	                setStyle: function () { return undefined; },
	                removeAttribute: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                setAttribute: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCLinearProgressFoundation.prototype.init = function () {
	        var _this = this;
	        this.determinate = !this.adapter.hasClass(cssClasses$a.INDETERMINATE_CLASS);
	        this.adapter.addClass(cssClasses$a.ANIMATION_READY_CLASS);
	        this.progress = 0;
	        this.buffer = 1;
	        this.observer = this.adapter.attachResizeObserver(function (entries) {
	            var e_1, _a;
	            if (_this.determinate) {
	                return;
	            }
	            try {
	                for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
	                    var entry = entries_1_1.value;
	                    if (entry.contentRect) {
	                        _this.calculateAndSetDimensions(entry.contentRect.width);
	                    }
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        });
	        if (!this.determinate && this.observer) {
	            this.calculateAndSetDimensions(this.adapter.getWidth());
	        }
	    };
	    MDCLinearProgressFoundation.prototype.setDeterminate = function (isDeterminate) {
	        this.determinate = isDeterminate;
	        if (this.determinate) {
	            this.adapter.removeClass(cssClasses$a.INDETERMINATE_CLASS);
	            this.adapter.setAttribute(strings$8.ARIA_VALUENOW, this.progress.toString());
	            this.adapter.setAttribute(strings$8.ARIA_VALUEMAX, '1');
	            this.adapter.setAttribute(strings$8.ARIA_VALUEMIN, '0');
	            this.setPrimaryBarProgress(this.progress);
	            this.setBufferBarProgress(this.buffer);
	            return;
	        }
	        if (this.observer) {
	            this.calculateAndSetDimensions(this.adapter.getWidth());
	        }
	        this.adapter.addClass(cssClasses$a.INDETERMINATE_CLASS);
	        this.adapter.removeAttribute(strings$8.ARIA_VALUENOW);
	        this.adapter.removeAttribute(strings$8.ARIA_VALUEMAX);
	        this.adapter.removeAttribute(strings$8.ARIA_VALUEMIN);
	        this.setPrimaryBarProgress(1);
	        this.setBufferBarProgress(1);
	    };
	    MDCLinearProgressFoundation.prototype.isDeterminate = function () {
	        return this.determinate;
	    };
	    MDCLinearProgressFoundation.prototype.setProgress = function (value) {
	        this.progress = value;
	        if (this.determinate) {
	            this.setPrimaryBarProgress(value);
	            this.adapter.setAttribute(strings$8.ARIA_VALUENOW, value.toString());
	        }
	    };
	    MDCLinearProgressFoundation.prototype.getProgress = function () {
	        return this.progress;
	    };
	    MDCLinearProgressFoundation.prototype.setBuffer = function (value) {
	        this.buffer = value;
	        if (this.determinate) {
	            this.setBufferBarProgress(value);
	        }
	    };
	    MDCLinearProgressFoundation.prototype.getBuffer = function () {
	        return this.buffer;
	    };
	    MDCLinearProgressFoundation.prototype.open = function () {
	        this.adapter.removeClass(cssClasses$a.CLOSED_CLASS);
	        this.adapter.removeClass(cssClasses$a.CLOSED_ANIMATION_OFF_CLASS);
	        this.adapter.removeAttribute(strings$8.ARIA_HIDDEN);
	    };
	    MDCLinearProgressFoundation.prototype.close = function () {
	        this.adapter.addClass(cssClasses$a.CLOSED_CLASS);
	        this.adapter.setAttribute(strings$8.ARIA_HIDDEN, 'true');
	    };
	    MDCLinearProgressFoundation.prototype.isClosed = function () {
	        return this.adapter.hasClass(cssClasses$a.CLOSED_CLASS);
	    };
	    /**
	     * Handles the transitionend event emitted after `close()` is called and the
	     * opacity fades out. This is so that animations are removed only after the
	     * progress indicator is completely hidden.
	     */
	    MDCLinearProgressFoundation.prototype.handleTransitionEnd = function () {
	        if (this.adapter.hasClass(cssClasses$a.CLOSED_CLASS)) {
	            this.adapter.addClass(cssClasses$a.CLOSED_ANIMATION_OFF_CLASS);
	        }
	    };
	    MDCLinearProgressFoundation.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        if (this.observer) {
	            this.observer.disconnect();
	        }
	    };
	    MDCLinearProgressFoundation.prototype.restartAnimation = function () {
	        this.adapter.removeClass(cssClasses$a.ANIMATION_READY_CLASS);
	        this.adapter.forceLayout();
	        this.adapter.addClass(cssClasses$a.ANIMATION_READY_CLASS);
	    };
	    MDCLinearProgressFoundation.prototype.setPrimaryBarProgress = function (progressValue) {
	        var value = "scaleX(" + progressValue + ")";
	        // Accessing `window` without a `typeof` check will throw on Node
	        // environments.
	        var transformProp = typeof window !== 'undefined' ?
	            getCorrectPropertyName(window, 'transform') :
	            'transform';
	        this.adapter.setPrimaryBarStyle(transformProp, value);
	    };
	    MDCLinearProgressFoundation.prototype.setBufferBarProgress = function (progressValue) {
	        var value = progressValue * 100 + "%";
	        this.adapter.setBufferBarStyle(strings$8.FLEX_BASIS, value);
	    };
	    MDCLinearProgressFoundation.prototype.calculateAndSetDimensions = function (width) {
	        var primaryHalf = width * animationDimensionPercentages.PRIMARY_HALF;
	        var primaryFull = width * animationDimensionPercentages.PRIMARY_FULL;
	        var secondaryQuarter = width * animationDimensionPercentages.SECONDARY_QUARTER;
	        var secondaryHalf = width * animationDimensionPercentages.SECONDARY_HALF;
	        var secondaryFull = width * animationDimensionPercentages.SECONDARY_FULL;
	        this.adapter.setStyle('--mdc-linear-progress-primary-half', primaryHalf + "px");
	        this.adapter.setStyle('--mdc-linear-progress-primary-half-neg', -primaryHalf + "px");
	        this.adapter.setStyle('--mdc-linear-progress-primary-full', primaryFull + "px");
	        this.adapter.setStyle('--mdc-linear-progress-primary-full-neg', -primaryFull + "px");
	        this.adapter.setStyle('--mdc-linear-progress-secondary-quarter', secondaryQuarter + "px");
	        this.adapter.setStyle('--mdc-linear-progress-secondary-quarter-neg', -secondaryQuarter + "px");
	        this.adapter.setStyle('--mdc-linear-progress-secondary-half', secondaryHalf + "px");
	        this.adapter.setStyle('--mdc-linear-progress-secondary-half-neg', -secondaryHalf + "px");
	        this.adapter.setStyle('--mdc-linear-progress-secondary-full', secondaryFull + "px");
	        this.adapter.setStyle('--mdc-linear-progress-secondary-full-neg', -secondaryFull + "px");
	        // need to restart animation for custom props to apply to keyframes
	        this.restartAnimation();
	    };
	    return MDCLinearProgressFoundation;
	}(MDCFoundation));

	/* node_modules/@smui/linear-progress/dist/LinearProgress.svelte generated by Svelte v4.2.19 */
	const file$l = "node_modules/@smui/linear-progress/dist/LinearProgress.svelte";

	function create_fragment$o(ctx) {
		let div5;
		let div2;
		let div0;
		let div0_style_value;
		let t0;
		let div1;
		let t1;
		let div3;
		let span0;
		let div3_style_value;
		let t2;
		let div4;
		let span1;
		let div5_class_value;
		let div5_style_value;
		let div5_aria_valuemin_value;
		let div5_aria_valuemax_value;
		let div5_aria_valuenow_value;
		let useActions_action;
		let mounted;
		let dispose;

		let div5_levels = [
			{
				class: div5_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-linear-progress': true,
					'mdc-linear-progress--indeterminate': /*indeterminate*/ ctx[3],
					'mdc-linear-progress--closed': /*closed*/ ctx[4],
					'mdc-data-table__linear-progress': /*context*/ ctx[14] === 'data-table',
					.../*internalClasses*/ ctx[8]
				})
			},
			{
				style: div5_style_value = Object.entries(/*internalStyles*/ ctx[10]).map(func_2).concat([/*style*/ ctx[2]]).join(' ')
			},
			{ role: "progressbar" },
			{
				"aria-valuemin": div5_aria_valuemin_value = 0
			},
			{
				"aria-valuemax": div5_aria_valuemax_value = 1
			},
			{
				"aria-valuenow": div5_aria_valuenow_value = /*indeterminate*/ ctx[3]
				? undefined
				: /*progress*/ ctx[5]
			},
			/*internalAttrs*/ ctx[9],
			/*$$restProps*/ ctx[16]
		];

		let div_data_5 = {};

		for (let i = 0; i < div5_levels.length; i += 1) {
			div_data_5 = assign(div_data_5, div5_levels[i]);
		}

		const block = {
			c: function create() {
				div5 = element("div");
				div2 = element("div");
				div0 = element("div");
				t0 = space();
				div1 = element("div");
				t1 = space();
				div3 = element("div");
				span0 = element("span");
				t2 = space();
				div4 = element("div");
				span1 = element("span");
				attr_dev(div0, "class", "mdc-linear-progress__buffer-bar");
				attr_dev(div0, "style", div0_style_value = Object.entries(/*bufferBarStyles*/ ctx[11]).map(func$c).join(' '));
				add_location(div0, file$l, 25, 4, 744);
				attr_dev(div1, "class", "mdc-linear-progress__buffer-dots");
				add_location(div1, file$l, 31, 4, 925);
				attr_dev(div2, "class", "mdc-linear-progress__buffer");
				add_location(div2, file$l, 24, 2, 698);
				attr_dev(span0, "class", "mdc-linear-progress__bar-inner");
				add_location(span0, file$l, 39, 4, 1182);
				attr_dev(div3, "class", "mdc-linear-progress__bar mdc-linear-progress__primary-bar");
				attr_dev(div3, "style", div3_style_value = Object.entries(/*primaryBarStyles*/ ctx[12]).map(func_1$3).join(' '));
				add_location(div3, file$l, 33, 2, 985);
				attr_dev(span1, "class", "mdc-linear-progress__bar-inner");
				add_location(span1, file$l, 42, 4, 1319);
				attr_dev(div4, "class", "mdc-linear-progress__bar mdc-linear-progress__secondary-bar");
				add_location(div4, file$l, 41, 2, 1241);
				set_attributes(div5, div_data_5);
				add_location(div5, file$l, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div5, anchor);
				append_dev(div5, div2);
				append_dev(div2, div0);
				append_dev(div2, t0);
				append_dev(div2, div1);
				append_dev(div5, t1);
				append_dev(div5, div3);
				append_dev(div3, span0);
				append_dev(div5, t2);
				append_dev(div5, div4);
				append_dev(div4, span1);
				/*div5_binding*/ ctx[19](div5);

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, div5, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[13].call(null, div5)),
						listen_dev(div5, "transitionend", /*transitionend_handler*/ ctx[20], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*bufferBarStyles*/ 2048 && div0_style_value !== (div0_style_value = Object.entries(/*bufferBarStyles*/ ctx[11]).map(func$c).join(' '))) {
					attr_dev(div0, "style", div0_style_value);
				}

				if (dirty & /*primaryBarStyles*/ 4096 && div3_style_value !== (div3_style_value = Object.entries(/*primaryBarStyles*/ ctx[12]).map(func_1$3).join(' '))) {
					attr_dev(div3, "style", div3_style_value);
				}

				set_attributes(div5, div_data_5 = get_spread_update(div5_levels, [
					dirty & /*className, indeterminate, closed, internalClasses*/ 282 && div5_class_value !== (div5_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-linear-progress': true,
						'mdc-linear-progress--indeterminate': /*indeterminate*/ ctx[3],
						'mdc-linear-progress--closed': /*closed*/ ctx[4],
						'mdc-data-table__linear-progress': /*context*/ ctx[14] === 'data-table',
						.../*internalClasses*/ ctx[8]
					})) && { class: div5_class_value },
					dirty & /*internalStyles, style*/ 1028 && div5_style_value !== (div5_style_value = Object.entries(/*internalStyles*/ ctx[10]).map(func_2).concat([/*style*/ ctx[2]]).join(' ')) && { style: div5_style_value },
					{ role: "progressbar" },
					{
						"aria-valuemin": div5_aria_valuemin_value
					},
					{
						"aria-valuemax": div5_aria_valuemax_value
					},
					dirty & /*indeterminate, progress*/ 40 && div5_aria_valuenow_value !== (div5_aria_valuenow_value = /*indeterminate*/ ctx[3]
					? undefined
					: /*progress*/ ctx[5]) && {
						"aria-valuenow": div5_aria_valuenow_value
					},
					dirty & /*internalAttrs*/ 512 && /*internalAttrs*/ ctx[9],
					dirty & /*$$restProps*/ 65536 && /*$$restProps*/ ctx[16]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div5);
				}

				/*div5_binding*/ ctx[19](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$o.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$c = ([name, value]) => `${name}: ${value};`;
	const func_1$3 = ([name, value]) => `${name}: ${value};`;
	const func_2 = ([name, value]) => `${name}: ${value};`;

	function instance_1$d($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","style","indeterminate","closed","progress","buffer","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $closedStore;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('LinearProgress', slots, []);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { indeterminate = false } = $$props;
		let { closed = false } = $$props;
		let { progress = 0 } = $$props;
		let { buffer = undefined } = $$props;
		let element;
		let instance;
		let internalClasses = {};
		let internalAttrs = {};
		let internalStyles = {};
		let bufferBarStyles = {};
		let primaryBarStyles = {};
		let context = getContext('SMUI:linear-progress:context');
		let closedStore = getContext('SMUI:linear-progress:closed');
		validate_store(closedStore, 'closedStore');
		component_subscribe($$self, closedStore, value => $$invalidate(21, $closedStore = value));

		onMount(() => {
			$$invalidate(6, instance = new MDCLinearProgressFoundation({
					addClass,
					forceLayout: () => {
						getElement().getBoundingClientRect();
					},
					setBufferBarStyle: addBufferBarStyle,
					setPrimaryBarStyle: addPrimaryBarStyle,
					hasClass,
					removeAttribute: removeAttr,
					removeClass,
					setAttribute: addAttr,
					setStyle: addStyle,
					attachResizeObserver: callback => {
						const RO = window.ResizeObserver;

						if (RO) {
							const ro = new RO(callback);
							ro.observe(getElement());
							return ro;
						}

						return null;
					},
					getWidth: () => getElement().offsetWidth
				}));

			instance.init();

			return () => {
				instance.destroy();
			};
		});

		function hasClass(className) {
			return className in internalClasses
			? internalClasses[className]
			: getElement().classList.contains(className);
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(8, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(8, internalClasses[className] = false, internalClasses);
			}
		}

		function addAttr(name, value) {
			if (internalAttrs[name] !== value) {
				$$invalidate(9, internalAttrs[name] = value, internalAttrs);
			}
		}

		function removeAttr(name) {
			if (!(name in internalAttrs) || internalAttrs[name] != null) {
				$$invalidate(9, internalAttrs[name] = undefined, internalAttrs);
			}
		}

		function addStyle(name, value) {
			if (internalStyles[name] != value) {
				if (value === '' || value == null) {
					delete internalStyles[name];
					$$invalidate(10, internalStyles);
				} else {
					$$invalidate(10, internalStyles[name] = value, internalStyles);
				}
			}
		}

		function addBufferBarStyle(name, value) {
			if (bufferBarStyles[name] != value) {
				if (value === '' || value == null) {
					delete bufferBarStyles[name];
					$$invalidate(11, bufferBarStyles);
				} else {
					$$invalidate(11, bufferBarStyles[name] = value, bufferBarStyles);
				}
			}
		}

		function addPrimaryBarStyle(name, value) {
			if (primaryBarStyles[name] != value) {
				if (value === '' || value == null) {
					delete primaryBarStyles[name];
					$$invalidate(12, primaryBarStyles);
				} else {
					$$invalidate(12, primaryBarStyles[name] = value, primaryBarStyles);
				}
			}
		}

		function getElement() {
			return element;
		}

		function div5_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(7, element);
			});
		}

		const transitionend_handler = () => instance && instance.handleTransitionEnd();

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(2, style = $$new_props.style);
			if ('indeterminate' in $$new_props) $$invalidate(3, indeterminate = $$new_props.indeterminate);
			if ('closed' in $$new_props) $$invalidate(4, closed = $$new_props.closed);
			if ('progress' in $$new_props) $$invalidate(5, progress = $$new_props.progress);
			if ('buffer' in $$new_props) $$invalidate(17, buffer = $$new_props.buffer);
		};

		$$self.$capture_state = () => ({
			MDCLinearProgressFoundation,
			onMount,
			getContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			forwardEvents,
			use,
			className,
			style,
			indeterminate,
			closed,
			progress,
			buffer,
			element,
			instance,
			internalClasses,
			internalAttrs,
			internalStyles,
			bufferBarStyles,
			primaryBarStyles,
			context,
			closedStore,
			hasClass,
			addClass,
			removeClass,
			addAttr,
			removeAttr,
			addStyle,
			addBufferBarStyle,
			addPrimaryBarStyle,
			getElement,
			$closedStore
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(2, style = $$new_props.style);
			if ('indeterminate' in $$props) $$invalidate(3, indeterminate = $$new_props.indeterminate);
			if ('closed' in $$props) $$invalidate(4, closed = $$new_props.closed);
			if ('progress' in $$props) $$invalidate(5, progress = $$new_props.progress);
			if ('buffer' in $$props) $$invalidate(17, buffer = $$new_props.buffer);
			if ('element' in $$props) $$invalidate(7, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(6, instance = $$new_props.instance);
			if ('internalClasses' in $$props) $$invalidate(8, internalClasses = $$new_props.internalClasses);
			if ('internalAttrs' in $$props) $$invalidate(9, internalAttrs = $$new_props.internalAttrs);
			if ('internalStyles' in $$props) $$invalidate(10, internalStyles = $$new_props.internalStyles);
			if ('bufferBarStyles' in $$props) $$invalidate(11, bufferBarStyles = $$new_props.bufferBarStyles);
			if ('primaryBarStyles' in $$props) $$invalidate(12, primaryBarStyles = $$new_props.primaryBarStyles);
			if ('context' in $$props) $$invalidate(14, context = $$new_props.context);
			if ('closedStore' in $$props) $$invalidate(15, closedStore = $$new_props.closedStore);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*closed*/ 16) {
				if (closedStore) {
					set_store_value(closedStore, $closedStore = closed, $closedStore);
				}
			}

			if ($$self.$$.dirty & /*instance, indeterminate*/ 72) {
				if (instance && instance.isDeterminate() !== !indeterminate) {
					instance.setDeterminate(!indeterminate);
				}
			}

			if ($$self.$$.dirty & /*instance, progress*/ 96) {
				if (instance && instance.getProgress() !== progress) {
					instance.setProgress(progress);
				}
			}

			if ($$self.$$.dirty & /*instance, buffer*/ 131136) {
				if (instance) {
					if (buffer == null) {
						instance.setBuffer(1);
					} else {
						instance.setBuffer(buffer);
					}
				}
			}

			if ($$self.$$.dirty & /*instance, closed*/ 80) {
				if (instance) {
					if (closed) {
						instance.close();
					} else {
						instance.open();
					}
				}
			}
		};

		return [
			use,
			className,
			style,
			indeterminate,
			closed,
			progress,
			instance,
			element,
			internalClasses,
			internalAttrs,
			internalStyles,
			bufferBarStyles,
			primaryBarStyles,
			forwardEvents,
			context,
			closedStore,
			$$restProps,
			buffer,
			getElement,
			div5_binding,
			transitionend_handler
		];
	}

	class LinearProgress extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance_1$d, create_fragment$o, safe_not_equal, {
				use: 0,
				class: 1,
				style: 2,
				indeterminate: 3,
				closed: 4,
				progress: 5,
				buffer: 17,
				getElement: 18
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "LinearProgress",
				options,
				id: create_fragment$o.name
			});
		}

		get use() {
			throw new Error("<LinearProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<LinearProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<LinearProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get indeterminate() {
			throw new Error("<LinearProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set indeterminate(value) {
			throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get closed() {
			throw new Error("<LinearProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set closed(value) {
			throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get progress() {
			throw new Error("<LinearProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set progress(value) {
			throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get buffer() {
			throw new Error("<LinearProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set buffer(value) {
			throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[18];
		}

		set getElement(value) {
			throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$9 = {
	    LABEL_FLOAT_ABOVE: 'mdc-floating-label--float-above',
	    LABEL_REQUIRED: 'mdc-floating-label--required',
	    LABEL_SHAKE: 'mdc-floating-label--shake',
	    ROOT: 'mdc-floating-label',
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCFloatingLabelFoundation = /** @class */ (function (_super) {
	    __extends(MDCFloatingLabelFoundation, _super);
	    function MDCFloatingLabelFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCFloatingLabelFoundation.defaultAdapter), adapter)) || this;
	        _this.shakeAnimationEndHandler = function () {
	            _this.handleShakeAnimationEnd();
	        };
	        return _this;
	    }
	    Object.defineProperty(MDCFloatingLabelFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$9;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCFloatingLabelFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCFloatingLabelAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                getWidth: function () { return 0; },
	                registerInteractionHandler: function () { return undefined; },
	                deregisterInteractionHandler: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCFloatingLabelFoundation.prototype.init = function () {
	        this.adapter.registerInteractionHandler('animationend', this.shakeAnimationEndHandler);
	    };
	    MDCFloatingLabelFoundation.prototype.destroy = function () {
	        this.adapter.deregisterInteractionHandler('animationend', this.shakeAnimationEndHandler);
	    };
	    /**
	     * Returns the width of the label element.
	     */
	    MDCFloatingLabelFoundation.prototype.getWidth = function () {
	        return this.adapter.getWidth();
	    };
	    /**
	     * Styles the label to produce a shake animation to indicate an error.
	     * @param shouldShake If true, adds the shake CSS class; otherwise, removes shake class.
	     */
	    MDCFloatingLabelFoundation.prototype.shake = function (shouldShake) {
	        var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
	        if (shouldShake) {
	            this.adapter.addClass(LABEL_SHAKE);
	        }
	        else {
	            this.adapter.removeClass(LABEL_SHAKE);
	        }
	    };
	    /**
	     * Styles the label to float or dock.
	     * @param shouldFloat If true, adds the float CSS class; otherwise, removes float and shake classes to dock the label.
	     */
	    MDCFloatingLabelFoundation.prototype.float = function (shouldFloat) {
	        var _a = MDCFloatingLabelFoundation.cssClasses, LABEL_FLOAT_ABOVE = _a.LABEL_FLOAT_ABOVE, LABEL_SHAKE = _a.LABEL_SHAKE;
	        if (shouldFloat) {
	            this.adapter.addClass(LABEL_FLOAT_ABOVE);
	        }
	        else {
	            this.adapter.removeClass(LABEL_FLOAT_ABOVE);
	            this.adapter.removeClass(LABEL_SHAKE);
	        }
	    };
	    /**
	     * Styles the label as required.
	     * @param isRequired If true, adds an asterisk to the label, indicating that it is required.
	     */
	    MDCFloatingLabelFoundation.prototype.setRequired = function (isRequired) {
	        var LABEL_REQUIRED = MDCFloatingLabelFoundation.cssClasses.LABEL_REQUIRED;
	        if (isRequired) {
	            this.adapter.addClass(LABEL_REQUIRED);
	        }
	        else {
	            this.adapter.removeClass(LABEL_REQUIRED);
	        }
	    };
	    MDCFloatingLabelFoundation.prototype.handleShakeAnimationEnd = function () {
	        var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
	        this.adapter.removeClass(LABEL_SHAKE);
	    };
	    return MDCFloatingLabelFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$8 = {
	    LINE_RIPPLE_ACTIVE: 'mdc-line-ripple--active',
	    LINE_RIPPLE_DEACTIVATING: 'mdc-line-ripple--deactivating',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCLineRippleFoundation = /** @class */ (function (_super) {
	    __extends(MDCLineRippleFoundation, _super);
	    function MDCLineRippleFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCLineRippleFoundation.defaultAdapter), adapter)) || this;
	        _this.transitionEndHandler = function (evt) {
	            _this.handleTransitionEnd(evt);
	        };
	        return _this;
	    }
	    Object.defineProperty(MDCLineRippleFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$8;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCLineRippleFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCLineRippleAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                setStyle: function () { return undefined; },
	                registerEventHandler: function () { return undefined; },
	                deregisterEventHandler: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCLineRippleFoundation.prototype.init = function () {
	        this.adapter.registerEventHandler('transitionend', this.transitionEndHandler);
	    };
	    MDCLineRippleFoundation.prototype.destroy = function () {
	        this.adapter.deregisterEventHandler('transitionend', this.transitionEndHandler);
	    };
	    MDCLineRippleFoundation.prototype.activate = function () {
	        this.adapter.removeClass(cssClasses$8.LINE_RIPPLE_DEACTIVATING);
	        this.adapter.addClass(cssClasses$8.LINE_RIPPLE_ACTIVE);
	    };
	    MDCLineRippleFoundation.prototype.setRippleCenter = function (xCoordinate) {
	        this.adapter.setStyle('transform-origin', xCoordinate + "px center");
	    };
	    MDCLineRippleFoundation.prototype.deactivate = function () {
	        this.adapter.addClass(cssClasses$8.LINE_RIPPLE_DEACTIVATING);
	    };
	    MDCLineRippleFoundation.prototype.handleTransitionEnd = function (evt) {
	        // Wait for the line ripple to be either transparent or opaque
	        // before emitting the animation end event
	        var isDeactivating = this.adapter.hasClass(cssClasses$8.LINE_RIPPLE_DEACTIVATING);
	        if (evt.propertyName === 'opacity') {
	            if (isDeactivating) {
	                this.adapter.removeClass(cssClasses$8.LINE_RIPPLE_ACTIVE);
	                this.adapter.removeClass(cssClasses$8.LINE_RIPPLE_DEACTIVATING);
	            }
	        }
	    };
	    return MDCLineRippleFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$7 = {
	    ANCHOR: 'mdc-menu-surface--anchor',
	    ANIMATING_CLOSED: 'mdc-menu-surface--animating-closed',
	    ANIMATING_OPEN: 'mdc-menu-surface--animating-open',
	    FIXED: 'mdc-menu-surface--fixed',
	    IS_OPEN_BELOW: 'mdc-menu-surface--is-open-below',
	    OPEN: 'mdc-menu-surface--open',
	    ROOT: 'mdc-menu-surface',
	};
	// tslint:disable:object-literal-sort-keys
	var strings$7 = {
	    CLOSED_EVENT: 'MDCMenuSurface:closed',
	    CLOSING_EVENT: 'MDCMenuSurface:closing',
	    OPENED_EVENT: 'MDCMenuSurface:opened',
	    OPENING_EVENT: 'MDCMenuSurface:opening',
	    FOCUSABLE_ELEMENTS: [
	        'button:not(:disabled)',
	        '[href]:not([aria-disabled="true"])',
	        'input:not(:disabled)',
	        'select:not(:disabled)',
	        'textarea:not(:disabled)',
	        '[tabindex]:not([tabindex="-1"]):not([aria-disabled="true"])',
	    ].join(', '),
	};
	// tslint:enable:object-literal-sort-keys
	var numbers$5 = {
	    /** Total duration of menu-surface open animation. */
	    TRANSITION_OPEN_DURATION: 120,
	    /** Total duration of menu-surface close animation. */
	    TRANSITION_CLOSE_DURATION: 75,
	    /**
	     * Margin left to the edge of the viewport when menu-surface is at maximum
	     * possible height. Also used as a viewport margin.
	     */
	    MARGIN_TO_EDGE: 32,
	    /**
	     * Ratio of anchor width to menu-surface width for switching from corner
	     * positioning to center positioning.
	     */
	    ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: 0.67,
	    /**
	     * Amount of time to wait before restoring focus when closing the menu
	     * surface. This is important because if a touch event triggered the menu
	     * close, and the subsequent mouse event occurs after focus is restored, then
	     * the restored focus would be lost.
	     */
	    TOUCH_EVENT_WAIT_MS: 30,
	};
	/**
	 * Enum for bits in the {@see Corner) bitmap.
	 */
	var CornerBit;
	(function (CornerBit) {
	    CornerBit[CornerBit["BOTTOM"] = 1] = "BOTTOM";
	    CornerBit[CornerBit["CENTER"] = 2] = "CENTER";
	    CornerBit[CornerBit["RIGHT"] = 4] = "RIGHT";
	    CornerBit[CornerBit["FLIP_RTL"] = 8] = "FLIP_RTL";
	})(CornerBit || (CornerBit = {}));
	/**
	 * Enum for representing an element corner for positioning the menu-surface.
	 *
	 * The START constants map to LEFT if element directionality is left
	 * to right and RIGHT if the directionality is right to left.
	 * Likewise END maps to RIGHT or LEFT depending on the directionality.
	 */
	var Corner;
	(function (Corner) {
	    Corner[Corner["TOP_LEFT"] = 0] = "TOP_LEFT";
	    Corner[Corner["TOP_RIGHT"] = 4] = "TOP_RIGHT";
	    Corner[Corner["BOTTOM_LEFT"] = 1] = "BOTTOM_LEFT";
	    Corner[Corner["BOTTOM_RIGHT"] = 5] = "BOTTOM_RIGHT";
	    Corner[Corner["TOP_START"] = 8] = "TOP_START";
	    Corner[Corner["TOP_END"] = 12] = "TOP_END";
	    Corner[Corner["BOTTOM_START"] = 9] = "BOTTOM_START";
	    Corner[Corner["BOTTOM_END"] = 13] = "BOTTOM_END";
	})(Corner || (Corner = {}));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var _a, _b;
	var cssClasses$6 = {
	    LIST_ITEM_ACTIVATED_CLASS: 'mdc-list-item--activated',
	    LIST_ITEM_CLASS: 'mdc-list-item',
	    LIST_ITEM_DISABLED_CLASS: 'mdc-list-item--disabled',
	    LIST_ITEM_SELECTED_CLASS: 'mdc-list-item--selected',
	    LIST_ITEM_TEXT_CLASS: 'mdc-list-item__text',
	    LIST_ITEM_PRIMARY_TEXT_CLASS: 'mdc-list-item__primary-text',
	    ROOT: 'mdc-list',
	};
	(_a = {},
	    _a["" + cssClasses$6.LIST_ITEM_ACTIVATED_CLASS] = 'mdc-list-item--activated',
	    _a["" + cssClasses$6.LIST_ITEM_CLASS] = 'mdc-list-item',
	    _a["" + cssClasses$6.LIST_ITEM_DISABLED_CLASS] = 'mdc-list-item--disabled',
	    _a["" + cssClasses$6.LIST_ITEM_SELECTED_CLASS] = 'mdc-list-item--selected',
	    _a["" + cssClasses$6.LIST_ITEM_PRIMARY_TEXT_CLASS] = 'mdc-list-item__primary-text',
	    _a["" + cssClasses$6.ROOT] = 'mdc-list',
	    _a);
	var deprecatedClassNameMap = (_b = {},
	    _b["" + cssClasses$6.LIST_ITEM_ACTIVATED_CLASS] = 'mdc-deprecated-list-item--activated',
	    _b["" + cssClasses$6.LIST_ITEM_CLASS] = 'mdc-deprecated-list-item',
	    _b["" + cssClasses$6.LIST_ITEM_DISABLED_CLASS] = 'mdc-deprecated-list-item--disabled',
	    _b["" + cssClasses$6.LIST_ITEM_SELECTED_CLASS] = 'mdc-deprecated-list-item--selected',
	    _b["" + cssClasses$6.LIST_ITEM_TEXT_CLASS] = 'mdc-deprecated-list-item__text',
	    _b["" + cssClasses$6.LIST_ITEM_PRIMARY_TEXT_CLASS] = 'mdc-deprecated-list-item__primary-text',
	    _b["" + cssClasses$6.ROOT] = 'mdc-deprecated-list',
	    _b);
	var strings$6 = {
	    ACTION_EVENT: 'MDCList:action',
	    SELECTION_CHANGE_EVENT: 'MDCList:selectionChange',
	    ARIA_CHECKED: 'aria-checked',
	    ARIA_CHECKED_CHECKBOX_SELECTOR: '[role="checkbox"][aria-checked="true"]',
	    ARIA_CHECKED_RADIO_SELECTOR: '[role="radio"][aria-checked="true"]',
	    ARIA_CURRENT: 'aria-current',
	    ARIA_DISABLED: 'aria-disabled',
	    ARIA_ORIENTATION: 'aria-orientation',
	    ARIA_ORIENTATION_HORIZONTAL: 'horizontal',
	    ARIA_ROLE_CHECKBOX_SELECTOR: '[role="checkbox"]',
	    ARIA_SELECTED: 'aria-selected',
	    ARIA_INTERACTIVE_ROLES_SELECTOR: '[role="listbox"], [role="menu"]',
	    ARIA_MULTI_SELECTABLE_SELECTOR: '[aria-multiselectable="true"]',
	    CHECKBOX_RADIO_SELECTOR: 'input[type="checkbox"], input[type="radio"]',
	    CHECKBOX_SELECTOR: 'input[type="checkbox"]',
	    CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: "\n    ." + cssClasses$6.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses$6.LIST_ITEM_CLASS + " a,\n    ." + deprecatedClassNameMap[cssClasses$6.LIST_ITEM_CLASS] + " button:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$6.LIST_ITEM_CLASS] + " a\n  ",
	    DEPRECATED_SELECTOR: '.mdc-deprecated-list',
	    FOCUSABLE_CHILD_ELEMENTS: "\n    ." + cssClasses$6.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses$6.LIST_ITEM_CLASS + " a,\n    ." + cssClasses$6.LIST_ITEM_CLASS + " input[type=\"radio\"]:not(:disabled),\n    ." + cssClasses$6.LIST_ITEM_CLASS + " input[type=\"checkbox\"]:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$6.LIST_ITEM_CLASS] + " button:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$6.LIST_ITEM_CLASS] + " a,\n    ." + deprecatedClassNameMap[cssClasses$6.LIST_ITEM_CLASS] + " input[type=\"radio\"]:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$6.LIST_ITEM_CLASS] + " input[type=\"checkbox\"]:not(:disabled)\n  ",
	    RADIO_SELECTOR: 'input[type="radio"]',
	    SELECTED_ITEM_SELECTOR: '[aria-selected="true"], [aria-current="true"]',
	};
	var numbers$4 = {
	    UNSET_INDEX: -1,
	    TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS: 300
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];
	/**
	 * Ensures that preventDefault is only called if the containing element
	 * doesn't consume the event, and it will cause an unintended scroll.
	 *
	 * @param evt keyboard event to be prevented.
	 */
	var preventDefaultEvent = function (evt) {
	    var target = evt.target;
	    if (!target) {
	        return;
	    }
	    var tagName = ("" + target.tagName).toLowerCase();
	    if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {
	        evt.preventDefault();
	    }
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * Initializes a state object for typeahead. Use the same reference for calls to
	 * typeahead functions.
	 *
	 * @return The current state of the typeahead process. Each state reference
	 *     represents a typeahead instance as the reference is typically mutated
	 *     in-place.
	 */
	function initState() {
	    var state = {
	        bufferClearTimeout: 0,
	        currentFirstChar: '',
	        sortedIndexCursor: 0,
	        typeaheadBuffer: '',
	    };
	    return state;
	}
	/**
	 * Initializes typeahead state by indexing the current list items by primary
	 * text into the sortedIndexByFirstChar data structure.
	 *
	 * @param listItemCount numer of items in the list
	 * @param getPrimaryTextByItemIndex function that returns the primary text at a
	 *     given index
	 *
	 * @return Map that maps the first character of the primary text to the full
	 *     list text and it's index
	 */
	function initSortedIndex(listItemCount, getPrimaryTextByItemIndex) {
	    var sortedIndexByFirstChar = new Map();
	    // Aggregate item text to index mapping
	    for (var i = 0; i < listItemCount; i++) {
	        var primaryText = getPrimaryTextByItemIndex(i).trim();
	        if (!primaryText) {
	            continue;
	        }
	        var firstChar = primaryText[0].toLowerCase();
	        if (!sortedIndexByFirstChar.has(firstChar)) {
	            sortedIndexByFirstChar.set(firstChar, []);
	        }
	        sortedIndexByFirstChar.get(firstChar).push({ text: primaryText.toLowerCase(), index: i });
	    }
	    // Sort the mapping
	    // TODO(b/157162694): Investigate replacing forEach with Map.values()
	    sortedIndexByFirstChar.forEach(function (values) {
	        values.sort(function (first, second) {
	            return first.index - second.index;
	        });
	    });
	    return sortedIndexByFirstChar;
	}
	/**
	 * Given the next desired character from the user, it attempts to find the next
	 * list option matching the buffer. Wraps around if at the end of options.
	 *
	 * @param opts Options and accessors
	 *   - nextChar - the next character to match against items
	 *   - sortedIndexByFirstChar - output of `initSortedIndex(...)`
	 *   - focusedItemIndex - the index of the currently focused item
	 *   - focusItemAtIndex - function that focuses a list item at given index
	 *   - skipFocus - whether or not to focus the matched item
	 *   - isItemAtIndexDisabled - function that determines whether an item at a
	 *        given index is disabled
	 * @param state The typeahead state instance. See `initState`.
	 *
	 * @return The index of the matched item, or -1 if no match.
	 */
	function matchItem(opts, state) {
	    var nextChar = opts.nextChar, focusItemAtIndex = opts.focusItemAtIndex, sortedIndexByFirstChar = opts.sortedIndexByFirstChar, focusedItemIndex = opts.focusedItemIndex, skipFocus = opts.skipFocus, isItemAtIndexDisabled = opts.isItemAtIndexDisabled;
	    clearTimeout(state.bufferClearTimeout);
	    state.bufferClearTimeout = setTimeout(function () {
	        clearBuffer(state);
	    }, numbers$4.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);
	    state.typeaheadBuffer = state.typeaheadBuffer + nextChar;
	    var index;
	    if (state.typeaheadBuffer.length === 1) {
	        index = matchFirstChar(sortedIndexByFirstChar, focusedItemIndex, isItemAtIndexDisabled, state);
	    }
	    else {
	        index = matchAllChars(sortedIndexByFirstChar, isItemAtIndexDisabled, state);
	    }
	    if (index !== -1 && !skipFocus) {
	        focusItemAtIndex(index);
	    }
	    return index;
	}
	/**
	 * Matches the user's single input character in the buffer to the
	 * next option that begins with such character. Wraps around if at
	 * end of options. Returns -1 if no match is found.
	 */
	function matchFirstChar(sortedIndexByFirstChar, focusedItemIndex, isItemAtIndexDisabled, state) {
	    var firstChar = state.typeaheadBuffer[0];
	    var itemsMatchingFirstChar = sortedIndexByFirstChar.get(firstChar);
	    if (!itemsMatchingFirstChar) {
	        return -1;
	    }
	    // Has the same firstChar been recently matched?
	    // Also, did starting index remain the same between key presses?
	    // If both hold true, simply increment index.
	    if (firstChar === state.currentFirstChar &&
	        itemsMatchingFirstChar[state.sortedIndexCursor].index ===
	            focusedItemIndex) {
	        state.sortedIndexCursor =
	            (state.sortedIndexCursor + 1) % itemsMatchingFirstChar.length;
	        var newIndex = itemsMatchingFirstChar[state.sortedIndexCursor].index;
	        if (!isItemAtIndexDisabled(newIndex)) {
	            return newIndex;
	        }
	    }
	    // If we're here, it means one of the following happened:
	    // - either firstChar or startingIndex has changed, invalidating the
	    // cursor.
	    // - The next item of typeahead is disabled, so we have to look further.
	    state.currentFirstChar = firstChar;
	    var newCursorPosition = -1;
	    var cursorPosition;
	    // Find the first non-disabled item as a fallback.
	    for (cursorPosition = 0; cursorPosition < itemsMatchingFirstChar.length; cursorPosition++) {
	        if (!isItemAtIndexDisabled(itemsMatchingFirstChar[cursorPosition].index)) {
	            newCursorPosition = cursorPosition;
	            break;
	        }
	    }
	    // Advance cursor to first item matching the firstChar that is positioned
	    // after starting item. Cursor is unchanged from fallback if there's no
	    // such item.
	    for (; cursorPosition < itemsMatchingFirstChar.length; cursorPosition++) {
	        if (itemsMatchingFirstChar[cursorPosition].index > focusedItemIndex &&
	            !isItemAtIndexDisabled(itemsMatchingFirstChar[cursorPosition].index)) {
	            newCursorPosition = cursorPosition;
	            break;
	        }
	    }
	    if (newCursorPosition !== -1) {
	        state.sortedIndexCursor = newCursorPosition;
	        return itemsMatchingFirstChar[state.sortedIndexCursor].index;
	    }
	    return -1;
	}
	/**
	 * Attempts to find the next item that matches all of the typeahead buffer.
	 * Wraps around if at end of options. Returns -1 if no match is found.
	 */
	function matchAllChars(sortedIndexByFirstChar, isItemAtIndexDisabled, state) {
	    var firstChar = state.typeaheadBuffer[0];
	    var itemsMatchingFirstChar = sortedIndexByFirstChar.get(firstChar);
	    if (!itemsMatchingFirstChar) {
	        return -1;
	    }
	    // Do nothing if text already matches
	    var startingItem = itemsMatchingFirstChar[state.sortedIndexCursor];
	    if (startingItem.text.lastIndexOf(state.typeaheadBuffer, 0) === 0 &&
	        !isItemAtIndexDisabled(startingItem.index)) {
	        return startingItem.index;
	    }
	    // Find next item that matches completely; if no match, we'll eventually
	    // loop around to same position
	    var cursorPosition = (state.sortedIndexCursor + 1) % itemsMatchingFirstChar.length;
	    var nextCursorPosition = -1;
	    while (cursorPosition !== state.sortedIndexCursor) {
	        var currentItem = itemsMatchingFirstChar[cursorPosition];
	        var matches = currentItem.text.lastIndexOf(state.typeaheadBuffer, 0) === 0;
	        var isEnabled = !isItemAtIndexDisabled(currentItem.index);
	        if (matches && isEnabled) {
	            nextCursorPosition = cursorPosition;
	            break;
	        }
	        cursorPosition = (cursorPosition + 1) % itemsMatchingFirstChar.length;
	    }
	    if (nextCursorPosition !== -1) {
	        state.sortedIndexCursor = nextCursorPosition;
	        return itemsMatchingFirstChar[state.sortedIndexCursor].index;
	    }
	    return -1;
	}
	/**
	 * Whether or not the given typeahead instaance state is currently typing.
	 *
	 * @param state The typeahead state instance. See `initState`.
	 */
	function isTypingInProgress(state) {
	    return state.typeaheadBuffer.length > 0;
	}
	/**
	 * Clears the typeahaed buffer so that it resets item matching to the first
	 * character.
	 *
	 * @param state The typeahead state instance. See `initState`.
	 */
	function clearBuffer(state) {
	    state.typeaheadBuffer = '';
	}
	/**
	 * Given a keydown event, it calculates whether or not to automatically focus a
	 * list item depending on what was typed mimicing the typeahead functionality of
	 * a standard <select> element that is open.
	 *
	 * @param opts Options and accessors
	 *   - event - the KeyboardEvent to handle and parse
	 *   - sortedIndexByFirstChar - output of `initSortedIndex(...)`
	 *   - focusedItemIndex - the index of the currently focused item
	 *   - focusItemAtIndex - function that focuses a list item at given index
	 *   - isItemAtFocusedIndexDisabled - whether or not the currently focused item
	 *      is disabled
	 *   - isTargetListItem - whether or not the event target is a list item
	 * @param state The typeahead state instance. See `initState`.
	 *
	 * @returns index of the item matched by the keydown. -1 if not matched.
	 */
	function handleKeydown(opts, state) {
	    var event = opts.event, isTargetListItem = opts.isTargetListItem, focusedItemIndex = opts.focusedItemIndex, focusItemAtIndex = opts.focusItemAtIndex, sortedIndexByFirstChar = opts.sortedIndexByFirstChar, isItemAtIndexDisabled = opts.isItemAtIndexDisabled;
	    var isArrowLeft = normalizeKey(event) === 'ArrowLeft';
	    var isArrowUp = normalizeKey(event) === 'ArrowUp';
	    var isArrowRight = normalizeKey(event) === 'ArrowRight';
	    var isArrowDown = normalizeKey(event) === 'ArrowDown';
	    var isHome = normalizeKey(event) === 'Home';
	    var isEnd = normalizeKey(event) === 'End';
	    var isEnter = normalizeKey(event) === 'Enter';
	    var isSpace = normalizeKey(event) === 'Spacebar';
	    if (event.altKey || event.ctrlKey || event.metaKey || isArrowLeft ||
	        isArrowUp || isArrowRight || isArrowDown || isHome || isEnd || isEnter) {
	        return -1;
	    }
	    var isCharacterKey = !isSpace && event.key.length === 1;
	    if (isCharacterKey) {
	        preventDefaultEvent(event);
	        var matchItemOpts = {
	            focusItemAtIndex: focusItemAtIndex,
	            focusedItemIndex: focusedItemIndex,
	            nextChar: event.key.toLowerCase(),
	            sortedIndexByFirstChar: sortedIndexByFirstChar,
	            skipFocus: false,
	            isItemAtIndexDisabled: isItemAtIndexDisabled,
	        };
	        return matchItem(matchItemOpts, state);
	    }
	    if (!isSpace) {
	        return -1;
	    }
	    if (isTargetListItem) {
	        preventDefaultEvent(event);
	    }
	    var typeaheadOnListItem = isTargetListItem && isTypingInProgress(state);
	    if (typeaheadOnListItem) {
	        var matchItemOpts = {
	            focusItemAtIndex: focusItemAtIndex,
	            focusedItemIndex: focusedItemIndex,
	            nextChar: ' ',
	            sortedIndexByFirstChar: sortedIndexByFirstChar,
	            skipFocus: false,
	            isItemAtIndexDisabled: isItemAtIndexDisabled,
	        };
	        // space participates in typeahead matching if in rapid typing mode
	        return matchItem(matchItemOpts, state);
	    }
	    return -1;
	}

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	function isNumberArray(selectedIndex) {
	    return selectedIndex instanceof Array;
	}
	/** List of modifier keys to consider while handling keyboard events. */
	var handledModifierKeys = ['Alt', 'Control', 'Meta', 'Shift'];
	/** Checks if the event has the given modifier keys. */
	function createModifierChecker(event) {
	    var eventModifiers = new Set(event ? handledModifierKeys.filter(function (m) { return event.getModifierState(m); }) : []);
	    return function (modifiers) {
	        return modifiers.every(function (m) { return eventModifiers.has(m); }) &&
	            modifiers.length === eventModifiers.size;
	    };
	}
	var MDCListFoundation = /** @class */ (function (_super) {
	    __extends(MDCListFoundation, _super);
	    function MDCListFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCListFoundation.defaultAdapter), adapter)) || this;
	        _this.wrapFocus = false;
	        _this.isVertical = true;
	        _this.isSingleSelectionList = false;
	        _this.areDisabledItemsFocusable = true;
	        _this.selectedIndex = numbers$4.UNSET_INDEX;
	        _this.focusedItemIndex = numbers$4.UNSET_INDEX;
	        _this.useActivatedClass = false;
	        _this.useSelectedAttr = false;
	        _this.ariaCurrentAttrValue = null;
	        _this.isCheckboxList = false;
	        _this.isRadioList = false;
	        _this.lastSelectedIndex = null;
	        _this.hasTypeahead = false;
	        // Transiently holds current typeahead prefix from user.
	        _this.typeaheadState = initState();
	        _this.sortedIndexByFirstChar = new Map();
	        return _this;
	    }
	    Object.defineProperty(MDCListFoundation, "strings", {
	        get: function () {
	            return strings$6;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCListFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$6;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCListFoundation, "numbers", {
	        get: function () {
	            return numbers$4;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCListFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClassForElementIndex: function () { return undefined; },
	                focusItemAtIndex: function () { return undefined; },
	                getAttributeForElementIndex: function () { return null; },
	                getFocusedElementIndex: function () { return 0; },
	                getListItemCount: function () { return 0; },
	                hasCheckboxAtIndex: function () { return false; },
	                hasRadioAtIndex: function () { return false; },
	                isCheckboxCheckedAtIndex: function () { return false; },
	                isFocusInsideList: function () { return false; },
	                isRootFocused: function () { return false; },
	                listItemAtIndexHasClass: function () { return false; },
	                notifyAction: function () { return undefined; },
	                notifySelectionChange: function () { },
	                removeClassForElementIndex: function () { return undefined; },
	                setAttributeForElementIndex: function () { return undefined; },
	                setCheckedCheckboxOrRadioAtIndex: function () { return undefined; },
	                setTabIndexForListItemChildren: function () { return undefined; },
	                getPrimaryTextAtIndex: function () { return ''; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCListFoundation.prototype.layout = function () {
	        if (this.adapter.getListItemCount() === 0) {
	            return;
	        }
	        // TODO(b/172274142): consider all items when determining the list's type.
	        if (this.adapter.hasCheckboxAtIndex(0)) {
	            this.isCheckboxList = true;
	        }
	        else if (this.adapter.hasRadioAtIndex(0)) {
	            this.isRadioList = true;
	        }
	        else {
	            this.maybeInitializeSingleSelection();
	        }
	        if (this.hasTypeahead) {
	            this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();
	        }
	    };
	    /** Returns the index of the item that was last focused. */
	    MDCListFoundation.prototype.getFocusedItemIndex = function () {
	        return this.focusedItemIndex;
	    };
	    /** Toggles focus wrapping with keyboard navigation. */
	    MDCListFoundation.prototype.setWrapFocus = function (value) {
	        this.wrapFocus = value;
	    };
	    /**
	     * Toggles orientation direction for keyboard navigation (true for vertical,
	     * false for horizontal).
	     */
	    MDCListFoundation.prototype.setVerticalOrientation = function (value) {
	        this.isVertical = value;
	    };
	    /** Toggles single-selection behavior. */
	    MDCListFoundation.prototype.setSingleSelection = function (value) {
	        this.isSingleSelectionList = value;
	        if (value) {
	            this.maybeInitializeSingleSelection();
	            this.selectedIndex = this.getSelectedIndexFromDOM();
	        }
	    };
	    MDCListFoundation.prototype.setDisabledItemsFocusable = function (value) {
	        this.areDisabledItemsFocusable = value;
	    };
	    /**
	     * Automatically determines whether the list is single selection list. If so,
	     * initializes the internal state to match the selected item.
	     */
	    MDCListFoundation.prototype.maybeInitializeSingleSelection = function () {
	        var selectedItemIndex = this.getSelectedIndexFromDOM();
	        if (selectedItemIndex === numbers$4.UNSET_INDEX)
	            return;
	        var hasActivatedClass = this.adapter.listItemAtIndexHasClass(selectedItemIndex, cssClasses$6.LIST_ITEM_ACTIVATED_CLASS);
	        if (hasActivatedClass) {
	            this.setUseActivatedClass(true);
	        }
	        this.isSingleSelectionList = true;
	        this.selectedIndex = selectedItemIndex;
	    };
	    /** @return Index of the first selected item based on the DOM state. */
	    MDCListFoundation.prototype.getSelectedIndexFromDOM = function () {
	        var selectedIndex = numbers$4.UNSET_INDEX;
	        var listItemsCount = this.adapter.getListItemCount();
	        for (var i = 0; i < listItemsCount; i++) {
	            var hasSelectedClass = this.adapter.listItemAtIndexHasClass(i, cssClasses$6.LIST_ITEM_SELECTED_CLASS);
	            var hasActivatedClass = this.adapter.listItemAtIndexHasClass(i, cssClasses$6.LIST_ITEM_ACTIVATED_CLASS);
	            if (!(hasSelectedClass || hasActivatedClass)) {
	                continue;
	            }
	            selectedIndex = i;
	            break;
	        }
	        return selectedIndex;
	    };
	    /**
	     * Sets whether typeahead is enabled on the list.
	     * @param hasTypeahead Whether typeahead is enabled.
	     */
	    MDCListFoundation.prototype.setHasTypeahead = function (hasTypeahead) {
	        this.hasTypeahead = hasTypeahead;
	        if (hasTypeahead) {
	            this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();
	        }
	    };
	    /**
	     * @return Whether typeahead is currently matching a user-specified prefix.
	     */
	    MDCListFoundation.prototype.isTypeaheadInProgress = function () {
	        return this.hasTypeahead &&
	            isTypingInProgress(this.typeaheadState);
	    };
	    /** Toggle use of the "activated" CSS class. */
	    MDCListFoundation.prototype.setUseActivatedClass = function (useActivated) {
	        this.useActivatedClass = useActivated;
	    };
	    /**
	     * Toggles use of the selected attribute (true for aria-selected, false for
	     * aria-checked).
	     */
	    MDCListFoundation.prototype.setUseSelectedAttribute = function (useSelected) {
	        this.useSelectedAttr = useSelected;
	    };
	    MDCListFoundation.prototype.getSelectedIndex = function () {
	        return this.selectedIndex;
	    };
	    MDCListFoundation.prototype.setSelectedIndex = function (index, options) {
	        if (options === void 0) { options = {}; }
	        if (!this.isIndexValid(index)) {
	            return;
	        }
	        if (this.isCheckboxList) {
	            this.setCheckboxAtIndex(index, options);
	        }
	        else if (this.isRadioList) {
	            this.setRadioAtIndex(index, options);
	        }
	        else {
	            this.setSingleSelectionAtIndex(index, options);
	        }
	    };
	    /**
	     * Focus in handler for the list items.
	     */
	    MDCListFoundation.prototype.handleFocusIn = function (listItemIndex) {
	        if (listItemIndex >= 0) {
	            this.focusedItemIndex = listItemIndex;
	            this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '0');
	            this.adapter.setTabIndexForListItemChildren(listItemIndex, '0');
	        }
	    };
	    /**
	     * Focus out handler for the list items.
	     */
	    MDCListFoundation.prototype.handleFocusOut = function (listItemIndex) {
	        var _this = this;
	        if (listItemIndex >= 0) {
	            this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '-1');
	            this.adapter.setTabIndexForListItemChildren(listItemIndex, '-1');
	        }
	        /**
	         * Between Focusout & Focusin some browsers do not have focus on any
	         * element. Setting a delay to wait till the focus is moved to next element.
	         */
	        setTimeout(function () {
	            if (!_this.adapter.isFocusInsideList()) {
	                _this.setTabindexToFirstSelectedOrFocusedItem();
	            }
	        }, 0);
	    };
	    MDCListFoundation.prototype.isIndexDisabled = function (index) {
	        return this.adapter.listItemAtIndexHasClass(index, cssClasses$6.LIST_ITEM_DISABLED_CLASS);
	    };
	    /**
	     * Key handler for the list.
	     */
	    MDCListFoundation.prototype.handleKeydown = function (event, isRootListItem, listItemIndex) {
	        var _this = this;
	        var _a;
	        var isArrowLeft = normalizeKey(event) === 'ArrowLeft';
	        var isArrowUp = normalizeKey(event) === 'ArrowUp';
	        var isArrowRight = normalizeKey(event) === 'ArrowRight';
	        var isArrowDown = normalizeKey(event) === 'ArrowDown';
	        var isHome = normalizeKey(event) === 'Home';
	        var isEnd = normalizeKey(event) === 'End';
	        var isEnter = normalizeKey(event) === 'Enter';
	        var isSpace = normalizeKey(event) === 'Spacebar';
	        // The keys for forward and back differ based on list orientation.
	        var isForward = (this.isVertical && isArrowDown) || (!this.isVertical && isArrowRight);
	        var isBack = (this.isVertical && isArrowUp) || (!this.isVertical && isArrowLeft);
	        // Have to check both upper and lower case, because having caps lock on
	        // affects the value.
	        var isLetterA = event.key === 'A' || event.key === 'a';
	        var eventHasModifiers = createModifierChecker(event);
	        if (this.adapter.isRootFocused()) {
	            if ((isBack || isEnd) && eventHasModifiers([])) {
	                event.preventDefault();
	                this.focusLastElement();
	            }
	            else if ((isForward || isHome) && eventHasModifiers([])) {
	                event.preventDefault();
	                this.focusFirstElement();
	            }
	            else if (isBack && eventHasModifiers(['Shift']) && this.isCheckboxList) {
	                event.preventDefault();
	                var focusedIndex = this.focusLastElement();
	                if (focusedIndex !== -1) {
	                    this.setSelectedIndexOnAction(focusedIndex, false);
	                }
	            }
	            else if (isForward && eventHasModifiers(['Shift']) && this.isCheckboxList) {
	                event.preventDefault();
	                var focusedIndex = this.focusFirstElement();
	                if (focusedIndex !== -1) {
	                    this.setSelectedIndexOnAction(focusedIndex, false);
	                }
	            }
	            if (this.hasTypeahead) {
	                var handleKeydownOpts = {
	                    event: event,
	                    focusItemAtIndex: function (index) {
	                        _this.focusItemAtIndex(index);
	                    },
	                    focusedItemIndex: -1,
	                    isTargetListItem: isRootListItem,
	                    sortedIndexByFirstChar: this.sortedIndexByFirstChar,
	                    isItemAtIndexDisabled: function (index) { return _this.isIndexDisabled(index); },
	                };
	                handleKeydown(handleKeydownOpts, this.typeaheadState);
	            }
	            return;
	        }
	        var currentIndex = this.adapter.getFocusedElementIndex();
	        if (currentIndex === -1) {
	            currentIndex = listItemIndex;
	            if (currentIndex < 0) {
	                // If this event doesn't have a mdc-list-item ancestor from the
	                // current list (not from a sublist), return early.
	                return;
	            }
	        }
	        if (isForward && eventHasModifiers([])) {
	            preventDefaultEvent(event);
	            this.focusNextElement(currentIndex);
	        }
	        else if (isBack && eventHasModifiers([])) {
	            preventDefaultEvent(event);
	            this.focusPrevElement(currentIndex);
	        }
	        else if (isForward && eventHasModifiers(['Shift']) && this.isCheckboxList) {
	            preventDefaultEvent(event);
	            var focusedIndex = this.focusNextElement(currentIndex);
	            if (focusedIndex !== -1) {
	                this.setSelectedIndexOnAction(focusedIndex, false);
	            }
	        }
	        else if (isBack && eventHasModifiers(['Shift']) && this.isCheckboxList) {
	            preventDefaultEvent(event);
	            var focusedIndex = this.focusPrevElement(currentIndex);
	            if (focusedIndex !== -1) {
	                this.setSelectedIndexOnAction(focusedIndex, false);
	            }
	        }
	        else if (isHome && eventHasModifiers([])) {
	            preventDefaultEvent(event);
	            this.focusFirstElement();
	        }
	        else if (isEnd && eventHasModifiers([])) {
	            preventDefaultEvent(event);
	            this.focusLastElement();
	        }
	        else if (isHome && eventHasModifiers(['Control', 'Shift']) &&
	            this.isCheckboxList) {
	            preventDefaultEvent(event);
	            if (this.isIndexDisabled(currentIndex)) {
	                return;
	            }
	            this.focusFirstElement();
	            this.toggleCheckboxRange(0, currentIndex, currentIndex);
	        }
	        else if (isEnd && eventHasModifiers(['Control', 'Shift']) &&
	            this.isCheckboxList) {
	            preventDefaultEvent(event);
	            if (this.isIndexDisabled(currentIndex)) {
	                return;
	            }
	            this.focusLastElement();
	            this.toggleCheckboxRange(currentIndex, this.adapter.getListItemCount() - 1, currentIndex);
	        }
	        else if (isLetterA && eventHasModifiers(['Control']) && this.isCheckboxList) {
	            event.preventDefault();
	            this.checkboxListToggleAll(this.selectedIndex === numbers$4.UNSET_INDEX ?
	                [] :
	                this.selectedIndex, true);
	        }
	        else if ((isEnter || isSpace) && eventHasModifiers([])) {
	            if (isRootListItem) {
	                // Return early if enter key is pressed on anchor element which triggers
	                // synthetic MouseEvent event.
	                var target = event.target;
	                if (target && target.tagName === 'A' && isEnter) {
	                    return;
	                }
	                preventDefaultEvent(event);
	                if (this.isIndexDisabled(currentIndex)) {
	                    return;
	                }
	                if (!this.isTypeaheadInProgress()) {
	                    if (this.isSelectableList()) {
	                        this.setSelectedIndexOnAction(currentIndex, false);
	                    }
	                    this.adapter.notifyAction(currentIndex);
	                }
	            }
	        }
	        else if ((isEnter || isSpace) && eventHasModifiers(['Shift']) &&
	            this.isCheckboxList) {
	            // Return early if enter key is pressed on anchor element which triggers
	            // synthetic MouseEvent event.
	            var target = event.target;
	            if (target && target.tagName === 'A' && isEnter) {
	                return;
	            }
	            preventDefaultEvent(event);
	            if (this.isIndexDisabled(currentIndex)) {
	                return;
	            }
	            if (!this.isTypeaheadInProgress()) {
	                this.toggleCheckboxRange((_a = this.lastSelectedIndex) !== null && _a !== void 0 ? _a : currentIndex, currentIndex, currentIndex);
	                this.adapter.notifyAction(currentIndex);
	            }
	        }
	        if (this.hasTypeahead) {
	            var handleKeydownOpts = {
	                event: event,
	                focusItemAtIndex: function (index) { _this.focusItemAtIndex(index); },
	                focusedItemIndex: this.focusedItemIndex,
	                isTargetListItem: isRootListItem,
	                sortedIndexByFirstChar: this.sortedIndexByFirstChar,
	                isItemAtIndexDisabled: function (index) { return _this.isIndexDisabled(index); },
	            };
	            handleKeydown(handleKeydownOpts, this.typeaheadState);
	        }
	    };
	    /**
	     * Click handler for the list.
	     *
	     * @param index Index for the item that has been clicked.
	     * @param isCheckboxAlreadyUpdatedInAdapter Whether the checkbox for
	     *   the list item has already been updated in the adapter. This attribute
	     *   should be set to `true` when e.g. the click event directly landed on
	     *   the underlying native checkbox element which would cause the checked
	     *   state to be already toggled within `adapter.isCheckboxCheckedAtIndex`.
	     */
	    MDCListFoundation.prototype.handleClick = function (index, isCheckboxAlreadyUpdatedInAdapter, event) {
	        var _a;
	        var eventHasModifiers = createModifierChecker(event);
	        if (index === numbers$4.UNSET_INDEX) {
	            return;
	        }
	        if (this.isIndexDisabled(index)) {
	            return;
	        }
	        if (eventHasModifiers([])) {
	            if (this.isSelectableList()) {
	                this.setSelectedIndexOnAction(index, isCheckboxAlreadyUpdatedInAdapter);
	            }
	            this.adapter.notifyAction(index);
	        }
	        else if (this.isCheckboxList && eventHasModifiers(['Shift'])) {
	            this.toggleCheckboxRange((_a = this.lastSelectedIndex) !== null && _a !== void 0 ? _a : index, index, index);
	            this.adapter.notifyAction(index);
	        }
	    };
	    /**
	     * Focuses the next element on the list.
	     */
	    MDCListFoundation.prototype.focusNextElement = function (index) {
	        var count = this.adapter.getListItemCount();
	        var nextIndex = index;
	        var firstChecked = null;
	        do {
	            nextIndex++;
	            if (nextIndex >= count) {
	                if (this.wrapFocus) {
	                    nextIndex = 0;
	                }
	                else {
	                    // Return early because last item is already focused.
	                    return index;
	                }
	            }
	            if (nextIndex === firstChecked) {
	                return -1;
	            }
	            firstChecked = firstChecked !== null && firstChecked !== void 0 ? firstChecked : nextIndex;
	        } while (!this.areDisabledItemsFocusable && this.isIndexDisabled(nextIndex));
	        this.focusItemAtIndex(nextIndex);
	        return nextIndex;
	    };
	    /**
	     * Focuses the previous element on the list.
	     */
	    MDCListFoundation.prototype.focusPrevElement = function (index) {
	        var count = this.adapter.getListItemCount();
	        var prevIndex = index;
	        var firstChecked = null;
	        do {
	            prevIndex--;
	            if (prevIndex < 0) {
	                if (this.wrapFocus) {
	                    prevIndex = count - 1;
	                }
	                else {
	                    // Return early because first item is already focused.
	                    return index;
	                }
	            }
	            if (prevIndex === firstChecked) {
	                return -1;
	            }
	            firstChecked = firstChecked !== null && firstChecked !== void 0 ? firstChecked : prevIndex;
	        } while (!this.areDisabledItemsFocusable && this.isIndexDisabled(prevIndex));
	        this.focusItemAtIndex(prevIndex);
	        return prevIndex;
	    };
	    MDCListFoundation.prototype.focusFirstElement = function () {
	        // Pass -1 to `focusNextElement`, since it will incremement to 0 and focus
	        // the first element.
	        return this.focusNextElement(-1);
	    };
	    MDCListFoundation.prototype.focusLastElement = function () {
	        // Pass the length of the list to `focusNextElement` since it will decrement
	        // to length - 1 and focus the last element.
	        return this.focusPrevElement(this.adapter.getListItemCount());
	    };
	    MDCListFoundation.prototype.focusInitialElement = function () {
	        var initialIndex = this.getFirstSelectedOrFocusedItemIndex();
	        this.focusItemAtIndex(initialIndex);
	        return initialIndex;
	    };
	    /**
	     * @param itemIndex Index of the list item
	     * @param isEnabled Sets the list item to enabled or disabled.
	     */
	    MDCListFoundation.prototype.setEnabled = function (itemIndex, isEnabled) {
	        if (!this.isIndexValid(itemIndex, false)) {
	            return;
	        }
	        if (isEnabled) {
	            this.adapter.removeClassForElementIndex(itemIndex, cssClasses$6.LIST_ITEM_DISABLED_CLASS);
	            this.adapter.setAttributeForElementIndex(itemIndex, strings$6.ARIA_DISABLED, 'false');
	        }
	        else {
	            this.adapter.addClassForElementIndex(itemIndex, cssClasses$6.LIST_ITEM_DISABLED_CLASS);
	            this.adapter.setAttributeForElementIndex(itemIndex, strings$6.ARIA_DISABLED, 'true');
	        }
	    };
	    MDCListFoundation.prototype.setSingleSelectionAtIndex = function (index, options) {
	        if (options === void 0) { options = {}; }
	        if (this.selectedIndex === index && !options.forceUpdate) {
	            return;
	        }
	        var selectedClassName = cssClasses$6.LIST_ITEM_SELECTED_CLASS;
	        if (this.useActivatedClass) {
	            selectedClassName = cssClasses$6.LIST_ITEM_ACTIVATED_CLASS;
	        }
	        if (this.selectedIndex !== numbers$4.UNSET_INDEX) {
	            this.adapter.removeClassForElementIndex(this.selectedIndex, selectedClassName);
	        }
	        this.setAriaForSingleSelectionAtIndex(index);
	        this.setTabindexAtIndex(index);
	        if (index !== numbers$4.UNSET_INDEX) {
	            this.adapter.addClassForElementIndex(index, selectedClassName);
	        }
	        this.selectedIndex = index;
	        // If the selected value has changed through user interaction,
	        // we want to notify the selection change to the adapter.
	        if (options.isUserInteraction && !options.forceUpdate) {
	            this.adapter.notifySelectionChange([index]);
	        }
	    };
	    /**
	     * Sets aria attribute for single selection at given index.
	     */
	    MDCListFoundation.prototype.setAriaForSingleSelectionAtIndex = function (index) {
	        // Detect the presence of aria-current and get the value only during list
	        // initialization when it is in unset state.
	        if (this.selectedIndex === numbers$4.UNSET_INDEX) {
	            this.ariaCurrentAttrValue =
	                this.adapter.getAttributeForElementIndex(index, strings$6.ARIA_CURRENT);
	        }
	        var isAriaCurrent = this.ariaCurrentAttrValue !== null;
	        var ariaAttribute = isAriaCurrent ? strings$6.ARIA_CURRENT : strings$6.ARIA_SELECTED;
	        if (this.selectedIndex !== numbers$4.UNSET_INDEX) {
	            this.adapter.setAttributeForElementIndex(this.selectedIndex, ariaAttribute, 'false');
	        }
	        if (index !== numbers$4.UNSET_INDEX) {
	            var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue : 'true';
	            this.adapter.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);
	        }
	    };
	    /**
	     * Returns the attribute to use for indicating selection status.
	     */
	    MDCListFoundation.prototype.getSelectionAttribute = function () {
	        return this.useSelectedAttr ? strings$6.ARIA_SELECTED : strings$6.ARIA_CHECKED;
	    };
	    /**
	     * Toggles radio at give index. Radio doesn't change the checked state if it
	     * is already checked.
	     */
	    MDCListFoundation.prototype.setRadioAtIndex = function (index, options) {
	        if (options === void 0) { options = {}; }
	        var selectionAttribute = this.getSelectionAttribute();
	        this.adapter.setCheckedCheckboxOrRadioAtIndex(index, true);
	        if (this.selectedIndex === index && !options.forceUpdate) {
	            return;
	        }
	        if (this.selectedIndex !== numbers$4.UNSET_INDEX) {
	            this.adapter.setAttributeForElementIndex(this.selectedIndex, selectionAttribute, 'false');
	        }
	        this.adapter.setAttributeForElementIndex(index, selectionAttribute, 'true');
	        this.selectedIndex = index;
	        // If the selected value has changed through user interaction,
	        // we want to notify the selection change to the adapter.
	        if (options.isUserInteraction && !options.forceUpdate) {
	            this.adapter.notifySelectionChange([index]);
	        }
	    };
	    MDCListFoundation.prototype.setCheckboxAtIndex = function (index, options) {
	        if (options === void 0) { options = {}; }
	        var currentIndex = this.selectedIndex;
	        // If this update is not triggered by a user interaction, we do not
	        // need to know about the currently selected indices and can avoid
	        // constructing the `Set` for performance reasons.
	        var currentlySelected = options.isUserInteraction ?
	            new Set(currentIndex === numbers$4.UNSET_INDEX ? [] :
	                currentIndex) :
	            null;
	        var selectionAttribute = this.getSelectionAttribute();
	        var changedIndices = [];
	        for (var i = 0; i < this.adapter.getListItemCount(); i++) {
	            var previousIsChecked = currentlySelected === null || currentlySelected === void 0 ? void 0 : currentlySelected.has(i);
	            var newIsChecked = index.indexOf(i) >= 0;
	            // If the selection has changed for this item, we keep track of it
	            // so that we can notify the adapter.
	            if (newIsChecked !== previousIsChecked) {
	                changedIndices.push(i);
	            }
	            this.adapter.setCheckedCheckboxOrRadioAtIndex(i, newIsChecked);
	            this.adapter.setAttributeForElementIndex(i, selectionAttribute, newIsChecked ? 'true' : 'false');
	        }
	        this.selectedIndex = index;
	        // If the selected value has changed through user interaction,
	        // we want to notify the selection change to the adapter.
	        if (options.isUserInteraction && changedIndices.length) {
	            this.adapter.notifySelectionChange(changedIndices);
	        }
	    };
	    /**
	     * Toggles the state of all checkboxes in the given range (inclusive) based on
	     * the state of the checkbox at the `toggleIndex`. To determine whether to set
	     * the given range to checked or unchecked, read the value of the checkbox at
	     * the `toggleIndex` and negate it. Then apply that new checked state to all
	     * checkboxes in the range.
	     * @param fromIndex The start of the range of checkboxes to toggle
	     * @param toIndex The end of the range of checkboxes to toggle
	     * @param toggleIndex The index that will be used to determine the new state
	     *     of the given checkbox range.
	     */
	    MDCListFoundation.prototype.toggleCheckboxRange = function (fromIndex, toIndex, toggleIndex) {
	        this.lastSelectedIndex = toggleIndex;
	        var currentlySelected = new Set(this.selectedIndex === numbers$4.UNSET_INDEX ?
	            [] :
	            this.selectedIndex);
	        var newIsChecked = !(currentlySelected === null || currentlySelected === void 0 ? void 0 : currentlySelected.has(toggleIndex));
	        var _a = __read([fromIndex, toIndex].sort(), 2), startIndex = _a[0], endIndex = _a[1];
	        var selectionAttribute = this.getSelectionAttribute();
	        var changedIndices = [];
	        for (var i = startIndex; i <= endIndex; i++) {
	            if (this.isIndexDisabled(i)) {
	                continue;
	            }
	            var previousIsChecked = currentlySelected.has(i);
	            // If the selection has changed for this item, we keep track of it
	            // so that we can notify the adapter.
	            if (newIsChecked !== previousIsChecked) {
	                changedIndices.push(i);
	                this.adapter.setCheckedCheckboxOrRadioAtIndex(i, newIsChecked);
	                this.adapter.setAttributeForElementIndex(i, selectionAttribute, "" + newIsChecked);
	                if (newIsChecked) {
	                    currentlySelected.add(i);
	                }
	                else {
	                    currentlySelected.delete(i);
	                }
	            }
	        }
	        // If the selected value has changed, update and notify the selection change
	        // to the adapter.
	        if (changedIndices.length) {
	            this.selectedIndex = __spreadArray([], __read(currentlySelected));
	            this.adapter.notifySelectionChange(changedIndices);
	        }
	    };
	    MDCListFoundation.prototype.setTabindexAtIndex = function (index) {
	        if (this.focusedItemIndex === numbers$4.UNSET_INDEX && index !== 0) {
	            // If some list item was selected set first list item's tabindex to -1.
	            // Generally, tabindex is set to 0 on first list item of list that has no
	            // preselected items.
	            this.adapter.setAttributeForElementIndex(0, 'tabindex', '-1');
	        }
	        else if (this.focusedItemIndex >= 0 && this.focusedItemIndex !== index) {
	            this.adapter.setAttributeForElementIndex(this.focusedItemIndex, 'tabindex', '-1');
	        }
	        // Set the previous selection's tabindex to -1. We need this because
	        // in selection menus that are not visible, programmatically setting an
	        // option will not change focus but will change where tabindex should be 0.
	        if (!(this.selectedIndex instanceof Array) &&
	            this.selectedIndex !== index) {
	            this.adapter.setAttributeForElementIndex(this.selectedIndex, 'tabindex', '-1');
	        }
	        if (index !== numbers$4.UNSET_INDEX) {
	            this.adapter.setAttributeForElementIndex(index, 'tabindex', '0');
	        }
	    };
	    /**
	     * @return Return true if it is single selectin list, checkbox list or radio
	     *     list.
	     */
	    MDCListFoundation.prototype.isSelectableList = function () {
	        return this.isSingleSelectionList || this.isCheckboxList ||
	            this.isRadioList;
	    };
	    MDCListFoundation.prototype.setTabindexToFirstSelectedOrFocusedItem = function () {
	        var targetIndex = this.getFirstSelectedOrFocusedItemIndex();
	        this.setTabindexAtIndex(targetIndex);
	    };
	    MDCListFoundation.prototype.getFirstSelectedOrFocusedItemIndex = function () {
	        // Action lists retain focus on the most recently focused item.
	        if (!this.isSelectableList()) {
	            return Math.max(this.focusedItemIndex, 0);
	        }
	        // Single-selection lists focus the selected item.
	        if (typeof this.selectedIndex === 'number' &&
	            this.selectedIndex !== numbers$4.UNSET_INDEX) {
	            return this.selectedIndex;
	        }
	        // Multiple-selection lists focus the first selected item.
	        if (isNumberArray(this.selectedIndex) && this.selectedIndex.length > 0) {
	            return this.selectedIndex.reduce(function (minIndex, currentIndex) { return Math.min(minIndex, currentIndex); });
	        }
	        // Selection lists without a selection focus the first item.
	        return 0;
	    };
	    MDCListFoundation.prototype.isIndexValid = function (index, validateListType) {
	        var _this = this;
	        if (validateListType === void 0) { validateListType = true; }
	        if (index instanceof Array) {
	            if (!this.isCheckboxList && validateListType) {
	                throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');
	            }
	            if (index.length === 0) {
	                return true;
	            }
	            else {
	                return index.some(function (i) { return _this.isIndexInRange(i); });
	            }
	        }
	        else if (typeof index === 'number') {
	            if (this.isCheckboxList && validateListType) {
	                throw new Error("MDCListFoundation: Expected array of index for checkbox based list but got number: " + index);
	            }
	            return this.isIndexInRange(index) ||
	                this.isSingleSelectionList && index === numbers$4.UNSET_INDEX;
	        }
	        else {
	            return false;
	        }
	    };
	    MDCListFoundation.prototype.isIndexInRange = function (index) {
	        var listSize = this.adapter.getListItemCount();
	        return index >= 0 && index < listSize;
	    };
	    /**
	     * Sets selected index on user action, toggles checkboxes in checkbox lists
	     * by default, unless `isCheckboxAlreadyUpdatedInAdapter` is set to `true`.
	     *
	     * In cases where `isCheckboxAlreadyUpdatedInAdapter` is set to `true`, the
	     * UI is just updated to reflect the value returned by the adapter.
	     *
	     * When calling this, make sure user interaction does not toggle disabled
	     * list items.
	     */
	    MDCListFoundation.prototype.setSelectedIndexOnAction = function (index, isCheckboxAlreadyUpdatedInAdapter) {
	        this.lastSelectedIndex = index;
	        if (this.isCheckboxList) {
	            this.toggleCheckboxAtIndex(index, isCheckboxAlreadyUpdatedInAdapter);
	            this.adapter.notifySelectionChange([index]);
	        }
	        else {
	            this.setSelectedIndex(index, { isUserInteraction: true });
	        }
	    };
	    MDCListFoundation.prototype.toggleCheckboxAtIndex = function (index, isCheckboxAlreadyUpdatedInAdapter) {
	        var selectionAttribute = this.getSelectionAttribute();
	        var adapterIsChecked = this.adapter.isCheckboxCheckedAtIndex(index);
	        // By default the checked value from the adapter is toggled unless the
	        // checked state in the adapter has already been updated beforehand.
	        // This can be happen when the underlying native checkbox has already
	        // been updated through the native click event.
	        var newCheckedValue;
	        if (isCheckboxAlreadyUpdatedInAdapter) {
	            newCheckedValue = adapterIsChecked;
	        }
	        else {
	            newCheckedValue = !adapterIsChecked;
	            this.adapter.setCheckedCheckboxOrRadioAtIndex(index, newCheckedValue);
	        }
	        this.adapter.setAttributeForElementIndex(index, selectionAttribute, newCheckedValue ? 'true' : 'false');
	        // If none of the checkbox items are selected and selectedIndex is not
	        // initialized then provide a default value.
	        var selectedIndexes = this.selectedIndex === numbers$4.UNSET_INDEX ?
	            [] :
	            this.selectedIndex.slice();
	        if (newCheckedValue) {
	            selectedIndexes.push(index);
	        }
	        else {
	            selectedIndexes = selectedIndexes.filter(function (i) { return i !== index; });
	        }
	        this.selectedIndex = selectedIndexes;
	    };
	    MDCListFoundation.prototype.focusItemAtIndex = function (index) {
	        this.adapter.focusItemAtIndex(index);
	        this.focusedItemIndex = index;
	    };
	    MDCListFoundation.prototype.checkboxListToggleAll = function (currentlySelectedIndexes, isUserInteraction) {
	        var count = this.adapter.getListItemCount();
	        // If all items are selected, deselect everything.
	        if (currentlySelectedIndexes.length === count) {
	            this.setCheckboxAtIndex([], { isUserInteraction: isUserInteraction });
	        }
	        else {
	            // Otherwise select all enabled options.
	            var allIndexes = [];
	            for (var i = 0; i < count; i++) {
	                if (!this.isIndexDisabled(i) ||
	                    currentlySelectedIndexes.indexOf(i) > -1) {
	                    allIndexes.push(i);
	                }
	            }
	            this.setCheckboxAtIndex(allIndexes, { isUserInteraction: isUserInteraction });
	        }
	    };
	    /**
	     * Given the next desired character from the user, adds it to the typeahead
	     * buffer. Then, attempts to find the next option matching the buffer. Wraps
	     * around if at the end of options.
	     *
	     * @param nextChar The next character to add to the prefix buffer.
	     * @param startingIndex The index from which to start matching. Only relevant
	     *     when starting a new match sequence. To start a new match sequence,
	     *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer
	     *     to clear after a set interval defined in list foundation. Defaults to
	     *     the currently focused index.
	     * @return The index of the matched item, or -1 if no match.
	     */
	    MDCListFoundation.prototype.typeaheadMatchItem = function (nextChar, startingIndex, skipFocus) {
	        var _this = this;
	        if (skipFocus === void 0) { skipFocus = false; }
	        var opts = {
	            focusItemAtIndex: function (index) {
	                _this.focusItemAtIndex(index);
	            },
	            focusedItemIndex: startingIndex ? startingIndex : this.focusedItemIndex,
	            nextChar: nextChar,
	            sortedIndexByFirstChar: this.sortedIndexByFirstChar,
	            skipFocus: skipFocus,
	            isItemAtIndexDisabled: function (index) { return _this.isIndexDisabled(index); }
	        };
	        return matchItem(opts, this.typeaheadState);
	    };
	    /**
	     * Initializes the MDCListTextAndIndex data structure by indexing the current
	     * list items by primary text.
	     *
	     * @return The primary texts of all the list items sorted by first character.
	     */
	    MDCListFoundation.prototype.typeaheadInitSortedIndex = function () {
	        return initSortedIndex(this.adapter.getListItemCount(), this.adapter.getPrimaryTextAtIndex);
	    };
	    /**
	     * Clears the typeahead buffer.
	     */
	    MDCListFoundation.prototype.clearTypeaheadBuffer = function () {
	        clearBuffer(this.typeaheadState);
	    };
	    return MDCListFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCMenuSurfaceFoundation = /** @class */ (function (_super) {
	    __extends(MDCMenuSurfaceFoundation, _super);
	    function MDCMenuSurfaceFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCMenuSurfaceFoundation.defaultAdapter), adapter)) || this;
	        _this.isSurfaceOpen = false;
	        _this.isQuickOpen = false;
	        _this.isHoistedElement = false;
	        _this.isFixedPosition = false;
	        _this.isHorizontallyCenteredOnViewport = false;
	        _this.maxHeight = 0;
	        _this.openBottomBias = 0;
	        _this.openAnimationEndTimerId = 0;
	        _this.closeAnimationEndTimerId = 0;
	        _this.animationRequestId = 0;
	        _this.anchorCorner = Corner.TOP_START;
	        /**
	         * Corner of the menu surface to which menu surface is attached to anchor.
	         *
	         *  Anchor corner --->+----------+
	         *                    |  ANCHOR  |
	         *                    +----------+
	         *  Origin corner --->+--------------+
	         *                    |              |
	         *                    |              |
	         *                    | MENU SURFACE |
	         *                    |              |
	         *                    |              |
	         *                    +--------------+
	         */
	        _this.originCorner = Corner.TOP_START;
	        _this.anchorMargin = { top: 0, right: 0, bottom: 0, left: 0 };
	        _this.position = { x: 0, y: 0 };
	        return _this;
	    }
	    Object.defineProperty(MDCMenuSurfaceFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$7;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenuSurfaceFoundation, "strings", {
	        get: function () {
	            return strings$7;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenuSurfaceFoundation, "numbers", {
	        get: function () {
	            return numbers$5;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenuSurfaceFoundation, "Corner", {
	        get: function () {
	            return Corner;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenuSurfaceFoundation, "defaultAdapter", {
	        /**
	         * @see {@link MDCMenuSurfaceAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                hasAnchor: function () { return false; },
	                isElementInContainer: function () { return false; },
	                isFocused: function () { return false; },
	                isRtl: function () { return false; },
	                getInnerDimensions: function () { return ({ height: 0, width: 0 }); },
	                getAnchorDimensions: function () { return null; },
	                getWindowDimensions: function () { return ({ height: 0, width: 0 }); },
	                getBodyDimensions: function () { return ({ height: 0, width: 0 }); },
	                getWindowScroll: function () { return ({ x: 0, y: 0 }); },
	                setPosition: function () { return undefined; },
	                setMaxHeight: function () { return undefined; },
	                setTransformOrigin: function () { return undefined; },
	                saveFocus: function () { return undefined; },
	                restoreFocus: function () { return undefined; },
	                notifyClose: function () { return undefined; },
	                notifyClosing: function () { return undefined; },
	                notifyOpen: function () { return undefined; },
	                notifyOpening: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCMenuSurfaceFoundation.prototype.init = function () {
	        var _a = MDCMenuSurfaceFoundation.cssClasses, ROOT = _a.ROOT, OPEN = _a.OPEN;
	        if (!this.adapter.hasClass(ROOT)) {
	            throw new Error(ROOT + " class required in root element.");
	        }
	        if (this.adapter.hasClass(OPEN)) {
	            this.isSurfaceOpen = true;
	        }
	    };
	    MDCMenuSurfaceFoundation.prototype.destroy = function () {
	        clearTimeout(this.openAnimationEndTimerId);
	        clearTimeout(this.closeAnimationEndTimerId);
	        // Cancel any currently running animations.
	        cancelAnimationFrame(this.animationRequestId);
	    };
	    /**
	     * @param corner Default anchor corner alignment of top-left menu surface
	     *     corner.
	     */
	    MDCMenuSurfaceFoundation.prototype.setAnchorCorner = function (corner) {
	        this.anchorCorner = corner;
	    };
	    /**
	     * Flip menu corner horizontally.
	     */
	    MDCMenuSurfaceFoundation.prototype.flipCornerHorizontally = function () {
	        this.originCorner = this.originCorner ^ CornerBit.RIGHT;
	    };
	    /**
	     * @param margin Set of margin values from anchor.
	     */
	    MDCMenuSurfaceFoundation.prototype.setAnchorMargin = function (margin) {
	        this.anchorMargin.top = margin.top || 0;
	        this.anchorMargin.right = margin.right || 0;
	        this.anchorMargin.bottom = margin.bottom || 0;
	        this.anchorMargin.left = margin.left || 0;
	    };
	    /** Used to indicate if the menu-surface is hoisted to the body. */
	    MDCMenuSurfaceFoundation.prototype.setIsHoisted = function (isHoisted) {
	        this.isHoistedElement = isHoisted;
	    };
	    /**
	     * Used to set the menu-surface calculations based on a fixed position menu.
	     */
	    MDCMenuSurfaceFoundation.prototype.setFixedPosition = function (isFixedPosition) {
	        this.isFixedPosition = isFixedPosition;
	    };
	    /**
	     * @return Returns true if menu is in fixed (`position: fixed`) position.
	     */
	    MDCMenuSurfaceFoundation.prototype.isFixed = function () {
	        return this.isFixedPosition;
	    };
	    /** Sets the menu-surface position on the page. */
	    MDCMenuSurfaceFoundation.prototype.setAbsolutePosition = function (x, y) {
	        this.position.x = this.isFinite(x) ? x : 0;
	        this.position.y = this.isFinite(y) ? y : 0;
	    };
	    /** Sets whether menu-surface should be horizontally centered to viewport. */
	    MDCMenuSurfaceFoundation.prototype.setIsHorizontallyCenteredOnViewport = function (isCentered) {
	        this.isHorizontallyCenteredOnViewport = isCentered;
	    };
	    MDCMenuSurfaceFoundation.prototype.setQuickOpen = function (quickOpen) {
	        this.isQuickOpen = quickOpen;
	    };
	    /**
	     * Sets maximum menu-surface height on open.
	     * @param maxHeight The desired max-height. Set to 0 (default) to
	     *     automatically calculate max height based on available viewport space.
	     */
	    MDCMenuSurfaceFoundation.prototype.setMaxHeight = function (maxHeight) {
	        this.maxHeight = maxHeight;
	    };
	    /**
	     * Set to a positive integer to influence the menu to preferentially open
	     * below the anchor instead of above.
	     * @param bias A value of `x` simulates an extra `x` pixels of available space
	     *     below the menu during positioning calculations.
	     */
	    MDCMenuSurfaceFoundation.prototype.setOpenBottomBias = function (bias) {
	        this.openBottomBias = bias;
	    };
	    MDCMenuSurfaceFoundation.prototype.isOpen = function () {
	        return this.isSurfaceOpen;
	    };
	    /**
	     * Open the menu surface.
	     */
	    MDCMenuSurfaceFoundation.prototype.open = function () {
	        var _this = this;
	        if (this.isSurfaceOpen) {
	            return;
	        }
	        this.adapter.notifyOpening();
	        this.adapter.saveFocus();
	        if (this.isQuickOpen) {
	            this.isSurfaceOpen = true;
	            this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
	            this.dimensions = this.adapter.getInnerDimensions();
	            this.autoposition();
	            this.adapter.notifyOpen();
	        }
	        else {
	            this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);
	            this.animationRequestId = requestAnimationFrame(function () {
	                _this.dimensions = _this.adapter.getInnerDimensions();
	                _this.autoposition();
	                _this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
	                _this.openAnimationEndTimerId = setTimeout(function () {
	                    _this.openAnimationEndTimerId = 0;
	                    _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);
	                    _this.adapter.notifyOpen();
	                }, numbers$5.TRANSITION_OPEN_DURATION);
	            });
	            this.isSurfaceOpen = true;
	        }
	    };
	    /**
	     * Closes the menu surface.
	     */
	    MDCMenuSurfaceFoundation.prototype.close = function (skipRestoreFocus) {
	        var _this = this;
	        if (skipRestoreFocus === void 0) { skipRestoreFocus = false; }
	        if (!this.isSurfaceOpen) {
	            return;
	        }
	        this.adapter.notifyClosing();
	        if (this.isQuickOpen) {
	            this.isSurfaceOpen = false;
	            if (!skipRestoreFocus) {
	                this.maybeRestoreFocus();
	            }
	            this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
	            this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
	            this.adapter.notifyClose();
	            return;
	        }
	        this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);
	        requestAnimationFrame(function () {
	            _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
	            _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
	            _this.closeAnimationEndTimerId = setTimeout(function () {
	                _this.closeAnimationEndTimerId = 0;
	                _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);
	                _this.adapter.notifyClose();
	            }, numbers$5.TRANSITION_CLOSE_DURATION);
	        });
	        this.isSurfaceOpen = false;
	        if (!skipRestoreFocus) {
	            this.maybeRestoreFocus();
	        }
	    };
	    /** Handle clicks and close if not within menu-surface element. */
	    MDCMenuSurfaceFoundation.prototype.handleBodyClick = function (evt) {
	        var el = evt.target;
	        if (this.adapter.isElementInContainer(el)) {
	            return;
	        }
	        this.close();
	    };
	    /** Handle keys that close the surface. */
	    MDCMenuSurfaceFoundation.prototype.handleKeydown = function (evt) {
	        var keyCode = evt.keyCode, key = evt.key;
	        var isEscape = key === 'Escape' || keyCode === 27;
	        if (isEscape) {
	            this.close();
	        }
	    };
	    MDCMenuSurfaceFoundation.prototype.autoposition = function () {
	        var _a;
	        // Compute measurements for autoposition methods reuse.
	        this.measurements = this.getAutoLayoutmeasurements();
	        var corner = this.getoriginCorner();
	        var maxMenuSurfaceHeight = this.getMenuSurfaceMaxHeight(corner);
	        var verticalAlignment = this.hasBit(corner, CornerBit.BOTTOM) ? 'bottom' : 'top';
	        var horizontalAlignment = this.hasBit(corner, CornerBit.RIGHT) ? 'right' : 'left';
	        var horizontalOffset = this.getHorizontalOriginOffset(corner);
	        var verticalOffset = this.getVerticalOriginOffset(corner);
	        var _b = this.measurements, anchorSize = _b.anchorSize, surfaceSize = _b.surfaceSize;
	        var position = (_a = {},
	            _a[horizontalAlignment] = horizontalOffset,
	            _a[verticalAlignment] = verticalOffset,
	            _a);
	        // Center align when anchor width is comparable or greater than menu
	        // surface, otherwise keep corner.
	        if (anchorSize.width / surfaceSize.width >
	            numbers$5.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO) {
	            horizontalAlignment = 'center';
	        }
	        // If the menu-surface has been hoisted to the body, it's no longer relative
	        // to the anchor element
	        if (this.isHoistedElement || this.isFixedPosition) {
	            this.adjustPositionForHoistedElement(position);
	        }
	        this.adapter.setTransformOrigin(horizontalAlignment + " " + verticalAlignment);
	        this.adapter.setPosition(position);
	        this.adapter.setMaxHeight(maxMenuSurfaceHeight ? maxMenuSurfaceHeight + 'px' : '');
	        // If it is opened from the top then add is-open-below class
	        if (!this.hasBit(corner, CornerBit.BOTTOM)) {
	            this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
	        }
	    };
	    /**
	     * @return Measurements used to position menu surface popup.
	     */
	    MDCMenuSurfaceFoundation.prototype.getAutoLayoutmeasurements = function () {
	        var anchorRect = this.adapter.getAnchorDimensions();
	        var bodySize = this.adapter.getBodyDimensions();
	        var viewportSize = this.adapter.getWindowDimensions();
	        var windowScroll = this.adapter.getWindowScroll();
	        if (!anchorRect) {
	            // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
	            anchorRect = {
	                top: this.position.y,
	                right: this.position.x,
	                bottom: this.position.y,
	                left: this.position.x,
	                width: 0,
	                height: 0,
	            };
	            // tslint:enable:object-literal-sort-keys
	        }
	        return {
	            anchorSize: anchorRect,
	            bodySize: bodySize,
	            surfaceSize: this.dimensions,
	            viewportDistance: {
	                // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
	                top: anchorRect.top,
	                right: viewportSize.width - anchorRect.right,
	                bottom: viewportSize.height - anchorRect.bottom,
	                left: anchorRect.left,
	                // tslint:enable:object-literal-sort-keys
	            },
	            viewportSize: viewportSize,
	            windowScroll: windowScroll,
	        };
	    };
	    /**
	     * Computes the corner of the anchor from which to animate and position the
	     * menu surface.
	     *
	     * Only LEFT or RIGHT bit is used to position the menu surface ignoring RTL
	     * context. E.g., menu surface will be positioned from right side on TOP_END.
	     */
	    MDCMenuSurfaceFoundation.prototype.getoriginCorner = function () {
	        var corner = this.originCorner;
	        var _a = this.measurements, viewportDistance = _a.viewportDistance, anchorSize = _a.anchorSize, surfaceSize = _a.surfaceSize;
	        var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE;
	        var isAnchoredToBottom = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);
	        var availableTop;
	        var availableBottom;
	        if (isAnchoredToBottom) {
	            availableTop =
	                viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.bottom;
	            availableBottom =
	                viewportDistance.bottom - MARGIN_TO_EDGE - this.anchorMargin.bottom;
	        }
	        else {
	            availableTop =
	                viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.top;
	            availableBottom = viewportDistance.bottom - MARGIN_TO_EDGE +
	                anchorSize.height - this.anchorMargin.top;
	        }
	        var isAvailableBottom = availableBottom - surfaceSize.height > 0;
	        if (!isAvailableBottom &&
	            availableTop > availableBottom + this.openBottomBias) {
	            // Attach bottom side of surface to the anchor.
	            corner = this.setBit(corner, CornerBit.BOTTOM);
	        }
	        var isRtl = this.adapter.isRtl();
	        var isFlipRtl = this.hasBit(this.anchorCorner, CornerBit.FLIP_RTL);
	        var hasRightBit = this.hasBit(this.anchorCorner, CornerBit.RIGHT) ||
	            this.hasBit(corner, CornerBit.RIGHT);
	        // Whether surface attached to right side of anchor element.
	        var isAnchoredToRight = false;
	        // Anchored to start
	        if (isRtl && isFlipRtl) {
	            isAnchoredToRight = !hasRightBit;
	        }
	        else {
	            // Anchored to right
	            isAnchoredToRight = hasRightBit;
	        }
	        var availableLeft;
	        var availableRight;
	        if (isAnchoredToRight) {
	            availableLeft =
	                viewportDistance.left + anchorSize.width + this.anchorMargin.right;
	            availableRight = viewportDistance.right - this.anchorMargin.right;
	        }
	        else {
	            availableLeft = viewportDistance.left + this.anchorMargin.left;
	            availableRight =
	                viewportDistance.right + anchorSize.width - this.anchorMargin.left;
	        }
	        var isAvailableLeft = availableLeft - surfaceSize.width > 0;
	        var isAvailableRight = availableRight - surfaceSize.width > 0;
	        var isOriginCornerAlignedToEnd = this.hasBit(corner, CornerBit.FLIP_RTL) &&
	            this.hasBit(corner, CornerBit.RIGHT);
	        if (isAvailableRight && isOriginCornerAlignedToEnd && isRtl ||
	            !isAvailableLeft && isOriginCornerAlignedToEnd) {
	            // Attach left side of surface to the anchor.
	            corner = this.unsetBit(corner, CornerBit.RIGHT);
	        }
	        else if (isAvailableLeft && isAnchoredToRight && isRtl ||
	            (isAvailableLeft && !isAnchoredToRight && hasRightBit) ||
	            (!isAvailableRight && availableLeft >= availableRight)) {
	            // Attach right side of surface to the anchor.
	            corner = this.setBit(corner, CornerBit.RIGHT);
	        }
	        return corner;
	    };
	    /**
	     * @param corner Origin corner of the menu surface.
	     * @return Maximum height of the menu surface, based on available space. 0
	     *     indicates should not be set.
	     */
	    MDCMenuSurfaceFoundation.prototype.getMenuSurfaceMaxHeight = function (corner) {
	        if (this.maxHeight > 0) {
	            return this.maxHeight;
	        }
	        var viewportDistance = this.measurements.viewportDistance;
	        var maxHeight = 0;
	        var isBottomAligned = this.hasBit(corner, CornerBit.BOTTOM);
	        var isBottomAnchored = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);
	        var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE;
	        // When maximum height is not specified, it is handled from CSS.
	        if (isBottomAligned) {
	            maxHeight = viewportDistance.top + this.anchorMargin.top - MARGIN_TO_EDGE;
	            if (!isBottomAnchored) {
	                maxHeight += this.measurements.anchorSize.height;
	            }
	        }
	        else {
	            maxHeight = viewportDistance.bottom - this.anchorMargin.bottom +
	                this.measurements.anchorSize.height - MARGIN_TO_EDGE;
	            if (isBottomAnchored) {
	                maxHeight -= this.measurements.anchorSize.height;
	            }
	        }
	        return maxHeight;
	    };
	    /**
	     * @param corner Origin corner of the menu surface.
	     * @return Horizontal offset of menu surface origin corner from corresponding
	     *     anchor corner.
	     */
	    MDCMenuSurfaceFoundation.prototype.getHorizontalOriginOffset = function (corner) {
	        var anchorSize = this.measurements.anchorSize;
	        // isRightAligned corresponds to using the 'right' property on the surface.
	        var isRightAligned = this.hasBit(corner, CornerBit.RIGHT);
	        var avoidHorizontalOverlap = this.hasBit(this.anchorCorner, CornerBit.RIGHT);
	        if (isRightAligned) {
	            var rightOffset = avoidHorizontalOverlap ?
	                anchorSize.width - this.anchorMargin.left :
	                this.anchorMargin.right;
	            // For hoisted or fixed elements, adjust the offset by the difference
	            // between viewport width and body width so when we calculate the right
	            // value (`adjustPositionForHoistedElement`) based on the element
	            // position, the right property is correct.
	            if (this.isHoistedElement || this.isFixedPosition) {
	                return rightOffset -
	                    (this.measurements.viewportSize.width -
	                        this.measurements.bodySize.width);
	            }
	            return rightOffset;
	        }
	        return avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin.right :
	            this.anchorMargin.left;
	    };
	    /**
	     * @param corner Origin corner of the menu surface.
	     * @return Vertical offset of menu surface origin corner from corresponding
	     *     anchor corner.
	     */
	    MDCMenuSurfaceFoundation.prototype.getVerticalOriginOffset = function (corner) {
	        var anchorSize = this.measurements.anchorSize;
	        var isBottomAligned = this.hasBit(corner, CornerBit.BOTTOM);
	        var avoidVerticalOverlap = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);
	        var y = 0;
	        if (isBottomAligned) {
	            y = avoidVerticalOverlap ? anchorSize.height - this.anchorMargin.top :
	                -this.anchorMargin.bottom;
	        }
	        else {
	            y = avoidVerticalOverlap ?
	                (anchorSize.height + this.anchorMargin.bottom) :
	                this.anchorMargin.top;
	        }
	        return y;
	    };
	    /**
	     * Calculates the offsets for positioning the menu-surface when the
	     * menu-surface has been hoisted to the body.
	     */
	    MDCMenuSurfaceFoundation.prototype.adjustPositionForHoistedElement = function (position) {
	        var e_1, _a;
	        var _b = this.measurements, windowScroll = _b.windowScroll, viewportDistance = _b.viewportDistance, surfaceSize = _b.surfaceSize, viewportSize = _b.viewportSize;
	        var props = Object.keys(position);
	        try {
	            for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
	                var prop = props_1_1.value;
	                var value = position[prop] || 0;
	                if (this.isHorizontallyCenteredOnViewport &&
	                    (prop === 'left' || prop === 'right')) {
	                    position[prop] = (viewportSize.width - surfaceSize.width) / 2;
	                    continue;
	                }
	                // Hoisted surfaces need to have the anchor elements location on the page
	                // added to the position properties for proper alignment on the body.
	                value += viewportDistance[prop];
	                // Surfaces that are absolutely positioned need to have additional
	                // calculations for scroll and bottom positioning.
	                if (!this.isFixedPosition) {
	                    if (prop === 'top') {
	                        value += windowScroll.y;
	                    }
	                    else if (prop === 'bottom') {
	                        value -= windowScroll.y;
	                    }
	                    else if (prop === 'left') {
	                        value += windowScroll.x;
	                    }
	                    else { // prop === 'right'
	                        value -= windowScroll.x;
	                    }
	                }
	                position[prop] = value;
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    /**
	     * The last focused element when the menu surface was opened should regain
	     * focus, if the user is focused on or within the menu surface when it is
	     * closed.
	     */
	    MDCMenuSurfaceFoundation.prototype.maybeRestoreFocus = function () {
	        var _this = this;
	        var isRootFocused = this.adapter.isFocused();
	        var ownerDocument = this.adapter.getOwnerDocument ?
	            this.adapter.getOwnerDocument() :
	            document;
	        var childHasFocus = ownerDocument.activeElement &&
	            this.adapter.isElementInContainer(ownerDocument.activeElement);
	        if (isRootFocused || childHasFocus) {
	            // Wait before restoring focus when closing the menu surface. This is
	            // important because if a touch event triggered the menu close, and the
	            // subsequent mouse event occurs after focus is restored, then the
	            // restored focus would be lost.
	            setTimeout(function () {
	                _this.adapter.restoreFocus();
	            }, numbers$5.TOUCH_EVENT_WAIT_MS);
	        }
	    };
	    MDCMenuSurfaceFoundation.prototype.hasBit = function (corner, bit) {
	        return Boolean(corner & bit); // tslint:disable-line:no-bitwise
	    };
	    MDCMenuSurfaceFoundation.prototype.setBit = function (corner, bit) {
	        return corner | bit; // tslint:disable-line:no-bitwise
	    };
	    MDCMenuSurfaceFoundation.prototype.unsetBit = function (corner, bit) {
	        return corner ^ bit;
	    };
	    /**
	     * isFinite that doesn't force conversion to number type.
	     * Equivalent to Number.isFinite in ES2015, which is not supported in IE.
	     */
	    MDCMenuSurfaceFoundation.prototype.isFinite = function (num) {
	        return typeof num === 'number' && isFinite(num);
	    };
	    return MDCMenuSurfaceFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$5 = {
	    MENU_SELECTED_LIST_ITEM: 'mdc-menu-item--selected',
	    MENU_SELECTION_GROUP: 'mdc-menu__selection-group',
	    ROOT: 'mdc-menu',
	};
	var strings$5 = {
	    ARIA_CHECKED_ATTR: 'aria-checked',
	    ARIA_DISABLED_ATTR: 'aria-disabled',
	    CHECKBOX_SELECTOR: 'input[type="checkbox"]',
	    LIST_SELECTOR: '.mdc-list,.mdc-deprecated-list',
	    SELECTED_EVENT: 'MDCMenu:selected',
	    SKIP_RESTORE_FOCUS: 'data-menu-item-skip-restore-focus',
	};
	var numbers$3 = {
	    FOCUS_ROOT_INDEX: -1,
	};
	var DefaultFocusState;
	(function (DefaultFocusState) {
	    DefaultFocusState[DefaultFocusState["NONE"] = 0] = "NONE";
	    DefaultFocusState[DefaultFocusState["LIST_ROOT"] = 1] = "LIST_ROOT";
	    DefaultFocusState[DefaultFocusState["FIRST_ITEM"] = 2] = "FIRST_ITEM";
	    DefaultFocusState[DefaultFocusState["LAST_ITEM"] = 3] = "LAST_ITEM";
	})(DefaultFocusState || (DefaultFocusState = {}));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCMenuFoundation = /** @class */ (function (_super) {
	    __extends(MDCMenuFoundation, _super);
	    function MDCMenuFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCMenuFoundation.defaultAdapter), adapter)) || this;
	        _this.closeAnimationEndTimerId = 0;
	        _this.defaultFocusState = DefaultFocusState.LIST_ROOT;
	        _this.selectedIndex = -1;
	        return _this;
	    }
	    Object.defineProperty(MDCMenuFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$5;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenuFoundation, "strings", {
	        get: function () {
	            return strings$5;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenuFoundation, "numbers", {
	        get: function () {
	            return numbers$3;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenuFoundation, "defaultAdapter", {
	        /**
	         * @see {@link MDCMenuAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClassToElementAtIndex: function () { return undefined; },
	                removeClassFromElementAtIndex: function () { return undefined; },
	                addAttributeToElementAtIndex: function () { return undefined; },
	                removeAttributeFromElementAtIndex: function () { return undefined; },
	                getAttributeFromElementAtIndex: function () { return null; },
	                elementContainsClass: function () { return false; },
	                closeSurface: function () { return undefined; },
	                getElementIndex: function () { return -1; },
	                notifySelected: function () { return undefined; },
	                getMenuItemCount: function () { return 0; },
	                focusItemAtIndex: function () { return undefined; },
	                focusListRoot: function () { return undefined; },
	                getSelectedSiblingOfItemAtIndex: function () { return -1; },
	                isSelectableItemAtIndex: function () { return false; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCMenuFoundation.prototype.destroy = function () {
	        if (this.closeAnimationEndTimerId) {
	            clearTimeout(this.closeAnimationEndTimerId);
	        }
	        this.adapter.closeSurface();
	    };
	    MDCMenuFoundation.prototype.handleKeydown = function (evt) {
	        var key = evt.key, keyCode = evt.keyCode;
	        var isTab = key === 'Tab' || keyCode === 9;
	        if (isTab) {
	            this.adapter.closeSurface(/** skipRestoreFocus */ true);
	        }
	    };
	    MDCMenuFoundation.prototype.handleItemAction = function (listItem) {
	        var _this = this;
	        var index = this.adapter.getElementIndex(listItem);
	        if (index < 0) {
	            return;
	        }
	        this.adapter.notifySelected({ index: index });
	        var skipRestoreFocus = this.adapter.getAttributeFromElementAtIndex(index, strings$5.SKIP_RESTORE_FOCUS) === 'true';
	        this.adapter.closeSurface(skipRestoreFocus);
	        // Wait for the menu to close before adding/removing classes that affect styles.
	        this.closeAnimationEndTimerId = setTimeout(function () {
	            // Recompute the index in case the menu contents have changed.
	            var recomputedIndex = _this.adapter.getElementIndex(listItem);
	            if (recomputedIndex >= 0 &&
	                _this.adapter.isSelectableItemAtIndex(recomputedIndex)) {
	                _this.setSelectedIndex(recomputedIndex);
	            }
	        }, MDCMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);
	    };
	    MDCMenuFoundation.prototype.handleMenuSurfaceOpened = function () {
	        switch (this.defaultFocusState) {
	            case DefaultFocusState.FIRST_ITEM:
	                this.adapter.focusItemAtIndex(0);
	                break;
	            case DefaultFocusState.LAST_ITEM:
	                this.adapter.focusItemAtIndex(this.adapter.getMenuItemCount() - 1);
	                break;
	            case DefaultFocusState.NONE:
	                // Do nothing.
	                break;
	            default:
	                this.adapter.focusListRoot();
	                break;
	        }
	    };
	    /**
	     * Sets default focus state where the menu should focus every time when menu
	     * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by
	     * default.
	     */
	    MDCMenuFoundation.prototype.setDefaultFocusState = function (focusState) {
	        this.defaultFocusState = focusState;
	    };
	    /** @return Index of the currently selected list item within the menu. */
	    MDCMenuFoundation.prototype.getSelectedIndex = function () {
	        return this.selectedIndex;
	    };
	    /**
	     * Selects the list item at `index` within the menu.
	     * @param index Index of list item within the menu.
	     */
	    MDCMenuFoundation.prototype.setSelectedIndex = function (index) {
	        this.validatedIndex(index);
	        if (!this.adapter.isSelectableItemAtIndex(index)) {
	            throw new Error('MDCMenuFoundation: No selection group at specified index.');
	        }
	        var prevSelectedIndex = this.adapter.getSelectedSiblingOfItemAtIndex(index);
	        if (prevSelectedIndex >= 0) {
	            this.adapter.removeAttributeFromElementAtIndex(prevSelectedIndex, strings$5.ARIA_CHECKED_ATTR);
	            this.adapter.removeClassFromElementAtIndex(prevSelectedIndex, cssClasses$5.MENU_SELECTED_LIST_ITEM);
	        }
	        this.adapter.addClassToElementAtIndex(index, cssClasses$5.MENU_SELECTED_LIST_ITEM);
	        this.adapter.addAttributeToElementAtIndex(index, strings$5.ARIA_CHECKED_ATTR, 'true');
	        this.selectedIndex = index;
	    };
	    /**
	     * Sets the enabled state to isEnabled for the menu item at the given index.
	     * @param index Index of the menu item
	     * @param isEnabled The desired enabled state of the menu item.
	     */
	    MDCMenuFoundation.prototype.setEnabled = function (index, isEnabled) {
	        this.validatedIndex(index);
	        if (isEnabled) {
	            this.adapter.removeClassFromElementAtIndex(index, cssClasses$6.LIST_ITEM_DISABLED_CLASS);
	            this.adapter.addAttributeToElementAtIndex(index, strings$5.ARIA_DISABLED_ATTR, 'false');
	        }
	        else {
	            this.adapter.addClassToElementAtIndex(index, cssClasses$6.LIST_ITEM_DISABLED_CLASS);
	            this.adapter.addAttributeToElementAtIndex(index, strings$5.ARIA_DISABLED_ATTR, 'true');
	        }
	    };
	    MDCMenuFoundation.prototype.validatedIndex = function (index) {
	        var menuSize = this.adapter.getMenuItemCount();
	        var isIndexInRange = index >= 0 && index < menuSize;
	        if (!isIndexInRange) {
	            throw new Error('MDCMenuFoundation: No list item at specified index.');
	        }
	    };
	    return MDCMenuFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$4 = {
	    NOTCH_ELEMENT_SELECTOR: '.mdc-notched-outline__notch',
	};
	var numbers$2 = {
	    // This should stay in sync with $mdc-notched-outline-padding * 2.
	    NOTCH_ELEMENT_PADDING: 8,
	};
	var cssClasses$4 = {
	    NO_LABEL: 'mdc-notched-outline--no-label',
	    OUTLINE_NOTCHED: 'mdc-notched-outline--notched',
	    OUTLINE_UPGRADED: 'mdc-notched-outline--upgraded',
	};

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCNotchedOutlineFoundation = /** @class */ (function (_super) {
	    __extends(MDCNotchedOutlineFoundation, _super);
	    function MDCNotchedOutlineFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCNotchedOutlineFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCNotchedOutlineFoundation, "strings", {
	        get: function () {
	            return strings$4;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCNotchedOutlineFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$4;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCNotchedOutlineFoundation, "numbers", {
	        get: function () {
	            return numbers$2;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCNotchedOutlineFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCNotchedOutlineAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                setNotchWidthProperty: function () { return undefined; },
	                removeNotchWidthProperty: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Adds the outline notched selector and updates the notch width calculated based off of notchWidth.
	     */
	    MDCNotchedOutlineFoundation.prototype.notch = function (notchWidth) {
	        var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
	        if (notchWidth > 0) {
	            notchWidth += numbers$2.NOTCH_ELEMENT_PADDING; // Add padding from left/right.
	        }
	        this.adapter.setNotchWidthProperty(notchWidth);
	        this.adapter.addClass(OUTLINE_NOTCHED);
	    };
	    /**
	     * Removes notched outline selector to close the notch in the outline.
	     */
	    MDCNotchedOutlineFoundation.prototype.closeNotch = function () {
	        var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
	        this.adapter.removeClass(OUTLINE_NOTCHED);
	        this.adapter.removeNotchWidthProperty();
	    };
	    return MDCNotchedOutlineFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$3 = {
	    ACTIVATED: 'mdc-select--activated',
	    DISABLED: 'mdc-select--disabled',
	    FOCUSED: 'mdc-select--focused',
	    INVALID: 'mdc-select--invalid',
	    MENU_INVALID: 'mdc-select__menu--invalid',
	    OUTLINED: 'mdc-select--outlined',
	    REQUIRED: 'mdc-select--required',
	    ROOT: 'mdc-select',
	    WITH_LEADING_ICON: 'mdc-select--with-leading-icon',
	};
	var strings$3 = {
	    ARIA_CONTROLS: 'aria-controls',
	    ARIA_DESCRIBEDBY: 'aria-describedby',
	    ARIA_SELECTED_ATTR: 'aria-selected',
	    CHANGE_EVENT: 'MDCSelect:change',
	    HIDDEN_INPUT_SELECTOR: 'input[type="hidden"]',
	    LABEL_SELECTOR: '.mdc-floating-label',
	    LEADING_ICON_SELECTOR: '.mdc-select__icon',
	    LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
	    MENU_SELECTOR: '.mdc-select__menu',
	    OUTLINE_SELECTOR: '.mdc-notched-outline',
	    SELECTED_TEXT_SELECTOR: '.mdc-select__selected-text',
	    SELECT_ANCHOR_SELECTOR: '.mdc-select__anchor',
	    VALUE_ATTR: 'data-value',
	};
	var numbers$1 = {
	    LABEL_SCALE: 0.75,
	    UNSET_INDEX: -1,
	    CLICK_DEBOUNCE_TIMEOUT_MS: 330,
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCSelectFoundation = /** @class */ (function (_super) {
	    __extends(MDCSelectFoundation, _super);
	    /* istanbul ignore next: optional argument is not a branch statement */
	    /**
	     * @param adapter
	     * @param foundationMap Map from subcomponent names to their subfoundations.
	     */
	    function MDCSelectFoundation(adapter, foundationMap) {
	        if (foundationMap === void 0) { foundationMap = {}; }
	        var _this = _super.call(this, __assign(__assign({}, MDCSelectFoundation.defaultAdapter), adapter)) || this;
	        // Disabled state
	        _this.disabled = false;
	        // isMenuOpen is used to track the state of the menu by listening to the
	        // MDCMenuSurface:closed event For reference, menu.open will return false if
	        // the menu is still closing, but isMenuOpen returns false only after the menu
	        // has closed
	        _this.isMenuOpen = false;
	        // By default, select is invalid if it is required but no value is selected.
	        _this.useDefaultValidation = true;
	        _this.customValidity = true;
	        _this.lastSelectedIndex = numbers$1.UNSET_INDEX;
	        _this.clickDebounceTimeout = 0;
	        _this.recentlyClicked = false;
	        _this.leadingIcon = foundationMap.leadingIcon;
	        _this.helperText = foundationMap.helperText;
	        return _this;
	    }
	    Object.defineProperty(MDCSelectFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$3;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelectFoundation, "numbers", {
	        get: function () {
	            return numbers$1;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelectFoundation, "strings", {
	        get: function () {
	            return strings$3;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelectFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCSelectAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                activateBottomLine: function () { return undefined; },
	                deactivateBottomLine: function () { return undefined; },
	                getSelectedIndex: function () { return -1; },
	                setSelectedIndex: function () { return undefined; },
	                hasLabel: function () { return false; },
	                floatLabel: function () { return undefined; },
	                getLabelWidth: function () { return 0; },
	                setLabelRequired: function () { return undefined; },
	                hasOutline: function () { return false; },
	                notchOutline: function () { return undefined; },
	                closeOutline: function () { return undefined; },
	                setRippleCenter: function () { return undefined; },
	                notifyChange: function () { return undefined; },
	                setSelectedText: function () { return undefined; },
	                isSelectAnchorFocused: function () { return false; },
	                getSelectAnchorAttr: function () { return ''; },
	                setSelectAnchorAttr: function () { return undefined; },
	                removeSelectAnchorAttr: function () { return undefined; },
	                addMenuClass: function () { return undefined; },
	                removeMenuClass: function () { return undefined; },
	                openMenu: function () { return undefined; },
	                closeMenu: function () { return undefined; },
	                getAnchorElement: function () { return null; },
	                setMenuAnchorElement: function () { return undefined; },
	                setMenuAnchorCorner: function () { return undefined; },
	                setMenuWrapFocus: function () { return undefined; },
	                focusMenuItemAtIndex: function () { return undefined; },
	                getMenuItemCount: function () { return 0; },
	                getMenuItemValues: function () { return []; },
	                getMenuItemTextAtIndex: function () { return ''; },
	                isTypeaheadInProgress: function () { return false; },
	                typeaheadMatchItem: function () { return -1; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /** Returns the index of the currently selected menu item, or -1 if none. */
	    MDCSelectFoundation.prototype.getSelectedIndex = function () {
	        return this.adapter.getSelectedIndex();
	    };
	    MDCSelectFoundation.prototype.setSelectedIndex = function (index, closeMenu, skipNotify) {
	        if (closeMenu === void 0) { closeMenu = false; }
	        if (skipNotify === void 0) { skipNotify = false; }
	        if (index >= this.adapter.getMenuItemCount()) {
	            return;
	        }
	        if (index === numbers$1.UNSET_INDEX) {
	            this.adapter.setSelectedText('');
	        }
	        else {
	            this.adapter.setSelectedText(this.adapter.getMenuItemTextAtIndex(index).trim());
	        }
	        this.adapter.setSelectedIndex(index);
	        if (closeMenu) {
	            this.adapter.closeMenu();
	        }
	        if (!skipNotify && this.lastSelectedIndex !== index) {
	            this.handleChange();
	        }
	        this.lastSelectedIndex = index;
	    };
	    MDCSelectFoundation.prototype.setValue = function (value, skipNotify) {
	        if (skipNotify === void 0) { skipNotify = false; }
	        var index = this.adapter.getMenuItemValues().indexOf(value);
	        this.setSelectedIndex(index, /** closeMenu */ false, skipNotify);
	    };
	    MDCSelectFoundation.prototype.getValue = function () {
	        var index = this.adapter.getSelectedIndex();
	        var menuItemValues = this.adapter.getMenuItemValues();
	        return index !== numbers$1.UNSET_INDEX ? menuItemValues[index] : '';
	    };
	    MDCSelectFoundation.prototype.getDisabled = function () {
	        return this.disabled;
	    };
	    MDCSelectFoundation.prototype.setDisabled = function (isDisabled) {
	        this.disabled = isDisabled;
	        if (this.disabled) {
	            this.adapter.addClass(cssClasses$3.DISABLED);
	            this.adapter.closeMenu();
	        }
	        else {
	            this.adapter.removeClass(cssClasses$3.DISABLED);
	        }
	        if (this.leadingIcon) {
	            this.leadingIcon.setDisabled(this.disabled);
	        }
	        if (this.disabled) {
	            // Prevent click events from focusing select. Simply pointer-events: none
	            // is not enough since screenreader clicks may bypass this.
	            this.adapter.removeSelectAnchorAttr('tabindex');
	        }
	        else {
	            this.adapter.setSelectAnchorAttr('tabindex', '0');
	        }
	        this.adapter.setSelectAnchorAttr('aria-disabled', this.disabled.toString());
	    };
	    /** Opens the menu. */
	    MDCSelectFoundation.prototype.openMenu = function () {
	        this.adapter.addClass(cssClasses$3.ACTIVATED);
	        this.adapter.openMenu();
	        this.isMenuOpen = true;
	        this.adapter.setSelectAnchorAttr('aria-expanded', 'true');
	    };
	    /**
	     * @param content Sets the content of the helper text.
	     */
	    MDCSelectFoundation.prototype.setHelperTextContent = function (content) {
	        if (this.helperText) {
	            this.helperText.setContent(content);
	        }
	    };
	    /**
	     * Re-calculates if the notched outline should be notched and if the label
	     * should float.
	     */
	    MDCSelectFoundation.prototype.layout = function () {
	        if (this.adapter.hasLabel()) {
	            var optionHasValue = this.getValue().length > 0;
	            var isFocused = this.adapter.hasClass(cssClasses$3.FOCUSED);
	            var shouldFloatAndNotch = optionHasValue || isFocused;
	            var isRequired = this.adapter.hasClass(cssClasses$3.REQUIRED);
	            this.notchOutline(shouldFloatAndNotch);
	            this.adapter.floatLabel(shouldFloatAndNotch);
	            this.adapter.setLabelRequired(isRequired);
	        }
	    };
	    /**
	     * Synchronizes the list of options with the state of the foundation. Call
	     * this whenever menu options are dynamically updated.
	     */
	    MDCSelectFoundation.prototype.layoutOptions = function () {
	        var menuItemValues = this.adapter.getMenuItemValues();
	        var selectedIndex = menuItemValues.indexOf(this.getValue());
	        this.setSelectedIndex(selectedIndex, /** closeMenu */ false, /** skipNotify */ true);
	    };
	    MDCSelectFoundation.prototype.handleMenuOpened = function () {
	        if (this.adapter.getMenuItemValues().length === 0) {
	            return;
	        }
	        // Menu should open to the last selected element, should open to first menu item otherwise.
	        var selectedIndex = this.getSelectedIndex();
	        var focusItemIndex = selectedIndex >= 0 ? selectedIndex : 0;
	        this.adapter.focusMenuItemAtIndex(focusItemIndex);
	    };
	    MDCSelectFoundation.prototype.handleMenuClosing = function () {
	        this.adapter.setSelectAnchorAttr('aria-expanded', 'false');
	    };
	    MDCSelectFoundation.prototype.handleMenuClosed = function () {
	        this.adapter.removeClass(cssClasses$3.ACTIVATED);
	        this.isMenuOpen = false;
	        // Unfocus the select if menu is closed without a selection
	        if (!this.adapter.isSelectAnchorFocused()) {
	            this.blur();
	        }
	    };
	    /**
	     * Handles value changes, via change event or programmatic updates.
	     */
	    MDCSelectFoundation.prototype.handleChange = function () {
	        this.layout();
	        this.adapter.notifyChange(this.getValue());
	        var isRequired = this.adapter.hasClass(cssClasses$3.REQUIRED);
	        if (isRequired && this.useDefaultValidation) {
	            this.setValid(this.isValid());
	        }
	    };
	    MDCSelectFoundation.prototype.handleMenuItemAction = function (index) {
	        this.setSelectedIndex(index, /** closeMenu */ true);
	    };
	    /**
	     * Handles focus events from select element.
	     */
	    MDCSelectFoundation.prototype.handleFocus = function () {
	        this.adapter.addClass(cssClasses$3.FOCUSED);
	        this.layout();
	        this.adapter.activateBottomLine();
	    };
	    /**
	     * Handles blur events from select element.
	     */
	    MDCSelectFoundation.prototype.handleBlur = function () {
	        if (this.isMenuOpen) {
	            return;
	        }
	        this.blur();
	    };
	    MDCSelectFoundation.prototype.handleClick = function (normalizedX) {
	        if (this.disabled || this.recentlyClicked) {
	            return;
	        }
	        this.setClickDebounceTimeout();
	        if (this.isMenuOpen) {
	            this.adapter.closeMenu();
	            return;
	        }
	        this.adapter.setRippleCenter(normalizedX);
	        this.openMenu();
	    };
	    /**
	     * Handles keydown events on select element. Depending on the type of
	     * character typed, does typeahead matching or opens menu.
	     */
	    MDCSelectFoundation.prototype.handleKeydown = function (event) {
	        if (this.isMenuOpen || !this.adapter.hasClass(cssClasses$3.FOCUSED)) {
	            return;
	        }
	        var isEnter = normalizeKey(event) === KEY.ENTER;
	        var isSpace = normalizeKey(event) === KEY.SPACEBAR;
	        var arrowUp = normalizeKey(event) === KEY.ARROW_UP;
	        var arrowDown = normalizeKey(event) === KEY.ARROW_DOWN;
	        var isModifier = event.ctrlKey || event.metaKey;
	        // Typeahead
	        if (!isModifier &&
	            (!isSpace && event.key && event.key.length === 1 ||
	                isSpace && this.adapter.isTypeaheadInProgress())) {
	            var key = isSpace ? ' ' : event.key;
	            var typeaheadNextIndex = this.adapter.typeaheadMatchItem(key, this.getSelectedIndex());
	            if (typeaheadNextIndex >= 0) {
	                this.setSelectedIndex(typeaheadNextIndex);
	            }
	            event.preventDefault();
	            return;
	        }
	        if (!isEnter && !isSpace && !arrowUp && !arrowDown) {
	            return;
	        }
	        this.openMenu();
	        event.preventDefault();
	    };
	    /**
	     * Opens/closes the notched outline.
	     */
	    MDCSelectFoundation.prototype.notchOutline = function (openNotch) {
	        if (!this.adapter.hasOutline()) {
	            return;
	        }
	        var isFocused = this.adapter.hasClass(cssClasses$3.FOCUSED);
	        if (openNotch) {
	            var labelScale = numbers$1.LABEL_SCALE;
	            var labelWidth = this.adapter.getLabelWidth() * labelScale;
	            this.adapter.notchOutline(labelWidth);
	        }
	        else if (!isFocused) {
	            this.adapter.closeOutline();
	        }
	    };
	    /**
	     * Sets the aria label of the leading icon.
	     */
	    MDCSelectFoundation.prototype.setLeadingIconAriaLabel = function (label) {
	        if (this.leadingIcon) {
	            this.leadingIcon.setAriaLabel(label);
	        }
	    };
	    /**
	     * Sets the text content of the leading icon.
	     */
	    MDCSelectFoundation.prototype.setLeadingIconContent = function (content) {
	        if (this.leadingIcon) {
	            this.leadingIcon.setContent(content);
	        }
	    };
	    MDCSelectFoundation.prototype.getUseDefaultValidation = function () {
	        return this.useDefaultValidation;
	    };
	    MDCSelectFoundation.prototype.setUseDefaultValidation = function (useDefaultValidation) {
	        this.useDefaultValidation = useDefaultValidation;
	    };
	    MDCSelectFoundation.prototype.setValid = function (isValid) {
	        if (!this.useDefaultValidation) {
	            this.customValidity = isValid;
	        }
	        this.adapter.setSelectAnchorAttr('aria-invalid', (!isValid).toString());
	        if (isValid) {
	            this.adapter.removeClass(cssClasses$3.INVALID);
	            this.adapter.removeMenuClass(cssClasses$3.MENU_INVALID);
	        }
	        else {
	            this.adapter.addClass(cssClasses$3.INVALID);
	            this.adapter.addMenuClass(cssClasses$3.MENU_INVALID);
	        }
	        this.syncHelperTextValidity(isValid);
	    };
	    MDCSelectFoundation.prototype.isValid = function () {
	        if (this.useDefaultValidation &&
	            this.adapter.hasClass(cssClasses$3.REQUIRED) &&
	            !this.adapter.hasClass(cssClasses$3.DISABLED)) {
	            // See notes for required attribute under https://www.w3.org/TR/html52/sec-forms.html#the-select-element
	            // TL;DR: Invalid if no index is selected, or if the first index is selected and has an empty value.
	            return this.getSelectedIndex() !== numbers$1.UNSET_INDEX &&
	                (this.getSelectedIndex() !== 0 || Boolean(this.getValue()));
	        }
	        return this.customValidity;
	    };
	    MDCSelectFoundation.prototype.setRequired = function (isRequired) {
	        if (isRequired) {
	            this.adapter.addClass(cssClasses$3.REQUIRED);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$3.REQUIRED);
	        }
	        this.adapter.setSelectAnchorAttr('aria-required', isRequired.toString());
	        this.adapter.setLabelRequired(isRequired);
	    };
	    MDCSelectFoundation.prototype.getRequired = function () {
	        return this.adapter.getSelectAnchorAttr('aria-required') === 'true';
	    };
	    MDCSelectFoundation.prototype.init = function () {
	        var anchorEl = this.adapter.getAnchorElement();
	        if (anchorEl) {
	            this.adapter.setMenuAnchorElement(anchorEl);
	            this.adapter.setMenuAnchorCorner(Corner.BOTTOM_START);
	        }
	        this.adapter.setMenuWrapFocus(false);
	        this.setDisabled(this.adapter.hasClass(cssClasses$3.DISABLED));
	        this.syncHelperTextValidity(!this.adapter.hasClass(cssClasses$3.INVALID));
	        this.layout();
	        this.layoutOptions();
	    };
	    /**
	     * Unfocuses the select component.
	     */
	    MDCSelectFoundation.prototype.blur = function () {
	        this.adapter.removeClass(cssClasses$3.FOCUSED);
	        this.layout();
	        this.adapter.deactivateBottomLine();
	        var isRequired = this.adapter.hasClass(cssClasses$3.REQUIRED);
	        if (isRequired && this.useDefaultValidation) {
	            this.setValid(this.isValid());
	        }
	    };
	    MDCSelectFoundation.prototype.syncHelperTextValidity = function (isValid) {
	        if (!this.helperText) {
	            return;
	        }
	        this.helperText.setValidity(isValid);
	        var helperTextVisible = this.helperText.isVisible();
	        var helperTextId = this.helperText.getId();
	        if (helperTextVisible && helperTextId) {
	            this.adapter.setSelectAnchorAttr(strings$3.ARIA_DESCRIBEDBY, helperTextId);
	        }
	        else {
	            // Needed because screenreaders will read labels pointed to by
	            // `aria-describedby` even if they are `aria-hidden`.
	            this.adapter.removeSelectAnchorAttr(strings$3.ARIA_DESCRIBEDBY);
	        }
	    };
	    MDCSelectFoundation.prototype.setClickDebounceTimeout = function () {
	        var _this = this;
	        clearTimeout(this.clickDebounceTimeout);
	        this.clickDebounceTimeout = setTimeout(function () {
	            _this.recentlyClicked = false;
	        }, numbers$1.CLICK_DEBOUNCE_TIMEOUT_MS);
	        this.recentlyClicked = true;
	    };
	    return MDCSelectFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$2 = {
	    ARIA_HIDDEN: 'aria-hidden',
	    ROLE: 'role',
	};
	var cssClasses$2 = {
	    HELPER_TEXT_VALIDATION_MSG: 'mdc-select-helper-text--validation-msg',
	    HELPER_TEXT_VALIDATION_MSG_PERSISTENT: 'mdc-select-helper-text--validation-msg-persistent',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCSelectHelperTextFoundation = /** @class */ (function (_super) {
	    __extends(MDCSelectHelperTextFoundation, _super);
	    function MDCSelectHelperTextFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCSelectHelperTextFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCSelectHelperTextFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$2;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelectHelperTextFoundation, "strings", {
	        get: function () {
	            return strings$2;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelectHelperTextFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCSelectHelperTextAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                setAttr: function () { return undefined; },
	                getAttr: function () { return null; },
	                removeAttr: function () { return undefined; },
	                setContent: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * @return The ID of the helper text, or null if none is set.
	     */
	    MDCSelectHelperTextFoundation.prototype.getId = function () {
	        return this.adapter.getAttr('id');
	    };
	    /**
	     * @return Whether the helper text is currently visible.
	     */
	    MDCSelectHelperTextFoundation.prototype.isVisible = function () {
	        return this.adapter.getAttr(strings$2.ARIA_HIDDEN) !== 'true';
	    };
	    /**
	     * Sets the content of the helper text field.
	     */
	    MDCSelectHelperTextFoundation.prototype.setContent = function (content) {
	        this.adapter.setContent(content);
	    };
	    /**
	     * Sets the helper text to act as a validation message.
	     * By default, validation messages are hidden when the select is valid and
	     * visible when the select is invalid.
	     *
	     * @param isValidation True to make the helper text act as an error validation
	     *     message.
	     */
	    MDCSelectHelperTextFoundation.prototype.setValidation = function (isValidation) {
	        if (isValidation) {
	            this.adapter.addClass(cssClasses$2.HELPER_TEXT_VALIDATION_MSG);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$2.HELPER_TEXT_VALIDATION_MSG);
	        }
	    };
	    /**
	     * Sets the persistency of the validation helper text.
	     * This keeps the validation message visible even if the select is valid,
	     * though it will be displayed in the normal (grey) color.
	     */
	    MDCSelectHelperTextFoundation.prototype.setValidationMsgPersistent = function (isPersistent) {
	        if (isPersistent) {
	            this.adapter.addClass(cssClasses$2.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$2.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
	        }
	    };
	    /**
	     * @return Whether the helper text acts as a validation message.
	     * By default, validation messages are hidden when the select is valid and
	     * visible when the select is invalid.
	     */
	    MDCSelectHelperTextFoundation.prototype.getIsValidation = function () {
	        return this.adapter.hasClass(cssClasses$2.HELPER_TEXT_VALIDATION_MSG);
	    };
	    /**
	     * @return Whether the validation helper text persists even if the input is
	     * valid. If it is, it will be displayed in the normal (grey) color.
	     */
	    MDCSelectHelperTextFoundation.prototype.getIsValidationMsgPersistent = function () {
	        return this.adapter.hasClass(cssClasses$2.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
	    };
	    /**
	     * When acting as a validation message, shows/hides the helper text and
	     * triggers alerts as necessary based on the select's validity.
	     */
	    MDCSelectHelperTextFoundation.prototype.setValidity = function (selectIsValid) {
	        var isValidationMsg = this.adapter.hasClass(cssClasses$2.HELPER_TEXT_VALIDATION_MSG);
	        if (!isValidationMsg) {
	            // Non-validating helper-text is always displayed and does not participate
	            // in validation logic.
	            return;
	        }
	        var isPersistentValidationMsg = this.adapter.hasClass(cssClasses$2.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
	        // Validating helper text is displayed if select is invalid, unless it is
	        // set as persistent, in which case it always displays.
	        var msgShouldDisplay = !selectIsValid || isPersistentValidationMsg;
	        if (msgShouldDisplay) {
	            this.showToScreenReader();
	            // In addition to displaying, also trigger an alert if the select
	            // has become invalid.
	            if (!selectIsValid) {
	                this.adapter.setAttr(strings$2.ROLE, 'alert');
	            }
	            else {
	                this.adapter.removeAttr(strings$2.ROLE);
	            }
	            return;
	        }
	        // Hide everything.
	        this.adapter.removeAttr(strings$2.ROLE);
	        this.hide();
	    };
	    /**
	     * Makes the helper text visible to screen readers.
	     */
	    MDCSelectHelperTextFoundation.prototype.showToScreenReader = function () {
	        this.adapter.removeAttr(strings$2.ARIA_HIDDEN);
	    };
	    /**
	     * Hides the help text from screen readers.
	     */
	    MDCSelectHelperTextFoundation.prototype.hide = function () {
	        this.adapter.setAttr(strings$2.ARIA_HIDDEN, 'true');
	    };
	    return MDCSelectHelperTextFoundation;
	}(MDCFoundation));

	/* node_modules/@smui/select/node_modules/@smui/menu-surface/dist/MenuSurface.svelte generated by Svelte v4.2.19 */

	const { document: document_1 } = globals;
	const file$k = "node_modules/@smui/select/node_modules/@smui/menu-surface/dist/MenuSurface.svelte";

	function create_fragment$n(ctx) {
		let t;
		let div;
		let div_class_value;
		let div_style_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[34].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[33], null);

		let div_levels = [
			{
				class: div_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-menu-surface': true,
					'mdc-menu-surface--fixed': /*fixed*/ ctx[4],
					'mdc-menu-surface--open': /*isStatic*/ ctx[3],
					'smui-menu-surface--static': /*isStatic*/ ctx[3],
					'mdc-menu-surface--fullwidth': /*fullWidth*/ ctx[5],
					.../*internalClasses*/ ctx[8]
				})
			},
			{
				style: div_style_value = Object.entries(/*internalStyles*/ ctx[9]).map(func$b).concat([/*style*/ ctx[2]]).join(' ')
			},
			{ role: "dialog" },
			/*$$restProps*/ ctx[12]
		];

		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				t = space();
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$k, 2, 0, 52);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding*/ ctx[35](div);
				current = true;

				if (!mounted) {
					dispose = [
						listen_dev(document_1.body, "click", /*handleBodyClick*/ ctx[11], true, false, false, false),
						action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[10].call(null, div)),
						listen_dev(
							div,
							"keydown",
							function () {
								if (is_function(/*instance*/ ctx[7] && /*instance*/ ctx[7].handleKeydown.bind(/*instance*/ ctx[7]))) (/*instance*/ ctx[7] && /*instance*/ ctx[7].handleKeydown.bind(/*instance*/ ctx[7])).apply(this, arguments);
							},
							false,
							false,
							false,
							false
						)
					];

					mounted = true;
				}
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;

				if (default_slot) {
					if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 4)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[33],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[33])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[33], dirty, null),
							null
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					(!current || dirty[0] & /*className, fixed, isStatic, fullWidth, internalClasses*/ 314 && div_class_value !== (div_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-menu-surface': true,
						'mdc-menu-surface--fixed': /*fixed*/ ctx[4],
						'mdc-menu-surface--open': /*isStatic*/ ctx[3],
						'smui-menu-surface--static': /*isStatic*/ ctx[3],
						'mdc-menu-surface--fullwidth': /*fullWidth*/ ctx[5],
						.../*internalClasses*/ ctx[8]
					}))) && { class: div_class_value },
					(!current || dirty[0] & /*internalStyles, style*/ 516 && div_style_value !== (div_style_value = Object.entries(/*internalStyles*/ ctx[9]).map(func$b).concat([/*style*/ ctx[2]]).join(' '))) && { style: div_style_value },
					{ role: "dialog" },
					dirty[0] & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding*/ ctx[35](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$n.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$b = ([name, value]) => `${name}: ${value};`;

	function instance_1$c($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","style","static","anchor","fixed","open","managed","fullWidth","quickOpen","anchorElement","anchorCorner","anchorMargin","maxHeight","horizontallyCenteredOnViewport","openBottomBias","neverRestoreFocus","isOpen","setOpen","setAbsolutePosition","setIsHoisted","isFixed","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('MenuSurface', slots, ['default']);
		var _a, _b, _c;
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { static: isStatic = false } = $$props;
		let { anchor = true } = $$props;
		let { fixed = false } = $$props;
		let { open = isStatic } = $$props;
		let { managed = false } = $$props;
		let { fullWidth = false } = $$props;
		let { quickOpen = false } = $$props;
		let { anchorElement = undefined } = $$props;
		let { anchorCorner = undefined } = $$props;
		let { anchorMargin = { top: 0, right: 0, bottom: 0, left: 0 } } = $$props;
		let { maxHeight = 0 } = $$props;
		let { horizontallyCenteredOnViewport = false } = $$props;
		let { openBottomBias = 0 } = $$props;
		let { neverRestoreFocus = false } = $$props;
		let element;
		let instance;
		let internalClasses = {};
		let internalStyles = {};
		let previousFocus = undefined;
		setContext('SMUI:list:role', 'menu');
		setContext('SMUI:list:item:role', 'menuitem');
		const iCorner = Corner;

		onMount(() => {
			$$invalidate(7, instance = new MDCMenuSurfaceFoundation({
					addClass,
					removeClass,
					hasClass,
					hasAnchor: () => !!anchorElement,
					notifyClose: () => {
						if (!managed) {
							$$invalidate(13, open = isStatic);
						}

						if (!open) {
							dispatch(element, 'SMUIMenuSurface:closed', undefined, undefined, true);
						}
					},
					notifyClosing: () => {
						if (!managed) {
							$$invalidate(13, open = isStatic);
						}

						if (!open) {
							dispatch(element, 'SMUIMenuSurface:closing', undefined, undefined, true);
						}
					},
					notifyOpen: () => {
						if (!managed) {
							$$invalidate(13, open = true);
						}

						if (open) {
							dispatch(element, 'SMUIMenuSurface:opened', undefined, undefined, true);
						}
					},
					notifyOpening: () => {
						if (!open) {
							dispatch(element, 'SMUIMenuSurface:opening', undefined, undefined, true);
						}
					},
					isElementInContainer: el => element.contains(el),
					isRtl: () => getComputedStyle(element).getPropertyValue('direction') === 'rtl',
					setTransformOrigin: origin => {
						$$invalidate(9, internalStyles['transform-origin'] = origin, internalStyles);
					},
					isFocused: () => document.activeElement === element,
					saveFocus: () => {
						var _a;

						previousFocus = (_a = document.activeElement) !== null && _a !== void 0
						? _a
						: undefined;
					},
					restoreFocus: () => {
						if (!neverRestoreFocus && (!element || element.contains(document.activeElement)) && previousFocus && document.contains(previousFocus) && 'focus' in previousFocus) {
							previousFocus.focus();
						}
					},
					getInnerDimensions: () => {
						return {
							width: element.offsetWidth,
							height: element.offsetHeight
						};
					},
					getAnchorDimensions: () => anchorElement
					? anchorElement.getBoundingClientRect()
					: null,
					getWindowDimensions: () => {
						return {
							width: window.innerWidth,
							height: window.innerHeight
						};
					},
					getBodyDimensions: () => {
						return {
							width: document.body.clientWidth,
							height: document.body.clientHeight
						};
					},
					getWindowScroll: () => {
						return {
							x: window.pageXOffset,
							y: window.pageYOffset
						};
					},
					setPosition: position => {
						$$invalidate(9, internalStyles.left = 'left' in position ? `${position.left}px` : '', internalStyles);
						$$invalidate(9, internalStyles.right = 'right' in position ? `${position.right}px` : '', internalStyles);
						$$invalidate(9, internalStyles.top = 'top' in position ? `${position.top}px` : '', internalStyles);
						$$invalidate(9, internalStyles.bottom = 'bottom' in position ? `${position.bottom}px` : '', internalStyles);
					},
					setMaxHeight: height => {
						$$invalidate(9, internalStyles['max-height'] = height, internalStyles);
					}
				}));

			const accessor = {
				get open() {
					return open;
				},
				set open(value) {
					$$invalidate(13, open = value);
				},
				closeProgrammatic
			};

			dispatch(element, 'SMUIMenuSurface:mount', accessor);
			instance.init();

			return () => {
				var _a;
				const isHoisted = instance.isHoistedElement;
				instance.destroy();

				if (isHoisted) {
					(_a = element.parentNode) === null || _a === void 0
					? void 0
					: _a.removeChild(element);
				}
			};
		});

		onDestroy(() => {
			var _a;

			if (anchor) {
				element && ((_a = element.parentElement) === null || _a === void 0
				? void 0
				: _a.classList.remove('mdc-menu-surface--anchor'));
			}
		});

		function hasClass(className) {
			return className in internalClasses
			? internalClasses[className]
			: getElement().classList.contains(className);
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(8, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(8, internalClasses[className] = false, internalClasses);
			}
		}

		function closeProgrammatic(skipRestoreFocus) {
			instance.close(skipRestoreFocus);
			$$invalidate(13, open = false);
		}

		function handleBodyClick(event) {
			if (instance && open && !managed) {
				instance.handleBodyClick(event);
			}
		}

		function isOpen() {
			return open;
		}

		function setOpen(value) {
			$$invalidate(13, open = value);
		}

		function setAbsolutePosition(x, y) {
			return instance.setAbsolutePosition(x, y);
		}

		function setIsHoisted(isHoisted) {
			return instance.setIsHoisted(isHoisted);
		}

		function isFixed() {
			return instance.isFixed();
		}

		function getElement() {
			return element;
		}

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(6, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(2, style = $$new_props.style);
			if ('static' in $$new_props) $$invalidate(3, isStatic = $$new_props.static);
			if ('anchor' in $$new_props) $$invalidate(15, anchor = $$new_props.anchor);
			if ('fixed' in $$new_props) $$invalidate(4, fixed = $$new_props.fixed);
			if ('open' in $$new_props) $$invalidate(13, open = $$new_props.open);
			if ('managed' in $$new_props) $$invalidate(16, managed = $$new_props.managed);
			if ('fullWidth' in $$new_props) $$invalidate(5, fullWidth = $$new_props.fullWidth);
			if ('quickOpen' in $$new_props) $$invalidate(17, quickOpen = $$new_props.quickOpen);
			if ('anchorElement' in $$new_props) $$invalidate(14, anchorElement = $$new_props.anchorElement);
			if ('anchorCorner' in $$new_props) $$invalidate(18, anchorCorner = $$new_props.anchorCorner);
			if ('anchorMargin' in $$new_props) $$invalidate(19, anchorMargin = $$new_props.anchorMargin);
			if ('maxHeight' in $$new_props) $$invalidate(20, maxHeight = $$new_props.maxHeight);
			if ('horizontallyCenteredOnViewport' in $$new_props) $$invalidate(21, horizontallyCenteredOnViewport = $$new_props.horizontallyCenteredOnViewport);
			if ('openBottomBias' in $$new_props) $$invalidate(22, openBottomBias = $$new_props.openBottomBias);
			if ('neverRestoreFocus' in $$new_props) $$invalidate(23, neverRestoreFocus = $$new_props.neverRestoreFocus);
			if ('$$scope' in $$new_props) $$invalidate(33, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			_a,
			_b,
			_c,
			MDCMenuSurfaceFoundation,
			onMount,
			onDestroy,
			setContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			dispatch,
			Corner,
			forwardEvents,
			use,
			className,
			style,
			isStatic,
			anchor,
			fixed,
			open,
			managed,
			fullWidth,
			quickOpen,
			anchorElement,
			anchorCorner,
			anchorMargin,
			maxHeight,
			horizontallyCenteredOnViewport,
			openBottomBias,
			neverRestoreFocus,
			element,
			instance,
			internalClasses,
			internalStyles,
			previousFocus,
			iCorner,
			hasClass,
			addClass,
			removeClass,
			closeProgrammatic,
			handleBodyClick,
			isOpen,
			setOpen,
			setAbsolutePosition,
			setIsHoisted,
			isFixed,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('_a' in $$props) $$invalidate(30, _a = $$new_props._a);
			if ('_b' in $$props) $$invalidate(31, _b = $$new_props._b);
			if ('_c' in $$props) $$invalidate(32, _c = $$new_props._c);
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(2, style = $$new_props.style);
			if ('isStatic' in $$props) $$invalidate(3, isStatic = $$new_props.isStatic);
			if ('anchor' in $$props) $$invalidate(15, anchor = $$new_props.anchor);
			if ('fixed' in $$props) $$invalidate(4, fixed = $$new_props.fixed);
			if ('open' in $$props) $$invalidate(13, open = $$new_props.open);
			if ('managed' in $$props) $$invalidate(16, managed = $$new_props.managed);
			if ('fullWidth' in $$props) $$invalidate(5, fullWidth = $$new_props.fullWidth);
			if ('quickOpen' in $$props) $$invalidate(17, quickOpen = $$new_props.quickOpen);
			if ('anchorElement' in $$props) $$invalidate(14, anchorElement = $$new_props.anchorElement);
			if ('anchorCorner' in $$props) $$invalidate(18, anchorCorner = $$new_props.anchorCorner);
			if ('anchorMargin' in $$props) $$invalidate(19, anchorMargin = $$new_props.anchorMargin);
			if ('maxHeight' in $$props) $$invalidate(20, maxHeight = $$new_props.maxHeight);
			if ('horizontallyCenteredOnViewport' in $$props) $$invalidate(21, horizontallyCenteredOnViewport = $$new_props.horizontallyCenteredOnViewport);
			if ('openBottomBias' in $$props) $$invalidate(22, openBottomBias = $$new_props.openBottomBias);
			if ('neverRestoreFocus' in $$props) $$invalidate(23, neverRestoreFocus = $$new_props.neverRestoreFocus);
			if ('element' in $$props) $$invalidate(6, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(7, instance = $$new_props.instance);
			if ('internalClasses' in $$props) $$invalidate(8, internalClasses = $$new_props.internalClasses);
			if ('internalStyles' in $$props) $$invalidate(9, internalStyles = $$new_props.internalStyles);
			if ('previousFocus' in $$props) previousFocus = $$new_props.previousFocus;
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty[0] & /*element, anchor, _a*/ 1073774656 | $$self.$$.dirty[1] & /*_b, _c*/ 3) {
				if (element && anchor && !($$invalidate(30, _a = element.parentElement) === null || _a === void 0
				? void 0
				: _a.classList.contains('mdc-menu-surface--anchor'))) {
					$$invalidate(31, _b = element.parentElement) === null || _b === void 0
					? void 0
					: _b.classList.add('mdc-menu-surface--anchor');

					$$invalidate(14, anchorElement = $$invalidate(32, _c = element.parentElement) !== null && _c !== void 0
					? _c
					: undefined);
				}
			}

			if ($$self.$$.dirty[0] & /*instance, open*/ 8320) {
				if (instance && instance.isOpen() !== open) {
					if (open) {
						instance.open();
					} else {
						instance.close();
					}
				}
			}

			if ($$self.$$.dirty[0] & /*instance, quickOpen*/ 131200) {
				if (instance) {
					instance.setQuickOpen(quickOpen);
				}
			}

			if ($$self.$$.dirty[0] & /*instance, fixed*/ 144) {
				if (instance) {
					instance.setFixedPosition(fixed);
				}
			}

			if ($$self.$$.dirty[0] & /*instance, maxHeight*/ 1048704) {
				if (instance) {
					instance.setMaxHeight(maxHeight);
				}
			}

			if ($$self.$$.dirty[0] & /*instance, horizontallyCenteredOnViewport*/ 2097280) {
				if (instance) {
					instance.setIsHorizontallyCenteredOnViewport(horizontallyCenteredOnViewport);
				}
			}

			if ($$self.$$.dirty[0] & /*instance, anchorCorner*/ 262272) {
				if (instance && anchorCorner != null) {
					if (typeof anchorCorner === 'string') {
						instance.setAnchorCorner(iCorner[anchorCorner]);
					} else {
						instance.setAnchorCorner(anchorCorner);
					}
				}
			}

			if ($$self.$$.dirty[0] & /*instance, anchorMargin*/ 524416) {
				if (instance) {
					instance.setAnchorMargin(anchorMargin);
				}
			}

			if ($$self.$$.dirty[0] & /*instance, openBottomBias*/ 4194432) {
				if (instance) {
					instance.setOpenBottomBias(openBottomBias);
				}
			}
		};

		return [
			use,
			className,
			style,
			isStatic,
			fixed,
			fullWidth,
			element,
			instance,
			internalClasses,
			internalStyles,
			forwardEvents,
			handleBodyClick,
			$$restProps,
			open,
			anchorElement,
			anchor,
			managed,
			quickOpen,
			anchorCorner,
			anchorMargin,
			maxHeight,
			horizontallyCenteredOnViewport,
			openBottomBias,
			neverRestoreFocus,
			isOpen,
			setOpen,
			setAbsolutePosition,
			setIsHoisted,
			isFixed,
			getElement,
			_a,
			_b,
			_c,
			$$scope,
			slots,
			div_binding
		];
	}

	class MenuSurface extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(
				this,
				options,
				instance_1$c,
				create_fragment$n,
				safe_not_equal,
				{
					use: 0,
					class: 1,
					style: 2,
					static: 3,
					anchor: 15,
					fixed: 4,
					open: 13,
					managed: 16,
					fullWidth: 5,
					quickOpen: 17,
					anchorElement: 14,
					anchorCorner: 18,
					anchorMargin: 19,
					maxHeight: 20,
					horizontallyCenteredOnViewport: 21,
					openBottomBias: 22,
					neverRestoreFocus: 23,
					isOpen: 24,
					setOpen: 25,
					setAbsolutePosition: 26,
					setIsHoisted: 27,
					isFixed: 28,
					getElement: 29
				},
				null,
				[-1, -1]
			);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "MenuSurface",
				options,
				id: create_fragment$n.name
			});
		}

		get use() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get static() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set static(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get anchor() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set anchor(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get fixed() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set fixed(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get open() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set open(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get managed() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set managed(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get fullWidth() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set fullWidth(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get quickOpen() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set quickOpen(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get anchorElement() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set anchorElement(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get anchorCorner() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set anchorCorner(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get anchorMargin() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set anchorMargin(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get maxHeight() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set maxHeight(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get horizontallyCenteredOnViewport() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set horizontallyCenteredOnViewport(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get openBottomBias() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set openBottomBias(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get neverRestoreFocus() {
			throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set neverRestoreFocus(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isOpen() {
			return this.$$.ctx[24];
		}

		set isOpen(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get setOpen() {
			return this.$$.ctx[25];
		}

		set setOpen(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get setAbsolutePosition() {
			return this.$$.ctx[26];
		}

		set setAbsolutePosition(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get setIsHoisted() {
			return this.$$.ctx[27];
		}

		set setIsHoisted(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isFixed() {
			return this.$$.ctx[28];
		}

		set isFixed(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[29];
		}

		set getElement(value) {
			throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	function Anchor(node, { addClass = (className) => node.classList.add(className), removeClass = (className) => node.classList.remove(className), } = {}) {
	    addClass('mdc-menu-surface--anchor');
	    return {
	        destroy() {
	            removeClass('mdc-menu-surface--anchor');
	        },
	    };
	}

	/* node_modules/@smui/select/node_modules/@smui/menu/dist/Menu.svelte generated by Svelte v4.2.19 */

	// (1:0) <MenuSurface   bind:this={element}   use={usePass}   class={classMap({     [className]: true,     'mdc-menu': true,   })}   bind:open   on:SMUIMenuSurface:mount={handleMenuSurfaceAccessor}   on:SMUIList:mount={handleListAccessor}   on:SMUIMenuSurface:opened={() =>     instance && instance.handleMenuSurfaceOpened()}   on:keydown={handleKeydown}   on:SMUIList:action={(event) =>     instance &&     instance.handleItemAction(       listAccessor.getOrderedList()[event.detail.index].element,     )}   {...$$restProps}>
	function create_default_slot$7(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[17].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4194304)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[22],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[22], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$7.name,
			type: "slot",
			source: "(1:0) <MenuSurface   bind:this={element}   use={usePass}   class={classMap({     [className]: true,     'mdc-menu': true,   })}   bind:open   on:SMUIMenuSurface:mount={handleMenuSurfaceAccessor}   on:SMUIList:mount={handleListAccessor}   on:SMUIMenuSurface:opened={() =>     instance && instance.handleMenuSurfaceOpened()}   on:keydown={handleKeydown}   on:SMUIList:action={(event) =>     instance &&     instance.handleItemAction(       listAccessor.getOrderedList()[event.detail.index].element,     )}   {...$$restProps}>",
			ctx
		});

		return block;
	}

	function create_fragment$m(ctx) {
		let menusurface;
		let updating_open;
		let current;

		const menusurface_spread_levels = [
			{ use: /*usePass*/ ctx[5] },
			{
				class: classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-menu': true
				})
			},
			/*$$restProps*/ ctx[9]
		];

		function menusurface_open_binding(value) {
			/*menusurface_open_binding*/ ctx[19](value);
		}

		let menusurface_props = {
			$$slots: { default: [create_default_slot$7] },
			$$scope: { ctx }
		};

		for (let i = 0; i < menusurface_spread_levels.length; i += 1) {
			menusurface_props = assign(menusurface_props, menusurface_spread_levels[i]);
		}

		if (/*open*/ ctx[0] !== void 0) {
			menusurface_props.open = /*open*/ ctx[0];
		}

		menusurface = new MenuSurface({ props: menusurface_props, $$inline: true });
		/*menusurface_binding*/ ctx[18](menusurface);
		binding_callbacks.push(() => bind(menusurface, 'open', menusurface_open_binding));
		menusurface.$on("SMUIMenuSurface:mount", /*handleMenuSurfaceAccessor*/ ctx[7]);
		menusurface.$on("SMUIList:mount", /*handleListAccessor*/ ctx[8]);
		menusurface.$on("SMUIMenuSurface:opened", /*SMUIMenuSurface_opened_handler*/ ctx[20]);
		menusurface.$on("keydown", /*handleKeydown*/ ctx[6]);
		menusurface.$on("SMUIList:action", /*SMUIList_action_handler*/ ctx[21]);

		const block = {
			c: function create() {
				create_component(menusurface.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(menusurface, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const menusurface_changes = (dirty & /*usePass, className, $$restProps*/ 546)
				? get_spread_update(menusurface_spread_levels, [
						dirty & /*usePass*/ 32 && { use: /*usePass*/ ctx[5] },
						dirty & /*className*/ 2 && {
							class: classMap({
								[/*className*/ ctx[1]]: true,
								'mdc-menu': true
							})
						},
						dirty & /*$$restProps*/ 512 && get_spread_object(/*$$restProps*/ ctx[9])
					])
				: {};

				if (dirty & /*$$scope*/ 4194304) {
					menusurface_changes.$$scope = { dirty, ctx };
				}

				if (!updating_open && dirty & /*open*/ 1) {
					updating_open = true;
					menusurface_changes.open = /*open*/ ctx[0];
					add_flush_callback(() => updating_open = false);
				}

				menusurface.$set(menusurface_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(menusurface.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(menusurface.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				/*menusurface_binding*/ ctx[18](null);
				destroy_component(menusurface, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$m.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance_1$b($$self, $$props, $$invalidate) {
		let usePass;

		const omit_props_names = [
			"use","class","open","isOpen","setOpen","setDefaultFocusState","getSelectedIndex","getMenuSurface","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Menu', slots, ['default']);
		const { closest } = ponyfill;
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { open = false } = $$props;
		let element;
		let instance;
		let menuSurfaceAccessor;
		let listAccessor;

		onMount(() => {
			$$invalidate(3, instance = new MDCMenuFoundation({
					addClassToElementAtIndex: (index, className) => {
						listAccessor.addClassForElementIndex(index, className);
					},
					removeClassFromElementAtIndex: (index, className) => {
						listAccessor.removeClassForElementIndex(index, className);
					},
					addAttributeToElementAtIndex: (index, attr, value) => {
						listAccessor.setAttributeForElementIndex(index, attr, value);
					},
					removeAttributeFromElementAtIndex: (index, attr) => {
						listAccessor.removeAttributeForElementIndex(index, attr);
					},
					getAttributeFromElementAtIndex: (index, attr) => listAccessor.getAttributeFromElementIndex(index, attr),
					elementContainsClass: (element, className) => element.classList.contains(className),
					closeSurface: skipRestoreFocus => {
						menuSurfaceAccessor.closeProgrammatic(skipRestoreFocus);
						dispatch(getElement(), 'SMUIMenu:closedProgrammatically');
					},
					getElementIndex: element => listAccessor.getOrderedList().map(accessor => accessor.element).indexOf(element),
					notifySelected: evtData => dispatch(
						getElement(),
						'SMUIMenu:selected',
						{
							index: evtData.index,
							item: listAccessor.getOrderedList()[evtData.index].element
						},
						undefined,
						true
					),
					getMenuItemCount: () => listAccessor.items.length,
					focusItemAtIndex: index => listAccessor.focusItemAtIndex(index),
					focusListRoot: () => 'focus' in listAccessor.element && listAccessor.element.focus(),
					isSelectableItemAtIndex: index => !!closest(listAccessor.getOrderedList()[index].element, `.${cssClasses$5.MENU_SELECTION_GROUP}`),
					getSelectedSiblingOfItemAtIndex: index => {
						const orderedList = listAccessor.getOrderedList();
						const selectionGroupEl = closest(orderedList[index].element, `.${cssClasses$5.MENU_SELECTION_GROUP}`);

						const selectedItemEl = selectionGroupEl === null || selectionGroupEl === void 0
						? void 0
						: selectionGroupEl.querySelector(`.${cssClasses$5.MENU_SELECTED_LIST_ITEM}`);

						return selectedItemEl
						? orderedList.map(item => item.element).indexOf(selectedItemEl)
						: -1;
					}
				}));

			dispatch(getElement(), 'SMUIMenu:mount', instance);
			instance.init();

			return () => {
				instance.destroy();
			};
		});

		function handleKeydown(event) {
			instance && instance.handleKeydown(event);
		}

		function handleMenuSurfaceAccessor(event) {
			if (!menuSurfaceAccessor) {
				menuSurfaceAccessor = event.detail;
			}
		}

		function handleListAccessor(event) {
			if (!listAccessor) {
				$$invalidate(4, listAccessor = event.detail);
			}
		}

		function isOpen() {
			return open;
		}

		function setOpen(value) {
			$$invalidate(0, open = value);
		}

		function setDefaultFocusState(focusState) {
			instance.setDefaultFocusState(focusState);
		}

		function getSelectedIndex() {
			return instance.getSelectedIndex();
		}

		function getMenuSurface() {
			return element;
		}

		function getElement() {
			return element.getElement();
		}

		function menusurface_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(2, element);
			});
		}

		function menusurface_open_binding(value) {
			open = value;
			$$invalidate(0, open);
		}

		const SMUIMenuSurface_opened_handler = () => instance && instance.handleMenuSurfaceOpened();
		const SMUIList_action_handler = event => instance && instance.handleItemAction(listAccessor.getOrderedList()[event.detail.index].element);

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(10, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
			if ('$$scope' in $$new_props) $$invalidate(22, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			MDCMenuFoundation,
			cssClasses: cssClasses$5,
			ponyfill,
			onMount,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			dispatch,
			MenuSurface,
			closest,
			forwardEvents,
			use,
			className,
			open,
			element,
			instance,
			menuSurfaceAccessor,
			listAccessor,
			handleKeydown,
			handleMenuSurfaceAccessor,
			handleListAccessor,
			isOpen,
			setOpen,
			setDefaultFocusState,
			getSelectedIndex,
			getMenuSurface,
			getElement,
			usePass
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(10, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('open' in $$props) $$invalidate(0, open = $$new_props.open);
			if ('element' in $$props) $$invalidate(2, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(3, instance = $$new_props.instance);
			if ('menuSurfaceAccessor' in $$props) menuSurfaceAccessor = $$new_props.menuSurfaceAccessor;
			if ('listAccessor' in $$props) $$invalidate(4, listAccessor = $$new_props.listAccessor);
			if ('usePass' in $$props) $$invalidate(5, usePass = $$new_props.usePass);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*use*/ 1024) {
				$$invalidate(5, usePass = [forwardEvents, ...use]);
			}
		};

		return [
			open,
			className,
			element,
			instance,
			listAccessor,
			usePass,
			handleKeydown,
			handleMenuSurfaceAccessor,
			handleListAccessor,
			$$restProps,
			use,
			isOpen,
			setOpen,
			setDefaultFocusState,
			getSelectedIndex,
			getMenuSurface,
			getElement,
			slots,
			menusurface_binding,
			menusurface_open_binding,
			SMUIMenuSurface_opened_handler,
			SMUIList_action_handler,
			$$scope
		];
	}

	class Menu extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance_1$b, create_fragment$m, safe_not_equal, {
				use: 10,
				class: 1,
				open: 0,
				isOpen: 11,
				setOpen: 12,
				setDefaultFocusState: 13,
				getSelectedIndex: 14,
				getMenuSurface: 15,
				getElement: 16
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Menu",
				options,
				id: create_fragment$m.name
			});
		}

		get use() {
			throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get open() {
			throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set open(value) {
			throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isOpen() {
			return this.$$.ctx[11];
		}

		set isOpen(value) {
			throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get setOpen() {
			return this.$$.ctx[12];
		}

		set setOpen(value) {
			throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get setDefaultFocusState() {
			return this.$$.ctx[13];
		}

		set setDefaultFocusState(value) {
			throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getSelectedIndex() {
			return this.$$.ctx[14];
		}

		set getSelectedIndex(value) {
			throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getMenuSurface() {
			return this.$$.ctx[15];
		}

		set getMenuSurface(value) {
			throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[16];
		}

		set getElement(value) {
			throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/select/node_modules/@smui/list/dist/List.svelte generated by Svelte v4.2.19 */

	// (1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     'mdc-deprecated-list': true,     'mdc-deprecated-list--non-interactive': nonInteractive,     'mdc-deprecated-list--dense': dense,     'mdc-deprecated-list--textual-list': textualList,     'mdc-deprecated-list--avatar-list': avatarList || selectionDialog,     'mdc-deprecated-list--icon-list': iconList,     'mdc-deprecated-list--image-list': imageList,     'mdc-deprecated-list--thumbnail-list': thumbnailList,     'mdc-deprecated-list--video-list': videoList,     'mdc-deprecated-list--two-line': twoLine,     'smui-list--three-line': threeLine && !twoLine,   })}   {role}   on:keydown={handleKeydown}   on:focusin={handleFocusin}   on:focusout={handleFocusout}   on:click={handleClick}   on:SMUIListItem:mount={handleItemMount}   on:SMUIListItem:unmount={handleItemUnmount}   on:SMUI:action={handleAction}   {...$$restProps} >
	function create_default_slot$6(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[42].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[44], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[44],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[44])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[44], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$6.name,
			type: "slot",
			source: "(1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     'mdc-deprecated-list': true,     'mdc-deprecated-list--non-interactive': nonInteractive,     'mdc-deprecated-list--dense': dense,     'mdc-deprecated-list--textual-list': textualList,     'mdc-deprecated-list--avatar-list': avatarList || selectionDialog,     'mdc-deprecated-list--icon-list': iconList,     'mdc-deprecated-list--image-list': imageList,     'mdc-deprecated-list--thumbnail-list': thumbnailList,     'mdc-deprecated-list--video-list': videoList,     'mdc-deprecated-list--two-line': twoLine,     'smui-list--three-line': threeLine && !twoLine,   })}   {role}   on:keydown={handleKeydown}   on:focusin={handleFocusin}   on:focusout={handleFocusout}   on:click={handleClick}   on:SMUIListItem:mount={handleItemMount}   on:SMUIListItem:unmount={handleItemUnmount}   on:SMUI:action={handleAction}   {...$$restProps} >",
			ctx
		});

		return block;
	}

	function create_fragment$l(ctx) {
		let switch_instance;
		let switch_instance_anchor;
		let current;

		const switch_instance_spread_levels = [
			{ tag: /*tag*/ ctx[13] },
			{
				use: [/*forwardEvents*/ ctx[16], .../*use*/ ctx[0]]
			},
			{
				class: classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-deprecated-list': true,
					'mdc-deprecated-list--non-interactive': /*nonInteractive*/ ctx[2],
					'mdc-deprecated-list--dense': /*dense*/ ctx[3],
					'mdc-deprecated-list--textual-list': /*textualList*/ ctx[4],
					'mdc-deprecated-list--avatar-list': /*avatarList*/ ctx[5] || /*selectionDialog*/ ctx[17],
					'mdc-deprecated-list--icon-list': /*iconList*/ ctx[6],
					'mdc-deprecated-list--image-list': /*imageList*/ ctx[7],
					'mdc-deprecated-list--thumbnail-list': /*thumbnailList*/ ctx[8],
					'mdc-deprecated-list--video-list': /*videoList*/ ctx[9],
					'mdc-deprecated-list--two-line': /*twoLine*/ ctx[10],
					'smui-list--three-line': /*threeLine*/ ctx[11] && !/*twoLine*/ ctx[10]
				})
			},
			{ role: /*role*/ ctx[15] },
			/*$$restProps*/ ctx[25]
		];

		var switch_value = /*component*/ ctx[12];

		function switch_props(ctx, dirty) {
			let switch_instance_props = {
				$$slots: { default: [create_default_slot$6] },
				$$scope: { ctx }
			};

			for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
				switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
			}

			if (dirty !== undefined && dirty[0] & /*tag, forwardEvents, use, className, nonInteractive, dense, textualList, avatarList, selectionDialog, iconList, imageList, thumbnailList, videoList, twoLine, threeLine, role, $$restProps*/ 33796095) {
				switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [
					dirty[0] & /*tag*/ 8192 && { tag: /*tag*/ ctx[13] },
					dirty[0] & /*forwardEvents, use*/ 65537 && {
						use: [/*forwardEvents*/ ctx[16], .../*use*/ ctx[0]]
					},
					dirty[0] & /*className, nonInteractive, dense, textualList, avatarList, selectionDialog, iconList, imageList, thumbnailList, videoList, twoLine, threeLine*/ 135166 && {
						class: classMap({
							[/*className*/ ctx[1]]: true,
							'mdc-deprecated-list': true,
							'mdc-deprecated-list--non-interactive': /*nonInteractive*/ ctx[2],
							'mdc-deprecated-list--dense': /*dense*/ ctx[3],
							'mdc-deprecated-list--textual-list': /*textualList*/ ctx[4],
							'mdc-deprecated-list--avatar-list': /*avatarList*/ ctx[5] || /*selectionDialog*/ ctx[17],
							'mdc-deprecated-list--icon-list': /*iconList*/ ctx[6],
							'mdc-deprecated-list--image-list': /*imageList*/ ctx[7],
							'mdc-deprecated-list--thumbnail-list': /*thumbnailList*/ ctx[8],
							'mdc-deprecated-list--video-list': /*videoList*/ ctx[9],
							'mdc-deprecated-list--two-line': /*twoLine*/ ctx[10],
							'smui-list--three-line': /*threeLine*/ ctx[11] && !/*twoLine*/ ctx[10]
						})
					},
					dirty[0] & /*role*/ 32768 && { role: /*role*/ ctx[15] },
					dirty[0] & /*$$restProps*/ 33554432 && get_spread_object(/*$$restProps*/ ctx[25])
				]));
			}

			return {
				props: switch_instance_props,
				$$inline: true
			};
		}

		if (switch_value) {
			switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
			/*switch_instance_binding*/ ctx[43](switch_instance);
			switch_instance.$on("keydown", /*handleKeydown*/ ctx[20]);
			switch_instance.$on("focusin", /*handleFocusin*/ ctx[21]);
			switch_instance.$on("focusout", /*handleFocusout*/ ctx[22]);
			switch_instance.$on("click", /*handleClick*/ ctx[23]);
			switch_instance.$on("SMUIListItem:mount", /*handleItemMount*/ ctx[18]);
			switch_instance.$on("SMUIListItem:unmount", /*handleItemUnmount*/ ctx[19]);
			switch_instance.$on("SMUI:action", /*handleAction*/ ctx[24]);
		}

		const block = {
			c: function create() {
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (switch_instance) mount_component(switch_instance, target, anchor);
				insert_dev(target, switch_instance_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*component*/ 4096 && switch_value !== (switch_value = /*component*/ ctx[12])) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx, dirty));
						/*switch_instance_binding*/ ctx[43](switch_instance);
						switch_instance.$on("keydown", /*handleKeydown*/ ctx[20]);
						switch_instance.$on("focusin", /*handleFocusin*/ ctx[21]);
						switch_instance.$on("focusout", /*handleFocusout*/ ctx[22]);
						switch_instance.$on("click", /*handleClick*/ ctx[23]);
						switch_instance.$on("SMUIListItem:mount", /*handleItemMount*/ ctx[18]);
						switch_instance.$on("SMUIListItem:unmount", /*handleItemUnmount*/ ctx[19]);
						switch_instance.$on("SMUI:action", /*handleAction*/ ctx[24]);
						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					const switch_instance_changes = (dirty[0] & /*tag, forwardEvents, use, className, nonInteractive, dense, textualList, avatarList, selectionDialog, iconList, imageList, thumbnailList, videoList, twoLine, threeLine, role, $$restProps*/ 33796095)
					? get_spread_update(switch_instance_spread_levels, [
							dirty[0] & /*tag*/ 8192 && { tag: /*tag*/ ctx[13] },
							dirty[0] & /*forwardEvents, use*/ 65537 && {
								use: [/*forwardEvents*/ ctx[16], .../*use*/ ctx[0]]
							},
							dirty[0] & /*className, nonInteractive, dense, textualList, avatarList, selectionDialog, iconList, imageList, thumbnailList, videoList, twoLine, threeLine*/ 135166 && {
								class: classMap({
									[/*className*/ ctx[1]]: true,
									'mdc-deprecated-list': true,
									'mdc-deprecated-list--non-interactive': /*nonInteractive*/ ctx[2],
									'mdc-deprecated-list--dense': /*dense*/ ctx[3],
									'mdc-deprecated-list--textual-list': /*textualList*/ ctx[4],
									'mdc-deprecated-list--avatar-list': /*avatarList*/ ctx[5] || /*selectionDialog*/ ctx[17],
									'mdc-deprecated-list--icon-list': /*iconList*/ ctx[6],
									'mdc-deprecated-list--image-list': /*imageList*/ ctx[7],
									'mdc-deprecated-list--thumbnail-list': /*thumbnailList*/ ctx[8],
									'mdc-deprecated-list--video-list': /*videoList*/ ctx[9],
									'mdc-deprecated-list--two-line': /*twoLine*/ ctx[10],
									'smui-list--three-line': /*threeLine*/ ctx[11] && !/*twoLine*/ ctx[10]
								})
							},
							dirty[0] & /*role*/ 32768 && { role: /*role*/ ctx[15] },
							dirty[0] & /*$$restProps*/ 33554432 && get_spread_object(/*$$restProps*/ ctx[25])
						])
					: {};

					if (dirty[1] & /*$$scope*/ 8192) {
						switch_instance_changes.$$scope = { dirty, ctx };
					}

					switch_instance.$set(switch_instance_changes);
				}
			},
			i: function intro(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(switch_instance_anchor);
				}

				/*switch_instance_binding*/ ctx[43](null);
				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$l.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance_1$a($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","nonInteractive","dense","textualList","avatarList","iconList","imageList","thumbnailList","videoList","twoLine","threeLine","vertical","wrapFocus","singleSelection","disabledItemsFocusable","selectedIndex","radioList","checkList","hasTypeahead","component","tag","layout","setEnabled","getTypeaheadInProgress","getSelectedIndex","getFocusedItemIndex","focusItemAtIndex","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('List', slots, ['default']);
		var _a;
		const { closest, matches } = ponyfill;
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { nonInteractive = false } = $$props;
		let { dense = false } = $$props;
		let { textualList = false } = $$props;
		let { avatarList = false } = $$props;
		let { iconList = false } = $$props;
		let { imageList = false } = $$props;
		let { thumbnailList = false } = $$props;
		let { videoList = false } = $$props;
		let { twoLine = false } = $$props;
		let { threeLine = false } = $$props;
		let { vertical = true } = $$props;

		let { wrapFocus = (_a = getContext('SMUI:list:wrapFocus')) !== null && _a !== void 0
		? _a
		: false } = $$props;

		let { singleSelection = false } = $$props;
		let { disabledItemsFocusable = false } = $$props;
		let { selectedIndex = -1 } = $$props;
		let { radioList = false } = $$props;
		let { checkList = false } = $$props;
		let { hasTypeahead = false } = $$props;
		let element;
		let instance;
		let items = [];
		let role = getContext('SMUI:list:role');
		let nav = getContext('SMUI:list:nav');
		const itemAccessorMap = new WeakMap();
		let selectionDialog = getContext('SMUI:dialog:selection');
		let addLayoutListener = getContext('SMUI:addLayoutListener');
		let removeLayoutListener;
		let { component = SmuiElement } = $$props;

		let { tag = component === SmuiElement
		? nav ? 'nav' : 'ul'
		: undefined } = $$props;

		setContext('SMUI:list:nonInteractive', nonInteractive);
		setContext('SMUI:separator:context', 'list');

		if (!role) {
			if (singleSelection) {
				role = 'listbox';
				setContext('SMUI:list:item:role', 'option');
			} else if (radioList) {
				role = 'radiogroup';
				setContext('SMUI:list:item:role', 'radio');
			} else if (checkList) {
				role = 'group';
				setContext('SMUI:list:item:role', 'checkbox');
			} else {
				role = 'list';
				setContext('SMUI:list:item:role', undefined);
			}
		}

		if (addLayoutListener) {
			removeLayoutListener = addLayoutListener(layout);
		}

		onMount(() => {
			$$invalidate(41, instance = new MDCListFoundation({
					addClassForElementIndex,
					focusItemAtIndex,
					getAttributeForElementIndex: (index, name) => {
						var _a, _b;

						return (_b = (_a = getOrderedList()[index]) === null || _a === void 0
						? void 0
						: _a.getAttr(name)) !== null && _b !== void 0
						? _b
						: null;
					},
					getFocusedElementIndex: () => document.activeElement
					? getOrderedList().map(accessor => accessor.element).indexOf(document.activeElement)
					: -1,
					getListItemCount: () => items.length,
					getPrimaryTextAtIndex,
					hasCheckboxAtIndex: index => {
						var _a, _b;

						return (_b = (_a = getOrderedList()[index]) === null || _a === void 0
						? void 0
						: _a.hasCheckbox) !== null && _b !== void 0
						? _b
						: false;
					},
					hasRadioAtIndex: index => {
						var _a, _b;

						return (_b = (_a = getOrderedList()[index]) === null || _a === void 0
						? void 0
						: _a.hasRadio) !== null && _b !== void 0
						? _b
						: false;
					},
					isCheckboxCheckedAtIndex: index => {
						var _a;
						const listItem = getOrderedList()[index];

						return (_a = (listItem === null || listItem === void 0
						? void 0
						: listItem.hasCheckbox) && listItem.checked) !== null && _a !== void 0
						? _a
						: false;
					},
					isFocusInsideList: () => element != null && getElement() !== document.activeElement && getElement().contains(document.activeElement),
					isRootFocused: () => element != null && document.activeElement === getElement(),
					listItemAtIndexHasClass,
					notifyAction: index => {
						$$invalidate(26, selectedIndex = index);

						if (element != null) {
							dispatch(getElement(), 'SMUIList:action', { index }, undefined, true);
						}
					},
					notifySelectionChange: changedIndices => {
						if (element != null) {
							dispatch(getElement(), 'SMUIList:selectionChange', { changedIndices });
						}
					},
					removeClassForElementIndex,
					setAttributeForElementIndex,
					setCheckedCheckboxOrRadioAtIndex: (index, isChecked) => {
						getOrderedList()[index].checked = isChecked;
					},
					setTabIndexForListItemChildren: (listItemIndex, tabIndexValue) => {
						const listItem = getOrderedList()[listItemIndex];
						const selector = 'button:not(:disabled), a';

						Array.prototype.forEach.call(listItem.element.querySelectorAll(selector), el => {
							el.setAttribute('tabindex', tabIndexValue);
						});
					}
				}));

			const accessor = {
				get element() {
					return getElement();
				},
				get items() {
					return items;
				},
				get typeaheadInProgress() {
					return instance.isTypeaheadInProgress();
				},
				typeaheadMatchItem(nextChar, startingIndex) {
					return instance.typeaheadMatchItem(nextChar, startingIndex, /** skipFocus */
					true);
				},
				getOrderedList,
				focusItemAtIndex,
				addClassForElementIndex,
				removeClassForElementIndex,
				setAttributeForElementIndex,
				removeAttributeForElementIndex,
				getAttributeFromElementIndex,
				getPrimaryTextAtIndex
			};

			dispatch(getElement(), 'SMUIList:mount', accessor);
			instance.init();
			instance.layout();

			return () => {
				instance.destroy();
			};
		});

		onDestroy(() => {
			if (removeLayoutListener) {
				removeLayoutListener();
			}
		});

		function handleItemMount(event) {
			items.push(event.detail);
			itemAccessorMap.set(event.detail.element, event.detail);

			if (singleSelection && event.detail.selected) {
				$$invalidate(26, selectedIndex = getListItemIndex(event.detail.element));
			}

			event.stopPropagation();
		}

		function handleItemUnmount(event) {
			var _a;

			const idx = (_a = event.detail && items.indexOf(event.detail)) !== null && _a !== void 0
			? _a
			: -1;

			if (idx !== -1) {
				items.splice(idx, 1);
				items = items;
				itemAccessorMap.delete(event.detail.element);
			}

			event.stopPropagation();
		}

		function handleKeydown(event) {
			if (instance && event.target) {
				instance.handleKeydown(event, event.target.classList.contains('mdc-deprecated-list-item'), getListItemIndex(event.target));
			}
		}

		function handleFocusin(event) {
			if (instance && event.target) {
				instance.handleFocusIn(getListItemIndex(event.target));
			}
		}

		function handleFocusout(event) {
			if (instance && event.target) {
				instance.handleFocusOut(getListItemIndex(event.target));
			}
		}

		function handleClick(event) {
			if (instance && event.target) {
				instance.handleClick(getListItemIndex(event.target), !matches(event.target, 'input[type="checkbox"], input[type="radio"]'), event);
			}
		}

		function handleAction(event) {
			if (radioList || checkList) {
				const index = getListItemIndex(event.target);

				if (index !== -1) {
					const item = getOrderedList()[index];

					if (item && (radioList && !item.checked || checkList)) {
						if (!matches(event.detail.target, 'input[type="checkbox"], input[type="radio"]')) {
							item.checked = !item.checked;
						}

						item.activateRipple();

						window.requestAnimationFrame(() => {
							item.deactivateRipple();
						});
					}
				}
			}
		}

		function getOrderedList() {
			if (element == null) {
				return [];
			}

			return [...getElement().children].map(element => itemAccessorMap.get(element)).filter(accessor => accessor && accessor._smui_list_item_accessor);
		}

		function listItemAtIndexHasClass(index, className) {
			var _a;
			const accessor = getOrderedList()[index];

			return (_a = accessor && accessor.hasClass(className)) !== null && _a !== void 0
			? _a
			: false;
		}

		function addClassForElementIndex(index, className) {
			const accessor = getOrderedList()[index];
			accessor && accessor.addClass(className);
		}

		function removeClassForElementIndex(index, className) {
			const accessor = getOrderedList()[index];
			accessor && accessor.removeClass(className);
		}

		function setAttributeForElementIndex(index, name, value) {
			const accessor = getOrderedList()[index];
			accessor && accessor.addAttr(name, value);
		}

		function removeAttributeForElementIndex(index, name) {
			const accessor = getOrderedList()[index];
			accessor && accessor.removeAttr(name);
		}

		function getAttributeFromElementIndex(index, name) {
			const accessor = getOrderedList()[index];

			if (accessor) {
				return accessor.getAttr(name);
			} else {
				return null;
			}
		}

		function getPrimaryTextAtIndex(index) {
			var _a;
			const accessor = getOrderedList()[index];

			return (_a = accessor && accessor.getPrimaryText()) !== null && _a !== void 0
			? _a
			: '';
		}

		function getListItemIndex(element) {
			const nearestParent = closest(element, '.mdc-deprecated-list-item, .mdc-deprecated-list');

			// Get the index of the element if it is a list item.
			if (nearestParent && matches(nearestParent, '.mdc-deprecated-list-item')) {
				return getOrderedList().map(item => item === null || item === void 0 ? void 0 : item.element).indexOf(nearestParent);
			}

			return -1;
		}

		function layout() {
			return instance.layout();
		}

		function setEnabled(itemIndex, isEnabled) {
			return instance.setEnabled(itemIndex, isEnabled);
		}

		function getTypeaheadInProgress() {
			return instance.isTypeaheadInProgress();
		}

		function getSelectedIndex() {
			return instance.getSelectedIndex();
		}

		function getFocusedItemIndex() {
			return instance.getFocusedItemIndex();
		}

		function focusItemAtIndex(index) {
			const accessor = getOrderedList()[index];
			accessor && 'focus' in accessor.element && accessor.element.focus();
		}

		function getElement() {
			return element.getElement();
		}

		function switch_instance_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(14, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(25, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('nonInteractive' in $$new_props) $$invalidate(2, nonInteractive = $$new_props.nonInteractive);
			if ('dense' in $$new_props) $$invalidate(3, dense = $$new_props.dense);
			if ('textualList' in $$new_props) $$invalidate(4, textualList = $$new_props.textualList);
			if ('avatarList' in $$new_props) $$invalidate(5, avatarList = $$new_props.avatarList);
			if ('iconList' in $$new_props) $$invalidate(6, iconList = $$new_props.iconList);
			if ('imageList' in $$new_props) $$invalidate(7, imageList = $$new_props.imageList);
			if ('thumbnailList' in $$new_props) $$invalidate(8, thumbnailList = $$new_props.thumbnailList);
			if ('videoList' in $$new_props) $$invalidate(9, videoList = $$new_props.videoList);
			if ('twoLine' in $$new_props) $$invalidate(10, twoLine = $$new_props.twoLine);
			if ('threeLine' in $$new_props) $$invalidate(11, threeLine = $$new_props.threeLine);
			if ('vertical' in $$new_props) $$invalidate(27, vertical = $$new_props.vertical);
			if ('wrapFocus' in $$new_props) $$invalidate(28, wrapFocus = $$new_props.wrapFocus);
			if ('singleSelection' in $$new_props) $$invalidate(29, singleSelection = $$new_props.singleSelection);
			if ('disabledItemsFocusable' in $$new_props) $$invalidate(30, disabledItemsFocusable = $$new_props.disabledItemsFocusable);
			if ('selectedIndex' in $$new_props) $$invalidate(26, selectedIndex = $$new_props.selectedIndex);
			if ('radioList' in $$new_props) $$invalidate(31, radioList = $$new_props.radioList);
			if ('checkList' in $$new_props) $$invalidate(32, checkList = $$new_props.checkList);
			if ('hasTypeahead' in $$new_props) $$invalidate(33, hasTypeahead = $$new_props.hasTypeahead);
			if ('component' in $$new_props) $$invalidate(12, component = $$new_props.component);
			if ('tag' in $$new_props) $$invalidate(13, tag = $$new_props.tag);
			if ('$$scope' in $$new_props) $$invalidate(44, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			_a,
			MDCListFoundation,
			ponyfill,
			onMount,
			onDestroy,
			getContext,
			setContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			dispatch,
			SmuiElement,
			closest,
			matches,
			forwardEvents,
			use,
			className,
			nonInteractive,
			dense,
			textualList,
			avatarList,
			iconList,
			imageList,
			thumbnailList,
			videoList,
			twoLine,
			threeLine,
			vertical,
			wrapFocus,
			singleSelection,
			disabledItemsFocusable,
			selectedIndex,
			radioList,
			checkList,
			hasTypeahead,
			element,
			instance,
			items,
			role,
			nav,
			itemAccessorMap,
			selectionDialog,
			addLayoutListener,
			removeLayoutListener,
			component,
			tag,
			handleItemMount,
			handleItemUnmount,
			handleKeydown,
			handleFocusin,
			handleFocusout,
			handleClick,
			handleAction,
			getOrderedList,
			listItemAtIndexHasClass,
			addClassForElementIndex,
			removeClassForElementIndex,
			setAttributeForElementIndex,
			removeAttributeForElementIndex,
			getAttributeFromElementIndex,
			getPrimaryTextAtIndex,
			getListItemIndex,
			layout,
			setEnabled,
			getTypeaheadInProgress,
			getSelectedIndex,
			getFocusedItemIndex,
			focusItemAtIndex,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('_a' in $$props) _a = $$new_props._a;
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('nonInteractive' in $$props) $$invalidate(2, nonInteractive = $$new_props.nonInteractive);
			if ('dense' in $$props) $$invalidate(3, dense = $$new_props.dense);
			if ('textualList' in $$props) $$invalidate(4, textualList = $$new_props.textualList);
			if ('avatarList' in $$props) $$invalidate(5, avatarList = $$new_props.avatarList);
			if ('iconList' in $$props) $$invalidate(6, iconList = $$new_props.iconList);
			if ('imageList' in $$props) $$invalidate(7, imageList = $$new_props.imageList);
			if ('thumbnailList' in $$props) $$invalidate(8, thumbnailList = $$new_props.thumbnailList);
			if ('videoList' in $$props) $$invalidate(9, videoList = $$new_props.videoList);
			if ('twoLine' in $$props) $$invalidate(10, twoLine = $$new_props.twoLine);
			if ('threeLine' in $$props) $$invalidate(11, threeLine = $$new_props.threeLine);
			if ('vertical' in $$props) $$invalidate(27, vertical = $$new_props.vertical);
			if ('wrapFocus' in $$props) $$invalidate(28, wrapFocus = $$new_props.wrapFocus);
			if ('singleSelection' in $$props) $$invalidate(29, singleSelection = $$new_props.singleSelection);
			if ('disabledItemsFocusable' in $$props) $$invalidate(30, disabledItemsFocusable = $$new_props.disabledItemsFocusable);
			if ('selectedIndex' in $$props) $$invalidate(26, selectedIndex = $$new_props.selectedIndex);
			if ('radioList' in $$props) $$invalidate(31, radioList = $$new_props.radioList);
			if ('checkList' in $$props) $$invalidate(32, checkList = $$new_props.checkList);
			if ('hasTypeahead' in $$props) $$invalidate(33, hasTypeahead = $$new_props.hasTypeahead);
			if ('element' in $$props) $$invalidate(14, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(41, instance = $$new_props.instance);
			if ('items' in $$props) items = $$new_props.items;
			if ('role' in $$props) $$invalidate(15, role = $$new_props.role);
			if ('nav' in $$props) nav = $$new_props.nav;
			if ('selectionDialog' in $$props) $$invalidate(17, selectionDialog = $$new_props.selectionDialog);
			if ('addLayoutListener' in $$props) addLayoutListener = $$new_props.addLayoutListener;
			if ('removeLayoutListener' in $$props) removeLayoutListener = $$new_props.removeLayoutListener;
			if ('component' in $$props) $$invalidate(12, component = $$new_props.component);
			if ('tag' in $$props) $$invalidate(13, tag = $$new_props.tag);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty[0] & /*vertical*/ 134217728 | $$self.$$.dirty[1] & /*instance*/ 1024) {
				if (instance) {
					instance.setVerticalOrientation(vertical);
				}
			}

			if ($$self.$$.dirty[0] & /*wrapFocus*/ 268435456 | $$self.$$.dirty[1] & /*instance*/ 1024) {
				if (instance) {
					instance.setWrapFocus(wrapFocus);
				}
			}

			if ($$self.$$.dirty[1] & /*instance, hasTypeahead*/ 1028) {
				if (instance) {
					instance.setHasTypeahead(hasTypeahead);
				}
			}

			if ($$self.$$.dirty[0] & /*singleSelection*/ 536870912 | $$self.$$.dirty[1] & /*instance*/ 1024) {
				if (instance) {
					instance.setSingleSelection(singleSelection);
				}
			}

			if ($$self.$$.dirty[0] & /*disabledItemsFocusable*/ 1073741824 | $$self.$$.dirty[1] & /*instance*/ 1024) {
				if (instance) {
					instance.setDisabledItemsFocusable(disabledItemsFocusable);
				}
			}

			if ($$self.$$.dirty[0] & /*singleSelection, selectedIndex*/ 603979776 | $$self.$$.dirty[1] & /*instance*/ 1024) {
				if (instance && singleSelection && getSelectedIndex() !== selectedIndex) {
					instance.setSelectedIndex(selectedIndex);
				}
			}
		};

		return [
			use,
			className,
			nonInteractive,
			dense,
			textualList,
			avatarList,
			iconList,
			imageList,
			thumbnailList,
			videoList,
			twoLine,
			threeLine,
			component,
			tag,
			element,
			role,
			forwardEvents,
			selectionDialog,
			handleItemMount,
			handleItemUnmount,
			handleKeydown,
			handleFocusin,
			handleFocusout,
			handleClick,
			handleAction,
			$$restProps,
			selectedIndex,
			vertical,
			wrapFocus,
			singleSelection,
			disabledItemsFocusable,
			radioList,
			checkList,
			hasTypeahead,
			layout,
			setEnabled,
			getTypeaheadInProgress,
			getSelectedIndex,
			getFocusedItemIndex,
			focusItemAtIndex,
			getElement,
			instance,
			slots,
			switch_instance_binding,
			$$scope
		];
	}

	class List extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(
				this,
				options,
				instance_1$a,
				create_fragment$l,
				safe_not_equal,
				{
					use: 0,
					class: 1,
					nonInteractive: 2,
					dense: 3,
					textualList: 4,
					avatarList: 5,
					iconList: 6,
					imageList: 7,
					thumbnailList: 8,
					videoList: 9,
					twoLine: 10,
					threeLine: 11,
					vertical: 27,
					wrapFocus: 28,
					singleSelection: 29,
					disabledItemsFocusable: 30,
					selectedIndex: 26,
					radioList: 31,
					checkList: 32,
					hasTypeahead: 33,
					component: 12,
					tag: 13,
					layout: 34,
					setEnabled: 35,
					getTypeaheadInProgress: 36,
					getSelectedIndex: 37,
					getFocusedItemIndex: 38,
					focusItemAtIndex: 39,
					getElement: 40
				},
				null,
				[-1, -1]
			);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "List",
				options,
				id: create_fragment$l.name
			});
		}

		get use() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get nonInteractive() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set nonInteractive(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get dense() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set dense(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get textualList() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set textualList(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get avatarList() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set avatarList(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get iconList() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set iconList(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get imageList() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set imageList(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get thumbnailList() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set thumbnailList(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get videoList() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set videoList(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get twoLine() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set twoLine(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get threeLine() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set threeLine(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get vertical() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set vertical(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get wrapFocus() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set wrapFocus(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get singleSelection() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set singleSelection(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get disabledItemsFocusable() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set disabledItemsFocusable(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get selectedIndex() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set selectedIndex(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get radioList() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set radioList(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get checkList() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set checkList(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get hasTypeahead() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set hasTypeahead(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get component() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set component(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tag() {
			throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tag(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get layout() {
			return this.$$.ctx[34];
		}

		set layout(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get setEnabled() {
			return this.$$.ctx[35];
		}

		set setEnabled(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getTypeaheadInProgress() {
			return this.$$.ctx[36];
		}

		set getTypeaheadInProgress(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getSelectedIndex() {
			return this.$$.ctx[37];
		}

		set getSelectedIndex(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getFocusedItemIndex() {
			return this.$$.ctx[38];
		}

		set getFocusedItemIndex(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get focusItemAtIndex() {
			return this.$$.ctx[39];
		}

		set focusItemAtIndex(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[40];
		}

		set getElement(value) {
			throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/select/node_modules/@smui/list/dist/Item.svelte generated by Svelte v4.2.19 */
	const file$j = "node_modules/@smui/select/node_modules/@smui/list/dist/Item.svelte";

	// (59:3) {#if ripple}
	function create_if_block$b(ctx) {
		let span;

		const block = {
			c: function create() {
				span = element("span");
				attr_dev(span, "class", "mdc-deprecated-list-item__ripple");
				add_location(span, file$j, 58, 15, 1774);
			},
			m: function mount(target, anchor) {
				insert_dev(target, span, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(span);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$b.name,
			type: "if",
			source: "(59:3) {#if ripple}",
			ctx
		});

		return block;
	}

	// (1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[     ...(nonInteractive       ? []       : [           [             Ripple,             {               ripple: !input,               unbounded: false,               color:                 (activated || selected) && color == null ? 'primary' : color,               disabled,               addClass,               removeClass,               addStyle,             },           ],         ]),     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-deprecated-list-item': !wrapper,     'mdc-deprecated-list-item__wrapper': wrapper,     'mdc-deprecated-list-item--activated': activated,     'mdc-deprecated-list-item--selected': selected,     'mdc-deprecated-list-item--disabled': disabled,     'mdc-menu-item--selected': !nav && role === 'menuitem' && selected,     'smui-menu-item--non-interactive': nonInteractive,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   {...nav && activated ? { 'aria-current': 'page' } : {}}   {...!nav || wrapper ? { role } : {}}   {...!nav && role === 'option'     ? { 'aria-selected': selected ? 'true' : 'false' }     : {}}   {...!nav && (role === 'radio' || role === 'checkbox')     ? { 'aria-checked': input && input.checked ? 'true' : 'false' }     : {}}   {...!nav ? { 'aria-disabled': disabled ? 'true' : 'false' } : {}}   data-menu-item-skip-restore-focus={skipRestoreFocus || undefined}   {tabindex}   on:click={action}   on:keydown={handleKeydown}   on:SMUIGenericInput:mount={handleInputMount}   on:SMUIGenericInput:unmount={() => (input = undefined)}   {href}   {...internalAttrs}   {...$$restProps}   >
	function create_default_slot$5(ctx) {
		let if_block_anchor;
		let current;
		let if_block = /*ripple*/ ctx[7] && create_if_block$b(ctx);
		const default_slot_template = /*#slots*/ ctx[34].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[37], null);

		const block = {
			c: function create() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);

				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (/*ripple*/ ctx[7]) {
					if (if_block) ; else {
						if_block = create_if_block$b(ctx);
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (default_slot) {
					if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 64)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[37],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[37])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[37], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if (if_block) if_block.d(detaching);
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$5.name,
			type: "slot",
			source: "(1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[     ...(nonInteractive       ? []       : [           [             Ripple,             {               ripple: !input,               unbounded: false,               color:                 (activated || selected) && color == null ? 'primary' : color,               disabled,               addClass,               removeClass,               addStyle,             },           ],         ]),     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-deprecated-list-item': !wrapper,     'mdc-deprecated-list-item__wrapper': wrapper,     'mdc-deprecated-list-item--activated': activated,     'mdc-deprecated-list-item--selected': selected,     'mdc-deprecated-list-item--disabled': disabled,     'mdc-menu-item--selected': !nav && role === 'menuitem' && selected,     'smui-menu-item--non-interactive': nonInteractive,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   {...nav && activated ? { 'aria-current': 'page' } : {}}   {...!nav || wrapper ? { role } : {}}   {...!nav && role === 'option'     ? { 'aria-selected': selected ? 'true' : 'false' }     : {}}   {...!nav && (role === 'radio' || role === 'checkbox')     ? { 'aria-checked': input && input.checked ? 'true' : 'false' }     : {}}   {...!nav ? { 'aria-disabled': disabled ? 'true' : 'false' } : {}}   data-menu-item-skip-restore-focus={skipRestoreFocus || undefined}   {tabindex}   on:click={action}   on:keydown={handleKeydown}   on:SMUIGenericInput:mount={handleInputMount}   on:SMUIGenericInput:unmount={() => (input = undefined)}   {href}   {...internalAttrs}   {...$$restProps}   >",
			ctx
		});

		return block;
	}

	function create_fragment$k(ctx) {
		let switch_instance;
		let switch_instance_anchor;
		let current;

		const switch_instance_spread_levels = [
			{ tag: /*tag*/ ctx[14] },
			{
				use: [
					.../*nonInteractive*/ ctx[6]
					? []
					: [
							[
								Ripple,
								{
									ripple: !/*input*/ ctx[16],
									unbounded: false,
									color: (/*activated*/ ctx[1] || /*selected*/ ctx[0]) && /*color*/ ctx[5] == null
									? 'primary'
									: /*color*/ ctx[5],
									disabled: /*disabled*/ ctx[10],
									addClass: /*addClass*/ ctx[24],
									removeClass: /*removeClass*/ ctx[25],
									addStyle: /*addStyle*/ ctx[26]
								}
							]
						],
					/*forwardEvents*/ ctx[22],
					.../*use*/ ctx[2]
				]
			},
			{
				class: classMap({
					[/*className*/ ctx[3]]: true,
					'mdc-deprecated-list-item': !/*wrapper*/ ctx[8],
					'mdc-deprecated-list-item__wrapper': /*wrapper*/ ctx[8],
					'mdc-deprecated-list-item--activated': /*activated*/ ctx[1],
					'mdc-deprecated-list-item--selected': /*selected*/ ctx[0],
					'mdc-deprecated-list-item--disabled': /*disabled*/ ctx[10],
					'mdc-menu-item--selected': !/*nav*/ ctx[23] && /*role*/ ctx[9] === 'menuitem' && /*selected*/ ctx[0],
					'smui-menu-item--non-interactive': /*nonInteractive*/ ctx[6],
					.../*internalClasses*/ ctx[18]
				})
			},
			{
				style: Object.entries(/*internalStyles*/ ctx[19]).map(func$a).concat([/*style*/ ctx[4]]).join(' ')
			},
			/*nav*/ ctx[23] && /*activated*/ ctx[1]
			? { 'aria-current': 'page' }
			: {},
			!/*nav*/ ctx[23] || /*wrapper*/ ctx[8]
			? { role: /*role*/ ctx[9] }
			: {},
			!/*nav*/ ctx[23] && /*role*/ ctx[9] === 'option'
			? {
					'aria-selected': /*selected*/ ctx[0] ? 'true' : 'false'
				}
			: {},
			!/*nav*/ ctx[23] && (/*role*/ ctx[9] === 'radio' || /*role*/ ctx[9] === 'checkbox')
			? {
					'aria-checked': /*input*/ ctx[16] && /*input*/ ctx[16].checked
					? 'true'
					: 'false'
				}
			: {},
			!/*nav*/ ctx[23]
			? {
					'aria-disabled': /*disabled*/ ctx[10] ? 'true' : 'false'
				}
			: {},
			{
				"data-menu-item-skip-restore-focus": /*skipRestoreFocus*/ ctx[11] || undefined
			},
			{ tabindex: /*tabindex*/ ctx[21] },
			{ href: /*href*/ ctx[12] },
			/*internalAttrs*/ ctx[20],
			/*$$restProps*/ ctx[29]
		];

		var switch_value = /*component*/ ctx[13];

		function switch_props(ctx, dirty) {
			let switch_instance_props = {
				$$slots: { default: [create_default_slot$5] },
				$$scope: { ctx }
			};

			for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
				switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
			}

			if (dirty !== undefined && dirty[0] & /*tag, nonInteractive, input, activated, selected, color, disabled, addClass, removeClass, addStyle, forwardEvents, use, className, wrapper, nav, role, internalClasses, internalStyles, style, skipRestoreFocus, tabindex, href, internalAttrs, $$restProps*/ 670916479) {
				switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [
					dirty[0] & /*tag*/ 16384 && { tag: /*tag*/ ctx[14] },
					dirty[0] & /*nonInteractive, input, activated, selected, color, disabled, addClass, removeClass, addStyle, forwardEvents, use*/ 121701479 && {
						use: [
							.../*nonInteractive*/ ctx[6]
							? []
							: [
									[
										Ripple,
										{
											ripple: !/*input*/ ctx[16],
											unbounded: false,
											color: (/*activated*/ ctx[1] || /*selected*/ ctx[0]) && /*color*/ ctx[5] == null
											? 'primary'
											: /*color*/ ctx[5],
											disabled: /*disabled*/ ctx[10],
											addClass: /*addClass*/ ctx[24],
											removeClass: /*removeClass*/ ctx[25],
											addStyle: /*addStyle*/ ctx[26]
										}
									]
								],
							/*forwardEvents*/ ctx[22],
							.../*use*/ ctx[2]
						]
					},
					dirty[0] & /*className, wrapper, activated, selected, disabled, nav, role, nonInteractive, internalClasses*/ 8652619 && {
						class: classMap({
							[/*className*/ ctx[3]]: true,
							'mdc-deprecated-list-item': !/*wrapper*/ ctx[8],
							'mdc-deprecated-list-item__wrapper': /*wrapper*/ ctx[8],
							'mdc-deprecated-list-item--activated': /*activated*/ ctx[1],
							'mdc-deprecated-list-item--selected': /*selected*/ ctx[0],
							'mdc-deprecated-list-item--disabled': /*disabled*/ ctx[10],
							'mdc-menu-item--selected': !/*nav*/ ctx[23] && /*role*/ ctx[9] === 'menuitem' && /*selected*/ ctx[0],
							'smui-menu-item--non-interactive': /*nonInteractive*/ ctx[6],
							.../*internalClasses*/ ctx[18]
						})
					},
					dirty[0] & /*internalStyles, style*/ 524304 && {
						style: Object.entries(/*internalStyles*/ ctx[19]).map(func$a).concat([/*style*/ ctx[4]]).join(' ')
					},
					dirty[0] & /*nav, activated*/ 8388610 && get_spread_object(/*nav*/ ctx[23] && /*activated*/ ctx[1]
					? { 'aria-current': 'page' }
					: {}),
					dirty[0] & /*nav, wrapper, role*/ 8389376 && get_spread_object(!/*nav*/ ctx[23] || /*wrapper*/ ctx[8]
					? { role: /*role*/ ctx[9] }
					: {}),
					dirty[0] & /*nav, role, selected*/ 8389121 && get_spread_object(!/*nav*/ ctx[23] && /*role*/ ctx[9] === 'option'
					? {
							'aria-selected': /*selected*/ ctx[0] ? 'true' : 'false'
						}
					: {}),
					dirty[0] & /*nav, role, input*/ 8454656 && get_spread_object(!/*nav*/ ctx[23] && (/*role*/ ctx[9] === 'radio' || /*role*/ ctx[9] === 'checkbox')
					? {
							'aria-checked': /*input*/ ctx[16] && /*input*/ ctx[16].checked
							? 'true'
							: 'false'
						}
					: {}),
					dirty[0] & /*nav, disabled*/ 8389632 && get_spread_object(!/*nav*/ ctx[23]
					? {
							'aria-disabled': /*disabled*/ ctx[10] ? 'true' : 'false'
						}
					: {}),
					dirty[0] & /*skipRestoreFocus*/ 2048 && {
						"data-menu-item-skip-restore-focus": /*skipRestoreFocus*/ ctx[11] || undefined
					},
					dirty[0] & /*tabindex*/ 2097152 && { tabindex: /*tabindex*/ ctx[21] },
					dirty[0] & /*href*/ 4096 && { href: /*href*/ ctx[12] },
					dirty[0] & /*internalAttrs*/ 1048576 && get_spread_object(/*internalAttrs*/ ctx[20]),
					dirty[0] & /*$$restProps*/ 536870912 && get_spread_object(/*$$restProps*/ ctx[29])
				]));
			}

			return {
				props: switch_instance_props,
				$$inline: true
			};
		}

		if (switch_value) {
			switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
			/*switch_instance_binding*/ ctx[35](switch_instance);
			switch_instance.$on("click", /*action*/ ctx[15]);
			switch_instance.$on("keydown", /*handleKeydown*/ ctx[27]);
			switch_instance.$on("SMUIGenericInput:mount", /*handleInputMount*/ ctx[28]);
			switch_instance.$on("SMUIGenericInput:unmount", /*SMUIGenericInput_unmount_handler*/ ctx[36]);
		}

		const block = {
			c: function create() {
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (switch_instance) mount_component(switch_instance, target, anchor);
				insert_dev(target, switch_instance_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*component*/ 8192 && switch_value !== (switch_value = /*component*/ ctx[13])) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx, dirty));
						/*switch_instance_binding*/ ctx[35](switch_instance);
						switch_instance.$on("click", /*action*/ ctx[15]);
						switch_instance.$on("keydown", /*handleKeydown*/ ctx[27]);
						switch_instance.$on("SMUIGenericInput:mount", /*handleInputMount*/ ctx[28]);
						switch_instance.$on("SMUIGenericInput:unmount", /*SMUIGenericInput_unmount_handler*/ ctx[36]);
						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					const switch_instance_changes = (dirty[0] & /*tag, nonInteractive, input, activated, selected, color, disabled, addClass, removeClass, addStyle, forwardEvents, use, className, wrapper, nav, role, internalClasses, internalStyles, style, skipRestoreFocus, tabindex, href, internalAttrs, $$restProps*/ 670916479)
					? get_spread_update(switch_instance_spread_levels, [
							dirty[0] & /*tag*/ 16384 && { tag: /*tag*/ ctx[14] },
							dirty[0] & /*nonInteractive, input, activated, selected, color, disabled, addClass, removeClass, addStyle, forwardEvents, use*/ 121701479 && {
								use: [
									.../*nonInteractive*/ ctx[6]
									? []
									: [
											[
												Ripple,
												{
													ripple: !/*input*/ ctx[16],
													unbounded: false,
													color: (/*activated*/ ctx[1] || /*selected*/ ctx[0]) && /*color*/ ctx[5] == null
													? 'primary'
													: /*color*/ ctx[5],
													disabled: /*disabled*/ ctx[10],
													addClass: /*addClass*/ ctx[24],
													removeClass: /*removeClass*/ ctx[25],
													addStyle: /*addStyle*/ ctx[26]
												}
											]
										],
									/*forwardEvents*/ ctx[22],
									.../*use*/ ctx[2]
								]
							},
							dirty[0] & /*className, wrapper, activated, selected, disabled, nav, role, nonInteractive, internalClasses*/ 8652619 && {
								class: classMap({
									[/*className*/ ctx[3]]: true,
									'mdc-deprecated-list-item': !/*wrapper*/ ctx[8],
									'mdc-deprecated-list-item__wrapper': /*wrapper*/ ctx[8],
									'mdc-deprecated-list-item--activated': /*activated*/ ctx[1],
									'mdc-deprecated-list-item--selected': /*selected*/ ctx[0],
									'mdc-deprecated-list-item--disabled': /*disabled*/ ctx[10],
									'mdc-menu-item--selected': !/*nav*/ ctx[23] && /*role*/ ctx[9] === 'menuitem' && /*selected*/ ctx[0],
									'smui-menu-item--non-interactive': /*nonInteractive*/ ctx[6],
									.../*internalClasses*/ ctx[18]
								})
							},
							dirty[0] & /*internalStyles, style*/ 524304 && {
								style: Object.entries(/*internalStyles*/ ctx[19]).map(func$a).concat([/*style*/ ctx[4]]).join(' ')
							},
							dirty[0] & /*nav, activated*/ 8388610 && get_spread_object(/*nav*/ ctx[23] && /*activated*/ ctx[1]
							? { 'aria-current': 'page' }
							: {}),
							dirty[0] & /*nav, wrapper, role*/ 8389376 && get_spread_object(!/*nav*/ ctx[23] || /*wrapper*/ ctx[8]
							? { role: /*role*/ ctx[9] }
							: {}),
							dirty[0] & /*nav, role, selected*/ 8389121 && get_spread_object(!/*nav*/ ctx[23] && /*role*/ ctx[9] === 'option'
							? {
									'aria-selected': /*selected*/ ctx[0] ? 'true' : 'false'
								}
							: {}),
							dirty[0] & /*nav, role, input*/ 8454656 && get_spread_object(!/*nav*/ ctx[23] && (/*role*/ ctx[9] === 'radio' || /*role*/ ctx[9] === 'checkbox')
							? {
									'aria-checked': /*input*/ ctx[16] && /*input*/ ctx[16].checked
									? 'true'
									: 'false'
								}
							: {}),
							dirty[0] & /*nav, disabled*/ 8389632 && get_spread_object(!/*nav*/ ctx[23]
							? {
									'aria-disabled': /*disabled*/ ctx[10] ? 'true' : 'false'
								}
							: {}),
							dirty[0] & /*skipRestoreFocus*/ 2048 && {
								"data-menu-item-skip-restore-focus": /*skipRestoreFocus*/ ctx[11] || undefined
							},
							dirty[0] & /*tabindex*/ 2097152 && { tabindex: /*tabindex*/ ctx[21] },
							dirty[0] & /*href*/ 4096 && { href: /*href*/ ctx[12] },
							dirty[0] & /*internalAttrs*/ 1048576 && get_spread_object(/*internalAttrs*/ ctx[20]),
							dirty[0] & /*$$restProps*/ 536870912 && get_spread_object(/*$$restProps*/ ctx[29])
						])
					: {};

					if (dirty[0] & /*ripple*/ 128 | dirty[1] & /*$$scope*/ 64) {
						switch_instance_changes.$$scope = { dirty, ctx };
					}

					switch_instance.$set(switch_instance_changes);
				}
			},
			i: function intro(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(switch_instance_anchor);
				}

				/*switch_instance_binding*/ ctx[35](null);
				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$k.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}
	let counter$4 = 0;
	const func$a = ([name, value]) => `${name}: ${value};`;

	function instance$a($$self, $$props, $$invalidate) {
		let tabindex;

		const omit_props_names = [
			"use","class","style","color","nonInteractive","ripple","wrapper","activated","role","selected","disabled","skipRestoreFocus","tabindex","inputId","href","component","tag","action","getPrimaryText","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Item', slots, ['default']);
		var _a;
		const forwardEvents = forwardEventsBuilder(get_current_component());

		let uninitializedValue = () => {
			
		};

		function isUninitializedValue(value) {
			return value === uninitializedValue;
		}

		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { color = undefined } = $$props;

		let { nonInteractive = (_a = getContext('SMUI:list:nonInteractive')) !== null && _a !== void 0
		? _a
		: false } = $$props;

		setContext('SMUI:list:nonInteractive', undefined);
		let { ripple = !nonInteractive } = $$props;
		let { wrapper = false } = $$props;
		let { activated = false } = $$props;

		let { role = wrapper
		? 'presentation'
		: getContext('SMUI:list:item:role') } = $$props;

		setContext('SMUI:list:item:role', undefined);
		let { selected = false } = $$props;
		let { disabled = false } = $$props;
		let { skipRestoreFocus = false } = $$props;
		let { tabindex: tabindexProp = uninitializedValue } = $$props;
		let { inputId = 'SMUI-form-field-list-' + counter$4++ } = $$props;
		let { href = undefined } = $$props;
		let element;
		let internalClasses = {};
		let internalStyles = {};
		let internalAttrs = {};
		let input;
		let addTabindexIfNoItemsSelectedRaf;
		let nav = getContext('SMUI:list:item:nav');
		let { component = SmuiElement } = $$props;

		let { tag = component === SmuiElement
		? nav ? href ? 'a' : 'span' : 'li'
		: undefined } = $$props;

		setContext('SMUI:generic:input:props', { id: inputId });

		// Reset separator context, because we aren't directly under a list anymore.
		setContext('SMUI:separator:context', undefined);

		onMount(() => {
			// Tabindex needs to be '0' if this is the first non-disabled list item, and
			// no other item is selected.
			if (!selected && !nonInteractive) {
				let first = true;
				let el = element.getElement();

				while (el.previousSibling) {
					el = el.previousSibling;

					if (el.nodeType === 1 && el.classList.contains('mdc-deprecated-list-item') && !el.classList.contains('mdc-deprecated-list-item--disabled')) {
						first = false;
						break;
					}
				}

				if (first) {
					// This is first, so now set up a check that no other items are
					// selected.
					addTabindexIfNoItemsSelectedRaf = window.requestAnimationFrame(() => addTabindexIfNoItemsSelected(el));
				}
			}

			const accessor = {
				_smui_list_item_accessor: true,
				get element() {
					return getElement();
				},
				get selected() {
					return selected;
				},
				set selected(value) {
					$$invalidate(0, selected = value);
				},
				hasClass,
				addClass,
				removeClass,
				getAttr,
				addAttr,
				removeAttr,
				getPrimaryText,
				// For inputs within item.
				get checked() {
					var _a;

					return (_a = input && input.checked) !== null && _a !== void 0
					? _a
					: false;
				},
				set checked(value) {
					if (input) {
						$$invalidate(16, input.checked = !!value, input);
					}
				},
				get hasCheckbox() {
					return !!(input && '_smui_checkbox_accessor' in input);
				},
				get hasRadio() {
					return !!(input && '_smui_radio_accessor' in input);
				},
				activateRipple() {
					if (input) {
						input.activateRipple();
					}
				},
				deactivateRipple() {
					if (input) {
						input.deactivateRipple();
					}
				},
				// For select options.
				getValue() {
					return $$restProps.value;
				},
				// For autocomplete
				action,
				get tabindex() {
					return tabindex;
				},
				set tabindex(value) {
					$$invalidate(30, tabindexProp = value);
				},
				get disabled() {
					return disabled;
				},
				get activated() {
					return activated;
				},
				set activated(value) {
					$$invalidate(1, activated = value);
				}
			};

			dispatch(getElement(), 'SMUIListItem:mount', accessor);

			return () => {
				dispatch(getElement(), 'SMUIListItem:unmount', accessor);
			};
		});

		onDestroy(() => {
			if (addTabindexIfNoItemsSelectedRaf) {
				window.cancelAnimationFrame(addTabindexIfNoItemsSelectedRaf);
			}
		});

		function hasClass(className) {
			return className in internalClasses
			? internalClasses[className]
			: getElement().classList.contains(className);
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(18, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(18, internalClasses[className] = false, internalClasses);
			}
		}

		function addStyle(name, value) {
			if (internalStyles[name] != value) {
				if (value === '' || value == null) {
					delete internalStyles[name];
					$$invalidate(19, internalStyles);
				} else {
					$$invalidate(19, internalStyles[name] = value, internalStyles);
				}
			}
		}

		function getAttr(name) {
			var _a;

			return name in internalAttrs
			? (_a = internalAttrs[name]) !== null && _a !== void 0
				? _a
				: null
			: getElement().getAttribute(name);
		}

		function addAttr(name, value) {
			if (internalAttrs[name] !== value) {
				$$invalidate(20, internalAttrs[name] = value, internalAttrs);
			}
		}

		function removeAttr(name) {
			if (!(name in internalAttrs) || internalAttrs[name] != null) {
				$$invalidate(20, internalAttrs[name] = undefined, internalAttrs);
			}
		}

		function addTabindexIfNoItemsSelected(el) {
			// Look through next siblings to see if none of them are selected.
			let noneSelected = true;

			while (el.nextElementSibling) {
				el = el.nextElementSibling;

				if (el.nodeType === 1 && el.classList.contains('mdc-deprecated-list-item')) {
					const tabindexAttr = el.attributes.getNamedItem('tabindex');

					if (tabindexAttr && tabindexAttr.value === '0') {
						noneSelected = false;
						break;
					}
				}
			}

			if (noneSelected) {
				// This is the first element, and no other element is selected, so the
				// tabindex should be '0'.
				$$invalidate(21, tabindex = 0);
			}
		}

		function handleKeydown(e) {
			const isEnter = e.key === 'Enter';
			const isSpace = e.key === 'Space';

			if (isEnter || isSpace) {
				action(e);
			}
		}

		function handleInputMount(e) {
			if ('_smui_checkbox_accessor' in e.detail || '_smui_radio_accessor' in e.detail) {
				$$invalidate(16, input = e.detail);
			}
		}

		function action(e) {
			if (!disabled) {
				dispatch(getElement(), 'SMUI:action', e);
			}
		}

		function getPrimaryText() {
			var _a, _b, _c;
			const element = getElement();
			const primaryText = element.querySelector('.mdc-deprecated-list-item__primary-text');

			if (primaryText) {
				return (_a = primaryText.textContent) !== null && _a !== void 0
				? _a
				: '';
			}

			const text = element.querySelector('.mdc-deprecated-list-item__text');

			if (text) {
				return (_b = text.textContent) !== null && _b !== void 0
				? _b
				: '';
			}

			return (_c = element.textContent) !== null && _c !== void 0
			? _c
			: '';
		}

		function getElement() {
			return element.getElement();
		}

		function switch_instance_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(17, element);
			});
		}

		const SMUIGenericInput_unmount_handler = () => $$invalidate(16, input = undefined);

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(29, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(2, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(4, style = $$new_props.style);
			if ('color' in $$new_props) $$invalidate(5, color = $$new_props.color);
			if ('nonInteractive' in $$new_props) $$invalidate(6, nonInteractive = $$new_props.nonInteractive);
			if ('ripple' in $$new_props) $$invalidate(7, ripple = $$new_props.ripple);
			if ('wrapper' in $$new_props) $$invalidate(8, wrapper = $$new_props.wrapper);
			if ('activated' in $$new_props) $$invalidate(1, activated = $$new_props.activated);
			if ('role' in $$new_props) $$invalidate(9, role = $$new_props.role);
			if ('selected' in $$new_props) $$invalidate(0, selected = $$new_props.selected);
			if ('disabled' in $$new_props) $$invalidate(10, disabled = $$new_props.disabled);
			if ('skipRestoreFocus' in $$new_props) $$invalidate(11, skipRestoreFocus = $$new_props.skipRestoreFocus);
			if ('tabindex' in $$new_props) $$invalidate(30, tabindexProp = $$new_props.tabindex);
			if ('inputId' in $$new_props) $$invalidate(31, inputId = $$new_props.inputId);
			if ('href' in $$new_props) $$invalidate(12, href = $$new_props.href);
			if ('component' in $$new_props) $$invalidate(13, component = $$new_props.component);
			if ('tag' in $$new_props) $$invalidate(14, tag = $$new_props.tag);
			if ('$$scope' in $$new_props) $$invalidate(37, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			counter: counter$4,
			_a,
			onMount,
			onDestroy,
			getContext,
			setContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			dispatch,
			Ripple,
			SmuiElement,
			forwardEvents,
			uninitializedValue,
			isUninitializedValue,
			use,
			className,
			style,
			color,
			nonInteractive,
			ripple,
			wrapper,
			activated,
			role,
			selected,
			disabled,
			skipRestoreFocus,
			tabindexProp,
			inputId,
			href,
			element,
			internalClasses,
			internalStyles,
			internalAttrs,
			input,
			addTabindexIfNoItemsSelectedRaf,
			nav,
			component,
			tag,
			hasClass,
			addClass,
			removeClass,
			addStyle,
			getAttr,
			addAttr,
			removeAttr,
			addTabindexIfNoItemsSelected,
			handleKeydown,
			handleInputMount,
			action,
			getPrimaryText,
			getElement,
			tabindex
		});

		$$self.$inject_state = $$new_props => {
			if ('_a' in $$props) _a = $$new_props._a;
			if ('uninitializedValue' in $$props) uninitializedValue = $$new_props.uninitializedValue;
			if ('use' in $$props) $$invalidate(2, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(4, style = $$new_props.style);
			if ('color' in $$props) $$invalidate(5, color = $$new_props.color);
			if ('nonInteractive' in $$props) $$invalidate(6, nonInteractive = $$new_props.nonInteractive);
			if ('ripple' in $$props) $$invalidate(7, ripple = $$new_props.ripple);
			if ('wrapper' in $$props) $$invalidate(8, wrapper = $$new_props.wrapper);
			if ('activated' in $$props) $$invalidate(1, activated = $$new_props.activated);
			if ('role' in $$props) $$invalidate(9, role = $$new_props.role);
			if ('selected' in $$props) $$invalidate(0, selected = $$new_props.selected);
			if ('disabled' in $$props) $$invalidate(10, disabled = $$new_props.disabled);
			if ('skipRestoreFocus' in $$props) $$invalidate(11, skipRestoreFocus = $$new_props.skipRestoreFocus);
			if ('tabindexProp' in $$props) $$invalidate(30, tabindexProp = $$new_props.tabindexProp);
			if ('inputId' in $$props) $$invalidate(31, inputId = $$new_props.inputId);
			if ('href' in $$props) $$invalidate(12, href = $$new_props.href);
			if ('element' in $$props) $$invalidate(17, element = $$new_props.element);
			if ('internalClasses' in $$props) $$invalidate(18, internalClasses = $$new_props.internalClasses);
			if ('internalStyles' in $$props) $$invalidate(19, internalStyles = $$new_props.internalStyles);
			if ('internalAttrs' in $$props) $$invalidate(20, internalAttrs = $$new_props.internalAttrs);
			if ('input' in $$props) $$invalidate(16, input = $$new_props.input);
			if ('addTabindexIfNoItemsSelectedRaf' in $$props) addTabindexIfNoItemsSelectedRaf = $$new_props.addTabindexIfNoItemsSelectedRaf;
			if ('nav' in $$props) $$invalidate(23, nav = $$new_props.nav);
			if ('component' in $$props) $$invalidate(13, component = $$new_props.component);
			if ('tag' in $$props) $$invalidate(14, tag = $$new_props.tag);
			if ('tabindex' in $$props) $$invalidate(21, tabindex = $$new_props.tabindex);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty[0] & /*tabindexProp, nonInteractive, disabled, selected, input*/ 1073808449) {
				$$invalidate(21, tabindex = isUninitializedValue(tabindexProp)
				? !nonInteractive && !disabled && (selected || input && input.checked)
					? 0
					: -1
				: tabindexProp);
			}
		};

		return [
			selected,
			activated,
			use,
			className,
			style,
			color,
			nonInteractive,
			ripple,
			wrapper,
			role,
			disabled,
			skipRestoreFocus,
			href,
			component,
			tag,
			action,
			input,
			element,
			internalClasses,
			internalStyles,
			internalAttrs,
			tabindex,
			forwardEvents,
			nav,
			addClass,
			removeClass,
			addStyle,
			handleKeydown,
			handleInputMount,
			$$restProps,
			tabindexProp,
			inputId,
			getPrimaryText,
			getElement,
			slots,
			switch_instance_binding,
			SMUIGenericInput_unmount_handler,
			$$scope
		];
	}

	class Item extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(
				this,
				options,
				instance$a,
				create_fragment$k,
				safe_not_equal,
				{
					use: 2,
					class: 3,
					style: 4,
					color: 5,
					nonInteractive: 6,
					ripple: 7,
					wrapper: 8,
					activated: 1,
					role: 9,
					selected: 0,
					disabled: 10,
					skipRestoreFocus: 11,
					tabindex: 30,
					inputId: 31,
					href: 12,
					component: 13,
					tag: 14,
					action: 15,
					getPrimaryText: 32,
					getElement: 33
				},
				null,
				[-1, -1]
			);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Item",
				options,
				id: create_fragment$k.name
			});
		}

		get use() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get color() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set color(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get nonInteractive() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set nonInteractive(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get ripple() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set ripple(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get wrapper() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set wrapper(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get activated() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set activated(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get role() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set role(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get selected() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set selected(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get disabled() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set disabled(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get skipRestoreFocus() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set skipRestoreFocus(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tabindex() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tabindex(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get inputId() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set inputId(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get href() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set href(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get component() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set component(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tag() {
			throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tag(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get action() {
			return this.$$.ctx[15];
		}

		set action(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getPrimaryText() {
			return this.$$.ctx[32];
		}

		set getPrimaryText(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[33];
		}

		set getElement(value) {
			throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	classAdderBuilder({
	    class: 'mdc-deprecated-list-item__text',
	    tag: 'span',
	});

	classAdderBuilder({
	    class: 'mdc-deprecated-list-item__primary-text',
	    tag: 'span',
	});

	classAdderBuilder({
	    class: 'mdc-deprecated-list-item__secondary-text',
	    tag: 'span',
	});

	/* node_modules/@smui/select/node_modules/@smui/list/dist/Graphic.svelte generated by Svelte v4.2.19 */
	const file$i = "node_modules/@smui/select/node_modules/@smui/list/dist/Graphic.svelte";

	function create_fragment$j(ctx) {
		let span;
		let span_class_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[8].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

		let span_levels = [
			{
				class: span_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-deprecated-list-item__graphic': true,
					'mdc-menu__selection-group-icon': /*menuSelectionGroup*/ ctx[4]
				})
			},
			/*$$restProps*/ ctx[5]
		];

		let span_data = {};

		for (let i = 0; i < span_levels.length; i += 1) {
			span_data = assign(span_data, span_levels[i]);
		}

		const block = {
			c: function create() {
				span = element("span");
				if (default_slot) default_slot.c();
				set_attributes(span, span_data);
				add_location(span, file$i, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, span, anchor);

				if (default_slot) {
					default_slot.m(span, null);
				}

				/*span_binding*/ ctx[9](span);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, span, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[3].call(null, span))
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[7],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
							null
						);
					}
				}

				set_attributes(span, span_data = get_spread_update(span_levels, [
					(!current || dirty & /*className*/ 2 && span_class_value !== (span_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-deprecated-list-item__graphic': true,
						'mdc-menu__selection-group-icon': /*menuSelectionGroup*/ ctx[4]
					}))) && { class: span_class_value },
					dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(span);
				}

				if (default_slot) default_slot.d(detaching);
				/*span_binding*/ ctx[9](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$j.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$9($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","class","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Graphic', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let element;
		let menuSelectionGroup = getContext('SMUI:list:graphic:menu-selection-group');

		function getElement() {
			return element;
		}

		function span_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(2, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			getContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			forwardEvents,
			use,
			className,
			element,
			menuSelectionGroup,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('element' in $$props) $$invalidate(2, element = $$new_props.element);
			if ('menuSelectionGroup' in $$props) $$invalidate(4, menuSelectionGroup = $$new_props.menuSelectionGroup);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			element,
			forwardEvents,
			menuSelectionGroup,
			$$restProps,
			getElement,
			$$scope,
			slots,
			span_binding
		];
	}

	class Graphic extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$9, create_fragment$j, safe_not_equal, { use: 0, class: 1, getElement: 6 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Graphic",
				options,
				id: create_fragment$j.name
			});
		}

		get use() {
			throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Graphic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[6];
		}

		set getElement(value) {
			throw new Error("<Graphic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	classAdderBuilder({
	    class: 'mdc-deprecated-list-item__meta',
	    tag: 'span',
	});

	classAdderBuilder({
	    class: 'mdc-deprecated-list-group',
	    tag: 'div',
	});

	classAdderBuilder({
	    class: 'mdc-deprecated-list-group__subheader',
	    tag: 'h3',
	});

	classAdderBuilder({
	    class: 'mdc-menu__selection-group-icon',
	    component: Graphic,
	});

	/* node_modules/@smui/select/node_modules/@smui/floating-label/dist/FloatingLabel.svelte generated by Svelte v4.2.19 */

	const file$h = "node_modules/@smui/select/node_modules/@smui/floating-label/dist/FloatingLabel.svelte";

	// (19:0) {:else}
	function create_else_block$5(ctx) {
		let label;
		let label_class_value;
		let label_style_value;
		let label_for_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[22].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

		let label_levels = [
			{
				class: label_class_value = classMap({
					[/*className*/ ctx[3]]: true,
					'mdc-floating-label': true,
					'mdc-floating-label--float-above': /*floatAbove*/ ctx[0],
					'mdc-floating-label--required': /*required*/ ctx[1],
					.../*internalClasses*/ ctx[8]
				})
			},
			{
				style: label_style_value = Object.entries(/*internalStyles*/ ctx[9]).map(func_1$2).concat([/*style*/ ctx[4]]).join(' ')
			},
			{
				for: label_for_value = /*forId*/ ctx[5] || (/*inputProps*/ ctx[11]
				? /*inputProps*/ ctx[11].id
				: undefined)
			},
			/*$$restProps*/ ctx[12]
		];

		let label_data = {};

		for (let i = 0; i < label_levels.length; i += 1) {
			label_data = assign(label_data, label_levels[i]);
		}

		const block = {
			c: function create() {
				label = element("label");
				if (default_slot) default_slot.c();
				set_attributes(label, label_data);
				add_location(label, file$h, 19, 2, 494);
			},
			m: function mount(target, anchor) {
				insert_dev(target, label, anchor);

				if (default_slot) {
					default_slot.m(label, null);
				}

				/*label_binding*/ ctx[24](label);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, label, /*use*/ ctx[2])),
						action_destroyer(/*forwardEvents*/ ctx[10].call(null, label))
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[21],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
							null
						);
					}
				}

				set_attributes(label, label_data = get_spread_update(label_levels, [
					(!current || dirty & /*className, floatAbove, required, internalClasses*/ 267 && label_class_value !== (label_class_value = classMap({
						[/*className*/ ctx[3]]: true,
						'mdc-floating-label': true,
						'mdc-floating-label--float-above': /*floatAbove*/ ctx[0],
						'mdc-floating-label--required': /*required*/ ctx[1],
						.../*internalClasses*/ ctx[8]
					}))) && { class: label_class_value },
					(!current || dirty & /*internalStyles, style*/ 528 && label_style_value !== (label_style_value = Object.entries(/*internalStyles*/ ctx[9]).map(func_1$2).concat([/*style*/ ctx[4]]).join(' '))) && { style: label_style_value },
					(!current || dirty & /*forId*/ 32 && label_for_value !== (label_for_value = /*forId*/ ctx[5] || (/*inputProps*/ ctx[11]
					? /*inputProps*/ ctx[11].id
					: undefined))) && { for: label_for_value },
					dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 4) useActions_action.update.call(null, /*use*/ ctx[2]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(label);
				}

				if (default_slot) default_slot.d(detaching);
				/*label_binding*/ ctx[24](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$5.name,
			type: "else",
			source: "(19:0) {:else}",
			ctx
		});

		return block;
	}

	// (1:0) {#if wrapped}
	function create_if_block$a(ctx) {
		let span;
		let span_class_value;
		let span_style_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[22].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

		let span_levels = [
			{
				class: span_class_value = classMap({
					[/*className*/ ctx[3]]: true,
					'mdc-floating-label': true,
					'mdc-floating-label--float-above': /*floatAbove*/ ctx[0],
					'mdc-floating-label--required': /*required*/ ctx[1],
					.../*internalClasses*/ ctx[8]
				})
			},
			{
				style: span_style_value = Object.entries(/*internalStyles*/ ctx[9]).map(func$9).concat([/*style*/ ctx[4]]).join(' ')
			},
			/*$$restProps*/ ctx[12]
		];

		let span_data = {};

		for (let i = 0; i < span_levels.length; i += 1) {
			span_data = assign(span_data, span_levels[i]);
		}

		const block = {
			c: function create() {
				span = element("span");
				if (default_slot) default_slot.c();
				set_attributes(span, span_data);
				add_location(span, file$h, 1, 2, 16);
			},
			m: function mount(target, anchor) {
				insert_dev(target, span, anchor);

				if (default_slot) {
					default_slot.m(span, null);
				}

				/*span_binding*/ ctx[23](span);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, span, /*use*/ ctx[2])),
						action_destroyer(/*forwardEvents*/ ctx[10].call(null, span))
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[21],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
							null
						);
					}
				}

				set_attributes(span, span_data = get_spread_update(span_levels, [
					(!current || dirty & /*className, floatAbove, required, internalClasses*/ 267 && span_class_value !== (span_class_value = classMap({
						[/*className*/ ctx[3]]: true,
						'mdc-floating-label': true,
						'mdc-floating-label--float-above': /*floatAbove*/ ctx[0],
						'mdc-floating-label--required': /*required*/ ctx[1],
						.../*internalClasses*/ ctx[8]
					}))) && { class: span_class_value },
					(!current || dirty & /*internalStyles, style*/ 528 && span_style_value !== (span_style_value = Object.entries(/*internalStyles*/ ctx[9]).map(func$9).concat([/*style*/ ctx[4]]).join(' '))) && { style: span_style_value },
					dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 4) useActions_action.update.call(null, /*use*/ ctx[2]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(span);
				}

				if (default_slot) default_slot.d(detaching);
				/*span_binding*/ ctx[23](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$a.name,
			type: "if",
			source: "(1:0) {#if wrapped}",
			ctx
		});

		return block;
	}

	function create_fragment$i(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$a, create_else_block$5];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*wrapped*/ ctx[6]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$i.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$9 = ([name, value]) => `${name}: ${value};`;
	const func_1$2 = ([name, value]) => `${name}: ${value};`;

	function instance_1$9($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","style","for","floatAbove","required","wrapped","shake","float","setRequired","getWidth","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('FloatingLabel', slots, ['default']);
		var _a;
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { for: forId = undefined } = $$props;
		let { floatAbove = false } = $$props;
		let { required = false } = $$props;
		let { wrapped = false } = $$props;
		let element;
		let instance;
		let internalClasses = {};
		let internalStyles = {};

		let inputProps = (_a = getContext('SMUI:generic:input:props')) !== null && _a !== void 0
		? _a
		: {};

		let previousFloatAbove = floatAbove;
		let previousRequired = required;

		onMount(() => {
			$$invalidate(18, instance = new MDCFloatingLabelFoundation({
					addClass,
					removeClass,
					getWidth: () => {
						var _a, _b;
						const el = getElement();
						const clone = el.cloneNode(true);

						(_a = el.parentNode) === null || _a === void 0
						? void 0
						: _a.appendChild(clone);

						clone.classList.add('smui-floating-label--remove-transition');
						clone.classList.add('smui-floating-label--force-size');
						clone.classList.remove('mdc-floating-label--float-above');
						const scrollWidth = clone.scrollWidth;

						(_b = el.parentNode) === null || _b === void 0
						? void 0
						: _b.removeChild(clone);

						return scrollWidth;
					},
					registerInteractionHandler: (evtType, handler) => getElement().addEventListener(evtType, handler),
					deregisterInteractionHandler: (evtType, handler) => getElement().removeEventListener(evtType, handler)
				}));

			const accessor = {
				get element() {
					return getElement();
				},
				addStyle,
				removeStyle
			};

			dispatch(element, 'SMUIFloatingLabel:mount', accessor);
			instance.init();

			return () => {
				dispatch(element, 'SMUIFloatingLabel:unmount', accessor);
				instance.destroy();
			};
		});

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(8, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(8, internalClasses[className] = false, internalClasses);
			}
		}

		function addStyle(name, value) {
			if (internalStyles[name] != value) {
				if (value === '' || value == null) {
					delete internalStyles[name];
					$$invalidate(9, internalStyles);
				} else {
					$$invalidate(9, internalStyles[name] = value, internalStyles);
				}
			}
		}

		function removeStyle(name) {
			if (name in internalStyles) {
				delete internalStyles[name];
				$$invalidate(9, internalStyles);
			}
		}

		function shake(shouldShake) {
			instance.shake(shouldShake);
		}

		function float(shouldFloat) {
			$$invalidate(0, floatAbove = shouldFloat);
		}

		function setRequired(isRequired) {
			$$invalidate(1, required = isRequired);
		}

		function getWidth() {
			return instance.getWidth();
		}

		function getElement() {
			return element;
		}

		function span_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(7, element);
			});
		}

		function label_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(7, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(2, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(4, style = $$new_props.style);
			if ('for' in $$new_props) $$invalidate(5, forId = $$new_props.for);
			if ('floatAbove' in $$new_props) $$invalidate(0, floatAbove = $$new_props.floatAbove);
			if ('required' in $$new_props) $$invalidate(1, required = $$new_props.required);
			if ('wrapped' in $$new_props) $$invalidate(6, wrapped = $$new_props.wrapped);
			if ('$$scope' in $$new_props) $$invalidate(21, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			_a,
			MDCFloatingLabelFoundation,
			onMount,
			getContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			dispatch,
			forwardEvents,
			use,
			className,
			style,
			forId,
			floatAbove,
			required,
			wrapped,
			element,
			instance,
			internalClasses,
			internalStyles,
			inputProps,
			previousFloatAbove,
			previousRequired,
			addClass,
			removeClass,
			addStyle,
			removeStyle,
			shake,
			float,
			setRequired,
			getWidth,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('_a' in $$props) _a = $$new_props._a;
			if ('use' in $$props) $$invalidate(2, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(4, style = $$new_props.style);
			if ('forId' in $$props) $$invalidate(5, forId = $$new_props.forId);
			if ('floatAbove' in $$props) $$invalidate(0, floatAbove = $$new_props.floatAbove);
			if ('required' in $$props) $$invalidate(1, required = $$new_props.required);
			if ('wrapped' in $$props) $$invalidate(6, wrapped = $$new_props.wrapped);
			if ('element' in $$props) $$invalidate(7, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(18, instance = $$new_props.instance);
			if ('internalClasses' in $$props) $$invalidate(8, internalClasses = $$new_props.internalClasses);
			if ('internalStyles' in $$props) $$invalidate(9, internalStyles = $$new_props.internalStyles);
			if ('inputProps' in $$props) $$invalidate(11, inputProps = $$new_props.inputProps);
			if ('previousFloatAbove' in $$props) $$invalidate(19, previousFloatAbove = $$new_props.previousFloatAbove);
			if ('previousRequired' in $$props) $$invalidate(20, previousRequired = $$new_props.previousRequired);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*instance, previousFloatAbove, floatAbove*/ 786433) {
				if (instance && previousFloatAbove !== floatAbove) {
					$$invalidate(19, previousFloatAbove = floatAbove);
					instance.float(floatAbove);
				}
			}

			if ($$self.$$.dirty & /*instance, previousRequired, required*/ 1310722) {
				if (instance && previousRequired !== required) {
					$$invalidate(20, previousRequired = required);
					instance.setRequired(required);
				}
			}
		};

		return [
			floatAbove,
			required,
			use,
			className,
			style,
			forId,
			wrapped,
			element,
			internalClasses,
			internalStyles,
			forwardEvents,
			inputProps,
			$$restProps,
			shake,
			float,
			setRequired,
			getWidth,
			getElement,
			instance,
			previousFloatAbove,
			previousRequired,
			$$scope,
			slots,
			span_binding,
			label_binding
		];
	}

	let FloatingLabel$1 = class FloatingLabel extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance_1$9, create_fragment$i, safe_not_equal, {
				use: 2,
				class: 3,
				style: 4,
				for: 5,
				floatAbove: 0,
				required: 1,
				wrapped: 6,
				shake: 13,
				float: 14,
				setRequired: 15,
				getWidth: 16,
				getElement: 17
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "FloatingLabel",
				options,
				id: create_fragment$i.name
			});
		}

		get use() {
			throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get for() {
			throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set for(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get floatAbove() {
			throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set floatAbove(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get required() {
			throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set required(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get wrapped() {
			throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set wrapped(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get shake() {
			return this.$$.ctx[13];
		}

		set shake(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get float() {
			return this.$$.ctx[14];
		}

		set float(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get setRequired() {
			return this.$$.ctx[15];
		}

		set setRequired(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getWidth() {
			return this.$$.ctx[16];
		}

		set getWidth(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[17];
		}

		set getElement(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	/* node_modules/@smui/select/node_modules/@smui/line-ripple/dist/LineRipple.svelte generated by Svelte v4.2.19 */
	const file$g = "node_modules/@smui/select/node_modules/@smui/line-ripple/dist/LineRipple.svelte";

	function create_fragment$h(ctx) {
		let div;
		let div_class_value;
		let div_style_value;
		let useActions_action;
		let mounted;
		let dispose;

		let div_levels = [
			{
				class: div_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-line-ripple': true,
					'mdc-line-ripple--active': /*active*/ ctx[3],
					.../*internalClasses*/ ctx[5]
				})
			},
			{
				style: div_style_value = Object.entries(/*internalStyles*/ ctx[6]).map(func$8).concat([/*style*/ ctx[2]]).join(' ')
			},
			/*$$restProps*/ ctx[8]
		];

		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				set_attributes(div, div_data);
				add_location(div, file$g, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				/*div_binding*/ ctx[13](div);

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[7].call(null, div))
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*className, active, internalClasses*/ 42 && div_class_value !== (div_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-line-ripple': true,
						'mdc-line-ripple--active': /*active*/ ctx[3],
						.../*internalClasses*/ ctx[5]
					})) && { class: div_class_value },
					dirty & /*internalStyles, style*/ 68 && div_style_value !== (div_style_value = Object.entries(/*internalStyles*/ ctx[6]).map(func$8).concat([/*style*/ ctx[2]]).join(' ')) && { style: div_style_value },
					dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				/*div_binding*/ ctx[13](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$h.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$8 = ([name, value]) => `${name}: ${value};`;

	function instance_1$8($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","style","active","activate","deactivate","setRippleCenter","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('LineRipple', slots, []);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { active = false } = $$props;
		let element;
		let instance;
		let internalClasses = {};
		let internalStyles = {};

		onMount(() => {
			instance = new MDCLineRippleFoundation({
					addClass,
					removeClass,
					hasClass,
					setStyle: addStyle,
					registerEventHandler: (evtType, handler) => getElement().addEventListener(evtType, handler),
					deregisterEventHandler: (evtType, handler) => getElement().removeEventListener(evtType, handler)
				});

			instance.init();

			return () => {
				instance.destroy();
			};
		});

		function hasClass(className) {
			return className in internalClasses
			? internalClasses[className]
			: getElement().classList.contains(className);
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(5, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(5, internalClasses[className] = false, internalClasses);
			}
		}

		function addStyle(name, value) {
			if (internalStyles[name] != value) {
				if (value === '' || value == null) {
					delete internalStyles[name];
					$$invalidate(6, internalStyles);
				} else {
					$$invalidate(6, internalStyles[name] = value, internalStyles);
				}
			}
		}

		function activate() {
			instance.activate();
		}

		function deactivate() {
			instance.deactivate();
		}

		function setRippleCenter(xCoordinate) {
			instance.setRippleCenter(xCoordinate);
		}

		function getElement() {
			return element;
		}

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(4, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(2, style = $$new_props.style);
			if ('active' in $$new_props) $$invalidate(3, active = $$new_props.active);
		};

		$$self.$capture_state = () => ({
			MDCLineRippleFoundation,
			onMount,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			forwardEvents,
			use,
			className,
			style,
			active,
			element,
			instance,
			internalClasses,
			internalStyles,
			hasClass,
			addClass,
			removeClass,
			addStyle,
			activate,
			deactivate,
			setRippleCenter,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(2, style = $$new_props.style);
			if ('active' in $$props) $$invalidate(3, active = $$new_props.active);
			if ('element' in $$props) $$invalidate(4, element = $$new_props.element);
			if ('instance' in $$props) instance = $$new_props.instance;
			if ('internalClasses' in $$props) $$invalidate(5, internalClasses = $$new_props.internalClasses);
			if ('internalStyles' in $$props) $$invalidate(6, internalStyles = $$new_props.internalStyles);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			style,
			active,
			element,
			internalClasses,
			internalStyles,
			forwardEvents,
			$$restProps,
			activate,
			deactivate,
			setRippleCenter,
			getElement,
			div_binding
		];
	}

	let LineRipple$1 = class LineRipple extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance_1$8, create_fragment$h, safe_not_equal, {
				use: 0,
				class: 1,
				style: 2,
				active: 3,
				activate: 9,
				deactivate: 10,
				setRippleCenter: 11,
				getElement: 12
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "LineRipple",
				options,
				id: create_fragment$h.name
			});
		}

		get use() {
			throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get active() {
			throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set active(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get activate() {
			return this.$$.ctx[9];
		}

		set activate(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get deactivate() {
			return this.$$.ctx[10];
		}

		set deactivate(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get setRippleCenter() {
			return this.$$.ctx[11];
		}

		set setRippleCenter(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[12];
		}

		set getElement(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	/* node_modules/@smui/select/node_modules/@smui/notched-outline/dist/NotchedOutline.svelte generated by Svelte v4.2.19 */
	const file$f = "node_modules/@smui/select/node_modules/@smui/notched-outline/dist/NotchedOutline.svelte";

	// (17:2) {#if !noLabel}
	function create_if_block$9(ctx) {
		let div;
		let div_style_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[15].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				attr_dev(div, "class", "mdc-notched-outline__notch");
				attr_dev(div, "style", div_style_value = Object.entries(/*notchStyles*/ ctx[7]).map(func$7).join(' '));
				add_location(div, file$f, 17, 4, 479);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 16384)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[14],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, null),
							null
						);
					}
				}

				if (!current || dirty & /*notchStyles*/ 128 && div_style_value !== (div_style_value = Object.entries(/*notchStyles*/ ctx[7]).map(func$7).join(' '))) {
					attr_dev(div, "style", div_style_value);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$9.name,
			type: "if",
			source: "(17:2) {#if !noLabel}",
			ctx
		});

		return block;
	}

	function create_fragment$g(ctx) {
		let div2;
		let div0;
		let t0;
		let t1;
		let div1;
		let div2_class_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		let if_block = !/*noLabel*/ ctx[3] && create_if_block$9(ctx);

		let div2_levels = [
			{
				class: div2_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-notched-outline': true,
					'mdc-notched-outline--notched': /*notched*/ ctx[2],
					'mdc-notched-outline--no-label': /*noLabel*/ ctx[3],
					.../*internalClasses*/ ctx[6]
				})
			},
			/*$$restProps*/ ctx[10]
		];

		let div_data_2 = {};

		for (let i = 0; i < div2_levels.length; i += 1) {
			div_data_2 = assign(div_data_2, div2_levels[i]);
		}

		const block = {
			c: function create() {
				div2 = element("div");
				div0 = element("div");
				t0 = space();
				if (if_block) if_block.c();
				t1 = space();
				div1 = element("div");
				attr_dev(div0, "class", "mdc-notched-outline__leading");
				add_location(div0, file$f, 15, 2, 413);
				attr_dev(div1, "class", "mdc-notched-outline__trailing");
				add_location(div1, file$f, 26, 2, 682);
				set_attributes(div2, div_data_2);
				add_location(div2, file$f, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div2, anchor);
				append_dev(div2, div0);
				append_dev(div2, t0);
				if (if_block) if_block.m(div2, null);
				append_dev(div2, t1);
				append_dev(div2, div1);
				/*div2_binding*/ ctx[16](div2);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, div2, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[8].call(null, div2)),
						listen_dev(div2, "SMUIFloatingLabel:mount", /*handleFloatingLabelMount*/ ctx[9], false, false, false, false),
						listen_dev(div2, "SMUIFloatingLabel:unmount", /*SMUIFloatingLabel_unmount_handler*/ ctx[17], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (!/*noLabel*/ ctx[3]) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*noLabel*/ 8) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block$9(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(div2, t1);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}

				set_attributes(div2, div_data_2 = get_spread_update(div2_levels, [
					(!current || dirty & /*className, notched, noLabel, internalClasses*/ 78 && div2_class_value !== (div2_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-notched-outline': true,
						'mdc-notched-outline--notched': /*notched*/ ctx[2],
						'mdc-notched-outline--no-label': /*noLabel*/ ctx[3],
						.../*internalClasses*/ ctx[6]
					}))) && { class: div2_class_value },
					dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div2);
				}

				if (if_block) if_block.d();
				/*div2_binding*/ ctx[16](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$g.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$7 = ([name, value]) => `${name}: ${value};`;

	function instance_1$7($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","class","notched","noLabel","notch","closeNotch","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('NotchedOutline', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { notched = false } = $$props;
		let { noLabel = false } = $$props;
		let element;
		let instance;
		let floatingLabel;
		let internalClasses = {};
		let notchStyles = {};

		onMount(() => {
			instance = new MDCNotchedOutlineFoundation({
					addClass,
					removeClass,
					setNotchWidthProperty: width => addNotchStyle('width', width + 'px'),
					removeNotchWidthProperty: () => removeNotchStyle('width')
				});

			instance.init();

			return () => {
				instance.destroy();
			};
		});

		function handleFloatingLabelMount(event) {
			$$invalidate(4, floatingLabel = event.detail);
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(6, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(6, internalClasses[className] = false, internalClasses);
			}
		}

		function addNotchStyle(name, value) {
			if (notchStyles[name] != value) {
				if (value === '' || value == null) {
					delete notchStyles[name];
					$$invalidate(7, notchStyles);
				} else {
					$$invalidate(7, notchStyles[name] = value, notchStyles);
				}
			}
		}

		function removeNotchStyle(name) {
			if (name in notchStyles) {
				delete notchStyles[name];
				$$invalidate(7, notchStyles);
			}
		}

		function notch(notchWidth) {
			instance.notch(notchWidth);
		}

		function closeNotch() {
			instance.closeNotch();
		}

		function getElement() {
			return element;
		}

		function div2_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(5, element);
			});
		}

		const SMUIFloatingLabel_unmount_handler = () => $$invalidate(4, floatingLabel = undefined);

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('notched' in $$new_props) $$invalidate(2, notched = $$new_props.notched);
			if ('noLabel' in $$new_props) $$invalidate(3, noLabel = $$new_props.noLabel);
			if ('$$scope' in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			MDCNotchedOutlineFoundation,
			onMount,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			forwardEvents,
			use,
			className,
			notched,
			noLabel,
			element,
			instance,
			floatingLabel,
			internalClasses,
			notchStyles,
			handleFloatingLabelMount,
			addClass,
			removeClass,
			addNotchStyle,
			removeNotchStyle,
			notch,
			closeNotch,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('notched' in $$props) $$invalidate(2, notched = $$new_props.notched);
			if ('noLabel' in $$props) $$invalidate(3, noLabel = $$new_props.noLabel);
			if ('element' in $$props) $$invalidate(5, element = $$new_props.element);
			if ('instance' in $$props) instance = $$new_props.instance;
			if ('floatingLabel' in $$props) $$invalidate(4, floatingLabel = $$new_props.floatingLabel);
			if ('internalClasses' in $$props) $$invalidate(6, internalClasses = $$new_props.internalClasses);
			if ('notchStyles' in $$props) $$invalidate(7, notchStyles = $$new_props.notchStyles);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*floatingLabel*/ 16) {
				if (floatingLabel) {
					floatingLabel.addStyle('transition-duration', '0s');
					addClass('mdc-notched-outline--upgraded');

					requestAnimationFrame(() => {
						if (floatingLabel) {
							floatingLabel.removeStyle('transition-duration');
						}
					});
				} else {
					removeClass('mdc-notched-outline--upgraded');
				}
			}
		};

		return [
			use,
			className,
			notched,
			noLabel,
			floatingLabel,
			element,
			internalClasses,
			notchStyles,
			forwardEvents,
			handleFloatingLabelMount,
			$$restProps,
			notch,
			closeNotch,
			getElement,
			$$scope,
			slots,
			div2_binding,
			SMUIFloatingLabel_unmount_handler
		];
	}

	let NotchedOutline$1 = class NotchedOutline extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance_1$7, create_fragment$g, safe_not_equal, {
				use: 0,
				class: 1,
				notched: 2,
				noLabel: 3,
				notch: 11,
				closeNotch: 12,
				getElement: 13
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "NotchedOutline",
				options,
				id: create_fragment$g.name
			});
		}

		get use() {
			throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get notched() {
			throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set notched(value) {
			throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get noLabel() {
			throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set noLabel(value) {
			throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get notch() {
			return this.$$.ctx[11];
		}

		set notch(value) {
			throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get closeNotch() {
			return this.$$.ctx[12];
		}

		set closeNotch(value) {
			throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[13];
		}

		set getElement(value) {
			throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	/* node_modules/@smui/select/dist/helper-text/HelperText.svelte generated by Svelte v4.2.19 */

	const file$e = "node_modules/@smui/select/dist/helper-text/HelperText.svelte";

	// (17:31) {:else}
	function create_else_block$4(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2(/*content*/ ctx[8]);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			p: function update(ctx, dirty) {
				if (dirty & /*content*/ 256) set_data_dev(t, /*content*/ ctx[8]);
			},
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$4.name,
			type: "else",
			source: "(17:31) {:else}",
			ctx
		});

		return block;
	}

	// (17:2) {#if content == null}
	function create_if_block$8(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[13].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[12],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$8.name,
			type: "if",
			source: "(17:2) {#if content == null}",
			ctx
		});

		return block;
	}

	function create_fragment$f(ctx) {
		let div;
		let current_block_type_index;
		let if_block;
		let div_class_value;
		let div_aria_hidden_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const if_block_creators = [create_if_block$8, create_else_block$4];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*content*/ ctx[8] == null) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		let div_levels = [
			{
				class: div_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-select-helper-text': true,
					'mdc-select-helper-text--validation-msg': /*validationMsg*/ ctx[4],
					'mdc-select-helper-text--validation-msg-persistent': /*persistent*/ ctx[3],
					.../*internalClasses*/ ctx[6]
				})
			},
			{
				"aria-hidden": div_aria_hidden_value = /*persistent*/ ctx[3] ? undefined : 'true'
			},
			{ id: /*id*/ ctx[2] },
			/*internalAttrs*/ ctx[7],
			/*$$restProps*/ ctx[10]
		];

		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if_block.c();
				set_attributes(div, div_data);
				add_location(div, file$e, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				if_blocks[current_block_type_index].m(div, null);
				/*div_binding*/ ctx[14](div);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[9].call(null, div))
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(div, null);
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					(!current || dirty & /*className, validationMsg, persistent, internalClasses*/ 90 && div_class_value !== (div_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-select-helper-text': true,
						'mdc-select-helper-text--validation-msg': /*validationMsg*/ ctx[4],
						'mdc-select-helper-text--validation-msg-persistent': /*persistent*/ ctx[3],
						.../*internalClasses*/ ctx[6]
					}))) && { class: div_class_value },
					(!current || dirty & /*persistent*/ 8 && div_aria_hidden_value !== (div_aria_hidden_value = /*persistent*/ ctx[3] ? undefined : 'true')) && { "aria-hidden": div_aria_hidden_value },
					(!current || dirty & /*id*/ 4) && { id: /*id*/ ctx[2] },
					dirty & /*internalAttrs*/ 128 && /*internalAttrs*/ ctx[7],
					dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if_blocks[current_block_type_index].d();
				/*div_binding*/ ctx[14](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$f.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}
	let counter$3 = 0;

	function instance_1$6($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","class","id","persistent","validationMsg","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('HelperText', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { id = 'SMUI-select-helper-text-' + counter$3++ } = $$props;
		let { persistent = false } = $$props;
		let { validationMsg = false } = $$props;
		let element;
		let instance;
		let internalClasses = {};
		let internalAttrs = {};
		let content = undefined;

		onMount(() => {
			instance = new MDCSelectHelperTextFoundation({
					addClass,
					removeClass,
					hasClass,
					getAttr,
					setAttr: addAttr,
					removeAttr,
					setContent: value => {
						$$invalidate(8, content = value);
					}
				});

			if (id.startsWith('SMUI-select-helper-text-')) {
				dispatch(getElement(), 'SMUISelectHelperText:id', id);
			}

			dispatch(getElement(), 'SMUISelectHelperText:mount', instance);
			instance.init();

			return () => {
				dispatch(getElement(), 'SMUISelectHelperText:unmount', instance);
				instance.destroy();
			};
		});

		function hasClass(className) {
			return className in internalClasses
			? internalClasses[className]
			: getElement().classList.contains(className);
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(6, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(6, internalClasses[className] = false, internalClasses);
			}
		}

		function getAttr(name) {
			var _a;

			return name in internalAttrs
			? (_a = internalAttrs[name]) !== null && _a !== void 0
				? _a
				: null
			: getElement().getAttribute(name);
		}

		function addAttr(name, value) {
			if (internalAttrs[name] !== value) {
				$$invalidate(7, internalAttrs[name] = value, internalAttrs);
			}
		}

		function removeAttr(name) {
			if (!(name in internalAttrs) || internalAttrs[name] != null) {
				$$invalidate(7, internalAttrs[name] = undefined, internalAttrs);
			}
		}

		function getElement() {
			return element;
		}

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(5, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('id' in $$new_props) $$invalidate(2, id = $$new_props.id);
			if ('persistent' in $$new_props) $$invalidate(3, persistent = $$new_props.persistent);
			if ('validationMsg' in $$new_props) $$invalidate(4, validationMsg = $$new_props.validationMsg);
			if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			counter: counter$3,
			MDCSelectHelperTextFoundation,
			onMount,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			dispatch,
			forwardEvents,
			use,
			className,
			id,
			persistent,
			validationMsg,
			element,
			instance,
			internalClasses,
			internalAttrs,
			content,
			hasClass,
			addClass,
			removeClass,
			getAttr,
			addAttr,
			removeAttr,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('id' in $$props) $$invalidate(2, id = $$new_props.id);
			if ('persistent' in $$props) $$invalidate(3, persistent = $$new_props.persistent);
			if ('validationMsg' in $$props) $$invalidate(4, validationMsg = $$new_props.validationMsg);
			if ('element' in $$props) $$invalidate(5, element = $$new_props.element);
			if ('instance' in $$props) instance = $$new_props.instance;
			if ('internalClasses' in $$props) $$invalidate(6, internalClasses = $$new_props.internalClasses);
			if ('internalAttrs' in $$props) $$invalidate(7, internalAttrs = $$new_props.internalAttrs);
			if ('content' in $$props) $$invalidate(8, content = $$new_props.content);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			id,
			persistent,
			validationMsg,
			element,
			internalClasses,
			internalAttrs,
			content,
			forwardEvents,
			$$restProps,
			getElement,
			$$scope,
			slots,
			div_binding
		];
	}

	class HelperText extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance_1$6, create_fragment$f, safe_not_equal, {
				use: 0,
				class: 1,
				id: 2,
				persistent: 3,
				validationMsg: 4,
				getElement: 11
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "HelperText",
				options,
				id: create_fragment$f.name
			});
		}

		get use() {
			throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get id() {
			throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set id(value) {
			throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get persistent() {
			throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set persistent(value) {
			throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get validationMsg() {
			throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set validationMsg(value) {
			throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[11];
		}

		set getElement(value) {
			throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/select/dist/Select.svelte generated by Svelte v4.2.19 */
	const file$d = "node_modules/@smui/select/dist/Select.svelte";
	const get_helperText_slot_changes = dirty => ({});
	const get_helperText_slot_context = ctx => ({});
	const get_leadingIcon_slot_changes$1 = dirty => ({});
	const get_leadingIcon_slot_context$1 = ctx => ({});
	const get_label_slot_changes_1$1 = dirty => ({});
	const get_label_slot_context_1$1 = ctx => ({});
	const get_label_slot_changes$1 = dirty => ({});
	const get_label_slot_context$1 = ctx => ({});

	// (51:2) {#if hiddenInput}
	function create_if_block_6$2(ctx) {
		let input;

		let input_levels = [
			{ type: "hidden" },
			{ required: /*required*/ ctx[10] },
			{ disabled: /*disabled*/ ctx[6] },
			{ value: /*value*/ ctx[0] },
			prefixFilter(/*$$restProps*/ ctx[53], 'input$')
		];

		let input_data = {};

		for (let i = 0; i < input_levels.length; i += 1) {
			input_data = assign(input_data, input_levels[i]);
		}

		const block = {
			c: function create() {
				input = element("input");
				set_attributes(input, input_data);
				add_location(input, file$d, 51, 4, 1440);
			},
			m: function mount(target, anchor) {
				insert_dev(target, input, anchor);
				if (input.autofocus) input.focus();
			},
			p: function update(ctx, dirty) {
				set_attributes(input, input_data = get_spread_update(input_levels, [
					{ type: "hidden" },
					dirty[0] & /*required*/ 1024 && { required: /*required*/ ctx[10] },
					dirty[0] & /*disabled*/ 64 && { disabled: /*disabled*/ ctx[6] },
					dirty[0] & /*value*/ 1 && { value: /*value*/ ctx[0] },
					dirty[1] & /*$$restProps*/ 4194304 && prefixFilter(/*$$restProps*/ ctx[53], 'input$')
				]));
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(input);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_6$2.name,
			type: "if",
			source: "(51:2) {#if hiddenInput}",
			ctx
		});

		return block;
	}

	// (88:4) {#if variant === 'filled'}
	function create_if_block_5$2(ctx) {
		let span;

		const block = {
			c: function create() {
				span = element("span");
				attr_dev(span, "class", "mdc-select__ripple");
				add_location(span, file$d, 88, 6, 2452);
			},
			m: function mount(target, anchor) {
				insert_dev(target, span, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(span);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_5$2.name,
			type: "if",
			source: "(88:4) {#if variant === 'filled'}",
			ctx
		});

		return block;
	}

	// (91:4) {#if variant !== 'outlined' && !noLabel && (label != null || $$slots.label)}
	function create_if_block_4$2(ctx) {
		let floatinglabel;
		let current;

		const floatinglabel_spread_levels = [
			{ id: /*inputId*/ ctx[11] + '-smui-label' },
			{
				floatAbove: /*$selectedTextStore*/ ctx[42] !== ''
			},
			{ required: /*required*/ ctx[10] },
			prefixFilter(/*$$restProps*/ ctx[53], 'label$')
		];

		let floatinglabel_props = {
			$$slots: { default: [create_default_slot_5$2] },
			$$scope: { ctx }
		};

		for (let i = 0; i < floatinglabel_spread_levels.length; i += 1) {
			floatinglabel_props = assign(floatinglabel_props, floatinglabel_spread_levels[i]);
		}

		floatinglabel = new FloatingLabel$1({
				props: floatinglabel_props,
				$$inline: true
			});

		/*floatinglabel_binding*/ ctx[67](floatinglabel);

		const block = {
			c: function create() {
				create_component(floatinglabel.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(floatinglabel, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const floatinglabel_changes = (dirty[0] & /*inputId, required*/ 3072 | dirty[1] & /*$selectedTextStore, $$restProps*/ 4196352)
				? get_spread_update(floatinglabel_spread_levels, [
						dirty[0] & /*inputId*/ 2048 && { id: /*inputId*/ ctx[11] + '-smui-label' },
						dirty[1] & /*$selectedTextStore*/ 2048 && {
							floatAbove: /*$selectedTextStore*/ ctx[42] !== ''
						},
						dirty[0] & /*required*/ 1024 && { required: /*required*/ ctx[10] },
						dirty[1] & /*$$restProps*/ 4194304 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[53], 'label$'))
					])
				: {};

				if (dirty[0] & /*label*/ 512 | dirty[2] & /*$$scope*/ 33554432) {
					floatinglabel_changes.$$scope = { dirty, ctx };
				}

				floatinglabel.$set(floatinglabel_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(floatinglabel.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(floatinglabel.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				/*floatinglabel_binding*/ ctx[67](null);
				destroy_component(floatinglabel, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_4$2.name,
			type: "if",
			source: "(91:4) {#if variant !== 'outlined' && !noLabel && (label != null || $$slots.label)}",
			ctx
		});

		return block;
	}

	// (92:6) <FloatingLabel         bind:this={floatingLabel}         id={inputId + '-smui-label'}         floatAbove={$selectedTextStore !== ''}         {required}         {...prefixFilter($$restProps, 'label$')}         >
	function create_default_slot_5$2(ctx) {
		let t_value = (/*label*/ ctx[9] == null ? '' : /*label*/ ctx[9]) + "";
		let t;
		let current;
		const label_slot_template = /*#slots*/ ctx[64].label;
		const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[87], get_label_slot_context$1);

		const block = {
			c: function create() {
				t = text$2(t_value);
				if (label_slot) label_slot.c();
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);

				if (label_slot) {
					label_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if ((!current || dirty[0] & /*label*/ 512) && t_value !== (t_value = (/*label*/ ctx[9] == null ? '' : /*label*/ ctx[9]) + "")) set_data_dev(t, t_value);

				if (label_slot) {
					if (label_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							label_slot,
							label_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(label_slot_template, /*$$scope*/ ctx[87], dirty, get_label_slot_changes$1),
							get_label_slot_context$1
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(label_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(label_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				if (label_slot) label_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_5$2.name,
			type: "slot",
			source: "(92:6) <FloatingLabel         bind:this={floatingLabel}         id={inputId + '-smui-label'}         floatAbove={$selectedTextStore !== ''}         {required}         {...prefixFilter($$restProps, 'label$')}         >",
			ctx
		});

		return block;
	}

	// (101:4) {#if variant === 'outlined'}
	function create_if_block_2$2(ctx) {
		let notchedoutline;
		let current;

		const notchedoutline_spread_levels = [
			{
				noLabel: /*noLabel*/ ctx[8] || /*label*/ ctx[9] == null && !/*$$slots*/ ctx[54].label
			},
			prefixFilter(/*$$restProps*/ ctx[53], 'outline$')
		];

		let notchedoutline_props = {
			$$slots: { default: [create_default_slot_3$2] },
			$$scope: { ctx }
		};

		for (let i = 0; i < notchedoutline_spread_levels.length; i += 1) {
			notchedoutline_props = assign(notchedoutline_props, notchedoutline_spread_levels[i]);
		}

		notchedoutline = new NotchedOutline$1({
				props: notchedoutline_props,
				$$inline: true
			});

		/*notchedoutline_binding*/ ctx[69](notchedoutline);

		const block = {
			c: function create() {
				create_component(notchedoutline.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(notchedoutline, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const notchedoutline_changes = (dirty[0] & /*noLabel, label*/ 768 | dirty[1] & /*$$slots, $$restProps*/ 12582912)
				? get_spread_update(notchedoutline_spread_levels, [
						dirty[0] & /*noLabel, label*/ 768 | dirty[1] & /*$$slots*/ 8388608 && {
							noLabel: /*noLabel*/ ctx[8] || /*label*/ ctx[9] == null && !/*$$slots*/ ctx[54].label
						},
						dirty[1] & /*$$restProps*/ 4194304 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[53], 'outline$'))
					])
				: {};

				if (dirty[0] & /*inputId, required, label, noLabel*/ 3840 | dirty[1] & /*$selectedTextStore, $$restProps, floatingLabel, $$slots*/ 12585216 | dirty[2] & /*$$scope*/ 33554432) {
					notchedoutline_changes.$$scope = { dirty, ctx };
				}

				notchedoutline.$set(notchedoutline_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(notchedoutline.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(notchedoutline.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				/*notchedoutline_binding*/ ctx[69](null);
				destroy_component(notchedoutline, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_2$2.name,
			type: "if",
			source: "(101:4) {#if variant === 'outlined'}",
			ctx
		});

		return block;
	}

	// (107:8) {#if !noLabel && (label != null || $$slots.label)}
	function create_if_block_3$2(ctx) {
		let floatinglabel;
		let current;

		const floatinglabel_spread_levels = [
			{ id: /*inputId*/ ctx[11] + '-smui-label' },
			{
				floatAbove: /*$selectedTextStore*/ ctx[42] !== ''
			},
			{ required: /*required*/ ctx[10] },
			prefixFilter(/*$$restProps*/ ctx[53], 'label$')
		];

		let floatinglabel_props = {
			$$slots: { default: [create_default_slot_4$2] },
			$$scope: { ctx }
		};

		for (let i = 0; i < floatinglabel_spread_levels.length; i += 1) {
			floatinglabel_props = assign(floatinglabel_props, floatinglabel_spread_levels[i]);
		}

		floatinglabel = new FloatingLabel$1({
				props: floatinglabel_props,
				$$inline: true
			});

		/*floatinglabel_binding_1*/ ctx[68](floatinglabel);

		const block = {
			c: function create() {
				create_component(floatinglabel.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(floatinglabel, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const floatinglabel_changes = (dirty[0] & /*inputId, required*/ 3072 | dirty[1] & /*$selectedTextStore, $$restProps*/ 4196352)
				? get_spread_update(floatinglabel_spread_levels, [
						dirty[0] & /*inputId*/ 2048 && { id: /*inputId*/ ctx[11] + '-smui-label' },
						dirty[1] & /*$selectedTextStore*/ 2048 && {
							floatAbove: /*$selectedTextStore*/ ctx[42] !== ''
						},
						dirty[0] & /*required*/ 1024 && { required: /*required*/ ctx[10] },
						dirty[1] & /*$$restProps*/ 4194304 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[53], 'label$'))
					])
				: {};

				if (dirty[0] & /*label*/ 512 | dirty[2] & /*$$scope*/ 33554432) {
					floatinglabel_changes.$$scope = { dirty, ctx };
				}

				floatinglabel.$set(floatinglabel_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(floatinglabel.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(floatinglabel.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				/*floatinglabel_binding_1*/ ctx[68](null);
				destroy_component(floatinglabel, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_3$2.name,
			type: "if",
			source: "(107:8) {#if !noLabel && (label != null || $$slots.label)}",
			ctx
		});

		return block;
	}

	// (108:10) <FloatingLabel             bind:this={floatingLabel}             id={inputId + '-smui-label'}             floatAbove={$selectedTextStore !== ''}             {required}             {...prefixFilter($$restProps, 'label$')}             >
	function create_default_slot_4$2(ctx) {
		let t_value = (/*label*/ ctx[9] == null ? '' : /*label*/ ctx[9]) + "";
		let t;
		let current;
		const label_slot_template = /*#slots*/ ctx[64].label;
		const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[87], get_label_slot_context_1$1);

		const block = {
			c: function create() {
				t = text$2(t_value);
				if (label_slot) label_slot.c();
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);

				if (label_slot) {
					label_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if ((!current || dirty[0] & /*label*/ 512) && t_value !== (t_value = (/*label*/ ctx[9] == null ? '' : /*label*/ ctx[9]) + "")) set_data_dev(t, t_value);

				if (label_slot) {
					if (label_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							label_slot,
							label_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(label_slot_template, /*$$scope*/ ctx[87], dirty, get_label_slot_changes_1$1),
							get_label_slot_context_1$1
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(label_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(label_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				if (label_slot) label_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_4$2.name,
			type: "slot",
			source: "(108:10) <FloatingLabel             bind:this={floatingLabel}             id={inputId + '-smui-label'}             floatAbove={$selectedTextStore !== ''}             {required}             {...prefixFilter($$restProps, 'label$')}             >",
			ctx
		});

		return block;
	}

	// (102:6) <NotchedOutline         bind:this={notchedOutline}         noLabel={noLabel || (label == null && !$$slots.label)}         {...prefixFilter($$restProps, 'outline$')}       >
	function create_default_slot_3$2(ctx) {
		let if_block_anchor;
		let current;
		let if_block = !/*noLabel*/ ctx[8] && (/*label*/ ctx[9] != null || /*$$slots*/ ctx[54].label) && create_if_block_3$2(ctx);

		const block = {
			c: function create() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			m: function mount(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (!/*noLabel*/ ctx[8] && (/*label*/ ctx[9] != null || /*$$slots*/ ctx[54].label)) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty[0] & /*noLabel, label*/ 768 | dirty[1] & /*$$slots*/ 8388608) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block_3$2(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if (if_block) if_block.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_3$2.name,
			type: "slot",
			source: "(102:6) <NotchedOutline         bind:this={notchedOutline}         noLabel={noLabel || (label == null && !$$slots.label)}         {...prefixFilter($$restProps, 'outline$')}       >",
			ctx
		});

		return block;
	}

	// (170:4) {#if variant !== 'outlined' && ripple}
	function create_if_block_1$4(ctx) {
		let lineripple;
		let current;
		const lineripple_spread_levels = [prefixFilter(/*$$restProps*/ ctx[53], 'ripple$')];
		let lineripple_props = {};

		for (let i = 0; i < lineripple_spread_levels.length; i += 1) {
			lineripple_props = assign(lineripple_props, lineripple_spread_levels[i]);
		}

		lineripple = new LineRipple$1({ props: lineripple_props, $$inline: true });
		/*lineripple_binding*/ ctx[70](lineripple);

		const block = {
			c: function create() {
				create_component(lineripple.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(lineripple, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const lineripple_changes = (dirty[1] & /*$$restProps*/ 4194304)
				? get_spread_update(lineripple_spread_levels, [get_spread_object(prefixFilter(/*$$restProps*/ ctx[53], 'ripple$'))])
				: {};

				lineripple.$set(lineripple_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(lineripple.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(lineripple.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				/*lineripple_binding*/ ctx[70](null);
				destroy_component(lineripple, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$4.name,
			type: "if",
			source: "(170:4) {#if variant !== 'outlined' && ripple}",
			ctx
		});

		return block;
	}

	// (197:4) <List       role="listbox"       {wrapFocus}       bind:selectedIndex       on:SMUIList:mount={(event) => (list = event.detail)}       {...prefixFilter($$restProps, 'list$')}>
	function create_default_slot_2$2(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[64].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[87], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[87], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_2$2.name,
			type: "slot",
			source: "(197:4) <List       role=\\\"listbox\\\"       {wrapFocus}       bind:selectedIndex       on:SMUIList:mount={(event) => (list = event.detail)}       {...prefixFilter($$restProps, 'list$')}>",
			ctx
		});

		return block;
	}

	// (178:2) <Menu     class={classMap({       [menu$class]: true,       'mdc-select__menu': true,       ...menuClasses,     })}     id={menuId}     fullWidth     anchor={false}     {anchorElement}     {anchorCorner}     bind:open={menuOpen}     on:SMUIMenu:selected={(event) =>       instance && instance.handleMenuItemAction(event.detail.index)}     on:SMUIMenuSurface:closing={() => instance && instance.handleMenuClosing()}     on:SMUIMenuSurface:closed={() => instance && instance.handleMenuClosed()}     on:SMUIMenuSurface:opened={() => instance && instance.handleMenuOpened()}     {...prefixFilter($$restProps, 'menu$')}   >
	function create_default_slot_1$2(ctx) {
		let list_1;
		let updating_selectedIndex;
		let current;

		const list_1_spread_levels = [
			{ role: "listbox" },
			{ wrapFocus: /*wrapFocus*/ ctx[35] },
			prefixFilter(/*$$restProps*/ ctx[53], 'list$')
		];

		function list_1_selectedIndex_binding(value) {
			/*list_1_selectedIndex_binding*/ ctx[75](value);
		}

		let list_1_props = {
			$$slots: { default: [create_default_slot_2$2] },
			$$scope: { ctx }
		};

		for (let i = 0; i < list_1_spread_levels.length; i += 1) {
			list_1_props = assign(list_1_props, list_1_spread_levels[i]);
		}

		if (/*selectedIndex*/ ctx[24] !== void 0) {
			list_1_props.selectedIndex = /*selectedIndex*/ ctx[24];
		}

		list_1 = new List({ props: list_1_props, $$inline: true });
		binding_callbacks.push(() => bind(list_1, 'selectedIndex', list_1_selectedIndex_binding));
		list_1.$on("SMUIList:mount", /*SMUIList_mount_handler*/ ctx[76]);

		const block = {
			c: function create() {
				create_component(list_1.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(list_1, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const list_1_changes = (dirty[1] & /*wrapFocus, $$restProps*/ 4194320)
				? get_spread_update(list_1_spread_levels, [
						list_1_spread_levels[0],
						dirty[1] & /*wrapFocus*/ 16 && { wrapFocus: /*wrapFocus*/ ctx[35] },
						dirty[1] & /*$$restProps*/ 4194304 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[53], 'list$'))
					])
				: {};

				if (dirty[2] & /*$$scope*/ 33554432) {
					list_1_changes.$$scope = { dirty, ctx };
				}

				if (!updating_selectedIndex && dirty[0] & /*selectedIndex*/ 16777216) {
					updating_selectedIndex = true;
					list_1_changes.selectedIndex = /*selectedIndex*/ ctx[24];
					add_flush_callback(() => updating_selectedIndex = false);
				}

				list_1.$set(list_1_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(list_1.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(list_1.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(list_1, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_1$2.name,
			type: "slot",
			source: "(178:2) <Menu     class={classMap({       [menu$class]: true,       'mdc-select__menu': true,       ...menuClasses,     })}     id={menuId}     fullWidth     anchor={false}     {anchorElement}     {anchorCorner}     bind:open={menuOpen}     on:SMUIMenu:selected={(event) =>       instance && instance.handleMenuItemAction(event.detail.index)}     on:SMUIMenuSurface:closing={() => instance && instance.handleMenuClosing()}     on:SMUIMenuSurface:closed={() => instance && instance.handleMenuClosed()}     on:SMUIMenuSurface:opened={() => instance && instance.handleMenuOpened()}     {...prefixFilter($$restProps, 'menu$')}   >",
			ctx
		});

		return block;
	}

	// (206:0) {#if $$slots.helperText}
	function create_if_block$7(ctx) {
		let helpertext;
		let current;
		const helpertext_spread_levels = [prefixFilter(/*$$restProps*/ ctx[53], 'helperText$')];

		let helpertext_props = {
			$$slots: { default: [create_default_slot$4] },
			$$scope: { ctx }
		};

		for (let i = 0; i < helpertext_spread_levels.length; i += 1) {
			helpertext_props = assign(helpertext_props, helpertext_spread_levels[i]);
		}

		helpertext = new HelperText({ props: helpertext_props, $$inline: true });
		helpertext.$on("SMUISelectHelperText:id", /*SMUISelectHelperText_id_handler*/ ctx[84]);
		helpertext.$on("SMUISelectHelperText:mount", /*SMUISelectHelperText_mount_handler*/ ctx[85]);
		helpertext.$on("SMUISelectHelperText:unmount", /*SMUISelectHelperText_unmount_handler*/ ctx[86]);

		const block = {
			c: function create() {
				create_component(helpertext.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(helpertext, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const helpertext_changes = (dirty[1] & /*$$restProps*/ 4194304)
				? get_spread_update(helpertext_spread_levels, [get_spread_object(prefixFilter(/*$$restProps*/ ctx[53], 'helperText$'))])
				: {};

				if (dirty[2] & /*$$scope*/ 33554432) {
					helpertext_changes.$$scope = { dirty, ctx };
				}

				helpertext.$set(helpertext_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(helpertext.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(helpertext.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(helpertext, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$7.name,
			type: "if",
			source: "(206:0) {#if $$slots.helperText}",
			ctx
		});

		return block;
	}

	// (207:2) <HelperText     on:SMUISelectHelperText:id={(event) => (helperId = event.detail)}     on:SMUISelectHelperText:mount={(event) => (helperText = event.detail)}     on:SMUISelectHelperText:unmount={() => {       helperId = undefined;       helperText = undefined;     }}     {...prefixFilter($$restProps, 'helperText$')}     >
	function create_default_slot$4(ctx) {
		let current;
		const helperText_slot_template = /*#slots*/ ctx[64].helperText;
		const helperText_slot = create_slot(helperText_slot_template, ctx, /*$$scope*/ ctx[87], get_helperText_slot_context);

		const block = {
			c: function create() {
				if (helperText_slot) helperText_slot.c();
			},
			m: function mount(target, anchor) {
				if (helperText_slot) {
					helperText_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (helperText_slot) {
					if (helperText_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							helperText_slot,
							helperText_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(helperText_slot_template, /*$$scope*/ ctx[87], dirty, get_helperText_slot_changes),
							get_helperText_slot_context
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(helperText_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(helperText_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (helperText_slot) helperText_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$4.name,
			type: "slot",
			source: "(207:2) <HelperText     on:SMUISelectHelperText:id={(event) => (helperId = event.detail)}     on:SMUISelectHelperText:mount={(event) => (helperText = event.detail)}     on:SMUISelectHelperText:unmount={() => {       helperId = undefined;       helperText = undefined;     }}     {...prefixFilter($$restProps, 'helperText$')}     >",
			ctx
		});

		return block;
	}

	function create_fragment$e(ctx) {
		let div1;
		let t0;
		let div0;
		let t1;
		let t2;
		let t3;
		let t4;
		let span1;
		let span0;
		let t5;
		let span0_id_value;
		let span0_class_value;
		let span0_aria_labelledby_value;
		let useActions_action;
		let span1_class_value;
		let useActions_action_1;
		let t6;
		let span2;
		let svg;
		let polygon0;
		let polygon1;
		let span2_class_value;
		let useActions_action_2;
		let t7;
		let div0_class_value;
		let div0_aria_required_value;
		let div0_aria_disabled_value;
		let div0_aria_expanded_value;
		let useActions_action_3;
		let t8;
		let menu;
		let updating_open;
		let div1_class_value;
		let div1_style_value;
		let Ripple_action;
		let useActions_action_4;
		let t9;
		let if_block5_anchor;
		let current;
		let mounted;
		let dispose;
		let if_block0 = /*hiddenInput*/ ctx[12] && create_if_block_6$2(ctx);
		let if_block1 = /*variant*/ ctx[7] === 'filled' && create_if_block_5$2(ctx);
		let if_block2 = /*variant*/ ctx[7] !== 'outlined' && !/*noLabel*/ ctx[8] && (/*label*/ ctx[9] != null || /*$$slots*/ ctx[54].label) && create_if_block_4$2(ctx);
		let if_block3 = /*variant*/ ctx[7] === 'outlined' && create_if_block_2$2(ctx);
		const leadingIcon_slot_template = /*#slots*/ ctx[64].leadingIcon;
		const leadingIcon_slot = create_slot(leadingIcon_slot_template, ctx, /*$$scope*/ ctx[87], get_leadingIcon_slot_context$1);

		let span0_levels = [
			{
				id: span0_id_value = /*inputId*/ ctx[11] + '-smui-selected-text'
			},
			{
				class: span0_class_value = classMap({
					[/*selectedText$class*/ ctx[19]]: true,
					'mdc-select__selected-text': true
				})
			},
			{ role: "button" },
			{ "aria-haspopup": "listbox" },
			{
				"aria-labelledby": span0_aria_labelledby_value = /*inputId*/ ctx[11] + '-smui-label'
			},
			prefixFilter(/*$$restProps*/ ctx[53], 'selectedText$')
		];

		let span_data_1 = {};

		for (let i = 0; i < span0_levels.length; i += 1) {
			span_data_1 = assign(span_data_1, span0_levels[i]);
		}

		let span1_levels = [
			{
				class: span1_class_value = classMap({
					[/*selectedTextContainer$class*/ ctx[17]]: true,
					'mdc-select__selected-text-container': true
				})
			},
			prefixFilter(/*$$restProps*/ ctx[53], 'selectedTextContainer$')
		];

		let span_data_2 = {};

		for (let i = 0; i < span1_levels.length; i += 1) {
			span_data_2 = assign(span_data_2, span1_levels[i]);
		}

		let span2_levels = [
			{
				class: span2_class_value = classMap({
					[/*dropdownIcon$class*/ ctx[21]]: true,
					'mdc-select__dropdown-icon': true
				})
			},
			prefixFilter(/*$$restProps*/ ctx[53], 'dropdownIcon$')
		];

		let span_data = {};

		for (let i = 0; i < span2_levels.length; i += 1) {
			span_data = assign(span_data, span2_levels[i]);
		}

		let if_block4 = /*variant*/ ctx[7] !== 'outlined' && /*ripple*/ ctx[5] && create_if_block_1$4(ctx);

		let div0_levels = [
			{
				class: div0_class_value = classMap({
					[/*anchor$class*/ ctx[15]]: true,
					'mdc-select__anchor': true
				})
			},
			{
				"aria-required": div0_aria_required_value = /*required*/ ctx[10] ? 'true' : undefined
			},
			{
				"aria-disabled": div0_aria_disabled_value = /*disabled*/ ctx[6] ? 'true' : undefined
			},
			{ "aria-controls": /*menuId*/ ctx[45] },
			{
				"aria-expanded": div0_aria_expanded_value = /*menuOpen*/ ctx[31] ? 'true' : 'false'
			},
			{ "aria-describedby": /*helperId*/ ctx[30] },
			{ role: "combobox" },
			{ tabindex: "0" },
			/*selectAnchorAttrs*/ ctx[29],
			prefixFilter(/*$$restProps*/ ctx[53], 'anchor$')
		];

		let div_data = {};

		for (let i = 0; i < div0_levels.length; i += 1) {
			div_data = assign(div_data, div0_levels[i]);
		}

		const menu_spread_levels = [
			{
				class: classMap({
					[/*menu$class*/ ctx[22]]: true,
					'mdc-select__menu': true,
					.../*menuClasses*/ ctx[32]
				})
			},
			{ id: /*menuId*/ ctx[45] },
			{ fullWidth: true },
			{ anchor: false },
			{ anchorElement: /*anchorElement*/ ctx[33] },
			{ anchorCorner: /*anchorCorner*/ ctx[34] },
			prefixFilter(/*$$restProps*/ ctx[53], 'menu$')
		];

		function menu_open_binding(value) {
			/*menu_open_binding*/ ctx[77](value);
		}

		let menu_props = {
			$$slots: { default: [create_default_slot_1$2] },
			$$scope: { ctx }
		};

		for (let i = 0; i < menu_spread_levels.length; i += 1) {
			menu_props = assign(menu_props, menu_spread_levels[i]);
		}

		if (/*menuOpen*/ ctx[31] !== void 0) {
			menu_props.open = /*menuOpen*/ ctx[31];
		}

		menu = new Menu({ props: menu_props, $$inline: true });
		binding_callbacks.push(() => bind(menu, 'open', menu_open_binding));
		menu.$on("SMUIMenu:selected", /*SMUIMenu_selected_handler*/ ctx[78]);
		menu.$on("SMUIMenuSurface:closing", /*SMUIMenuSurface_closing_handler*/ ctx[79]);
		menu.$on("SMUIMenuSurface:closed", /*SMUIMenuSurface_closed_handler*/ ctx[80]);
		menu.$on("SMUIMenuSurface:opened", /*SMUIMenuSurface_opened_handler*/ ctx[81]);

		let div1_levels = [
			{
				class: div1_class_value = classMap({
					[/*className*/ ctx[3]]: true,
					'mdc-select': true,
					'mdc-select--required': /*required*/ ctx[10],
					'mdc-select--disabled': /*disabled*/ ctx[6],
					'mdc-select--filled': /*variant*/ ctx[7] === 'filled',
					'mdc-select--outlined': /*variant*/ ctx[7] === 'outlined',
					'smui-select--standard': /*variant*/ ctx[7] === 'standard',
					'mdc-select--with-leading-icon': /*isUninitializedValue*/ ctx[44](/*withLeadingIcon*/ ctx[13])
					? /*$$slots*/ ctx[54].leadingIcon
					: /*withLeadingIcon*/ ctx[13],
					'mdc-select--no-label': /*noLabel*/ ctx[8] || /*label*/ ctx[9] == null && !/*$$slots*/ ctx[54].label,
					'mdc-select--invalid': /*invalid*/ ctx[1],
					'mdc-select--activated': /*menuOpen*/ ctx[31],
					'mdc-data-table__pagination-rows-per-page-select': /*context*/ ctx[46] === 'data-table:pagination',
					.../*internalClasses*/ ctx[26]
				})
			},
			{
				style: div1_style_value = Object.entries(/*internalStyles*/ ctx[27]).map(func$6).concat([/*style*/ ctx[4]]).join(' ')
			},
			exclude(/*$$restProps*/ ctx[53], [
				'input$',
				'anchor$',
				'label$',
				'outline$',
				'selectedTextContainer$',
				'selectedText$',
				'dropdownIcon$',
				'ripple$',
				'menu$',
				'list$',
				'helperText$'
			])
		];

		let div_data_1 = {};

		for (let i = 0; i < div1_levels.length; i += 1) {
			div_data_1 = assign(div_data_1, div1_levels[i]);
		}

		let if_block5 = /*$$slots*/ ctx[54].helperText && create_if_block$7(ctx);

		const block = {
			c: function create() {
				div1 = element("div");
				if (if_block0) if_block0.c();
				t0 = space();
				div0 = element("div");
				if (if_block1) if_block1.c();
				t1 = space();
				if (if_block2) if_block2.c();
				t2 = space();
				if (if_block3) if_block3.c();
				t3 = space();
				if (leadingIcon_slot) leadingIcon_slot.c();
				t4 = space();
				span1 = element("span");
				span0 = element("span");
				t5 = text$2(/*$selectedTextStore*/ ctx[42]);
				t6 = space();
				span2 = element("span");
				svg = svg_element("svg");
				polygon0 = svg_element("polygon");
				polygon1 = svg_element("polygon");
				t7 = space();
				if (if_block4) if_block4.c();
				t8 = space();
				create_component(menu.$$.fragment);
				t9 = space();
				if (if_block5) if_block5.c();
				if_block5_anchor = empty();
				set_attributes(span0, span_data_1);
				add_location(span0, file$d, 127, 6, 3816);
				set_attributes(span1, span_data_2);
				add_location(span1, file$d, 119, 4, 3554);
				attr_dev(polygon0, "class", "mdc-select__dropdown-icon-inactive");
				attr_dev(polygon0, "stroke", "none");
				attr_dev(polygon0, "fill-rule", "evenodd");
				attr_dev(polygon0, "points", "7 10 12 15 17 10");
				add_location(polygon0, file$d, 155, 8, 4607);
				attr_dev(polygon1, "class", "mdc-select__dropdown-icon-active");
				attr_dev(polygon1, "stroke", "none");
				attr_dev(polygon1, "fill-rule", "evenodd");
				attr_dev(polygon1, "points", "7 15 12 10 17 15");
				add_location(polygon1, file$d, 161, 8, 4778);
				attr_dev(svg, "class", "mdc-select__dropdown-icon-graphic");
				attr_dev(svg, "viewBox", "7 10 10 5");
				attr_dev(svg, "focusable", "false");
				add_location(svg, file$d, 150, 6, 4482);
				set_attributes(span2, span_data);
				add_location(span2, file$d, 142, 4, 4257);
				set_attributes(div0, div_data);
				add_location(div0, file$d, 59, 2, 1579);
				set_attributes(div1, div_data_1);
				add_location(div1, file$d, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div1, anchor);
				if (if_block0) if_block0.m(div1, null);
				append_dev(div1, t0);
				append_dev(div1, div0);
				if (if_block1) if_block1.m(div0, null);
				append_dev(div0, t1);
				if (if_block2) if_block2.m(div0, null);
				append_dev(div0, t2);
				if (if_block3) if_block3.m(div0, null);
				append_dev(div0, t3);

				if (leadingIcon_slot) {
					leadingIcon_slot.m(div0, null);
				}

				append_dev(div0, t4);
				append_dev(div0, span1);
				append_dev(span1, span0);
				append_dev(span0, t5);
				append_dev(div0, t6);
				append_dev(div0, span2);
				append_dev(span2, svg);
				append_dev(svg, polygon0);
				append_dev(svg, polygon1);
				append_dev(div0, t7);
				if (if_block4) if_block4.m(div0, null);
				/*div0_binding*/ ctx[71](div0);
				append_dev(div1, t8);
				mount_component(menu, div1, null);
				/*div1_binding*/ ctx[82](div1);
				insert_dev(target, t9, anchor);
				if (if_block5) if_block5.m(target, anchor);
				insert_dev(target, if_block5_anchor, anchor);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, span0, /*selectedText$use*/ ctx[18])),
						action_destroyer(useActions_action_1 = useActions.call(null, span1, /*selectedTextContainer$use*/ ctx[16])),
						action_destroyer(useActions_action_2 = useActions.call(null, span2, /*dropdownIcon$use*/ ctx[20])),
						action_destroyer(useActions_action_3 = useActions.call(null, div0, /*anchor$use*/ ctx[14])),
						listen_dev(div0, "focus", /*focus_handler_1*/ ctx[72], false, false, false, false),
						listen_dev(div0, "blur", /*blur_handler_1*/ ctx[73], false, false, false, false),
						listen_dev(div0, "click", /*click_handler*/ ctx[74], false, false, false, false),
						listen_dev(
							div0,
							"keydown",
							function () {
								if (is_function(/*instance*/ ctx[23] && /*instance*/ ctx[23].handleKeydown.bind(/*instance*/ ctx[23]))) (/*instance*/ ctx[23] && /*instance*/ ctx[23].handleKeydown.bind(/*instance*/ ctx[23])).apply(this, arguments);
							},
							false,
							false,
							false,
							false
						),
						listen_dev(div0, "focus", /*focus_handler*/ ctx[65], false, false, false, false),
						listen_dev(div0, "blur", /*blur_handler*/ ctx[66], false, false, false, false),
						action_destroyer(Ripple_action = Ripple.call(null, div1, {
							ripple: /*variant*/ ctx[7] === 'filled',
							unbounded: false,
							addClass: /*addClass*/ ctx[50],
							removeClass: /*removeClass*/ ctx[51],
							addStyle: /*addStyle*/ ctx[52]
						})),
						action_destroyer(Anchor.call(null, div1, {
							addClass: /*addClass*/ ctx[50],
							removeClass: /*removeClass*/ ctx[51]
						})),
						action_destroyer(useActions_action_4 = useActions.call(null, div1, /*use*/ ctx[2])),
						action_destroyer(/*forwardEvents*/ ctx[43].call(null, div1)),
						listen_dev(div1, "SMUISelectLeadingIcon:mount", /*handleLeadingIconMount*/ ctx[49], false, false, false, false),
						listen_dev(div1, "SMUISelectLeadingIcon:unmount", /*SMUISelectLeadingIcon_unmount_handler*/ ctx[83], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;

				if (/*hiddenInput*/ ctx[12]) {
					if (if_block0) {
						if_block0.p(ctx, dirty);
					} else {
						if_block0 = create_if_block_6$2(ctx);
						if_block0.c();
						if_block0.m(div1, t0);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (/*variant*/ ctx[7] === 'filled') {
					if (if_block1) ; else {
						if_block1 = create_if_block_5$2(ctx);
						if_block1.c();
						if_block1.m(div0, t1);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}

				if (/*variant*/ ctx[7] !== 'outlined' && !/*noLabel*/ ctx[8] && (/*label*/ ctx[9] != null || /*$$slots*/ ctx[54].label)) {
					if (if_block2) {
						if_block2.p(ctx, dirty);

						if (dirty[0] & /*variant, noLabel, label*/ 896 | dirty[1] & /*$$slots*/ 8388608) {
							transition_in(if_block2, 1);
						}
					} else {
						if_block2 = create_if_block_4$2(ctx);
						if_block2.c();
						transition_in(if_block2, 1);
						if_block2.m(div0, t2);
					}
				} else if (if_block2) {
					group_outros();

					transition_out(if_block2, 1, 1, () => {
						if_block2 = null;
					});

					check_outros();
				}

				if (/*variant*/ ctx[7] === 'outlined') {
					if (if_block3) {
						if_block3.p(ctx, dirty);

						if (dirty[0] & /*variant*/ 128) {
							transition_in(if_block3, 1);
						}
					} else {
						if_block3 = create_if_block_2$2(ctx);
						if_block3.c();
						transition_in(if_block3, 1);
						if_block3.m(div0, t3);
					}
				} else if (if_block3) {
					group_outros();

					transition_out(if_block3, 1, 1, () => {
						if_block3 = null;
					});

					check_outros();
				}

				if (leadingIcon_slot) {
					if (leadingIcon_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							leadingIcon_slot,
							leadingIcon_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(leadingIcon_slot_template, /*$$scope*/ ctx[87], dirty, get_leadingIcon_slot_changes$1),
							get_leadingIcon_slot_context$1
						);
					}
				}

				if (!current || dirty[1] & /*$selectedTextStore*/ 2048) set_data_maybe_contenteditable_dev(t5, /*$selectedTextStore*/ ctx[42], span_data_1['contenteditable']);

				set_attributes(span0, span_data_1 = get_spread_update(span0_levels, [
					(!current || dirty[0] & /*inputId*/ 2048 && span0_id_value !== (span0_id_value = /*inputId*/ ctx[11] + '-smui-selected-text')) && { id: span0_id_value },
					(!current || dirty[0] & /*selectedText$class*/ 524288 && span0_class_value !== (span0_class_value = classMap({
						[/*selectedText$class*/ ctx[19]]: true,
						'mdc-select__selected-text': true
					}))) && { class: span0_class_value },
					{ role: "button" },
					{ "aria-haspopup": "listbox" },
					(!current || dirty[0] & /*inputId*/ 2048 && span0_aria_labelledby_value !== (span0_aria_labelledby_value = /*inputId*/ ctx[11] + '-smui-label')) && {
						"aria-labelledby": span0_aria_labelledby_value
					},
					dirty[1] & /*$$restProps*/ 4194304 && prefixFilter(/*$$restProps*/ ctx[53], 'selectedText$')
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*selectedText$use*/ 262144) useActions_action.update.call(null, /*selectedText$use*/ ctx[18]);

				set_attributes(span1, span_data_2 = get_spread_update(span1_levels, [
					(!current || dirty[0] & /*selectedTextContainer$class*/ 131072 && span1_class_value !== (span1_class_value = classMap({
						[/*selectedTextContainer$class*/ ctx[17]]: true,
						'mdc-select__selected-text-container': true
					}))) && { class: span1_class_value },
					dirty[1] & /*$$restProps*/ 4194304 && prefixFilter(/*$$restProps*/ ctx[53], 'selectedTextContainer$')
				]));

				if (useActions_action_1 && is_function(useActions_action_1.update) && dirty[0] & /*selectedTextContainer$use*/ 65536) useActions_action_1.update.call(null, /*selectedTextContainer$use*/ ctx[16]);

				set_attributes(span2, span_data = get_spread_update(span2_levels, [
					(!current || dirty[0] & /*dropdownIcon$class*/ 2097152 && span2_class_value !== (span2_class_value = classMap({
						[/*dropdownIcon$class*/ ctx[21]]: true,
						'mdc-select__dropdown-icon': true
					}))) && { class: span2_class_value },
					dirty[1] & /*$$restProps*/ 4194304 && prefixFilter(/*$$restProps*/ ctx[53], 'dropdownIcon$')
				]));

				if (useActions_action_2 && is_function(useActions_action_2.update) && dirty[0] & /*dropdownIcon$use*/ 1048576) useActions_action_2.update.call(null, /*dropdownIcon$use*/ ctx[20]);

				if (/*variant*/ ctx[7] !== 'outlined' && /*ripple*/ ctx[5]) {
					if (if_block4) {
						if_block4.p(ctx, dirty);

						if (dirty[0] & /*variant, ripple*/ 160) {
							transition_in(if_block4, 1);
						}
					} else {
						if_block4 = create_if_block_1$4(ctx);
						if_block4.c();
						transition_in(if_block4, 1);
						if_block4.m(div0, null);
					}
				} else if (if_block4) {
					group_outros();

					transition_out(if_block4, 1, 1, () => {
						if_block4 = null;
					});

					check_outros();
				}

				set_attributes(div0, div_data = get_spread_update(div0_levels, [
					(!current || dirty[0] & /*anchor$class*/ 32768 && div0_class_value !== (div0_class_value = classMap({
						[/*anchor$class*/ ctx[15]]: true,
						'mdc-select__anchor': true
					}))) && { class: div0_class_value },
					(!current || dirty[0] & /*required*/ 1024 && div0_aria_required_value !== (div0_aria_required_value = /*required*/ ctx[10] ? 'true' : undefined)) && {
						"aria-required": div0_aria_required_value
					},
					(!current || dirty[0] & /*disabled*/ 64 && div0_aria_disabled_value !== (div0_aria_disabled_value = /*disabled*/ ctx[6] ? 'true' : undefined)) && {
						"aria-disabled": div0_aria_disabled_value
					},
					{ "aria-controls": /*menuId*/ ctx[45] },
					(!current || dirty[1] & /*menuOpen*/ 1 && div0_aria_expanded_value !== (div0_aria_expanded_value = /*menuOpen*/ ctx[31] ? 'true' : 'false')) && {
						"aria-expanded": div0_aria_expanded_value
					},
					(!current || dirty[0] & /*helperId*/ 1073741824) && { "aria-describedby": /*helperId*/ ctx[30] },
					{ role: "combobox" },
					{ tabindex: "0" },
					dirty[0] & /*selectAnchorAttrs*/ 536870912 && /*selectAnchorAttrs*/ ctx[29],
					dirty[1] & /*$$restProps*/ 4194304 && prefixFilter(/*$$restProps*/ ctx[53], 'anchor$')
				]));

				if (useActions_action_3 && is_function(useActions_action_3.update) && dirty[0] & /*anchor$use*/ 16384) useActions_action_3.update.call(null, /*anchor$use*/ ctx[14]);

				const menu_changes = (dirty[0] & /*menu$class*/ 4194304 | dirty[1] & /*menuClasses, menuId, anchorElement, anchorCorner, $$restProps*/ 4210702)
				? get_spread_update(menu_spread_levels, [
						dirty[0] & /*menu$class*/ 4194304 | dirty[1] & /*menuClasses*/ 2 && {
							class: classMap({
								[/*menu$class*/ ctx[22]]: true,
								'mdc-select__menu': true,
								.../*menuClasses*/ ctx[32]
							})
						},
						dirty[1] & /*menuId*/ 16384 && { id: /*menuId*/ ctx[45] },
						menu_spread_levels[2],
						menu_spread_levels[3],
						dirty[1] & /*anchorElement*/ 4 && { anchorElement: /*anchorElement*/ ctx[33] },
						dirty[1] & /*anchorCorner*/ 8 && { anchorCorner: /*anchorCorner*/ ctx[34] },
						dirty[1] & /*$$restProps*/ 4194304 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[53], 'menu$'))
					])
				: {};

				if (dirty[0] & /*selectedIndex*/ 16777216 | dirty[1] & /*wrapFocus, $$restProps, list*/ 4194352 | dirty[2] & /*$$scope*/ 33554432) {
					menu_changes.$$scope = { dirty, ctx };
				}

				if (!updating_open && dirty[1] & /*menuOpen*/ 1) {
					updating_open = true;
					menu_changes.open = /*menuOpen*/ ctx[31];
					add_flush_callback(() => updating_open = false);
				}

				menu.$set(menu_changes);

				set_attributes(div1, div_data_1 = get_spread_update(div1_levels, [
					(!current || dirty[0] & /*className, required, disabled, variant, withLeadingIcon, noLabel, label, invalid, internalClasses*/ 67119050 | dirty[1] & /*$$slots, menuOpen*/ 8388609 && div1_class_value !== (div1_class_value = classMap({
						[/*className*/ ctx[3]]: true,
						'mdc-select': true,
						'mdc-select--required': /*required*/ ctx[10],
						'mdc-select--disabled': /*disabled*/ ctx[6],
						'mdc-select--filled': /*variant*/ ctx[7] === 'filled',
						'mdc-select--outlined': /*variant*/ ctx[7] === 'outlined',
						'smui-select--standard': /*variant*/ ctx[7] === 'standard',
						'mdc-select--with-leading-icon': /*isUninitializedValue*/ ctx[44](/*withLeadingIcon*/ ctx[13])
						? /*$$slots*/ ctx[54].leadingIcon
						: /*withLeadingIcon*/ ctx[13],
						'mdc-select--no-label': /*noLabel*/ ctx[8] || /*label*/ ctx[9] == null && !/*$$slots*/ ctx[54].label,
						'mdc-select--invalid': /*invalid*/ ctx[1],
						'mdc-select--activated': /*menuOpen*/ ctx[31],
						'mdc-data-table__pagination-rows-per-page-select': /*context*/ ctx[46] === 'data-table:pagination',
						.../*internalClasses*/ ctx[26]
					}))) && { class: div1_class_value },
					(!current || dirty[0] & /*internalStyles, style*/ 134217744 && div1_style_value !== (div1_style_value = Object.entries(/*internalStyles*/ ctx[27]).map(func$6).concat([/*style*/ ctx[4]]).join(' '))) && { style: div1_style_value },
					dirty[1] & /*$$restProps*/ 4194304 && exclude(/*$$restProps*/ ctx[53], [
						'input$',
						'anchor$',
						'label$',
						'outline$',
						'selectedTextContainer$',
						'selectedText$',
						'dropdownIcon$',
						'ripple$',
						'menu$',
						'list$',
						'helperText$'
					])
				]));

				if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*variant*/ 128) Ripple_action.update.call(null, {
					ripple: /*variant*/ ctx[7] === 'filled',
					unbounded: false,
					addClass: /*addClass*/ ctx[50],
					removeClass: /*removeClass*/ ctx[51],
					addStyle: /*addStyle*/ ctx[52]
				});

				if (useActions_action_4 && is_function(useActions_action_4.update) && dirty[0] & /*use*/ 4) useActions_action_4.update.call(null, /*use*/ ctx[2]);

				if (/*$$slots*/ ctx[54].helperText) {
					if (if_block5) {
						if_block5.p(ctx, dirty);

						if (dirty[1] & /*$$slots*/ 8388608) {
							transition_in(if_block5, 1);
						}
					} else {
						if_block5 = create_if_block$7(ctx);
						if_block5.c();
						transition_in(if_block5, 1);
						if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
					}
				} else if (if_block5) {
					group_outros();

					transition_out(if_block5, 1, 1, () => {
						if_block5 = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block2);
				transition_in(if_block3);
				transition_in(leadingIcon_slot, local);
				transition_in(if_block4);
				transition_in(menu.$$.fragment, local);
				transition_in(if_block5);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block2);
				transition_out(if_block3);
				transition_out(leadingIcon_slot, local);
				transition_out(if_block4);
				transition_out(menu.$$.fragment, local);
				transition_out(if_block5);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div1);
					detach_dev(t9);
					detach_dev(if_block5_anchor);
				}

				if (if_block0) if_block0.d();
				if (if_block1) if_block1.d();
				if (if_block2) if_block2.d();
				if (if_block3) if_block3.d();
				if (leadingIcon_slot) leadingIcon_slot.d(detaching);
				if (if_block4) if_block4.d();
				/*div0_binding*/ ctx[71](null);
				destroy_component(menu);
				/*div1_binding*/ ctx[82](null);
				if (if_block5) if_block5.d(detaching);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$e.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}
	let counter$2 = 0;

	function getNormalizedXCoordinate(evt) {
		const targetClientRect = evt.currentTarget.getBoundingClientRect();
		const xCoordinate = isTouchEvent(evt) ? evt.touches[0].clientX : evt.clientX;
		return xCoordinate - targetClientRect.left;
	}

	function isTouchEvent(evt) {
		return 'touches' in evt;
	}

	const func$6 = ([name, value]) => `${name}: ${value};`;

	function instance_1$5($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","style","ripple","disabled","variant","noLabel","label","value","key","dirty","invalid","updateInvalid","required","inputId","hiddenInput","withLeadingIcon","anchor$use","anchor$class","selectedTextContainer$use","selectedTextContainer$class","selectedText$use","selectedText$class","dropdownIcon$use","dropdownIcon$class","menu$class","getUseDefaultValidation","setUseDefaultValidation","focus","layout","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $selectedTextStore;
		let $valueStore;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Select', slots, ['label','leadingIcon','default','helperText']);
		const $$slots = compute_slots(slots);
		var _a;
		const forwardEvents = forwardEventsBuilder(get_current_component());

		let uninitializedValue = () => {
			
		};

		function isUninitializedValue(value) {
			return value === uninitializedValue;
		}

		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { ripple = true } = $$props;
		let { disabled = false } = $$props;
		let { variant = 'standard' } = $$props;
		let { noLabel = false } = $$props;
		let { label = undefined } = $$props;
		let { value = '' } = $$props;
		let { key = item => item } = $$props;
		let { dirty = false } = $$props;
		let { invalid = uninitializedValue } = $$props;
		let { updateInvalid = isUninitializedValue(invalid) } = $$props;
		const useDefaultValidation = isUninitializedValue(invalid);

		if (isUninitializedValue(invalid)) {
			invalid = false;
		}

		let { required = false } = $$props;
		let { inputId = 'SMUI-select-' + counter$2++ } = $$props;
		let { hiddenInput = false } = $$props;
		let { withLeadingIcon = uninitializedValue } = $$props;
		let { anchor$use = [] } = $$props;
		let { anchor$class = '' } = $$props;
		let { selectedTextContainer$use = [] } = $$props;
		let { selectedTextContainer$class = '' } = $$props;
		let { selectedText$use = [] } = $$props;
		let { selectedText$class = '' } = $$props;
		let { dropdownIcon$use = [] } = $$props;
		let { dropdownIcon$class = '' } = $$props;
		let { menu$class = '' } = $$props;
		let element;
		let instance;
		let internalClasses = {};
		let internalStyles = {};
		let selectAnchor;
		let selectAnchorAttrs = {};
		let selectedIndex = -1;

		let menuId = (_a = $$restProps['menu$id']) !== null && _a !== void 0
		? _a
		: inputId + '-menu';

		let helperId = undefined;
		let addLayoutListener = getContext('SMUI:addLayoutListener');
		let removeLayoutListener;
		let menuOpen = false;
		let menuClasses = {};
		let anchorElement = undefined;
		let anchorCorner = undefined;
		let wrapFocus = false;
		let list;
		let context = getContext('SMUI:select:context');

		// These are instances, not accessors.
		let leadingIcon = undefined;

		let helperText = undefined;

		// Components
		let floatingLabel = undefined;

		let lineRipple = undefined;
		let notchedOutline = undefined;
		setContext('SMUI:list:role', '');
		setContext('SMUI:list:nav', false);

		// Only needed on initialization.
		const selectedTextStore = writable('');

		validate_store(selectedTextStore, 'selectedTextStore');
		component_subscribe($$self, selectedTextStore, value => $$invalidate(42, $selectedTextStore = value));
		setContext('SMUI:select:selectedText', selectedTextStore);
		const valueStore = writable(value);
		validate_store(valueStore, 'valueStore');
		component_subscribe($$self, valueStore, value => $$invalidate(90, $valueStore = value));
		setContext('SMUI:select:value', valueStore);
		let previousSelectedIndex = selectedIndex;

		if (addLayoutListener) {
			removeLayoutListener = addLayoutListener(layout);
		}

		onMount(() => {
			$$invalidate(23, instance = new MDCSelectFoundation({
					// getSelectAdapterMethods
					// getMenuItemAttr: (menuItem: Element, attr: string) =>
					//   menuItem.getAttribute(attr),
					setSelectedText: text => {
						set_store_value(selectedTextStore, $selectedTextStore = text, $selectedTextStore);
					},
					isSelectAnchorFocused: () => document.activeElement === selectAnchor,
					getSelectAnchorAttr,
					setSelectAnchorAttr: addSelectAnchorAttr,
					removeSelectAnchorAttr,
					addMenuClass,
					removeMenuClass,
					openMenu: () => {
						$$invalidate(31, menuOpen = true);
					},
					closeMenu: () => {
						$$invalidate(31, menuOpen = false);
					},
					getAnchorElement: () => selectAnchor,
					setMenuAnchorElement: value => {
						$$invalidate(33, anchorElement = value);
					},
					setMenuAnchorCorner: value => {
						$$invalidate(34, anchorCorner = value);
					},
					setMenuWrapFocus: value => {
						$$invalidate(35, wrapFocus = value);
					},
					getSelectedIndex: () => selectedIndex,
					setSelectedIndex: index => {
						// Don't update the instance again.
						$$invalidate(63, previousSelectedIndex = index);

						$$invalidate(24, selectedIndex = index);
						$$invalidate(0, value = getMenuItemValues()[selectedIndex]);
					},
					focusMenuItemAtIndex: index => {
						list.focusItemAtIndex(index);
					},
					getMenuItemCount: () => list.items.length,
					getMenuItemValues: () => getMenuItemValues().map(key),
					getMenuItemTextAtIndex: index => list.getPrimaryTextAtIndex(index),
					isTypeaheadInProgress: () => list.typeaheadInProgress,
					typeaheadMatchItem: (nextChar, startingIndex) => list.typeaheadMatchItem(nextChar, startingIndex),
					// getCommonAdapterMethods
					addClass,
					removeClass,
					hasClass,
					setRippleCenter: normalizedX => lineRipple && lineRipple.setRippleCenter(normalizedX),
					activateBottomLine: () => lineRipple && lineRipple.activate(),
					deactivateBottomLine: () => lineRipple && lineRipple.deactivate(),
					notifyChange: _selectedValue => {
						$$invalidate(55, dirty = true);

						if (updateInvalid) {
							$$invalidate(1, invalid = !instance.isValid());
						}

						dispatch(getElement(), 'SMUISelect:change', { value, index: selectedIndex }, undefined, true);
					},
					// getOutlineAdapterMethods
					hasOutline: () => !!notchedOutline,
					notchOutline: labelWidth => notchedOutline && notchedOutline.notch(labelWidth),
					closeOutline: () => notchedOutline && notchedOutline.closeNotch(),
					// getLabelAdapterMethods
					hasLabel: () => !!floatingLabel,
					floatLabel: shouldFloat => floatingLabel && floatingLabel.float(shouldFloat),
					getLabelWidth: () => floatingLabel ? floatingLabel.getWidth() : 0,
					setLabelRequired: isRequired => floatingLabel && floatingLabel.setRequired(isRequired)
				},
			{
					get helperText() {
						return helperText;
					},
					get leadingIcon() {
						return leadingIcon;
					}
				}));

			$$invalidate(24, selectedIndex = getMenuItemValues().indexOf(value));
			instance.init();
			setUseDefaultValidation(useDefaultValidation);

			return () => {
				instance.destroy();
			};
		});

		onDestroy(() => {
			if (removeLayoutListener) {
				removeLayoutListener();
			}
		});

		function handleLeadingIconMount(event) {
			$$invalidate(37, leadingIcon = event.detail);
		}

		function hasClass(className) {
			return className in internalClasses
			? internalClasses[className]
			: getElement().classList.contains(className);
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(26, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(26, internalClasses[className] = false, internalClasses);
			}
		}

		function addStyle(name, value) {
			if (internalStyles[name] != value) {
				if (value === '' || value == null) {
					delete internalStyles[name];
					$$invalidate(27, internalStyles);
				} else {
					$$invalidate(27, internalStyles[name] = value, internalStyles);
				}
			}
		}

		function addMenuClass(className) {
			if (!menuClasses[className]) {
				$$invalidate(32, menuClasses[className] = true, menuClasses);
			}
		}

		function removeMenuClass(className) {
			if (!(className in menuClasses) || menuClasses[className]) {
				$$invalidate(32, menuClasses[className] = false, menuClasses);
			}
		}

		function getSelectAnchorAttr(name) {
			var _a;

			return name in selectAnchorAttrs
			? (_a = selectAnchorAttrs[name]) !== null && _a !== void 0
				? _a
				: null
			: getElement().getAttribute(name);
		}

		function addSelectAnchorAttr(name, value) {
			if (selectAnchorAttrs[name] !== value) {
				$$invalidate(29, selectAnchorAttrs[name] = value, selectAnchorAttrs);
			}
		}

		function removeSelectAnchorAttr(name) {
			if (!(name in selectAnchorAttrs) || selectAnchorAttrs[name] != null) {
				$$invalidate(29, selectAnchorAttrs[name] = undefined, selectAnchorAttrs);
			}
		}

		function getMenuItemValues() {
			return list.getOrderedList().map(accessor => accessor.getValue());
		}

		function getUseDefaultValidation() {
			return instance.getUseDefaultValidation();
		}

		function setUseDefaultValidation(useDefaultValidation) {
			instance.setUseDefaultValidation(useDefaultValidation);
		}

		function focus() {
			selectAnchor.focus();
		}

		function layout() {
			instance.layout();
		}

		function getElement() {
			return element;
		}

		function focus_handler(event) {
			bubble.call(this, $$self, event);
		}

		function blur_handler(event) {
			bubble.call(this, $$self, event);
		}

		function floatinglabel_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				floatingLabel = $$value;
				$$invalidate(39, floatingLabel);
			});
		}

		function floatinglabel_binding_1($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				floatingLabel = $$value;
				$$invalidate(39, floatingLabel);
			});
		}

		function notchedoutline_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				notchedOutline = $$value;
				$$invalidate(41, notchedOutline);
			});
		}

		function lineripple_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				lineRipple = $$value;
				$$invalidate(40, lineRipple);
			});
		}

		function div0_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				selectAnchor = $$value;
				$$invalidate(28, selectAnchor);
			});
		}

		const focus_handler_1 = () => instance && instance.handleFocus();
		const blur_handler_1 = () => instance && instance.handleBlur();

		const click_handler = event => {
			selectAnchor.focus();

			if (instance) {
				instance.handleClick(getNormalizedXCoordinate(event));
			}
		};

		function list_1_selectedIndex_binding(value) {
			selectedIndex = value;
			$$invalidate(24, selectedIndex);
		}

		const SMUIList_mount_handler = event => $$invalidate(36, list = event.detail);

		function menu_open_binding(value) {
			menuOpen = value;
			$$invalidate(31, menuOpen);
		}

		const SMUIMenu_selected_handler = event => instance && instance.handleMenuItemAction(event.detail.index);
		const SMUIMenuSurface_closing_handler = () => instance && instance.handleMenuClosing();
		const SMUIMenuSurface_closed_handler = () => instance && instance.handleMenuClosed();
		const SMUIMenuSurface_opened_handler = () => instance && instance.handleMenuOpened();

		function div1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(25, element);
			});
		}

		const SMUISelectLeadingIcon_unmount_handler = () => $$invalidate(37, leadingIcon = undefined);
		const SMUISelectHelperText_id_handler = event => $$invalidate(30, helperId = event.detail);
		const SMUISelectHelperText_mount_handler = event => $$invalidate(38, helperText = event.detail);

		const SMUISelectHelperText_unmount_handler = () => {
			$$invalidate(30, helperId = undefined);
			$$invalidate(38, helperText = undefined);
		};

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(53, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(2, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(4, style = $$new_props.style);
			if ('ripple' in $$new_props) $$invalidate(5, ripple = $$new_props.ripple);
			if ('disabled' in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
			if ('variant' in $$new_props) $$invalidate(7, variant = $$new_props.variant);
			if ('noLabel' in $$new_props) $$invalidate(8, noLabel = $$new_props.noLabel);
			if ('label' in $$new_props) $$invalidate(9, label = $$new_props.label);
			if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
			if ('key' in $$new_props) $$invalidate(56, key = $$new_props.key);
			if ('dirty' in $$new_props) $$invalidate(55, dirty = $$new_props.dirty);
			if ('invalid' in $$new_props) $$invalidate(1, invalid = $$new_props.invalid);
			if ('updateInvalid' in $$new_props) $$invalidate(57, updateInvalid = $$new_props.updateInvalid);
			if ('required' in $$new_props) $$invalidate(10, required = $$new_props.required);
			if ('inputId' in $$new_props) $$invalidate(11, inputId = $$new_props.inputId);
			if ('hiddenInput' in $$new_props) $$invalidate(12, hiddenInput = $$new_props.hiddenInput);
			if ('withLeadingIcon' in $$new_props) $$invalidate(13, withLeadingIcon = $$new_props.withLeadingIcon);
			if ('anchor$use' in $$new_props) $$invalidate(14, anchor$use = $$new_props.anchor$use);
			if ('anchor$class' in $$new_props) $$invalidate(15, anchor$class = $$new_props.anchor$class);
			if ('selectedTextContainer$use' in $$new_props) $$invalidate(16, selectedTextContainer$use = $$new_props.selectedTextContainer$use);
			if ('selectedTextContainer$class' in $$new_props) $$invalidate(17, selectedTextContainer$class = $$new_props.selectedTextContainer$class);
			if ('selectedText$use' in $$new_props) $$invalidate(18, selectedText$use = $$new_props.selectedText$use);
			if ('selectedText$class' in $$new_props) $$invalidate(19, selectedText$class = $$new_props.selectedText$class);
			if ('dropdownIcon$use' in $$new_props) $$invalidate(20, dropdownIcon$use = $$new_props.dropdownIcon$use);
			if ('dropdownIcon$class' in $$new_props) $$invalidate(21, dropdownIcon$class = $$new_props.dropdownIcon$class);
			if ('menu$class' in $$new_props) $$invalidate(22, menu$class = $$new_props.menu$class);
			if ('$$scope' in $$new_props) $$invalidate(87, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			counter: counter$2,
			_a,
			MDCSelectFoundation,
			onMount,
			onDestroy,
			getContext,
			setContext,
			writable,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			exclude,
			prefixFilter,
			useActions,
			dispatch,
			Ripple,
			Anchor,
			Menu,
			List,
			FloatingLabel: FloatingLabel$1,
			LineRipple: LineRipple$1,
			NotchedOutline: NotchedOutline$1,
			HelperText,
			forwardEvents,
			uninitializedValue,
			isUninitializedValue,
			use,
			className,
			style,
			ripple,
			disabled,
			variant,
			noLabel,
			label,
			value,
			key,
			dirty,
			invalid,
			updateInvalid,
			useDefaultValidation,
			required,
			inputId,
			hiddenInput,
			withLeadingIcon,
			anchor$use,
			anchor$class,
			selectedTextContainer$use,
			selectedTextContainer$class,
			selectedText$use,
			selectedText$class,
			dropdownIcon$use,
			dropdownIcon$class,
			menu$class,
			element,
			instance,
			internalClasses,
			internalStyles,
			selectAnchor,
			selectAnchorAttrs,
			selectedIndex,
			menuId,
			helperId,
			addLayoutListener,
			removeLayoutListener,
			menuOpen,
			menuClasses,
			anchorElement,
			anchorCorner,
			wrapFocus,
			list,
			context,
			leadingIcon,
			helperText,
			floatingLabel,
			lineRipple,
			notchedOutline,
			selectedTextStore,
			valueStore,
			previousSelectedIndex,
			handleLeadingIconMount,
			hasClass,
			addClass,
			removeClass,
			addStyle,
			addMenuClass,
			removeMenuClass,
			getSelectAnchorAttr,
			addSelectAnchorAttr,
			removeSelectAnchorAttr,
			getMenuItemValues,
			getNormalizedXCoordinate,
			isTouchEvent,
			getUseDefaultValidation,
			setUseDefaultValidation,
			focus,
			layout,
			getElement,
			$selectedTextStore,
			$valueStore
		});

		$$self.$inject_state = $$new_props => {
			if ('_a' in $$props) _a = $$new_props._a;
			if ('uninitializedValue' in $$props) uninitializedValue = $$new_props.uninitializedValue;
			if ('use' in $$props) $$invalidate(2, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(4, style = $$new_props.style);
			if ('ripple' in $$props) $$invalidate(5, ripple = $$new_props.ripple);
			if ('disabled' in $$props) $$invalidate(6, disabled = $$new_props.disabled);
			if ('variant' in $$props) $$invalidate(7, variant = $$new_props.variant);
			if ('noLabel' in $$props) $$invalidate(8, noLabel = $$new_props.noLabel);
			if ('label' in $$props) $$invalidate(9, label = $$new_props.label);
			if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
			if ('key' in $$props) $$invalidate(56, key = $$new_props.key);
			if ('dirty' in $$props) $$invalidate(55, dirty = $$new_props.dirty);
			if ('invalid' in $$props) $$invalidate(1, invalid = $$new_props.invalid);
			if ('updateInvalid' in $$props) $$invalidate(57, updateInvalid = $$new_props.updateInvalid);
			if ('required' in $$props) $$invalidate(10, required = $$new_props.required);
			if ('inputId' in $$props) $$invalidate(11, inputId = $$new_props.inputId);
			if ('hiddenInput' in $$props) $$invalidate(12, hiddenInput = $$new_props.hiddenInput);
			if ('withLeadingIcon' in $$props) $$invalidate(13, withLeadingIcon = $$new_props.withLeadingIcon);
			if ('anchor$use' in $$props) $$invalidate(14, anchor$use = $$new_props.anchor$use);
			if ('anchor$class' in $$props) $$invalidate(15, anchor$class = $$new_props.anchor$class);
			if ('selectedTextContainer$use' in $$props) $$invalidate(16, selectedTextContainer$use = $$new_props.selectedTextContainer$use);
			if ('selectedTextContainer$class' in $$props) $$invalidate(17, selectedTextContainer$class = $$new_props.selectedTextContainer$class);
			if ('selectedText$use' in $$props) $$invalidate(18, selectedText$use = $$new_props.selectedText$use);
			if ('selectedText$class' in $$props) $$invalidate(19, selectedText$class = $$new_props.selectedText$class);
			if ('dropdownIcon$use' in $$props) $$invalidate(20, dropdownIcon$use = $$new_props.dropdownIcon$use);
			if ('dropdownIcon$class' in $$props) $$invalidate(21, dropdownIcon$class = $$new_props.dropdownIcon$class);
			if ('menu$class' in $$props) $$invalidate(22, menu$class = $$new_props.menu$class);
			if ('element' in $$props) $$invalidate(25, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(23, instance = $$new_props.instance);
			if ('internalClasses' in $$props) $$invalidate(26, internalClasses = $$new_props.internalClasses);
			if ('internalStyles' in $$props) $$invalidate(27, internalStyles = $$new_props.internalStyles);
			if ('selectAnchor' in $$props) $$invalidate(28, selectAnchor = $$new_props.selectAnchor);
			if ('selectAnchorAttrs' in $$props) $$invalidate(29, selectAnchorAttrs = $$new_props.selectAnchorAttrs);
			if ('selectedIndex' in $$props) $$invalidate(24, selectedIndex = $$new_props.selectedIndex);
			if ('menuId' in $$props) $$invalidate(45, menuId = $$new_props.menuId);
			if ('helperId' in $$props) $$invalidate(30, helperId = $$new_props.helperId);
			if ('addLayoutListener' in $$props) addLayoutListener = $$new_props.addLayoutListener;
			if ('removeLayoutListener' in $$props) removeLayoutListener = $$new_props.removeLayoutListener;
			if ('menuOpen' in $$props) $$invalidate(31, menuOpen = $$new_props.menuOpen);
			if ('menuClasses' in $$props) $$invalidate(32, menuClasses = $$new_props.menuClasses);
			if ('anchorElement' in $$props) $$invalidate(33, anchorElement = $$new_props.anchorElement);
			if ('anchorCorner' in $$props) $$invalidate(34, anchorCorner = $$new_props.anchorCorner);
			if ('wrapFocus' in $$props) $$invalidate(35, wrapFocus = $$new_props.wrapFocus);
			if ('list' in $$props) $$invalidate(36, list = $$new_props.list);
			if ('context' in $$props) $$invalidate(46, context = $$new_props.context);
			if ('leadingIcon' in $$props) $$invalidate(37, leadingIcon = $$new_props.leadingIcon);
			if ('helperText' in $$props) $$invalidate(38, helperText = $$new_props.helperText);
			if ('floatingLabel' in $$props) $$invalidate(39, floatingLabel = $$new_props.floatingLabel);
			if ('lineRipple' in $$props) $$invalidate(40, lineRipple = $$new_props.lineRipple);
			if ('notchedOutline' in $$props) $$invalidate(41, notchedOutline = $$new_props.notchedOutline);
			if ('previousSelectedIndex' in $$props) $$invalidate(63, previousSelectedIndex = $$new_props.previousSelectedIndex);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty[0] & /*selectedIndex, instance, value*/ 25165825 | $$self.$$.dirty[2] & /*previousSelectedIndex*/ 2) {
				if (previousSelectedIndex !== selectedIndex) {
					$$invalidate(63, previousSelectedIndex = selectedIndex);

					if (instance) {
						instance.setSelectedIndex(
							selectedIndex,
							/* closeMenu */
							false,
							/* skipNotify */
							true
						);
					} else {
						const values = getMenuItemValues();

						if (value !== values[selectedIndex]) {
							$$invalidate(0, value = values[selectedIndex]);
						}
					}
				}
			}

			if ($$self.$$.dirty[0] & /*value*/ 1) {
				set_store_value(valueStore, $valueStore = value, $valueStore);
			}

			if ($$self.$$.dirty[0] & /*instance, value*/ 8388609 | $$self.$$.dirty[1] & /*key*/ 33554432) {
				if (instance && instance.getValue() !== key(value)) {
					instance.setValue(key(value));
				}
			}

			if ($$self.$$.dirty[0] & /*instance, disabled*/ 8388672) {
				if (instance && instance.getDisabled() !== disabled) {
					instance.setDisabled(disabled);
				}
			}

			if ($$self.$$.dirty[0] & /*instance, invalid*/ 8388610 | $$self.$$.dirty[1] & /*dirty, updateInvalid*/ 83886080) {
				if (instance && dirty && instance.isValid() !== !invalid) {
					if (updateInvalid) {
						$$invalidate(1, invalid = !instance.isValid());
					} else {
						instance.setValid(!invalid);
					}
				}
			}

			if ($$self.$$.dirty[0] & /*instance, required*/ 8389632) {
				if (instance && instance.getRequired() !== required) {
					instance.setRequired(required);
				}
			}
		};

		return [
			value,
			invalid,
			use,
			className,
			style,
			ripple,
			disabled,
			variant,
			noLabel,
			label,
			required,
			inputId,
			hiddenInput,
			withLeadingIcon,
			anchor$use,
			anchor$class,
			selectedTextContainer$use,
			selectedTextContainer$class,
			selectedText$use,
			selectedText$class,
			dropdownIcon$use,
			dropdownIcon$class,
			menu$class,
			instance,
			selectedIndex,
			element,
			internalClasses,
			internalStyles,
			selectAnchor,
			selectAnchorAttrs,
			helperId,
			menuOpen,
			menuClasses,
			anchorElement,
			anchorCorner,
			wrapFocus,
			list,
			leadingIcon,
			helperText,
			floatingLabel,
			lineRipple,
			notchedOutline,
			$selectedTextStore,
			forwardEvents,
			isUninitializedValue,
			menuId,
			context,
			selectedTextStore,
			valueStore,
			handleLeadingIconMount,
			addClass,
			removeClass,
			addStyle,
			$$restProps,
			$$slots,
			dirty,
			key,
			updateInvalid,
			getUseDefaultValidation,
			setUseDefaultValidation,
			focus,
			layout,
			getElement,
			previousSelectedIndex,
			slots,
			focus_handler,
			blur_handler,
			floatinglabel_binding,
			floatinglabel_binding_1,
			notchedoutline_binding,
			lineripple_binding,
			div0_binding,
			focus_handler_1,
			blur_handler_1,
			click_handler,
			list_1_selectedIndex_binding,
			SMUIList_mount_handler,
			menu_open_binding,
			SMUIMenu_selected_handler,
			SMUIMenuSurface_closing_handler,
			SMUIMenuSurface_closed_handler,
			SMUIMenuSurface_opened_handler,
			div1_binding,
			SMUISelectLeadingIcon_unmount_handler,
			SMUISelectHelperText_id_handler,
			SMUISelectHelperText_mount_handler,
			SMUISelectHelperText_unmount_handler,
			$$scope
		];
	}

	class Select extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(
				this,
				options,
				instance_1$5,
				create_fragment$e,
				safe_not_equal,
				{
					use: 2,
					class: 3,
					style: 4,
					ripple: 5,
					disabled: 6,
					variant: 7,
					noLabel: 8,
					label: 9,
					value: 0,
					key: 56,
					dirty: 55,
					invalid: 1,
					updateInvalid: 57,
					required: 10,
					inputId: 11,
					hiddenInput: 12,
					withLeadingIcon: 13,
					anchor$use: 14,
					anchor$class: 15,
					selectedTextContainer$use: 16,
					selectedTextContainer$class: 17,
					selectedText$use: 18,
					selectedText$class: 19,
					dropdownIcon$use: 20,
					dropdownIcon$class: 21,
					menu$class: 22,
					getUseDefaultValidation: 58,
					setUseDefaultValidation: 59,
					focus: 60,
					layout: 61,
					getElement: 62
				},
				null,
				[-1, -1, -1, -1]
			);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Select",
				options,
				id: create_fragment$e.name
			});
		}

		get use() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get ripple() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set ripple(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get disabled() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set disabled(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get variant() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set variant(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get noLabel() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set noLabel(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get label() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set label(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get key() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set key(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get dirty() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set dirty(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get invalid() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set invalid(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get updateInvalid() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set updateInvalid(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get required() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set required(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get inputId() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set inputId(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get hiddenInput() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set hiddenInput(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get withLeadingIcon() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set withLeadingIcon(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get anchor$use() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set anchor$use(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get anchor$class() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set anchor$class(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get selectedTextContainer$use() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set selectedTextContainer$use(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get selectedTextContainer$class() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set selectedTextContainer$class(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get selectedText$use() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set selectedText$use(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get selectedText$class() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set selectedText$class(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get dropdownIcon$use() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set dropdownIcon$use(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get dropdownIcon$class() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set dropdownIcon$class(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get menu$class() {
			throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set menu$class(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getUseDefaultValidation() {
			return this.$$.ctx[58];
		}

		set getUseDefaultValidation(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get setUseDefaultValidation() {
			return this.$$.ctx[59];
		}

		set setUseDefaultValidation(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get focus() {
			return this.$$.ctx[60];
		}

		set focus(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get layout() {
			return this.$$.ctx[61];
		}

		set layout(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[62];
		}

		set getElement(value) {
			throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/select/dist/Option.svelte generated by Svelte v4.2.19 */

	// (1:0) <Item   bind:this={element}   use={usePass}   data-value={value}   {value}   {selected}   {...$$restProps}>
	function create_default_slot$3(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[11].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[13],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$3.name,
			type: "slot",
			source: "(1:0) <Item   bind:this={element}   use={usePass}   data-value={value}   {value}   {selected}   {...$$restProps}>",
			ctx
		});

		return block;
	}

	function create_fragment$d(ctx) {
		let item;
		let current;

		const item_spread_levels = [
			{ use: /*usePass*/ ctx[3] },
			{ "data-value": /*value*/ ctx[0] },
			{ value: /*value*/ ctx[0] },
			{ selected: /*selected*/ ctx[2] },
			/*$$restProps*/ ctx[6]
		];

		let item_props = {
			$$slots: { default: [create_default_slot$3] },
			$$scope: { ctx }
		};

		for (let i = 0; i < item_spread_levels.length; i += 1) {
			item_props = assign(item_props, item_spread_levels[i]);
		}

		item = new Item({ props: item_props, $$inline: true });
		/*item_binding*/ ctx[12](item);

		const block = {
			c: function create() {
				create_component(item.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(item, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const item_changes = (dirty & /*usePass, value, selected, $$restProps*/ 77)
				? get_spread_update(item_spread_levels, [
						dirty & /*usePass*/ 8 && { use: /*usePass*/ ctx[3] },
						dirty & /*value*/ 1 && { "data-value": /*value*/ ctx[0] },
						dirty & /*value*/ 1 && { value: /*value*/ ctx[0] },
						dirty & /*selected*/ 4 && { selected: /*selected*/ ctx[2] },
						dirty & /*$$restProps*/ 64 && get_spread_object(/*$$restProps*/ ctx[6])
					])
				: {};

				if (dirty & /*$$scope*/ 8192) {
					item_changes.$$scope = { dirty, ctx };
				}

				item.$set(item_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(item.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(item.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				/*item_binding*/ ctx[12](null);
				destroy_component(item, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$d.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$8($$self, $$props, $$invalidate) {
		let usePass;
		let selected;
		const omit_props_names = ["use","class","value","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $selectedText;
		let $selectedValue;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Option', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		const className = '';
		let { value = '' } = $$props;
		let element;
		const selectedText = getContext('SMUI:select:selectedText');
		validate_store(selectedText, 'selectedText');
		component_subscribe($$self, selectedText, value => $$invalidate(14, $selectedText = value));
		const selectedValue = getContext('SMUI:select:value');
		validate_store(selectedValue, 'selectedValue');
		component_subscribe($$self, selectedValue, value => $$invalidate(10, $selectedValue = value));
		setContext('SMUI:list:item:role', 'option');
		onMount(setSelectedText);
		onDestroy(setSelectedText);

		function setSelectedText() {
			if (selected && element) {
				set_store_value(selectedText, $selectedText = element.getPrimaryText(), $selectedText);
			}
		}

		function getElement() {
			return element.getElement();
		}

		function item_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(1, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(7, use = $$new_props.use);
			if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
			if ('$$scope' in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			onMount,
			onDestroy,
			getContext,
			setContext,
			get_current_component,
			forwardEventsBuilder,
			Item,
			forwardEvents,
			use,
			className,
			value,
			element,
			selectedText,
			selectedValue,
			setSelectedText,
			getElement,
			selected,
			usePass,
			$selectedText,
			$selectedValue
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(7, use = $$new_props.use);
			if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
			if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
			if ('selected' in $$props) $$invalidate(2, selected = $$new_props.selected);
			if ('usePass' in $$props) $$invalidate(3, usePass = $$new_props.usePass);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*use*/ 128) {
				$$invalidate(3, usePass = [forwardEvents, ...use]);
			}

			if ($$self.$$.dirty & /*value, $selectedValue*/ 1025) {
				$$invalidate(2, selected = value != null && value !== '' && $selectedValue === value);
			}
		};

		return [
			value,
			element,
			selected,
			usePass,
			selectedText,
			selectedValue,
			$$restProps,
			use,
			className,
			getElement,
			$selectedValue,
			slots,
			item_binding,
			$$scope
		];
	}

	class Option extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$8, create_fragment$d, safe_not_equal, {
				use: 7,
				class: 8,
				value: 0,
				getElement: 9
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Option",
				options,
				id: create_fragment$d.name
			});
		}

		get use() {
			throw new Error("<Option>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			return this.$$.ctx[8];
		}

		set class(value) {
			throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<Option>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[9];
		}

		set getElement(value) {
			throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * CSS class names used in component.
	 */
	var cssClasses$1 = {
	    CELL: 'mdc-data-table__cell',
	    CELL_NUMERIC: 'mdc-data-table__cell--numeric',
	    CONTENT: 'mdc-data-table__content',
	    HEADER_CELL: 'mdc-data-table__header-cell',
	    HEADER_CELL_LABEL: 'mdc-data-table__header-cell-label',
	    HEADER_CELL_SORTED: 'mdc-data-table__header-cell--sorted',
	    HEADER_CELL_SORTED_DESCENDING: 'mdc-data-table__header-cell--sorted-descending',
	    HEADER_CELL_WITH_SORT: 'mdc-data-table__header-cell--with-sort',
	    HEADER_CELL_WRAPPER: 'mdc-data-table__header-cell-wrapper',
	    HEADER_ROW: 'mdc-data-table__header-row',
	    HEADER_ROW_CHECKBOX: 'mdc-data-table__header-row-checkbox',
	    IN_PROGRESS: 'mdc-data-table--in-progress',
	    LINEAR_PROGRESS: 'mdc-data-table__linear-progress',
	    PAGINATION_ROWS_PER_PAGE_LABEL: 'mdc-data-table__pagination-rows-per-page-label',
	    PAGINATION_ROWS_PER_PAGE_SELECT: 'mdc-data-table__pagination-rows-per-page-select',
	    PROGRESS_INDICATOR: 'mdc-data-table__progress-indicator',
	    ROOT: 'mdc-data-table',
	    ROW: 'mdc-data-table__row',
	    ROW_CHECKBOX: 'mdc-data-table__row-checkbox',
	    ROW_SELECTED: 'mdc-data-table__row--selected',
	    SORT_ICON_BUTTON: 'mdc-data-table__sort-icon-button',
	    SORT_STATUS_LABEL: 'mdc-data-table__sort-status-label',
	    TABLE_CONTAINER: 'mdc-data-table__table-container',
	};
	/**
	 * DOM attributes used in component.
	 */
	var attributes = {
	    ARIA_SELECTED: 'aria-selected',
	    ARIA_SORT: 'aria-sort',
	};
	/**
	 * List of data attributes used in component.
	 */
	var dataAttributes = {
	    COLUMN_ID: 'data-column-id',
	    ROW_ID: 'data-row-id',
	};
	/**
	 * CSS selectors used in component.
	 */
	var selectors = {
	    CONTENT: "." + cssClasses$1.CONTENT,
	    HEADER_CELL: "." + cssClasses$1.HEADER_CELL,
	    HEADER_CELL_WITH_SORT: "." + cssClasses$1.HEADER_CELL_WITH_SORT,
	    HEADER_ROW: "." + cssClasses$1.HEADER_ROW,
	    HEADER_ROW_CHECKBOX: "." + cssClasses$1.HEADER_ROW_CHECKBOX,
	    PROGRESS_INDICATOR: "." + cssClasses$1.PROGRESS_INDICATOR,
	    ROW: "." + cssClasses$1.ROW,
	    ROW_CHECKBOX: "." + cssClasses$1.ROW_CHECKBOX,
	    ROW_SELECTED: "." + cssClasses$1.ROW_SELECTED,
	    SORT_ICON_BUTTON: "." + cssClasses$1.SORT_ICON_BUTTON,
	    SORT_STATUS_LABEL: "." + cssClasses$1.SORT_STATUS_LABEL,
	};
	/**
	 * Attributes and selectors used in component.
	 * @deprecated Use `attributes`, `dataAttributes` and `selectors` instead.
	 */
	var strings$1 = {
	    ARIA_SELECTED: attributes.ARIA_SELECTED,
	    ARIA_SORT: attributes.ARIA_SORT,
	    DATA_ROW_ID_ATTR: dataAttributes.ROW_ID,
	    HEADER_ROW_CHECKBOX_SELECTOR: selectors.HEADER_ROW_CHECKBOX,
	    ROW_CHECKBOX_SELECTOR: selectors.ROW_CHECKBOX,
	    ROW_SELECTED_SELECTOR: selectors.ROW_SELECTED,
	    ROW_SELECTOR: selectors.ROW,
	};
	/**
	 * Sort values defined by ARIA.
	 * See https://www.w3.org/WAI/PF/aria/states_and_properties#aria-sort
	 */
	var SortValue;
	(function (SortValue) {
	    // Items are sorted in ascending order by this column.
	    SortValue["ASCENDING"] = "ascending";
	    // Items are sorted in descending order by this column.
	    SortValue["DESCENDING"] = "descending";
	    // There is no defined sort applied to the column.
	    SortValue["NONE"] = "none";
	    // A sort algorithm other than ascending or descending has been applied.
	    SortValue["OTHER"] = "other";
	})(SortValue || (SortValue = {}));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * The Foundation of data table component containing pure business logic, any
	 * logic requiring DOM manipulation are delegated to adapter methods.
	 */
	var MDCDataTableFoundation = /** @class */ (function (_super) {
	    __extends(MDCDataTableFoundation, _super);
	    function MDCDataTableFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCDataTableFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCDataTableFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                addClassAtRowIndex: function () { return undefined; },
	                getAttributeByHeaderCellIndex: function () { return ''; },
	                getHeaderCellCount: function () { return 0; },
	                getHeaderCellElements: function () { return []; },
	                getRowCount: function () { return 0; },
	                getRowElements: function () { return []; },
	                getRowIdAtIndex: function () { return ''; },
	                getRowIndexByChildElement: function () { return 0; },
	                getSelectedRowCount: function () { return 0; },
	                getTableContainerHeight: function () { return 0; },
	                getTableHeaderHeight: function () { return 0; },
	                isCheckboxAtRowIndexChecked: function () { return false; },
	                isHeaderRowCheckboxChecked: function () { return false; },
	                isRowsSelectable: function () { return false; },
	                notifyRowSelectionChanged: function () { return undefined; },
	                notifySelectedAll: function () { return undefined; },
	                notifySortAction: function () { return undefined; },
	                notifyUnselectedAll: function () { return undefined; },
	                notifyRowClick: function () { return undefined; },
	                registerHeaderRowCheckbox: function () { return undefined; },
	                registerRowCheckboxes: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                removeClassAtRowIndex: function () { return undefined; },
	                removeClassNameByHeaderCellIndex: function () { return undefined; },
	                setAttributeAtRowIndex: function () { return undefined; },
	                setAttributeByHeaderCellIndex: function () { return undefined; },
	                setClassNameByHeaderCellIndex: function () { return undefined; },
	                setHeaderRowCheckboxChecked: function () { return undefined; },
	                setHeaderRowCheckboxIndeterminate: function () { return undefined; },
	                setProgressIndicatorStyles: function () { return undefined; },
	                setRowCheckboxCheckedAtIndex: function () { return undefined; },
	                setSortStatusLabelByHeaderCellIndex: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Re-initializes header row checkbox and row checkboxes when selectable rows
	     * are added or removed from table. Use this if registering checkbox is
	     * synchronous.
	     */
	    MDCDataTableFoundation.prototype.layout = function () {
	        if (this.adapter.isRowsSelectable()) {
	            this.adapter.registerHeaderRowCheckbox();
	            this.adapter.registerRowCheckboxes();
	            this.setHeaderRowCheckboxState();
	        }
	    };
	    /**
	     * Re-initializes header row checkbox and row checkboxes when selectable rows
	     * are added or removed from table. Use this if registering checkbox is
	     * asynchronous.
	     */
	    MDCDataTableFoundation.prototype.layoutAsync = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!this.adapter.isRowsSelectable()) return [3 /*break*/, 3];
	                        return [4 /*yield*/, this.adapter.registerHeaderRowCheckbox()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, this.adapter.registerRowCheckboxes()];
	                    case 2:
	                        _a.sent();
	                        this.setHeaderRowCheckboxState();
	                        _a.label = 3;
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * @return Returns array of row elements.
	     */
	    MDCDataTableFoundation.prototype.getRows = function () {
	        return this.adapter.getRowElements();
	    };
	    /**
	     * @return Array of header cell elements.
	     */
	    MDCDataTableFoundation.prototype.getHeaderCells = function () {
	        return this.adapter.getHeaderCellElements();
	    };
	    /**
	     * Sets selected row ids. Overwrites previously selected rows.
	     * @param rowIds Array of row ids that needs to be selected.
	     */
	    MDCDataTableFoundation.prototype.setSelectedRowIds = function (rowIds) {
	        for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
	            var rowId = this.adapter.getRowIdAtIndex(rowIndex);
	            var isSelected = false;
	            if (rowId && rowIds.indexOf(rowId) >= 0) {
	                isSelected = true;
	            }
	            this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isSelected);
	            this.selectRowAtIndex(rowIndex, isSelected);
	        }
	        this.setHeaderRowCheckboxState();
	    };
	    /**
	     * @return Returns array of all row ids.
	     */
	    MDCDataTableFoundation.prototype.getRowIds = function () {
	        var rowIds = [];
	        for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
	            rowIds.push(this.adapter.getRowIdAtIndex(rowIndex));
	        }
	        return rowIds;
	    };
	    /**
	     * @return Returns array of selected row ids.
	     */
	    MDCDataTableFoundation.prototype.getSelectedRowIds = function () {
	        var selectedRowIds = [];
	        for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
	            if (this.adapter.isCheckboxAtRowIndexChecked(rowIndex)) {
	                selectedRowIds.push(this.adapter.getRowIdAtIndex(rowIndex));
	            }
	        }
	        return selectedRowIds;
	    };
	    /**
	     * Handles header row checkbox change event.
	     */
	    MDCDataTableFoundation.prototype.handleHeaderRowCheckboxChange = function () {
	        var isHeaderChecked = this.adapter.isHeaderRowCheckboxChecked();
	        for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
	            this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isHeaderChecked);
	            this.selectRowAtIndex(rowIndex, isHeaderChecked);
	        }
	        if (isHeaderChecked) {
	            this.adapter.notifySelectedAll();
	        }
	        else {
	            this.adapter.notifyUnselectedAll();
	        }
	    };
	    /**
	     * Handles change event originated from row checkboxes.
	     */
	    MDCDataTableFoundation.prototype.handleRowCheckboxChange = function (event) {
	        var rowIndex = this.adapter.getRowIndexByChildElement(event.target);
	        if (rowIndex === -1) {
	            return;
	        }
	        var selected = this.adapter.isCheckboxAtRowIndexChecked(rowIndex);
	        this.selectRowAtIndex(rowIndex, selected);
	        this.setHeaderRowCheckboxState();
	        var rowId = this.adapter.getRowIdAtIndex(rowIndex);
	        this.adapter.notifyRowSelectionChanged({ rowId: rowId, rowIndex: rowIndex, selected: selected });
	    };
	    /**
	     * Handles sort action on sortable header cell.
	     */
	    MDCDataTableFoundation.prototype.handleSortAction = function (eventData) {
	        var columnId = eventData.columnId, columnIndex = eventData.columnIndex, headerCell = eventData.headerCell;
	        // Reset sort attributes / classes on other header cells.
	        for (var index = 0; index < this.adapter.getHeaderCellCount(); index++) {
	            if (index === columnIndex) {
	                continue;
	            }
	            this.adapter.removeClassNameByHeaderCellIndex(index, cssClasses$1.HEADER_CELL_SORTED);
	            this.adapter.removeClassNameByHeaderCellIndex(index, cssClasses$1.HEADER_CELL_SORTED_DESCENDING);
	            this.adapter.setAttributeByHeaderCellIndex(index, strings$1.ARIA_SORT, SortValue.NONE);
	            this.adapter.setSortStatusLabelByHeaderCellIndex(index, SortValue.NONE);
	        }
	        // Set appropriate sort attributes / classes on target header cell.
	        this.adapter.setClassNameByHeaderCellIndex(columnIndex, cssClasses$1.HEADER_CELL_SORTED);
	        var currentSortValue = this.adapter.getAttributeByHeaderCellIndex(columnIndex, strings$1.ARIA_SORT);
	        var sortValue = SortValue.NONE;
	        // Set to descending if sorted on ascending order.
	        if (currentSortValue === SortValue.ASCENDING) {
	            this.adapter.setClassNameByHeaderCellIndex(columnIndex, cssClasses$1.HEADER_CELL_SORTED_DESCENDING);
	            this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings$1.ARIA_SORT, SortValue.DESCENDING);
	            sortValue = SortValue.DESCENDING;
	            // Set to ascending if sorted on descending order.
	        }
	        else if (currentSortValue === SortValue.DESCENDING) {
	            this.adapter.removeClassNameByHeaderCellIndex(columnIndex, cssClasses$1.HEADER_CELL_SORTED_DESCENDING);
	            this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings$1.ARIA_SORT, SortValue.ASCENDING);
	            sortValue = SortValue.ASCENDING;
	        }
	        else {
	            // Set to ascending by default when not sorted.
	            this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings$1.ARIA_SORT, SortValue.ASCENDING);
	            sortValue = SortValue.ASCENDING;
	        }
	        this.adapter.setSortStatusLabelByHeaderCellIndex(columnIndex, sortValue);
	        this.adapter.notifySortAction({
	            columnId: columnId,
	            columnIndex: columnIndex,
	            headerCell: headerCell,
	            sortValue: sortValue,
	        });
	    };
	    /**
	     * Handles data table row click event.
	     */
	    MDCDataTableFoundation.prototype.handleRowClick = function (_a) {
	        var rowId = _a.rowId, row = _a.row;
	        this.adapter.notifyRowClick({
	            rowId: rowId,
	            row: row,
	        });
	    };
	    /**
	     * Shows progress indicator blocking only the table body content when in
	     * loading state.
	     */
	    MDCDataTableFoundation.prototype.showProgress = function () {
	        var tableHeaderHeight = this.adapter.getTableHeaderHeight();
	        // Calculate the height of table content (Not scroll content) excluding
	        // header row height.
	        var height = this.adapter.getTableContainerHeight() - tableHeaderHeight;
	        var top = tableHeaderHeight;
	        this.adapter.setProgressIndicatorStyles({
	            height: height + "px",
	            top: top + "px",
	        });
	        this.adapter.addClass(cssClasses$1.IN_PROGRESS);
	    };
	    /**
	     * Hides progress indicator when data table is finished loading.
	     */
	    MDCDataTableFoundation.prototype.hideProgress = function () {
	        this.adapter.removeClass(cssClasses$1.IN_PROGRESS);
	    };
	    /**
	     * Updates header row checkbox state based on number of rows selected.
	     */
	    MDCDataTableFoundation.prototype.setHeaderRowCheckboxState = function () {
	        if (this.adapter.getSelectedRowCount() === 0) {
	            this.adapter.setHeaderRowCheckboxChecked(false);
	            this.adapter.setHeaderRowCheckboxIndeterminate(false);
	        }
	        else if (this.adapter.getSelectedRowCount() === this.adapter.getRowCount()) {
	            this.adapter.setHeaderRowCheckboxChecked(true);
	            this.adapter.setHeaderRowCheckboxIndeterminate(false);
	        }
	        else {
	            this.adapter.setHeaderRowCheckboxIndeterminate(true);
	            this.adapter.setHeaderRowCheckboxChecked(false);
	        }
	    };
	    /**
	     * Sets the attributes of row element based on selection state.
	     */
	    MDCDataTableFoundation.prototype.selectRowAtIndex = function (rowIndex, selected) {
	        if (selected) {
	            this.adapter.addClassAtRowIndex(rowIndex, cssClasses$1.ROW_SELECTED);
	            this.adapter.setAttributeAtRowIndex(rowIndex, strings$1.ARIA_SELECTED, 'true');
	        }
	        else {
	            this.adapter.removeClassAtRowIndex(rowIndex, cssClasses$1.ROW_SELECTED);
	            this.adapter.setAttributeAtRowIndex(rowIndex, strings$1.ARIA_SELECTED, 'false');
	        }
	    };
	    return MDCDataTableFoundation;
	}(MDCFoundation));

	/* node_modules/@smui/data-table/dist/DataTable.svelte generated by Svelte v4.2.19 */

	const { Error: Error_1$2 } = globals;

	const file$c = "node_modules/@smui/data-table/dist/DataTable.svelte";
	const get_paginate_slot_changes = dirty => ({});
	const get_paginate_slot_context = ctx => ({});
	const get_progress_slot_changes = dirty => ({});
	const get_progress_slot_context = ctx => ({});

	// (44:2) {#if $$slots.progress}
	function create_if_block$6(ctx) {
		let div1;
		let div0;
		let t;
		let div1_style_value;
		let current;
		const progress_slot_template = /*#slots*/ ctx[36].progress;
		const progress_slot = create_slot(progress_slot_template, ctx, /*$$scope*/ ctx[35], get_progress_slot_context);

		const block = {
			c: function create() {
				div1 = element("div");
				div0 = element("div");
				t = space();
				if (progress_slot) progress_slot.c();
				attr_dev(div0, "class", "mdc-data-table__scrim");
				add_location(div0, file$c, 50, 6, 1528);
				attr_dev(div1, "class", "mdc-data-table__progress-indicator");
				attr_dev(div1, "style", div1_style_value = Object.entries(/*progressIndicatorStyles*/ ctx[13]).map(func$5).join(' '));
				add_location(div1, file$c, 44, 4, 1335);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div1, anchor);
				append_dev(div1, div0);
				append_dev(div1, t);

				if (progress_slot) {
					progress_slot.m(div1, null);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (progress_slot) {
					if (progress_slot.p && (!current || dirty[1] & /*$$scope*/ 16)) {
						update_slot_base(
							progress_slot,
							progress_slot_template,
							ctx,
							/*$$scope*/ ctx[35],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[35])
							: get_slot_changes(progress_slot_template, /*$$scope*/ ctx[35], dirty, get_progress_slot_changes),
							get_progress_slot_context
						);
					}
				}

				if (!current || dirty[0] & /*progressIndicatorStyles*/ 8192 && div1_style_value !== (div1_style_value = Object.entries(/*progressIndicatorStyles*/ ctx[13]).map(func$5).join(' '))) {
					attr_dev(div1, "style", div1_style_value);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(progress_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(progress_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div1);
				}

				if (progress_slot) progress_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$6.name,
			type: "if",
			source: "(44:2) {#if $$slots.progress}",
			ctx
		});

		return block;
	}

	function create_fragment$c(ctx) {
		let div1;
		let div0;
		let table;
		let table_class_value;
		let useActions_action;
		let div0_class_value;
		let useActions_action_1;
		let t0;
		let t1;
		let div1_class_value;
		let useActions_action_2;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[36].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[35], null);

		let table_levels = [
			{
				class: table_class_value = classMap({
					[/*table$class*/ ctx[6]]: true,
					'mdc-data-table__table': true
				})
			},
			prefixFilter(/*$$restProps*/ ctx[25], 'table$')
		];

		let table_data = {};

		for (let i = 0; i < table_levels.length; i += 1) {
			table_data = assign(table_data, table_levels[i]);
		}

		let div0_levels = [
			{
				class: div0_class_value = classMap({
					[/*container$class*/ ctx[4]]: true,
					'mdc-data-table__table-container': true
				})
			},
			prefixFilter(/*$$restProps*/ ctx[25], 'container$')
		];

		let div_data = {};

		for (let i = 0; i < div0_levels.length; i += 1) {
			div_data = assign(div_data, div0_levels[i]);
		}

		let if_block = /*$$slots*/ ctx[24].progress && create_if_block$6(ctx);
		const paginate_slot_template = /*#slots*/ ctx[36].paginate;
		const paginate_slot = create_slot(paginate_slot_template, ctx, /*$$scope*/ ctx[35], get_paginate_slot_context);

		let div1_levels = [
			{
				class: div1_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-data-table': true,
					'mdc-data-table--sticky-header': /*stickyHeader*/ ctx[2],
					.../*internalClasses*/ ctx[12]
				})
			},
			exclude(/*$$restProps*/ ctx[25], ['container$', 'table$'])
		];

		let div_data_1 = {};

		for (let i = 0; i < div1_levels.length; i += 1) {
			div_data_1 = assign(div_data_1, div1_levels[i]);
		}

		const block = {
			c: function create() {
				div1 = element("div");
				div0 = element("div");
				table = element("table");
				if (default_slot) default_slot.c();
				t0 = space();
				if (if_block) if_block.c();
				t1 = space();
				if (paginate_slot) paginate_slot.c();
				set_attributes(table, table_data);
				add_location(table, file$c, 31, 4, 1073);
				set_attributes(div0, div_data);
				add_location(div0, file$c, 22, 2, 842);
				set_attributes(div1, div_data_1);
				add_location(div1, file$c, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error_1$2("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div1, anchor);
				append_dev(div1, div0);
				append_dev(div0, table);

				if (default_slot) {
					default_slot.m(table, null);
				}

				/*div0_binding*/ ctx[37](div0);
				append_dev(div1, t0);
				if (if_block) if_block.m(div1, null);
				append_dev(div1, t1);

				if (paginate_slot) {
					paginate_slot.m(div1, null);
				}

				/*div1_binding*/ ctx[38](div1);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, table, /*table$use*/ ctx[5])),
						action_destroyer(useActions_action_1 = useActions.call(null, div0, /*container$use*/ ctx[3])),
						action_destroyer(useActions_action_2 = useActions.call(null, div1, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[15].call(null, div1)),
						listen_dev(div1, "SMUICheckbox:mount", /*SMUICheckbox_mount_handler*/ ctx[39], false, false, false, false),
						listen_dev(div1, "SMUIDataTableHeader:mount", /*handleHeaderMount*/ ctx[19], false, false, false, false),
						listen_dev(div1, "SMUIDataTableHeader:unmount", /*SMUIDataTableHeader_unmount_handler*/ ctx[40], false, false, false, false),
						listen_dev(div1, "SMUIDataTableBody:mount", /*handleBodyMount*/ ctx[20], false, false, false, false),
						listen_dev(div1, "SMUIDataTableBody:unmount", /*SMUIDataTableBody_unmount_handler*/ ctx[41], false, false, false, false),
						listen_dev(div1, "SMUIDataTableHeaderCheckbox:change", /*SMUIDataTableHeaderCheckbox_change_handler*/ ctx[42], false, false, false, false),
						listen_dev(div1, "SMUIDataTableHeader:click", /*handleHeaderRowClick*/ ctx[22], false, false, false, false),
						listen_dev(div1, "SMUIDataTableRow:click", /*handleRowClick*/ ctx[23], false, false, false, false),
						listen_dev(div1, "SMUIDataTableBodyCheckbox:change", /*handleBodyCheckboxChange*/ ctx[21], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 16)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[35],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[35])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[35], dirty, null),
							null
						);
					}
				}

				set_attributes(table, table_data = get_spread_update(table_levels, [
					(!current || dirty[0] & /*table$class*/ 64 && table_class_value !== (table_class_value = classMap({
						[/*table$class*/ ctx[6]]: true,
						'mdc-data-table__table': true
					}))) && { class: table_class_value },
					dirty[0] & /*$$restProps*/ 33554432 && prefixFilter(/*$$restProps*/ ctx[25], 'table$')
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*table$use*/ 32) useActions_action.update.call(null, /*table$use*/ ctx[5]);

				set_attributes(div0, div_data = get_spread_update(div0_levels, [
					(!current || dirty[0] & /*container$class*/ 16 && div0_class_value !== (div0_class_value = classMap({
						[/*container$class*/ ctx[4]]: true,
						'mdc-data-table__table-container': true
					}))) && { class: div0_class_value },
					dirty[0] & /*$$restProps*/ 33554432 && prefixFilter(/*$$restProps*/ ctx[25], 'container$')
				]));

				if (useActions_action_1 && is_function(useActions_action_1.update) && dirty[0] & /*container$use*/ 8) useActions_action_1.update.call(null, /*container$use*/ ctx[3]);

				if (/*$$slots*/ ctx[24].progress) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty[0] & /*$$slots*/ 16777216) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block$6(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(div1, t1);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}

				if (paginate_slot) {
					if (paginate_slot.p && (!current || dirty[1] & /*$$scope*/ 16)) {
						update_slot_base(
							paginate_slot,
							paginate_slot_template,
							ctx,
							/*$$scope*/ ctx[35],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[35])
							: get_slot_changes(paginate_slot_template, /*$$scope*/ ctx[35], dirty, get_paginate_slot_changes),
							get_paginate_slot_context
						);
					}
				}

				set_attributes(div1, div_data_1 = get_spread_update(div1_levels, [
					(!current || dirty[0] & /*className, stickyHeader, internalClasses*/ 4102 && div1_class_value !== (div1_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-data-table': true,
						'mdc-data-table--sticky-header': /*stickyHeader*/ ctx[2],
						.../*internalClasses*/ ctx[12]
					}))) && { class: div1_class_value },
					dirty[0] & /*$$restProps*/ 33554432 && exclude(/*$$restProps*/ ctx[25], ['container$', 'table$'])
				]));

				if (useActions_action_2 && is_function(useActions_action_2.update) && dirty[0] & /*use*/ 1) useActions_action_2.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				transition_in(if_block);
				transition_in(paginate_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				transition_out(if_block);
				transition_out(paginate_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div1);
				}

				if (default_slot) default_slot.d(detaching);
				/*div0_binding*/ ctx[37](null);
				if (if_block) if_block.d();
				if (paginate_slot) paginate_slot.d(detaching);
				/*div1_binding*/ ctx[38](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$c.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$5 = ([name, value]) => `${name}: ${value};`;

	function instance_1$4($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","stickyHeader","sortable","sort","sortDirection","sortAscendingAriaLabel","sortDescendingAriaLabel","container$use","container$class","table$use","table$class","layout","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $progressClosed;
		let $sortDirectionStore;
		let $sortStore;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('DataTable', slots, ['default','progress','paginate']);
		const $$slots = compute_slots(slots);
		const { closest } = ponyfill;
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { stickyHeader = false } = $$props;
		let { sortable = false } = $$props;
		let { sort = null } = $$props;
		let { sortDirection = 'ascending' } = $$props;
		let { sortAscendingAriaLabel = 'sorted, ascending' } = $$props;
		let { sortDescendingAriaLabel = 'sorted, descending' } = $$props;
		let { container$use = [] } = $$props;
		let { container$class = '' } = $$props;
		let { table$use = [] } = $$props;
		let { table$class = '' } = $$props;
		let element;
		let instance;
		let container;
		let header = undefined;
		let body = undefined;
		let internalClasses = {};
		let progressIndicatorStyles = { height: 'auto', top: 'initial' };
		let addLayoutListener = getContext('SMUI:addLayoutListener');
		let removeLayoutListener;
		let postMount = false;
		let progressClosed = writable(false);
		validate_store(progressClosed, 'progressClosed');
		component_subscribe($$self, progressClosed, value => $$invalidate(34, $progressClosed = value));
		let sortStore = writable(sort);
		validate_store(sortStore, 'sortStore');
		component_subscribe($$self, sortStore, value => $$invalidate(45, $sortStore = value));
		let sortDirectionStore = writable(sortDirection);
		validate_store(sortDirectionStore, 'sortDirectionStore');
		component_subscribe($$self, sortDirectionStore, value => $$invalidate(44, $sortDirectionStore = value));
		setContext('SMUI:checkbox:context', 'data-table');
		setContext('SMUI:linear-progress:context', 'data-table');
		setContext('SMUI:linear-progress:closed', progressClosed);
		setContext('SMUI:data-table:sortable', sortable);
		setContext('SMUI:data-table:sort', sortStore);
		setContext('SMUI:data-table:sortDirection', sortDirectionStore);
		setContext('SMUI:data-table:sortAscendingAriaLabel', sortAscendingAriaLabel);
		setContext('SMUI:data-table:sortDescendingAriaLabel', sortDescendingAriaLabel);

		if (addLayoutListener) {
			removeLayoutListener = addLayoutListener(layout);
		}

		let previousProgressClosed = undefined;

		onMount(() => {
			$$invalidate(7, instance = new MDCDataTableFoundation({
					addClass,
					removeClass,
					getHeaderCellElements: () => {
						var _a;

						return (_a = header === null || header === void 0
						? void 0
						: header.cells.map(accessor => accessor.element)) !== null && _a !== void 0
						? _a
						: [];
					},
					getHeaderCellCount: () => {
						var _a;

						return (_a = header === null || header === void 0
						? void 0
						: header.cells.length) !== null && _a !== void 0
						? _a
						: 0;
					},
					getAttributeByHeaderCellIndex: (index, name) => {
						var _a;

						return (_a = header === null || header === void 0
						? void 0
						: header.orderedCells[index].getAttr(name)) !== null && _a !== void 0
						? _a
						: null;
					},
					setAttributeByHeaderCellIndex: (index, name, value) => {
						header === null || header === void 0
						? void 0
						: header.orderedCells[index].addAttr(name, value);
					},
					setClassNameByHeaderCellIndex: (index, className) => {
						header === null || header === void 0
						? void 0
						: header.orderedCells[index].addClass(className);
					},
					removeClassNameByHeaderCellIndex: (index, className) => {
						header === null || header === void 0
						? void 0
						: header.orderedCells[index].removeClass(className);
					},
					notifySortAction: data => {
						$$invalidate(26, sort = data.columnId);
						$$invalidate(27, sortDirection = data.sortValue);
						dispatch(getElement(), 'SMUIDataTable:sorted', data, undefined, true);
					},
					getTableContainerHeight: () => container.getBoundingClientRect().height,
					getTableHeaderHeight: () => {
						const tableHeader = getElement().querySelector('.mdc-data-table__header-row');

						if (!tableHeader) {
							throw new Error('MDCDataTable: Table header element not found.');
						}

						return tableHeader.getBoundingClientRect().height;
					},
					setProgressIndicatorStyles: styles => {
						$$invalidate(13, progressIndicatorStyles = styles);
					},
					addClassAtRowIndex: (rowIndex, className) => {
						body === null || body === void 0
						? void 0
						: body.orderedRows[rowIndex].addClass(className);
					},
					getRowCount: () => {
						var _a;

						return (_a = body === null || body === void 0
						? void 0
						: body.rows.length) !== null && _a !== void 0
						? _a
						: 0;
					},
					getRowElements: () => {
						var _a;

						return (_a = body === null || body === void 0
						? void 0
						: body.rows.map(accessor => accessor.element)) !== null && _a !== void 0
						? _a
						: [];
					},
					getRowIdAtIndex: rowIndex => {
						var _a;

						return (_a = body === null || body === void 0
						? void 0
						: body.orderedRows[rowIndex].rowId) !== null && _a !== void 0
						? _a
						: null;
					},
					getRowIndexByChildElement: el => {
						var _a;

						return (_a = body === null || body === void 0
						? void 0
						: body.orderedRows.map(accessor => accessor.element).indexOf(closest(el, '.mdc-data-table__row'))) !== null && _a !== void 0
						? _a
						: -1;
					},
					getSelectedRowCount: () => {
						var _a;

						return (_a = body === null || body === void 0
						? void 0
						: body.rows.filter(accessor => accessor.selected).length) !== null && _a !== void 0
						? _a
						: 0;
					},
					isCheckboxAtRowIndexChecked: rowIndex => {
						const checkbox = body === null || body === void 0
						? void 0
						: body.orderedRows[rowIndex].checkbox;

						if (checkbox) {
							return checkbox.checked;
						}

						return false;
					},
					isHeaderRowCheckboxChecked: () => {
						const checkbox = header === null || header === void 0
						? void 0
						: header.checkbox;

						if (checkbox) {
							return checkbox.checked;
						}

						return false;
					},
					isRowsSelectable: () => !!getElement().querySelector('.mdc-data-table__row-checkbox') || !!getElement().querySelector('.mdc-data-table__header-row-checkbox'),
					notifyRowSelectionChanged: data => {
						const row = body === null || body === void 0
						? void 0
						: body.orderedRows[data.rowIndex];

						if (row) {
							dispatch(
								getElement(),
								'SMUIDataTable:rowSelectionChanged',
								{
									row: row.element,
									rowId: row.rowId,
									rowIndex: data.rowIndex,
									selected: data.selected
								},
								undefined,
								true
							);
						}
					},
					notifySelectedAll: () => {
						setHeaderRowCheckboxIndeterminate(false);
						dispatch(getElement(), 'SMUIDataTable:selectedAll', undefined, undefined, true);
					},
					notifyUnselectedAll: () => {
						setHeaderRowCheckboxIndeterminate(false);
						dispatch(getElement(), 'SMUIDataTable:unselectedAll', undefined, undefined, true);
					},
					notifyRowClick: detail => {
						dispatch(getElement(), 'SMUIDataTable:rowClick', detail, undefined, true);
					},
					registerHeaderRowCheckbox: () => {
						
					}, // Handled automatically.
					registerRowCheckboxes: () => {
						
					}, // Handled automatically.
					removeClassAtRowIndex: (rowIndex, className) => {
						body === null || body === void 0
						? void 0
						: body.orderedRows[rowIndex].removeClass(className);
					},
					setAttributeAtRowIndex: (rowIndex, name, value) => {
						body === null || body === void 0
						? void 0
						: body.orderedRows[rowIndex].addAttr(name, value);
					},
					setHeaderRowCheckboxChecked: checked => {
						const checkbox = header === null || header === void 0
						? void 0
						: header.checkbox;

						if (checkbox) {
							checkbox.checked = checked;
						}
					},
					setHeaderRowCheckboxIndeterminate,
					setRowCheckboxCheckedAtIndex: (rowIndex, checked) => {
						const checkbox = body === null || body === void 0
						? void 0
						: body.orderedRows[rowIndex].checkbox;

						if (checkbox) {
							checkbox.checked = checked;
						}
					},
					setSortStatusLabelByHeaderCellIndex: (_columnIndex, _sortValue) => {
						
					}, // Handled automatically.
					
				}));

			instance.init();
			instance.layout();
			$$invalidate(14, postMount = true);

			return () => {
				instance.destroy();
			};
		});

		onDestroy(() => {
			if (removeLayoutListener) {
				removeLayoutListener();
			}
		});

		function handleHeaderMount(event) {
			$$invalidate(10, header = event.detail);
		}

		function handleBodyMount(event) {
			$$invalidate(11, body = event.detail);
		}

		function handleBodyCheckboxChange(event) {
			if (instance) {
				instance.handleRowCheckboxChange(event);
			}
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(12, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(12, internalClasses[className] = false, internalClasses);
			}
		}

		function setHeaderRowCheckboxIndeterminate(indeterminate) {
			const checkbox = header === null || header === void 0
			? void 0
			: header.checkbox;

			if (checkbox) {
				checkbox.indeterminate = indeterminate;
			}
		}

		function handleHeaderRowClick(event) {
			if (!instance || !event.detail.target) {
				return;
			}

			const headerCell = closest(event.detail.target, '.mdc-data-table__header-cell--with-sort');

			if (headerCell) {
				handleSortAction(headerCell);
			}
		}

		function handleRowClick(event) {
			if (!instance || !event.detail.target) {
				return;
			}

			const row = closest(event.detail.target, '.mdc-data-table__row');

			if (row && instance) {
				instance.handleRowClick({ rowId: event.detail.rowId, row });
			}
		}

		function handleSortAction(headerCell) {
			var _a, _b;

			const orderedCells = (_a = header === null || header === void 0
			? void 0
			: header.orderedCells) !== null && _a !== void 0
			? _a
			: [];

			const columnIndex = orderedCells.map(accessor => accessor.element).indexOf(headerCell);

			if (columnIndex === -1) {
				return;
			}

			const columnId = (_b = orderedCells[columnIndex].columnId) !== null && _b !== void 0
			? _b
			: null;

			instance.handleSortAction({ columnId, columnIndex, headerCell });
		}

		function layout() {
			return instance.layout();
		}

		function getElement() {
			return element;
		}

		function div0_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				container = $$value;
				$$invalidate(9, container);
			});
		}

		function div1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(8, element);
			});
		}

		const SMUICheckbox_mount_handler = () => instance && postMount && instance.layout();
		const SMUIDataTableHeader_unmount_handler = () => $$invalidate(10, header = undefined);
		const SMUIDataTableBody_unmount_handler = () => $$invalidate(11, body = undefined);
		const SMUIDataTableHeaderCheckbox_change_handler = () => instance && instance.handleHeaderRowCheckboxChange();

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(25, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('stickyHeader' in $$new_props) $$invalidate(2, stickyHeader = $$new_props.stickyHeader);
			if ('sortable' in $$new_props) $$invalidate(28, sortable = $$new_props.sortable);
			if ('sort' in $$new_props) $$invalidate(26, sort = $$new_props.sort);
			if ('sortDirection' in $$new_props) $$invalidate(27, sortDirection = $$new_props.sortDirection);
			if ('sortAscendingAriaLabel' in $$new_props) $$invalidate(29, sortAscendingAriaLabel = $$new_props.sortAscendingAriaLabel);
			if ('sortDescendingAriaLabel' in $$new_props) $$invalidate(30, sortDescendingAriaLabel = $$new_props.sortDescendingAriaLabel);
			if ('container$use' in $$new_props) $$invalidate(3, container$use = $$new_props.container$use);
			if ('container$class' in $$new_props) $$invalidate(4, container$class = $$new_props.container$class);
			if ('table$use' in $$new_props) $$invalidate(5, table$use = $$new_props.table$use);
			if ('table$class' in $$new_props) $$invalidate(6, table$class = $$new_props.table$class);
			if ('$$scope' in $$new_props) $$invalidate(35, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			MDCDataTableFoundation,
			ponyfill,
			onMount,
			onDestroy,
			getContext,
			setContext,
			writable,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			exclude,
			prefixFilter,
			useActions,
			dispatch,
			closest,
			forwardEvents,
			use,
			className,
			stickyHeader,
			sortable,
			sort,
			sortDirection,
			sortAscendingAriaLabel,
			sortDescendingAriaLabel,
			container$use,
			container$class,
			table$use,
			table$class,
			element,
			instance,
			container,
			header,
			body,
			internalClasses,
			progressIndicatorStyles,
			addLayoutListener,
			removeLayoutListener,
			postMount,
			progressClosed,
			sortStore,
			sortDirectionStore,
			previousProgressClosed,
			handleHeaderMount,
			handleBodyMount,
			handleBodyCheckboxChange,
			addClass,
			removeClass,
			setHeaderRowCheckboxIndeterminate,
			handleHeaderRowClick,
			handleRowClick,
			handleSortAction,
			layout,
			getElement,
			$progressClosed,
			$sortDirectionStore,
			$sortStore
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('stickyHeader' in $$props) $$invalidate(2, stickyHeader = $$new_props.stickyHeader);
			if ('sortable' in $$props) $$invalidate(28, sortable = $$new_props.sortable);
			if ('sort' in $$props) $$invalidate(26, sort = $$new_props.sort);
			if ('sortDirection' in $$props) $$invalidate(27, sortDirection = $$new_props.sortDirection);
			if ('sortAscendingAriaLabel' in $$props) $$invalidate(29, sortAscendingAriaLabel = $$new_props.sortAscendingAriaLabel);
			if ('sortDescendingAriaLabel' in $$props) $$invalidate(30, sortDescendingAriaLabel = $$new_props.sortDescendingAriaLabel);
			if ('container$use' in $$props) $$invalidate(3, container$use = $$new_props.container$use);
			if ('container$class' in $$props) $$invalidate(4, container$class = $$new_props.container$class);
			if ('table$use' in $$props) $$invalidate(5, table$use = $$new_props.table$use);
			if ('table$class' in $$props) $$invalidate(6, table$class = $$new_props.table$class);
			if ('element' in $$props) $$invalidate(8, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(7, instance = $$new_props.instance);
			if ('container' in $$props) $$invalidate(9, container = $$new_props.container);
			if ('header' in $$props) $$invalidate(10, header = $$new_props.header);
			if ('body' in $$props) $$invalidate(11, body = $$new_props.body);
			if ('internalClasses' in $$props) $$invalidate(12, internalClasses = $$new_props.internalClasses);
			if ('progressIndicatorStyles' in $$props) $$invalidate(13, progressIndicatorStyles = $$new_props.progressIndicatorStyles);
			if ('addLayoutListener' in $$props) addLayoutListener = $$new_props.addLayoutListener;
			if ('removeLayoutListener' in $$props) removeLayoutListener = $$new_props.removeLayoutListener;
			if ('postMount' in $$props) $$invalidate(14, postMount = $$new_props.postMount);
			if ('progressClosed' in $$props) $$invalidate(16, progressClosed = $$new_props.progressClosed);
			if ('sortStore' in $$props) $$invalidate(17, sortStore = $$new_props.sortStore);
			if ('sortDirectionStore' in $$props) $$invalidate(18, sortDirectionStore = $$new_props.sortDirectionStore);
			if ('previousProgressClosed' in $$props) $$invalidate(33, previousProgressClosed = $$new_props.previousProgressClosed);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty[0] & /*sort*/ 67108864) {
				set_store_value(sortStore, $sortStore = sort, $sortStore);
			}

			if ($$self.$$.dirty[0] & /*sortDirection*/ 134217728) {
				set_store_value(sortDirectionStore, $sortDirectionStore = sortDirection, $sortDirectionStore);
			}

			if ($$self.$$.dirty[0] & /*instance*/ 128 | $$self.$$.dirty[1] & /*previousProgressClosed, $progressClosed*/ 12) {
				if ($$slots.progress && instance && previousProgressClosed !== $progressClosed) {
					$$invalidate(33, previousProgressClosed = $progressClosed);

					if ($progressClosed) {
						instance.hideProgress();
					} else {
						instance.showProgress();
					}
				}
			}
		};

		return [
			use,
			className,
			stickyHeader,
			container$use,
			container$class,
			table$use,
			table$class,
			instance,
			element,
			container,
			header,
			body,
			internalClasses,
			progressIndicatorStyles,
			postMount,
			forwardEvents,
			progressClosed,
			sortStore,
			sortDirectionStore,
			handleHeaderMount,
			handleBodyMount,
			handleBodyCheckboxChange,
			handleHeaderRowClick,
			handleRowClick,
			$$slots,
			$$restProps,
			sort,
			sortDirection,
			sortable,
			sortAscendingAriaLabel,
			sortDescendingAriaLabel,
			layout,
			getElement,
			previousProgressClosed,
			$progressClosed,
			$$scope,
			slots,
			div0_binding,
			div1_binding,
			SMUICheckbox_mount_handler,
			SMUIDataTableHeader_unmount_handler,
			SMUIDataTableBody_unmount_handler,
			SMUIDataTableHeaderCheckbox_change_handler
		];
	}

	class DataTable extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(
				this,
				options,
				instance_1$4,
				create_fragment$c,
				safe_not_equal,
				{
					use: 0,
					class: 1,
					stickyHeader: 2,
					sortable: 28,
					sort: 26,
					sortDirection: 27,
					sortAscendingAriaLabel: 29,
					sortDescendingAriaLabel: 30,
					container$use: 3,
					container$class: 4,
					table$use: 5,
					table$class: 6,
					layout: 31,
					getElement: 32
				},
				null,
				[-1, -1]
			);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "DataTable",
				options,
				id: create_fragment$c.name
			});
		}

		get use() {
			throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get stickyHeader() {
			throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set stickyHeader(value) {
			throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get sortable() {
			throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set sortable(value) {
			throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get sort() {
			throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set sort(value) {
			throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get sortDirection() {
			throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set sortDirection(value) {
			throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get sortAscendingAriaLabel() {
			throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set sortAscendingAriaLabel(value) {
			throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get sortDescendingAriaLabel() {
			throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set sortDescendingAriaLabel(value) {
			throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get container$use() {
			throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set container$use(value) {
			throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get container$class() {
			throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set container$class(value) {
			throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get table$use() {
			throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set table$use(value) {
			throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get table$class() {
			throw new Error_1$2("<DataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set table$class(value) {
			throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get layout() {
			return this.$$.ctx[31];
		}

		set layout(value) {
			throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[32];
		}

		set getElement(value) {
			throw new Error_1$2("<DataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/data-table/dist/Head.svelte generated by Svelte v4.2.19 */
	const file$b = "node_modules/@smui/data-table/dist/Head.svelte";

	function create_fragment$b(ctx) {
		let thead;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[10].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
		let thead_levels = [/*$$restProps*/ ctx[7]];
		let thead_data = {};

		for (let i = 0; i < thead_levels.length; i += 1) {
			thead_data = assign(thead_data, thead_levels[i]);
		}

		const block = {
			c: function create() {
				thead = element("thead");
				if (default_slot) default_slot.c();
				set_attributes(thead, thead_data);
				add_location(thead, file$b, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, thead, anchor);

				if (default_slot) {
					default_slot.m(thead, null);
				}

				/*thead_binding*/ ctx[11](thead);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, thead, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[3].call(null, thead)),
						listen_dev(thead, "SMUICheckbox:mount", /*handleCheckboxMount*/ ctx[4], false, false, false, false),
						listen_dev(thead, "SMUICheckbox:unmount", /*SMUICheckbox_unmount_handler*/ ctx[12], false, false, false, false),
						listen_dev(thead, "SMUIDataTableCell:mount", /*handleCellMount*/ ctx[5], false, false, false, false),
						listen_dev(thead, "SMUIDataTableCell:unmount", /*handleCellUnmount*/ ctx[6], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[9],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
							null
						);
					}
				}

				set_attributes(thead, thead_data = get_spread_update(thead_levels, [dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]]));
				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(thead);
				}

				if (default_slot) default_slot.d(detaching);
				/*thead_binding*/ ctx[11](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$b.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$7($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Head', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let element;
		let checkbox = undefined;
		let cells = [];
		const cellAccessorMap = new WeakMap();
		setContext('SMUI:data-table:row:header', true);

		onMount(() => {
			const accessor = {
				get cells() {
					return cells;
				},
				get orderedCells() {
					return getOrderedCells();
				},
				get checkbox() {
					return checkbox;
				}
			};

			dispatch(getElement(), 'SMUIDataTableHeader:mount', accessor);

			return () => {
				dispatch(getElement(), 'SMUIDataTableHeader:unmount', accessor);
			};
		});

		function handleCheckboxMount(event) {
			$$invalidate(2, checkbox = event.detail);
		}

		function handleCellMount(event) {
			cells.push(event.detail);
			cellAccessorMap.set(event.detail.element, event.detail);
			event.stopPropagation();
		}

		function handleCellUnmount(event) {
			const idx = cells.indexOf(event.detail);

			if (idx !== -1) {
				cells.splice(idx, 1);
				cells = cells;
			}

			cellAccessorMap.delete(event.detail.element);
			event.stopPropagation();
		}

		function getOrderedCells() {
			return [...getElement().querySelectorAll('.mdc-data-table__header-cell')].map(element => cellAccessorMap.get(element)).filter(accessor => accessor && accessor._smui_data_table_header_cell_accessor);
		}

		function getElement() {
			return element;
		}

		function thead_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(1, element);
			});
		}

		const SMUICheckbox_unmount_handler = () => $$invalidate(2, checkbox = undefined);

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			onMount,
			setContext,
			get_current_component,
			forwardEventsBuilder,
			useActions,
			dispatch,
			forwardEvents,
			use,
			element,
			checkbox,
			cells,
			cellAccessorMap,
			handleCheckboxMount,
			handleCellMount,
			handleCellUnmount,
			getOrderedCells,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
			if ('checkbox' in $$props) $$invalidate(2, checkbox = $$new_props.checkbox);
			if ('cells' in $$props) cells = $$new_props.cells;
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			element,
			checkbox,
			forwardEvents,
			handleCheckboxMount,
			handleCellMount,
			handleCellUnmount,
			$$restProps,
			getElement,
			$$scope,
			slots,
			thead_binding,
			SMUICheckbox_unmount_handler
		];
	}

	class Head extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$7, create_fragment$b, safe_not_equal, { use: 0, getElement: 8 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Head",
				options,
				id: create_fragment$b.name
			});
		}

		get use() {
			throw new Error("<Head>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Head>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[8];
		}

		set getElement(value) {
			throw new Error("<Head>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/data-table/dist/Body.svelte generated by Svelte v4.2.19 */

	const file$a = "node_modules/@smui/data-table/dist/Body.svelte";

	function create_fragment$a(ctx) {
		let tbody;
		let tbody_class_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[9].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

		let tbody_levels = [
			{
				class: tbody_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-data-table__content': true
				})
			},
			/*$$restProps*/ ctx[6]
		];

		let tbody_data = {};

		for (let i = 0; i < tbody_levels.length; i += 1) {
			tbody_data = assign(tbody_data, tbody_levels[i]);
		}

		const block = {
			c: function create() {
				tbody = element("tbody");
				if (default_slot) default_slot.c();
				set_attributes(tbody, tbody_data);
				add_location(tbody, file$a, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, tbody, anchor);

				if (default_slot) {
					default_slot.m(tbody, null);
				}

				/*tbody_binding*/ ctx[10](tbody);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, tbody, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[3].call(null, tbody)),
						listen_dev(tbody, "SMUIDataTableRow:mount", /*handleRowMount*/ ctx[4], false, false, false, false),
						listen_dev(tbody, "SMUIDataTableRow:unmount", /*handleRowUnmount*/ ctx[5], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[8],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
							null
						);
					}
				}

				set_attributes(tbody, tbody_data = get_spread_update(tbody_levels, [
					(!current || dirty & /*className*/ 2 && tbody_class_value !== (tbody_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-data-table__content': true
					}))) && { class: tbody_class_value },
					dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(tbody);
				}

				if (default_slot) default_slot.d(detaching);
				/*tbody_binding*/ ctx[10](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$a.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$6($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","class","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Body', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let element;
		let rows = [];
		const rowAccessorMap = new WeakMap();
		setContext('SMUI:data-table:row:header', false);

		onMount(() => {
			const accessor = {
				get rows() {
					return rows;
				},
				get orderedRows() {
					return getOrderedRows();
				}
			};

			dispatch(getElement(), 'SMUIDataTableBody:mount', accessor);

			return () => {
				dispatch(getElement(), 'SMUIDataTableBody:unmount', accessor);
			};
		});

		function handleRowMount(event) {
			rows.push(event.detail);
			rowAccessorMap.set(event.detail.element, event.detail);
			event.stopPropagation();
		}

		function handleRowUnmount(event) {
			const idx = rows.indexOf(event.detail);

			if (idx !== -1) {
				rows.splice(idx, 1);
				rows = rows;
			}

			rowAccessorMap.delete(event.detail.element);
			event.stopPropagation();
		}

		function getOrderedRows() {
			return [...getElement().querySelectorAll('.mdc-data-table__row')].map(element => rowAccessorMap.get(element)).filter(accessor => accessor && accessor._smui_data_table_row_accessor);
		}

		function getElement() {
			return element;
		}

		function tbody_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(2, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			onMount,
			setContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			dispatch,
			forwardEvents,
			use,
			className,
			element,
			rows,
			rowAccessorMap,
			handleRowMount,
			handleRowUnmount,
			getOrderedRows,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('element' in $$props) $$invalidate(2, element = $$new_props.element);
			if ('rows' in $$props) rows = $$new_props.rows;
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			element,
			forwardEvents,
			handleRowMount,
			handleRowUnmount,
			$$restProps,
			getElement,
			$$scope,
			slots,
			tbody_binding
		];
	}

	class Body extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$6, create_fragment$a, safe_not_equal, { use: 0, class: 1, getElement: 7 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Body",
				options,
				id: create_fragment$a.name
			});
		}

		get use() {
			throw new Error("<Body>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Body>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Body>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Body>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[7];
		}

		set getElement(value) {
			throw new Error("<Body>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/data-table/dist/Row.svelte generated by Svelte v4.2.19 */

	const file$9 = "node_modules/@smui/data-table/dist/Row.svelte";

	function create_fragment$9(ctx) {
		let tr;
		let tr_class_value;
		let tr_aria_selected_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[15].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);

		let tr_levels = [
			{
				class: tr_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-data-table__header-row': /*header*/ ctx[7],
					'mdc-data-table__row': !/*header*/ ctx[7],
					'mdc-data-table__row--selected': !/*header*/ ctx[7] && /*checkbox*/ ctx[3] && /*checkbox*/ ctx[3].checked,
					.../*internalClasses*/ ctx[4]
				})
			},
			{
				"aria-selected": tr_aria_selected_value = /*checkbox*/ ctx[3]
				? /*checkbox*/ ctx[3].checked ? 'true' : 'false'
				: undefined
			},
			/*internalAttrs*/ ctx[5],
			/*$$restProps*/ ctx[11]
		];

		let tr_data = {};

		for (let i = 0; i < tr_levels.length; i += 1) {
			tr_data = assign(tr_data, tr_levels[i]);
		}

		const block = {
			c: function create() {
				tr = element("tr");
				if (default_slot) default_slot.c();
				set_attributes(tr, tr_data);
				add_location(tr, file$9, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, tr, anchor);

				if (default_slot) {
					default_slot.m(tr, null);
				}

				/*tr_binding*/ ctx[16](tr);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, tr, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[6].call(null, tr)),
						listen_dev(tr, "click", /*click_handler*/ ctx[17], false, false, false, false),
						listen_dev(tr, "SMUICheckbox:mount", /*handleCheckboxMount*/ ctx[8], false, false, false, false),
						listen_dev(tr, "SMUICheckbox:unmount", /*SMUICheckbox_unmount_handler*/ ctx[18], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 16384)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[14],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, null),
							null
						);
					}
				}

				set_attributes(tr, tr_data = get_spread_update(tr_levels, [
					(!current || dirty & /*className, checkbox, internalClasses*/ 26 && tr_class_value !== (tr_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-data-table__header-row': /*header*/ ctx[7],
						'mdc-data-table__row': !/*header*/ ctx[7],
						'mdc-data-table__row--selected': !/*header*/ ctx[7] && /*checkbox*/ ctx[3] && /*checkbox*/ ctx[3].checked,
						.../*internalClasses*/ ctx[4]
					}))) && { class: tr_class_value },
					(!current || dirty & /*checkbox*/ 8 && tr_aria_selected_value !== (tr_aria_selected_value = /*checkbox*/ ctx[3]
					? /*checkbox*/ ctx[3].checked ? 'true' : 'false'
					: undefined)) && { "aria-selected": tr_aria_selected_value },
					dirty & /*internalAttrs*/ 32 && /*internalAttrs*/ ctx[5],
					dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(tr);
				}

				if (default_slot) default_slot.d(detaching);
				/*tr_binding*/ ctx[16](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$9.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}
	let counter$1 = 0;

	function instance$5($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","class","rowId","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Row', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { rowId = 'SMUI-data-table-row-' + counter$1++ } = $$props;
		let element;
		let checkbox = undefined;
		let internalClasses = {};
		let internalAttrs = {};
		let header = getContext('SMUI:data-table:row:header');

		onMount(() => {
			const accessor = header
			? {
					_smui_data_table_row_accessor: false,
					get element() {
						return getElement();
					},
					get checkbox() {
						return checkbox;
					},
					get rowId() {
						return undefined;
					},
					get selected() {
						var _a;

						return (_a = checkbox && checkbox.checked) !== null && _a !== void 0
						? _a
						: false;
					},
					addClass,
					removeClass,
					getAttr,
					addAttr
				}
			: {
					_smui_data_table_row_accessor: true,
					get element() {
						return getElement();
					},
					get checkbox() {
						return checkbox;
					},
					get rowId() {
						return rowId;
					},
					get selected() {
						var _a;

						return (_a = checkbox && checkbox.checked) !== null && _a !== void 0
						? _a
						: false;
					},
					addClass,
					removeClass,
					getAttr,
					addAttr
				};

			dispatch(getElement(), 'SMUIDataTableRow:mount', accessor);

			return () => {
				dispatch(getElement(), 'SMUIDataTableRow:unmount', accessor);
			};
		});

		function handleCheckboxMount(event) {
			$$invalidate(3, checkbox = event.detail);
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(4, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(4, internalClasses[className] = false, internalClasses);
			}
		}

		function getAttr(name) {
			var _a;

			return name in internalAttrs
			? (_a = internalAttrs[name]) !== null && _a !== void 0
				? _a
				: null
			: getElement().getAttribute(name);
		}

		function addAttr(name, value) {
			if (internalAttrs[name] !== value) {
				$$invalidate(5, internalAttrs[name] = value, internalAttrs);
			}
		}

		function notifyHeaderClick(event) {
			dispatch(getElement(), 'SMUIDataTableHeader:click', event);
		}

		function notifyRowClick(event) {
			dispatch(getElement(), 'SMUIDataTableRow:click', { rowId, target: event.target });
		}

		function getElement() {
			return element;
		}

		function tr_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(2, element);
			});
		}

		const click_handler = event => header
		? notifyHeaderClick(event)
		: notifyRowClick(event);

		const SMUICheckbox_unmount_handler = () => $$invalidate(3, checkbox = undefined);

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('rowId' in $$new_props) $$invalidate(12, rowId = $$new_props.rowId);
			if ('$$scope' in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			counter: counter$1,
			onMount,
			getContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			dispatch,
			forwardEvents,
			use,
			className,
			rowId,
			element,
			checkbox,
			internalClasses,
			internalAttrs,
			header,
			handleCheckboxMount,
			addClass,
			removeClass,
			getAttr,
			addAttr,
			notifyHeaderClick,
			notifyRowClick,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('rowId' in $$props) $$invalidate(12, rowId = $$new_props.rowId);
			if ('element' in $$props) $$invalidate(2, element = $$new_props.element);
			if ('checkbox' in $$props) $$invalidate(3, checkbox = $$new_props.checkbox);
			if ('internalClasses' in $$props) $$invalidate(4, internalClasses = $$new_props.internalClasses);
			if ('internalAttrs' in $$props) $$invalidate(5, internalAttrs = $$new_props.internalAttrs);
			if ('header' in $$props) $$invalidate(7, header = $$new_props.header);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			element,
			checkbox,
			internalClasses,
			internalAttrs,
			forwardEvents,
			header,
			handleCheckboxMount,
			notifyHeaderClick,
			notifyRowClick,
			$$restProps,
			rowId,
			getElement,
			$$scope,
			slots,
			tr_binding,
			click_handler,
			SMUICheckbox_unmount_handler
		];
	}

	class Row extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$5, create_fragment$9, safe_not_equal, {
				use: 0,
				class: 1,
				rowId: 12,
				getElement: 13
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Row",
				options,
				id: create_fragment$9.name
			});
		}

		get use() {
			throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get rowId() {
			throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set rowId(value) {
			throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[13];
		}

		set getElement(value) {
			throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/data-table/dist/Cell.svelte generated by Svelte v4.2.19 */

	const file$8 = "node_modules/@smui/data-table/dist/Cell.svelte";

	// (43:0) {:else}
	function create_else_block_1$2(ctx) {
		let td;
		let td_class_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[22].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

		let td_levels = [
			{
				class: td_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-data-table__cell': true,
					'mdc-data-table__cell--numeric': /*numeric*/ ctx[2],
					'mdc-data-table__cell--checkbox': /*checkbox*/ ctx[3],
					.../*internalClasses*/ ctx[7]
				})
			},
			/*internalAttrs*/ ctx[8],
			/*$$restProps*/ ctx[19]
		];

		let td_data = {};

		for (let i = 0; i < td_levels.length; i += 1) {
			td_data = assign(td_data, td_levels[i]);
		}

		const block = {
			c: function create() {
				td = element("td");
				if (default_slot) default_slot.c();
				set_attributes(td, td_data);
				add_location(td, file$8, 43, 2, 1231);
			},
			m: function mount(target, anchor) {
				insert_dev(target, td, anchor);

				if (default_slot) {
					default_slot.m(td, null);
				}

				/*td_binding*/ ctx[25](td);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, td, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[11].call(null, td)),
						listen_dev(td, "change", /*change_handler_1*/ ctx[26], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[21],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
							null
						);
					}
				}

				set_attributes(td, td_data = get_spread_update(td_levels, [
					(!current || dirty & /*className, numeric, checkbox, internalClasses*/ 142 && td_class_value !== (td_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-data-table__cell': true,
						'mdc-data-table__cell--numeric': /*numeric*/ ctx[2],
						'mdc-data-table__cell--checkbox': /*checkbox*/ ctx[3],
						.../*internalClasses*/ ctx[7]
					}))) && { class: td_class_value },
					dirty & /*internalAttrs*/ 256 && /*internalAttrs*/ ctx[8],
					dirty & /*$$restProps*/ 524288 && /*$$restProps*/ ctx[19]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(td);
				}

				if (default_slot) default_slot.d(detaching);
				/*td_binding*/ ctx[25](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block_1$2.name,
			type: "else",
			source: "(43:0) {:else}",
			ctx
		});

		return block;
	}

	// (1:0) {#if header}
	function create_if_block$5(ctx) {
		let th;
		let current_block_type_index;
		let if_block;
		let th_class_value;
		let th_aria_sort_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const if_block_creators = [create_if_block_1$3, create_else_block$3];
		const if_blocks = [];

		function select_block_type_1(ctx, dirty) {
			if (/*sortable*/ ctx[5]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type_1(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		let th_levels = [
			{
				class: th_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-data-table__header-cell': true,
					'mdc-data-table__header-cell--numeric': /*numeric*/ ctx[2],
					'mdc-data-table__header-cell--checkbox': /*checkbox*/ ctx[3],
					'mdc-data-table__header-cell--with-sort': /*sortable*/ ctx[5],
					'mdc-data-table__header-cell--sorted': /*sortable*/ ctx[5] && /*$sort*/ ctx[9] === /*columnId*/ ctx[4],
					.../*internalClasses*/ ctx[7]
				})
			},
			{ role: "columnheader" },
			{ scope: "col" },
			{ "data-column-id": /*columnId*/ ctx[4] },
			{
				"aria-sort": th_aria_sort_value = /*sortable*/ ctx[5]
				? /*$sort*/ ctx[9] === /*columnId*/ ctx[4]
					? /*$sortDirection*/ ctx[10]
					: 'none'
				: undefined
			},
			/*internalAttrs*/ ctx[8],
			/*$$restProps*/ ctx[19]
		];

		let th_data = {};

		for (let i = 0; i < th_levels.length; i += 1) {
			th_data = assign(th_data, th_levels[i]);
		}

		const block = {
			c: function create() {
				th = element("th");
				if_block.c();
				set_attributes(th, th_data);
				add_location(th, file$8, 1, 2, 15);
			},
			m: function mount(target, anchor) {
				insert_dev(target, th, anchor);
				if_blocks[current_block_type_index].m(th, null);
				/*th_binding*/ ctx[23](th);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, th, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[11].call(null, th)),
						listen_dev(th, "change", /*change_handler*/ ctx[24], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type_1(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(th, null);
				}

				set_attributes(th, th_data = get_spread_update(th_levels, [
					(!current || dirty & /*className, numeric, checkbox, sortable, $sort, columnId, internalClasses*/ 702 && th_class_value !== (th_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-data-table__header-cell': true,
						'mdc-data-table__header-cell--numeric': /*numeric*/ ctx[2],
						'mdc-data-table__header-cell--checkbox': /*checkbox*/ ctx[3],
						'mdc-data-table__header-cell--with-sort': /*sortable*/ ctx[5],
						'mdc-data-table__header-cell--sorted': /*sortable*/ ctx[5] && /*$sort*/ ctx[9] === /*columnId*/ ctx[4],
						.../*internalClasses*/ ctx[7]
					}))) && { class: th_class_value },
					{ role: "columnheader" },
					{ scope: "col" },
					(!current || dirty & /*columnId*/ 16) && { "data-column-id": /*columnId*/ ctx[4] },
					(!current || dirty & /*sortable, $sort, columnId, $sortDirection*/ 1584 && th_aria_sort_value !== (th_aria_sort_value = /*sortable*/ ctx[5]
					? /*$sort*/ ctx[9] === /*columnId*/ ctx[4]
						? /*$sortDirection*/ ctx[10]
						: 'none'
					: undefined)) && { "aria-sort": th_aria_sort_value },
					dirty & /*internalAttrs*/ 256 && /*internalAttrs*/ ctx[8],
					dirty & /*$$restProps*/ 524288 && /*$$restProps*/ ctx[19]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(th);
				}

				if_blocks[current_block_type_index].d();
				/*th_binding*/ ctx[23](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$5.name,
			type: "if",
			source: "(1:0) {#if header}",
			ctx
		});

		return block;
	}

	// (41:4) {:else}
	function create_else_block$3(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[22].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[21],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$3.name,
			type: "else",
			source: "(41:4) {:else}",
			ctx
		});

		return block;
	}

	// (26:5) {#if sortable}
	function create_if_block_1$3(ctx) {
		let div1;
		let t0;
		let div0;

		let t1_value = (/*$sort*/ ctx[9] === /*columnId*/ ctx[4]
		? /*$sortDirection*/ ctx[10] === 'ascending'
			? /*sortAscendingAriaLabel*/ ctx[15]
			: /*sortDescendingAriaLabel*/ ctx[16]
		: '') + "";

		let t1;
		let div0_id_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[22].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

		const block = {
			c: function create() {
				div1 = element("div");
				if (default_slot) default_slot.c();
				t0 = space();
				div0 = element("div");
				t1 = text$2(t1_value);
				attr_dev(div0, "class", "mdc-data-table__sort-status-label");
				attr_dev(div0, "aria-hidden", "true");
				attr_dev(div0, "id", div0_id_value = "" + (/*columnId*/ ctx[4] + "-status-label"));
				add_location(div0, file$8, 28, 8, 853);
				attr_dev(div1, "class", "mdc-data-table__header-cell-wrapper");
				add_location(div1, file$8, 26, 6, 778);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div1, anchor);

				if (default_slot) {
					default_slot.m(div1, null);
				}

				append_dev(div1, t0);
				append_dev(div1, div0);
				append_dev(div0, t1);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[21],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
							null
						);
					}
				}

				if ((!current || dirty & /*$sort, columnId, $sortDirection*/ 1552) && t1_value !== (t1_value = (/*$sort*/ ctx[9] === /*columnId*/ ctx[4]
				? /*$sortDirection*/ ctx[10] === 'ascending'
					? /*sortAscendingAriaLabel*/ ctx[15]
					: /*sortDescendingAriaLabel*/ ctx[16]
				: '') + "")) set_data_dev(t1, t1_value);

				if (!current || dirty & /*columnId*/ 16 && div0_id_value !== (div0_id_value = "" + (/*columnId*/ ctx[4] + "-status-label"))) {
					attr_dev(div0, "id", div0_id_value);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div1);
				}

				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$3.name,
			type: "if",
			source: "(26:5) {#if sortable}",
			ctx
		});

		return block;
	}

	function create_fragment$8(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$5, create_else_block_1$2];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*header*/ ctx[12]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				if_block.p(ctx, dirty);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$8.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}
	let counter = 0;

	function instance$4($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","class","numeric","checkbox","columnId","sortable","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $sort;
		let $sortDirection;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Cell', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let header = getContext('SMUI:data-table:row:header');
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { numeric = false } = $$props;
		let { checkbox = false } = $$props;

		let { columnId = header
		? 'SMUI-data-table-column-' + counter++
		: 'SMUI-data-table-unused' } = $$props;

		let { sortable = getContext('SMUI:data-table:sortable') } = $$props;
		let element;
		let internalClasses = {};
		let internalAttrs = {};
		let sort = getContext('SMUI:data-table:sort');
		validate_store(sort, 'sort');
		component_subscribe($$self, sort, value => $$invalidate(9, $sort = value));
		let sortDirection = getContext('SMUI:data-table:sortDirection');
		validate_store(sortDirection, 'sortDirection');
		component_subscribe($$self, sortDirection, value => $$invalidate(10, $sortDirection = value));
		let sortAscendingAriaLabel = getContext('SMUI:data-table:sortAscendingAriaLabel');
		let sortDescendingAriaLabel = getContext('SMUI:data-table:sortDescendingAriaLabel');

		if (sortable) {
			setContext('SMUI:label:context', 'data-table:sortable-header-cell');
			setContext('SMUI:icon-button:context', 'data-table:sortable-header-cell');
			setContext('SMUI:icon-button:aria-describedby', columnId + '-status-label');
		}

		onMount(() => {
			const accessor = header
			? {
					_smui_data_table_header_cell_accessor: true,
					get element() {
						return getElement();
					},
					get columnId() {
						return columnId;
					},
					addClass,
					removeClass,
					getAttr,
					addAttr
				}
			: {
					_smui_data_table_header_cell_accessor: false,
					get element() {
						return getElement();
					},
					get columnId() {
						return undefined;
					},
					addClass,
					removeClass,
					getAttr,
					addAttr
				};

			dispatch(getElement(), 'SMUIDataTableCell:mount', accessor);

			return () => {
				dispatch(getElement(), 'SMUIDataTableCell:unmount', accessor);
			};
		});

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(7, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(7, internalClasses[className] = false, internalClasses);
			}
		}

		function getAttr(name) {
			var _a;

			return name in internalAttrs
			? (_a = internalAttrs[name]) !== null && _a !== void 0
				? _a
				: null
			: getElement().getAttribute(name);
		}

		function addAttr(name, value) {
			if (internalAttrs[name] !== value) {
				$$invalidate(8, internalAttrs[name] = value, internalAttrs);
			}
		}

		function notifyHeaderChange(event) {
			dispatch(getElement(), 'SMUIDataTableHeaderCheckbox:change', event);
		}

		function notifyBodyChange(event) {
			dispatch(getElement(), 'SMUIDataTableBodyCheckbox:change', event);
		}

		function getElement() {
			return element;
		}

		function th_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(6, element);
			});
		}

		const change_handler = event => checkbox && notifyHeaderChange(event);

		function td_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(6, element);
			});
		}

		const change_handler_1 = event => checkbox && notifyBodyChange(event);

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(19, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('numeric' in $$new_props) $$invalidate(2, numeric = $$new_props.numeric);
			if ('checkbox' in $$new_props) $$invalidate(3, checkbox = $$new_props.checkbox);
			if ('columnId' in $$new_props) $$invalidate(4, columnId = $$new_props.columnId);
			if ('sortable' in $$new_props) $$invalidate(5, sortable = $$new_props.sortable);
			if ('$$scope' in $$new_props) $$invalidate(21, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			counter,
			onMount,
			getContext,
			setContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			dispatch,
			forwardEvents,
			header,
			use,
			className,
			numeric,
			checkbox,
			columnId,
			sortable,
			element,
			internalClasses,
			internalAttrs,
			sort,
			sortDirection,
			sortAscendingAriaLabel,
			sortDescendingAriaLabel,
			addClass,
			removeClass,
			getAttr,
			addAttr,
			notifyHeaderChange,
			notifyBodyChange,
			getElement,
			$sort,
			$sortDirection
		});

		$$self.$inject_state = $$new_props => {
			if ('header' in $$props) $$invalidate(12, header = $$new_props.header);
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('numeric' in $$props) $$invalidate(2, numeric = $$new_props.numeric);
			if ('checkbox' in $$props) $$invalidate(3, checkbox = $$new_props.checkbox);
			if ('columnId' in $$props) $$invalidate(4, columnId = $$new_props.columnId);
			if ('sortable' in $$props) $$invalidate(5, sortable = $$new_props.sortable);
			if ('element' in $$props) $$invalidate(6, element = $$new_props.element);
			if ('internalClasses' in $$props) $$invalidate(7, internalClasses = $$new_props.internalClasses);
			if ('internalAttrs' in $$props) $$invalidate(8, internalAttrs = $$new_props.internalAttrs);
			if ('sort' in $$props) $$invalidate(13, sort = $$new_props.sort);
			if ('sortDirection' in $$props) $$invalidate(14, sortDirection = $$new_props.sortDirection);
			if ('sortAscendingAriaLabel' in $$props) $$invalidate(15, sortAscendingAriaLabel = $$new_props.sortAscendingAriaLabel);
			if ('sortDescendingAriaLabel' in $$props) $$invalidate(16, sortDescendingAriaLabel = $$new_props.sortDescendingAriaLabel);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			numeric,
			checkbox,
			columnId,
			sortable,
			element,
			internalClasses,
			internalAttrs,
			$sort,
			$sortDirection,
			forwardEvents,
			header,
			sort,
			sortDirection,
			sortAscendingAriaLabel,
			sortDescendingAriaLabel,
			notifyHeaderChange,
			notifyBodyChange,
			$$restProps,
			getElement,
			$$scope,
			slots,
			th_binding,
			change_handler,
			td_binding,
			change_handler_1
		];
	}

	class Cell extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$4, create_fragment$8, safe_not_equal, {
				use: 0,
				class: 1,
				numeric: 2,
				checkbox: 3,
				columnId: 4,
				sortable: 5,
				getElement: 20
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Cell",
				options,
				id: create_fragment$8.name
			});
		}

		get use() {
			throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get numeric() {
			throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set numeric(value) {
			throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get checkbox() {
			throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set checkbox(value) {
			throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get columnId() {
			throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set columnId(value) {
			throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get sortable() {
			throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set sortable(value) {
			throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[20];
		}

		set getElement(value) {
			throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings = {
	    ARIA_CONTROLS: 'aria-controls',
	    ARIA_DESCRIBEDBY: 'aria-describedby',
	    INPUT_SELECTOR: '.mdc-text-field__input',
	    LABEL_SELECTOR: '.mdc-floating-label',
	    LEADING_ICON_SELECTOR: '.mdc-text-field__icon--leading',
	    LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
	    OUTLINE_SELECTOR: '.mdc-notched-outline',
	    PREFIX_SELECTOR: '.mdc-text-field__affix--prefix',
	    SUFFIX_SELECTOR: '.mdc-text-field__affix--suffix',
	    TRAILING_ICON_SELECTOR: '.mdc-text-field__icon--trailing'
	};
	var cssClasses = {
	    DISABLED: 'mdc-text-field--disabled',
	    FOCUSED: 'mdc-text-field--focused',
	    HELPER_LINE: 'mdc-text-field-helper-line',
	    INVALID: 'mdc-text-field--invalid',
	    LABEL_FLOATING: 'mdc-text-field--label-floating',
	    NO_LABEL: 'mdc-text-field--no-label',
	    OUTLINED: 'mdc-text-field--outlined',
	    ROOT: 'mdc-text-field',
	    TEXTAREA: 'mdc-text-field--textarea',
	    WITH_LEADING_ICON: 'mdc-text-field--with-leading-icon',
	    WITH_TRAILING_ICON: 'mdc-text-field--with-trailing-icon',
	    WITH_INTERNAL_COUNTER: 'mdc-text-field--with-internal-counter',
	};
	var numbers = {
	    LABEL_SCALE: 0.75,
	};
	/**
	 * Whitelist based off of
	 * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation
	 * under the "Validation-related attributes" section.
	 */
	var VALIDATION_ATTR_WHITELIST = [
	    'pattern',
	    'min',
	    'max',
	    'required',
	    'step',
	    'minlength',
	    'maxlength',
	];
	/**
	 * Label should always float for these types as they show some UI even if value
	 * is empty.
	 */
	var ALWAYS_FLOAT_TYPES = [
	    'color',
	    'date',
	    'datetime-local',
	    'month',
	    'range',
	    'time',
	    'week',
	];

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var POINTERDOWN_EVENTS = ['mousedown', 'touchstart'];
	var INTERACTION_EVENTS = ['click', 'keydown'];
	var MDCTextFieldFoundation = /** @class */ (function (_super) {
	    __extends(MDCTextFieldFoundation, _super);
	    /**
	     * @param adapter
	     * @param foundationMap Map from subcomponent names to their subfoundations.
	     */
	    function MDCTextFieldFoundation(adapter, foundationMap) {
	        if (foundationMap === void 0) { foundationMap = {}; }
	        var _this = _super.call(this, __assign(__assign({}, MDCTextFieldFoundation.defaultAdapter), adapter)) || this;
	        _this.isFocused = false;
	        _this.receivedUserInput = false;
	        _this.valid = true;
	        _this.useNativeValidation = true;
	        _this.validateOnValueChange = true;
	        _this.helperText = foundationMap.helperText;
	        _this.characterCounter = foundationMap.characterCounter;
	        _this.leadingIcon = foundationMap.leadingIcon;
	        _this.trailingIcon = foundationMap.trailingIcon;
	        _this.inputFocusHandler = function () {
	            _this.activateFocus();
	        };
	        _this.inputBlurHandler = function () {
	            _this.deactivateFocus();
	        };
	        _this.inputInputHandler = function () {
	            _this.handleInput();
	        };
	        _this.setPointerXOffset = function (evt) {
	            _this.setTransformOrigin(evt);
	        };
	        _this.textFieldInteractionHandler = function () {
	            _this.handleTextFieldInteraction();
	        };
	        _this.validationAttributeChangeHandler = function (attributesList) {
	            _this.handleValidationAttributeChange(attributesList);
	        };
	        return _this;
	    }
	    Object.defineProperty(MDCTextFieldFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldFoundation, "strings", {
	        get: function () {
	            return strings;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldFoundation, "numbers", {
	        get: function () {
	            return numbers;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldAlwaysFloat", {
	        get: function () {
	            var type = this.getNativeInput().type;
	            return ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldFloat", {
	        get: function () {
	            return this.shouldAlwaysFloat || this.isFocused || !!this.getValue() ||
	                this.isBadInput();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldShake", {
	        get: function () {
	            return !this.isFocused && !this.isValid() && !!this.getValue();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCTextFieldAdapter} for typing information on parameters and
	         * return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return true; },
	                setInputAttr: function () { return undefined; },
	                removeInputAttr: function () { return undefined; },
	                registerTextFieldInteractionHandler: function () { return undefined; },
	                deregisterTextFieldInteractionHandler: function () { return undefined; },
	                registerInputInteractionHandler: function () { return undefined; },
	                deregisterInputInteractionHandler: function () { return undefined; },
	                registerValidationAttributeChangeHandler: function () {
	                    return new MutationObserver(function () { return undefined; });
	                },
	                deregisterValidationAttributeChangeHandler: function () { return undefined; },
	                getNativeInput: function () { return null; },
	                isFocused: function () { return false; },
	                activateLineRipple: function () { return undefined; },
	                deactivateLineRipple: function () { return undefined; },
	                setLineRippleTransformOrigin: function () { return undefined; },
	                shakeLabel: function () { return undefined; },
	                floatLabel: function () { return undefined; },
	                setLabelRequired: function () { return undefined; },
	                hasLabel: function () { return false; },
	                getLabelWidth: function () { return 0; },
	                hasOutline: function () { return false; },
	                notchOutline: function () { return undefined; },
	                closeOutline: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTextFieldFoundation.prototype.init = function () {
	        var e_1, _a, e_2, _b;
	        if (this.adapter.hasLabel() && this.getNativeInput().required) {
	            this.adapter.setLabelRequired(true);
	        }
	        if (this.adapter.isFocused()) {
	            this.inputFocusHandler();
	        }
	        else if (this.adapter.hasLabel() && this.shouldFloat) {
	            this.notchOutline(true);
	            this.adapter.floatLabel(true);
	            this.styleFloating(true);
	        }
	        this.adapter.registerInputInteractionHandler('focus', this.inputFocusHandler);
	        this.adapter.registerInputInteractionHandler('blur', this.inputBlurHandler);
	        this.adapter.registerInputInteractionHandler('input', this.inputInputHandler);
	        try {
	            for (var POINTERDOWN_EVENTS_1 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next(); !POINTERDOWN_EVENTS_1_1.done; POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next()) {
	                var evtType = POINTERDOWN_EVENTS_1_1.value;
	                this.adapter.registerInputInteractionHandler(evtType, this.setPointerXOffset);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (POINTERDOWN_EVENTS_1_1 && !POINTERDOWN_EVENTS_1_1.done && (_a = POINTERDOWN_EVENTS_1.return)) _a.call(POINTERDOWN_EVENTS_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        try {
	            for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
	                var evtType = INTERACTION_EVENTS_1_1.value;
	                this.adapter.registerTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_b = INTERACTION_EVENTS_1.return)) _b.call(INTERACTION_EVENTS_1);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	        this.validationObserver =
	            this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler);
	        this.setcharacterCounter(this.getValue().length);
	    };
	    MDCTextFieldFoundation.prototype.destroy = function () {
	        var e_3, _a, e_4, _b;
	        this.adapter.deregisterInputInteractionHandler('focus', this.inputFocusHandler);
	        this.adapter.deregisterInputInteractionHandler('blur', this.inputBlurHandler);
	        this.adapter.deregisterInputInteractionHandler('input', this.inputInputHandler);
	        try {
	            for (var POINTERDOWN_EVENTS_2 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next(); !POINTERDOWN_EVENTS_2_1.done; POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next()) {
	                var evtType = POINTERDOWN_EVENTS_2_1.value;
	                this.adapter.deregisterInputInteractionHandler(evtType, this.setPointerXOffset);
	            }
	        }
	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
	        finally {
	            try {
	                if (POINTERDOWN_EVENTS_2_1 && !POINTERDOWN_EVENTS_2_1.done && (_a = POINTERDOWN_EVENTS_2.return)) _a.call(POINTERDOWN_EVENTS_2);
	            }
	            finally { if (e_3) throw e_3.error; }
	        }
	        try {
	            for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
	                var evtType = INTERACTION_EVENTS_2_1.value;
	                this.adapter.deregisterTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
	            }
	        }
	        catch (e_4_1) { e_4 = { error: e_4_1 }; }
	        finally {
	            try {
	                if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_b = INTERACTION_EVENTS_2.return)) _b.call(INTERACTION_EVENTS_2);
	            }
	            finally { if (e_4) throw e_4.error; }
	        }
	        this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver);
	    };
	    /**
	     * Handles user interactions with the Text Field.
	     */
	    MDCTextFieldFoundation.prototype.handleTextFieldInteraction = function () {
	        var nativeInput = this.adapter.getNativeInput();
	        if (nativeInput && nativeInput.disabled) {
	            return;
	        }
	        this.receivedUserInput = true;
	    };
	    /**
	     * Handles validation attribute changes
	     */
	    MDCTextFieldFoundation.prototype.handleValidationAttributeChange = function (attributesList) {
	        var _this = this;
	        attributesList.some(function (attributeName) {
	            if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {
	                _this.styleValidity(true);
	                _this.adapter.setLabelRequired(_this.getNativeInput().required);
	                return true;
	            }
	            return false;
	        });
	        if (attributesList.indexOf('maxlength') > -1) {
	            this.setcharacterCounter(this.getValue().length);
	        }
	    };
	    /**
	     * Opens/closes the notched outline.
	     */
	    MDCTextFieldFoundation.prototype.notchOutline = function (openNotch) {
	        if (!this.adapter.hasOutline() || !this.adapter.hasLabel()) {
	            return;
	        }
	        if (openNotch) {
	            var labelWidth = this.adapter.getLabelWidth() * numbers.LABEL_SCALE;
	            this.adapter.notchOutline(labelWidth);
	        }
	        else {
	            this.adapter.closeOutline();
	        }
	    };
	    /**
	     * Activates the text field focus state.
	     */
	    MDCTextFieldFoundation.prototype.activateFocus = function () {
	        this.isFocused = true;
	        this.styleFocused(this.isFocused);
	        this.adapter.activateLineRipple();
	        if (this.adapter.hasLabel()) {
	            this.notchOutline(this.shouldFloat);
	            this.adapter.floatLabel(this.shouldFloat);
	            this.styleFloating(this.shouldFloat);
	            this.adapter.shakeLabel(this.shouldShake);
	        }
	        if (this.helperText &&
	            (this.helperText.isPersistent() || !this.helperText.isValidation() ||
	                !this.valid)) {
	            this.helperText.showToScreenReader();
	        }
	    };
	    /**
	     * Sets the line ripple's transform origin, so that the line ripple activate
	     * animation will animate out from the user's click location.
	     */
	    MDCTextFieldFoundation.prototype.setTransformOrigin = function (evt) {
	        if (this.isDisabled() || this.adapter.hasOutline()) {
	            return;
	        }
	        var touches = evt.touches;
	        var targetEvent = touches ? touches[0] : evt;
	        var targetClientRect = targetEvent.target.getBoundingClientRect();
	        var normalizedX = targetEvent.clientX - targetClientRect.left;
	        this.adapter.setLineRippleTransformOrigin(normalizedX);
	    };
	    /**
	     * Handles input change of text input and text area.
	     */
	    MDCTextFieldFoundation.prototype.handleInput = function () {
	        this.autoCompleteFocus();
	        this.setcharacterCounter(this.getValue().length);
	    };
	    /**
	     * Activates the Text Field's focus state in cases when the input value
	     * changes without user input (e.g. programmatically).
	     */
	    MDCTextFieldFoundation.prototype.autoCompleteFocus = function () {
	        if (!this.receivedUserInput) {
	            this.activateFocus();
	        }
	    };
	    /**
	     * Deactivates the Text Field's focus state.
	     */
	    MDCTextFieldFoundation.prototype.deactivateFocus = function () {
	        this.isFocused = false;
	        this.adapter.deactivateLineRipple();
	        var isValid = this.isValid();
	        this.styleValidity(isValid);
	        this.styleFocused(this.isFocused);
	        if (this.adapter.hasLabel()) {
	            this.notchOutline(this.shouldFloat);
	            this.adapter.floatLabel(this.shouldFloat);
	            this.styleFloating(this.shouldFloat);
	            this.adapter.shakeLabel(this.shouldShake);
	        }
	        if (!this.shouldFloat) {
	            this.receivedUserInput = false;
	        }
	    };
	    MDCTextFieldFoundation.prototype.getValue = function () {
	        return this.getNativeInput().value;
	    };
	    /**
	     * @param value The value to set on the input Element.
	     */
	    MDCTextFieldFoundation.prototype.setValue = function (value) {
	        // Prevent Safari from moving the caret to the end of the input when the
	        // value has not changed.
	        if (this.getValue() !== value) {
	            this.getNativeInput().value = value;
	        }
	        this.setcharacterCounter(value.length);
	        if (this.validateOnValueChange) {
	            var isValid = this.isValid();
	            this.styleValidity(isValid);
	        }
	        if (this.adapter.hasLabel()) {
	            this.notchOutline(this.shouldFloat);
	            this.adapter.floatLabel(this.shouldFloat);
	            this.styleFloating(this.shouldFloat);
	            if (this.validateOnValueChange) {
	                this.adapter.shakeLabel(this.shouldShake);
	            }
	        }
	    };
	    /**
	     * @return The custom validity state, if set; otherwise, the result of a
	     *     native validity check.
	     */
	    MDCTextFieldFoundation.prototype.isValid = function () {
	        return this.useNativeValidation ? this.isNativeInputValid() : this.valid;
	    };
	    /**
	     * @param isValid Sets the custom validity state of the Text Field.
	     */
	    MDCTextFieldFoundation.prototype.setValid = function (isValid) {
	        this.valid = isValid;
	        this.styleValidity(isValid);
	        var shouldShake = !isValid && !this.isFocused && !!this.getValue();
	        if (this.adapter.hasLabel()) {
	            this.adapter.shakeLabel(shouldShake);
	        }
	    };
	    /**
	     * @param shouldValidate Whether or not validity should be updated on
	     *     value change.
	     */
	    MDCTextFieldFoundation.prototype.setValidateOnValueChange = function (shouldValidate) {
	        this.validateOnValueChange = shouldValidate;
	    };
	    /**
	     * @return Whether or not validity should be updated on value change. `true`
	     *     by default.
	     */
	    MDCTextFieldFoundation.prototype.getValidateOnValueChange = function () {
	        return this.validateOnValueChange;
	    };
	    /**
	     * Enables or disables the use of native validation. Use this for custom
	     * validation.
	     * @param useNativeValidation Set this to false to ignore native input
	     *     validation.
	     */
	    MDCTextFieldFoundation.prototype.setUseNativeValidation = function (useNativeValidation) {
	        this.useNativeValidation = useNativeValidation;
	    };
	    MDCTextFieldFoundation.prototype.isDisabled = function () {
	        return this.getNativeInput().disabled;
	    };
	    /**
	     * @param disabled Sets the text-field disabled or enabled.
	     */
	    MDCTextFieldFoundation.prototype.setDisabled = function (disabled) {
	        this.getNativeInput().disabled = disabled;
	        this.styleDisabled(disabled);
	    };
	    /**
	     * @param content Sets the content of the helper text.
	     */
	    MDCTextFieldFoundation.prototype.setHelperTextContent = function (content) {
	        if (this.helperText) {
	            this.helperText.setContent(content);
	        }
	    };
	    /**
	     * Sets the aria label of the leading icon.
	     */
	    MDCTextFieldFoundation.prototype.setLeadingIconAriaLabel = function (label) {
	        if (this.leadingIcon) {
	            this.leadingIcon.setAriaLabel(label);
	        }
	    };
	    /**
	     * Sets the text content of the leading icon.
	     */
	    MDCTextFieldFoundation.prototype.setLeadingIconContent = function (content) {
	        if (this.leadingIcon) {
	            this.leadingIcon.setContent(content);
	        }
	    };
	    /**
	     * Sets the aria label of the trailing icon.
	     */
	    MDCTextFieldFoundation.prototype.setTrailingIconAriaLabel = function (label) {
	        if (this.trailingIcon) {
	            this.trailingIcon.setAriaLabel(label);
	        }
	    };
	    /**
	     * Sets the text content of the trailing icon.
	     */
	    MDCTextFieldFoundation.prototype.setTrailingIconContent = function (content) {
	        if (this.trailingIcon) {
	            this.trailingIcon.setContent(content);
	        }
	    };
	    /**
	     * Sets character counter values that shows characters used and the total
	     * character limit.
	     */
	    MDCTextFieldFoundation.prototype.setcharacterCounter = function (currentLength) {
	        if (!this.characterCounter) {
	            return;
	        }
	        var maxLength = this.getNativeInput().maxLength;
	        if (maxLength === -1) {
	            throw new Error('MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.');
	        }
	        this.characterCounter.setCounterValue(currentLength, maxLength);
	    };
	    /**
	     * @return True if the Text Field input fails in converting the user-supplied
	     *     value.
	     */
	    MDCTextFieldFoundation.prototype.isBadInput = function () {
	        // The badInput property is not supported in IE 11 💩.
	        return this.getNativeInput().validity.badInput || false;
	    };
	    /**
	     * @return The result of native validity checking (ValidityState.valid).
	     */
	    MDCTextFieldFoundation.prototype.isNativeInputValid = function () {
	        return this.getNativeInput().validity.valid;
	    };
	    /**
	     * Styles the component based on the validity state.
	     */
	    MDCTextFieldFoundation.prototype.styleValidity = function (isValid) {
	        var INVALID = MDCTextFieldFoundation.cssClasses.INVALID;
	        if (isValid) {
	            this.adapter.removeClass(INVALID);
	        }
	        else {
	            this.adapter.addClass(INVALID);
	        }
	        if (this.helperText) {
	            this.helperText.setValidity(isValid);
	            // We dynamically set or unset aria-describedby for validation helper text
	            // only, based on whether the field is valid
	            var helperTextValidation = this.helperText.isValidation();
	            if (!helperTextValidation) {
	                return;
	            }
	            var helperTextVisible = this.helperText.isVisible();
	            var helperTextId = this.helperText.getId();
	            if (helperTextVisible && helperTextId) {
	                this.adapter.setInputAttr(strings.ARIA_DESCRIBEDBY, helperTextId);
	            }
	            else {
	                this.adapter.removeInputAttr(strings.ARIA_DESCRIBEDBY);
	            }
	        }
	    };
	    /**
	     * Styles the component based on the focused state.
	     */
	    MDCTextFieldFoundation.prototype.styleFocused = function (isFocused) {
	        var FOCUSED = MDCTextFieldFoundation.cssClasses.FOCUSED;
	        if (isFocused) {
	            this.adapter.addClass(FOCUSED);
	        }
	        else {
	            this.adapter.removeClass(FOCUSED);
	        }
	    };
	    /**
	     * Styles the component based on the disabled state.
	     */
	    MDCTextFieldFoundation.prototype.styleDisabled = function (isDisabled) {
	        var _a = MDCTextFieldFoundation.cssClasses, DISABLED = _a.DISABLED, INVALID = _a.INVALID;
	        if (isDisabled) {
	            this.adapter.addClass(DISABLED);
	            this.adapter.removeClass(INVALID);
	        }
	        else {
	            this.adapter.removeClass(DISABLED);
	        }
	        if (this.leadingIcon) {
	            this.leadingIcon.setDisabled(isDisabled);
	        }
	        if (this.trailingIcon) {
	            this.trailingIcon.setDisabled(isDisabled);
	        }
	    };
	    /**
	     * Styles the component based on the label floating state.
	     */
	    MDCTextFieldFoundation.prototype.styleFloating = function (isFloating) {
	        var LABEL_FLOATING = MDCTextFieldFoundation.cssClasses.LABEL_FLOATING;
	        if (isFloating) {
	            this.adapter.addClass(LABEL_FLOATING);
	        }
	        else {
	            this.adapter.removeClass(LABEL_FLOATING);
	        }
	    };
	    /**
	     * @return The native text input element from the host environment, or an
	     *     object with the same shape for unit tests.
	     */
	    MDCTextFieldFoundation.prototype.getNativeInput = function () {
	        // this.adapter may be undefined in foundation unit tests. This happens when
	        // testdouble is creating a mock object and invokes the
	        // shouldShake/shouldFloat getters (which in turn call getValue(), which
	        // calls this method) before init() has been called from the MDCTextField
	        // constructor. To work around that issue, we return a dummy object.
	        var nativeInput = this.adapter ? this.adapter.getNativeInput() : null;
	        return nativeInput || {
	            disabled: false,
	            maxLength: -1,
	            required: false,
	            type: 'input',
	            validity: {
	                badInput: false,
	                valid: true,
	            },
	            value: '',
	        };
	    };
	    return MDCTextFieldFoundation;
	}(MDCFoundation));

	/* node_modules/@smui/textfield/node_modules/@smui/floating-label/dist/FloatingLabel.svelte generated by Svelte v4.2.19 */

	const file$7 = "node_modules/@smui/textfield/node_modules/@smui/floating-label/dist/FloatingLabel.svelte";

	// (19:0) {:else}
	function create_else_block$2(ctx) {
		let label;
		let label_class_value;
		let label_style_value;
		let label_for_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[22].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

		let label_levels = [
			{
				class: label_class_value = classMap({
					[/*className*/ ctx[3]]: true,
					'mdc-floating-label': true,
					'mdc-floating-label--float-above': /*floatAbove*/ ctx[0],
					'mdc-floating-label--required': /*required*/ ctx[1],
					.../*internalClasses*/ ctx[8]
				})
			},
			{
				style: label_style_value = Object.entries(/*internalStyles*/ ctx[9]).map(func_1$1).concat([/*style*/ ctx[4]]).join(' ')
			},
			{
				for: label_for_value = /*forId*/ ctx[5] || (/*inputProps*/ ctx[11]
				? /*inputProps*/ ctx[11].id
				: undefined)
			},
			/*$$restProps*/ ctx[12]
		];

		let label_data = {};

		for (let i = 0; i < label_levels.length; i += 1) {
			label_data = assign(label_data, label_levels[i]);
		}

		const block = {
			c: function create() {
				label = element("label");
				if (default_slot) default_slot.c();
				set_attributes(label, label_data);
				add_location(label, file$7, 19, 2, 494);
			},
			m: function mount(target, anchor) {
				insert_dev(target, label, anchor);

				if (default_slot) {
					default_slot.m(label, null);
				}

				/*label_binding*/ ctx[24](label);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, label, /*use*/ ctx[2])),
						action_destroyer(/*forwardEvents*/ ctx[10].call(null, label))
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[21],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
							null
						);
					}
				}

				set_attributes(label, label_data = get_spread_update(label_levels, [
					(!current || dirty & /*className, floatAbove, required, internalClasses*/ 267 && label_class_value !== (label_class_value = classMap({
						[/*className*/ ctx[3]]: true,
						'mdc-floating-label': true,
						'mdc-floating-label--float-above': /*floatAbove*/ ctx[0],
						'mdc-floating-label--required': /*required*/ ctx[1],
						.../*internalClasses*/ ctx[8]
					}))) && { class: label_class_value },
					(!current || dirty & /*internalStyles, style*/ 528 && label_style_value !== (label_style_value = Object.entries(/*internalStyles*/ ctx[9]).map(func_1$1).concat([/*style*/ ctx[4]]).join(' '))) && { style: label_style_value },
					(!current || dirty & /*forId*/ 32 && label_for_value !== (label_for_value = /*forId*/ ctx[5] || (/*inputProps*/ ctx[11]
					? /*inputProps*/ ctx[11].id
					: undefined))) && { for: label_for_value },
					dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 4) useActions_action.update.call(null, /*use*/ ctx[2]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(label);
				}

				if (default_slot) default_slot.d(detaching);
				/*label_binding*/ ctx[24](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$2.name,
			type: "else",
			source: "(19:0) {:else}",
			ctx
		});

		return block;
	}

	// (1:0) {#if wrapped}
	function create_if_block$4(ctx) {
		let span;
		let span_class_value;
		let span_style_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[22].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

		let span_levels = [
			{
				class: span_class_value = classMap({
					[/*className*/ ctx[3]]: true,
					'mdc-floating-label': true,
					'mdc-floating-label--float-above': /*floatAbove*/ ctx[0],
					'mdc-floating-label--required': /*required*/ ctx[1],
					.../*internalClasses*/ ctx[8]
				})
			},
			{
				style: span_style_value = Object.entries(/*internalStyles*/ ctx[9]).map(func$4).concat([/*style*/ ctx[4]]).join(' ')
			},
			/*$$restProps*/ ctx[12]
		];

		let span_data = {};

		for (let i = 0; i < span_levels.length; i += 1) {
			span_data = assign(span_data, span_levels[i]);
		}

		const block = {
			c: function create() {
				span = element("span");
				if (default_slot) default_slot.c();
				set_attributes(span, span_data);
				add_location(span, file$7, 1, 2, 16);
			},
			m: function mount(target, anchor) {
				insert_dev(target, span, anchor);

				if (default_slot) {
					default_slot.m(span, null);
				}

				/*span_binding*/ ctx[23](span);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, span, /*use*/ ctx[2])),
						action_destroyer(/*forwardEvents*/ ctx[10].call(null, span))
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[21],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
							null
						);
					}
				}

				set_attributes(span, span_data = get_spread_update(span_levels, [
					(!current || dirty & /*className, floatAbove, required, internalClasses*/ 267 && span_class_value !== (span_class_value = classMap({
						[/*className*/ ctx[3]]: true,
						'mdc-floating-label': true,
						'mdc-floating-label--float-above': /*floatAbove*/ ctx[0],
						'mdc-floating-label--required': /*required*/ ctx[1],
						.../*internalClasses*/ ctx[8]
					}))) && { class: span_class_value },
					(!current || dirty & /*internalStyles, style*/ 528 && span_style_value !== (span_style_value = Object.entries(/*internalStyles*/ ctx[9]).map(func$4).concat([/*style*/ ctx[4]]).join(' '))) && { style: span_style_value },
					dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 4) useActions_action.update.call(null, /*use*/ ctx[2]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(span);
				}

				if (default_slot) default_slot.d(detaching);
				/*span_binding*/ ctx[23](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$4.name,
			type: "if",
			source: "(1:0) {#if wrapped}",
			ctx
		});

		return block;
	}

	function create_fragment$7(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$4, create_else_block$2];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*wrapped*/ ctx[6]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$7.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$4 = ([name, value]) => `${name}: ${value};`;
	const func_1$1 = ([name, value]) => `${name}: ${value};`;

	function instance_1$3($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","style","for","floatAbove","required","wrapped","shake","float","setRequired","getWidth","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('FloatingLabel', slots, ['default']);
		var _a;
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { for: forId = undefined } = $$props;
		let { floatAbove = false } = $$props;
		let { required = false } = $$props;
		let { wrapped = false } = $$props;
		let element;
		let instance;
		let internalClasses = {};
		let internalStyles = {};

		let inputProps = (_a = getContext('SMUI:generic:input:props')) !== null && _a !== void 0
		? _a
		: {};

		let previousFloatAbove = floatAbove;
		let previousRequired = required;

		onMount(() => {
			$$invalidate(18, instance = new MDCFloatingLabelFoundation({
					addClass,
					removeClass,
					getWidth: () => {
						var _a, _b;
						const el = getElement();
						const clone = el.cloneNode(true);

						(_a = el.parentNode) === null || _a === void 0
						? void 0
						: _a.appendChild(clone);

						clone.classList.add('smui-floating-label--remove-transition');
						clone.classList.add('smui-floating-label--force-size');
						clone.classList.remove('mdc-floating-label--float-above');
						const scrollWidth = clone.scrollWidth;

						(_b = el.parentNode) === null || _b === void 0
						? void 0
						: _b.removeChild(clone);

						return scrollWidth;
					},
					registerInteractionHandler: (evtType, handler) => getElement().addEventListener(evtType, handler),
					deregisterInteractionHandler: (evtType, handler) => getElement().removeEventListener(evtType, handler)
				}));

			const accessor = {
				get element() {
					return getElement();
				},
				addStyle,
				removeStyle
			};

			dispatch(element, 'SMUIFloatingLabel:mount', accessor);
			instance.init();

			return () => {
				dispatch(element, 'SMUIFloatingLabel:unmount', accessor);
				instance.destroy();
			};
		});

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(8, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(8, internalClasses[className] = false, internalClasses);
			}
		}

		function addStyle(name, value) {
			if (internalStyles[name] != value) {
				if (value === '' || value == null) {
					delete internalStyles[name];
					$$invalidate(9, internalStyles);
				} else {
					$$invalidate(9, internalStyles[name] = value, internalStyles);
				}
			}
		}

		function removeStyle(name) {
			if (name in internalStyles) {
				delete internalStyles[name];
				$$invalidate(9, internalStyles);
			}
		}

		function shake(shouldShake) {
			instance.shake(shouldShake);
		}

		function float(shouldFloat) {
			$$invalidate(0, floatAbove = shouldFloat);
		}

		function setRequired(isRequired) {
			$$invalidate(1, required = isRequired);
		}

		function getWidth() {
			return instance.getWidth();
		}

		function getElement() {
			return element;
		}

		function span_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(7, element);
			});
		}

		function label_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(7, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(2, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(4, style = $$new_props.style);
			if ('for' in $$new_props) $$invalidate(5, forId = $$new_props.for);
			if ('floatAbove' in $$new_props) $$invalidate(0, floatAbove = $$new_props.floatAbove);
			if ('required' in $$new_props) $$invalidate(1, required = $$new_props.required);
			if ('wrapped' in $$new_props) $$invalidate(6, wrapped = $$new_props.wrapped);
			if ('$$scope' in $$new_props) $$invalidate(21, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			_a,
			MDCFloatingLabelFoundation,
			onMount,
			getContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			dispatch,
			forwardEvents,
			use,
			className,
			style,
			forId,
			floatAbove,
			required,
			wrapped,
			element,
			instance,
			internalClasses,
			internalStyles,
			inputProps,
			previousFloatAbove,
			previousRequired,
			addClass,
			removeClass,
			addStyle,
			removeStyle,
			shake,
			float,
			setRequired,
			getWidth,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('_a' in $$props) _a = $$new_props._a;
			if ('use' in $$props) $$invalidate(2, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(4, style = $$new_props.style);
			if ('forId' in $$props) $$invalidate(5, forId = $$new_props.forId);
			if ('floatAbove' in $$props) $$invalidate(0, floatAbove = $$new_props.floatAbove);
			if ('required' in $$props) $$invalidate(1, required = $$new_props.required);
			if ('wrapped' in $$props) $$invalidate(6, wrapped = $$new_props.wrapped);
			if ('element' in $$props) $$invalidate(7, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(18, instance = $$new_props.instance);
			if ('internalClasses' in $$props) $$invalidate(8, internalClasses = $$new_props.internalClasses);
			if ('internalStyles' in $$props) $$invalidate(9, internalStyles = $$new_props.internalStyles);
			if ('inputProps' in $$props) $$invalidate(11, inputProps = $$new_props.inputProps);
			if ('previousFloatAbove' in $$props) $$invalidate(19, previousFloatAbove = $$new_props.previousFloatAbove);
			if ('previousRequired' in $$props) $$invalidate(20, previousRequired = $$new_props.previousRequired);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*instance, previousFloatAbove, floatAbove*/ 786433) {
				if (instance && previousFloatAbove !== floatAbove) {
					$$invalidate(19, previousFloatAbove = floatAbove);
					instance.float(floatAbove);
				}
			}

			if ($$self.$$.dirty & /*instance, previousRequired, required*/ 1310722) {
				if (instance && previousRequired !== required) {
					$$invalidate(20, previousRequired = required);
					instance.setRequired(required);
				}
			}
		};

		return [
			floatAbove,
			required,
			use,
			className,
			style,
			forId,
			wrapped,
			element,
			internalClasses,
			internalStyles,
			forwardEvents,
			inputProps,
			$$restProps,
			shake,
			float,
			setRequired,
			getWidth,
			getElement,
			instance,
			previousFloatAbove,
			previousRequired,
			$$scope,
			slots,
			span_binding,
			label_binding
		];
	}

	class FloatingLabel extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance_1$3, create_fragment$7, safe_not_equal, {
				use: 2,
				class: 3,
				style: 4,
				for: 5,
				floatAbove: 0,
				required: 1,
				wrapped: 6,
				shake: 13,
				float: 14,
				setRequired: 15,
				getWidth: 16,
				getElement: 17
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "FloatingLabel",
				options,
				id: create_fragment$7.name
			});
		}

		get use() {
			throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get for() {
			throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set for(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get floatAbove() {
			throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set floatAbove(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get required() {
			throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set required(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get wrapped() {
			throw new Error("<FloatingLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set wrapped(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get shake() {
			return this.$$.ctx[13];
		}

		set shake(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get float() {
			return this.$$.ctx[14];
		}

		set float(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get setRequired() {
			return this.$$.ctx[15];
		}

		set setRequired(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getWidth() {
			return this.$$.ctx[16];
		}

		set getWidth(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[17];
		}

		set getElement(value) {
			throw new Error("<FloatingLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/textfield/node_modules/@smui/line-ripple/dist/LineRipple.svelte generated by Svelte v4.2.19 */
	const file$6 = "node_modules/@smui/textfield/node_modules/@smui/line-ripple/dist/LineRipple.svelte";

	function create_fragment$6(ctx) {
		let div;
		let div_class_value;
		let div_style_value;
		let useActions_action;
		let mounted;
		let dispose;

		let div_levels = [
			{
				class: div_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-line-ripple': true,
					'mdc-line-ripple--active': /*active*/ ctx[3],
					.../*internalClasses*/ ctx[5]
				})
			},
			{
				style: div_style_value = Object.entries(/*internalStyles*/ ctx[6]).map(func$3).concat([/*style*/ ctx[2]]).join(' ')
			},
			/*$$restProps*/ ctx[8]
		];

		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				set_attributes(div, div_data);
				add_location(div, file$6, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				/*div_binding*/ ctx[13](div);

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[7].call(null, div))
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*className, active, internalClasses*/ 42 && div_class_value !== (div_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-line-ripple': true,
						'mdc-line-ripple--active': /*active*/ ctx[3],
						.../*internalClasses*/ ctx[5]
					})) && { class: div_class_value },
					dirty & /*internalStyles, style*/ 68 && div_style_value !== (div_style_value = Object.entries(/*internalStyles*/ ctx[6]).map(func$3).concat([/*style*/ ctx[2]]).join(' ')) && { style: div_style_value },
					dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				/*div_binding*/ ctx[13](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$6.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$3 = ([name, value]) => `${name}: ${value};`;

	function instance_1$2($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","style","active","activate","deactivate","setRippleCenter","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('LineRipple', slots, []);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { active = false } = $$props;
		let element;
		let instance;
		let internalClasses = {};
		let internalStyles = {};

		onMount(() => {
			instance = new MDCLineRippleFoundation({
					addClass,
					removeClass,
					hasClass,
					setStyle: addStyle,
					registerEventHandler: (evtType, handler) => getElement().addEventListener(evtType, handler),
					deregisterEventHandler: (evtType, handler) => getElement().removeEventListener(evtType, handler)
				});

			instance.init();

			return () => {
				instance.destroy();
			};
		});

		function hasClass(className) {
			return className in internalClasses
			? internalClasses[className]
			: getElement().classList.contains(className);
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(5, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(5, internalClasses[className] = false, internalClasses);
			}
		}

		function addStyle(name, value) {
			if (internalStyles[name] != value) {
				if (value === '' || value == null) {
					delete internalStyles[name];
					$$invalidate(6, internalStyles);
				} else {
					$$invalidate(6, internalStyles[name] = value, internalStyles);
				}
			}
		}

		function activate() {
			instance.activate();
		}

		function deactivate() {
			instance.deactivate();
		}

		function setRippleCenter(xCoordinate) {
			instance.setRippleCenter(xCoordinate);
		}

		function getElement() {
			return element;
		}

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(4, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(2, style = $$new_props.style);
			if ('active' in $$new_props) $$invalidate(3, active = $$new_props.active);
		};

		$$self.$capture_state = () => ({
			MDCLineRippleFoundation,
			onMount,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			forwardEvents,
			use,
			className,
			style,
			active,
			element,
			instance,
			internalClasses,
			internalStyles,
			hasClass,
			addClass,
			removeClass,
			addStyle,
			activate,
			deactivate,
			setRippleCenter,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(2, style = $$new_props.style);
			if ('active' in $$props) $$invalidate(3, active = $$new_props.active);
			if ('element' in $$props) $$invalidate(4, element = $$new_props.element);
			if ('instance' in $$props) instance = $$new_props.instance;
			if ('internalClasses' in $$props) $$invalidate(5, internalClasses = $$new_props.internalClasses);
			if ('internalStyles' in $$props) $$invalidate(6, internalStyles = $$new_props.internalStyles);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			style,
			active,
			element,
			internalClasses,
			internalStyles,
			forwardEvents,
			$$restProps,
			activate,
			deactivate,
			setRippleCenter,
			getElement,
			div_binding
		];
	}

	class LineRipple extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance_1$2, create_fragment$6, safe_not_equal, {
				use: 0,
				class: 1,
				style: 2,
				active: 3,
				activate: 9,
				deactivate: 10,
				setRippleCenter: 11,
				getElement: 12
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "LineRipple",
				options,
				id: create_fragment$6.name
			});
		}

		get use() {
			throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get active() {
			throw new Error("<LineRipple>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set active(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get activate() {
			return this.$$.ctx[9];
		}

		set activate(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get deactivate() {
			return this.$$.ctx[10];
		}

		set deactivate(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get setRippleCenter() {
			return this.$$.ctx[11];
		}

		set setRippleCenter(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[12];
		}

		set getElement(value) {
			throw new Error("<LineRipple>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/textfield/node_modules/@smui/notched-outline/dist/NotchedOutline.svelte generated by Svelte v4.2.19 */
	const file$5 = "node_modules/@smui/textfield/node_modules/@smui/notched-outline/dist/NotchedOutline.svelte";

	// (17:2) {#if !noLabel}
	function create_if_block$3(ctx) {
		let div;
		let div_style_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[15].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				attr_dev(div, "class", "mdc-notched-outline__notch");
				attr_dev(div, "style", div_style_value = Object.entries(/*notchStyles*/ ctx[7]).map(func$2).join(' '));
				add_location(div, file$5, 17, 4, 479);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 16384)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[14],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, null),
							null
						);
					}
				}

				if (!current || dirty & /*notchStyles*/ 128 && div_style_value !== (div_style_value = Object.entries(/*notchStyles*/ ctx[7]).map(func$2).join(' '))) {
					attr_dev(div, "style", div_style_value);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$3.name,
			type: "if",
			source: "(17:2) {#if !noLabel}",
			ctx
		});

		return block;
	}

	function create_fragment$5(ctx) {
		let div2;
		let div0;
		let t0;
		let t1;
		let div1;
		let div2_class_value;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		let if_block = !/*noLabel*/ ctx[3] && create_if_block$3(ctx);

		let div2_levels = [
			{
				class: div2_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-notched-outline': true,
					'mdc-notched-outline--notched': /*notched*/ ctx[2],
					'mdc-notched-outline--no-label': /*noLabel*/ ctx[3],
					.../*internalClasses*/ ctx[6]
				})
			},
			/*$$restProps*/ ctx[10]
		];

		let div_data_2 = {};

		for (let i = 0; i < div2_levels.length; i += 1) {
			div_data_2 = assign(div_data_2, div2_levels[i]);
		}

		const block = {
			c: function create() {
				div2 = element("div");
				div0 = element("div");
				t0 = space();
				if (if_block) if_block.c();
				t1 = space();
				div1 = element("div");
				attr_dev(div0, "class", "mdc-notched-outline__leading");
				add_location(div0, file$5, 15, 2, 413);
				attr_dev(div1, "class", "mdc-notched-outline__trailing");
				add_location(div1, file$5, 26, 2, 682);
				set_attributes(div2, div_data_2);
				add_location(div2, file$5, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div2, anchor);
				append_dev(div2, div0);
				append_dev(div2, t0);
				if (if_block) if_block.m(div2, null);
				append_dev(div2, t1);
				append_dev(div2, div1);
				/*div2_binding*/ ctx[16](div2);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, div2, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[8].call(null, div2)),
						listen_dev(div2, "SMUIFloatingLabel:mount", /*handleFloatingLabelMount*/ ctx[9], false, false, false, false),
						listen_dev(div2, "SMUIFloatingLabel:unmount", /*SMUIFloatingLabel_unmount_handler*/ ctx[17], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (!/*noLabel*/ ctx[3]) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*noLabel*/ 8) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block$3(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(div2, t1);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}

				set_attributes(div2, div_data_2 = get_spread_update(div2_levels, [
					(!current || dirty & /*className, notched, noLabel, internalClasses*/ 78 && div2_class_value !== (div2_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-notched-outline': true,
						'mdc-notched-outline--notched': /*notched*/ ctx[2],
						'mdc-notched-outline--no-label': /*noLabel*/ ctx[3],
						.../*internalClasses*/ ctx[6]
					}))) && { class: div2_class_value },
					dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div2);
				}

				if (if_block) if_block.d();
				/*div2_binding*/ ctx[16](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$5.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$2 = ([name, value]) => `${name}: ${value};`;

	function instance_1$1($$self, $$props, $$invalidate) {
		const omit_props_names = ["use","class","notched","noLabel","notch","closeNotch","getElement"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('NotchedOutline', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { notched = false } = $$props;
		let { noLabel = false } = $$props;
		let element;
		let instance;
		let floatingLabel;
		let internalClasses = {};
		let notchStyles = {};

		onMount(() => {
			instance = new MDCNotchedOutlineFoundation({
					addClass,
					removeClass,
					setNotchWidthProperty: width => addNotchStyle('width', width + 'px'),
					removeNotchWidthProperty: () => removeNotchStyle('width')
				});

			instance.init();

			return () => {
				instance.destroy();
			};
		});

		function handleFloatingLabelMount(event) {
			$$invalidate(4, floatingLabel = event.detail);
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(6, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(6, internalClasses[className] = false, internalClasses);
			}
		}

		function addNotchStyle(name, value) {
			if (notchStyles[name] != value) {
				if (value === '' || value == null) {
					delete notchStyles[name];
					$$invalidate(7, notchStyles);
				} else {
					$$invalidate(7, notchStyles[name] = value, notchStyles);
				}
			}
		}

		function removeNotchStyle(name) {
			if (name in notchStyles) {
				delete notchStyles[name];
				$$invalidate(7, notchStyles);
			}
		}

		function notch(notchWidth) {
			instance.notch(notchWidth);
		}

		function closeNotch() {
			instance.closeNotch();
		}

		function getElement() {
			return element;
		}

		function div2_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(5, element);
			});
		}

		const SMUIFloatingLabel_unmount_handler = () => $$invalidate(4, floatingLabel = undefined);

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('notched' in $$new_props) $$invalidate(2, notched = $$new_props.notched);
			if ('noLabel' in $$new_props) $$invalidate(3, noLabel = $$new_props.noLabel);
			if ('$$scope' in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			MDCNotchedOutlineFoundation,
			onMount,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			forwardEvents,
			use,
			className,
			notched,
			noLabel,
			element,
			instance,
			floatingLabel,
			internalClasses,
			notchStyles,
			handleFloatingLabelMount,
			addClass,
			removeClass,
			addNotchStyle,
			removeNotchStyle,
			notch,
			closeNotch,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('notched' in $$props) $$invalidate(2, notched = $$new_props.notched);
			if ('noLabel' in $$props) $$invalidate(3, noLabel = $$new_props.noLabel);
			if ('element' in $$props) $$invalidate(5, element = $$new_props.element);
			if ('instance' in $$props) instance = $$new_props.instance;
			if ('floatingLabel' in $$props) $$invalidate(4, floatingLabel = $$new_props.floatingLabel);
			if ('internalClasses' in $$props) $$invalidate(6, internalClasses = $$new_props.internalClasses);
			if ('notchStyles' in $$props) $$invalidate(7, notchStyles = $$new_props.notchStyles);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*floatingLabel*/ 16) {
				if (floatingLabel) {
					floatingLabel.addStyle('transition-duration', '0s');
					addClass('mdc-notched-outline--upgraded');

					requestAnimationFrame(() => {
						if (floatingLabel) {
							floatingLabel.removeStyle('transition-duration');
						}
					});
				} else {
					removeClass('mdc-notched-outline--upgraded');
				}
			}
		};

		return [
			use,
			className,
			notched,
			noLabel,
			floatingLabel,
			element,
			internalClasses,
			notchStyles,
			forwardEvents,
			handleFloatingLabelMount,
			$$restProps,
			notch,
			closeNotch,
			getElement,
			$$scope,
			slots,
			div2_binding,
			SMUIFloatingLabel_unmount_handler
		];
	}

	class NotchedOutline extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance_1$1, create_fragment$5, safe_not_equal, {
				use: 0,
				class: 1,
				notched: 2,
				noLabel: 3,
				notch: 11,
				closeNotch: 12,
				getElement: 13
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "NotchedOutline",
				options,
				id: create_fragment$5.name
			});
		}

		get use() {
			throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get notched() {
			throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set notched(value) {
			throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get noLabel() {
			throw new Error("<NotchedOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set noLabel(value) {
			throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get notch() {
			return this.$$.ctx[11];
		}

		set notch(value) {
			throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get closeNotch() {
			return this.$$.ctx[12];
		}

		set closeNotch(value) {
			throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[13];
		}

		set getElement(value) {
			throw new Error("<NotchedOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var HelperLine = classAdderBuilder({
	    class: 'mdc-text-field-helper-line',
	    tag: 'div',
	});

	var Prefix = classAdderBuilder({
	    class: 'mdc-text-field__affix mdc-text-field__affix--prefix',
	    tag: 'span',
	});

	var Suffix = classAdderBuilder({
	    class: 'mdc-text-field__affix mdc-text-field__affix--suffix',
	    tag: 'span',
	});

	/* node_modules/@smui/textfield/dist/Input.svelte generated by Svelte v4.2.19 */
	const file$4 = "node_modules/@smui/textfield/dist/Input.svelte";

	function create_fragment$4(ctx) {
		let input;
		let input_class_value;
		let useActions_action;
		let mounted;
		let dispose;

		let input_levels = [
			{
				class: input_class_value = classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-text-field__input': true
				})
			},
			{ type: /*type*/ ctx[2] },
			{ placeholder: /*placeholder*/ ctx[3] },
			/*valueProp*/ ctx[4],
			/*internalAttrs*/ ctx[6],
			/*$$restProps*/ ctx[10]
		];

		let input_data = {};

		for (let i = 0; i < input_levels.length; i += 1) {
			input_data = assign(input_data, input_levels[i]);
		}

		const block = {
			c: function create() {
				input = element("input");
				set_attributes(input, input_data);
				add_location(input, file$4, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, input, anchor);
				if (input.autofocus) input.focus();
				/*input_binding*/ ctx[26](input);

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, input, /*use*/ ctx[0])),
						action_destroyer(/*forwardEvents*/ ctx[7].call(null, input)),
						listen_dev(input, "input", /*input_handler*/ ctx[27], false, false, false, false),
						listen_dev(input, "change", /*changeHandler*/ ctx[9], false, false, false, false),
						listen_dev(input, "blur", /*blur_handler*/ ctx[24], false, false, false, false),
						listen_dev(input, "focus", /*focus_handler*/ ctx[25], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				set_attributes(input, input_data = get_spread_update(input_levels, [
					dirty & /*className*/ 2 && input_class_value !== (input_class_value = classMap({
						[/*className*/ ctx[1]]: true,
						'mdc-text-field__input': true
					})) && { class: input_class_value },
					dirty & /*type*/ 4 && { type: /*type*/ ctx[2] },
					dirty & /*placeholder*/ 8 && { placeholder: /*placeholder*/ ctx[3] },
					dirty & /*valueProp*/ 16 && /*valueProp*/ ctx[4],
					dirty & /*internalAttrs*/ 64 && /*internalAttrs*/ ctx[6],
					dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 1) useActions_action.update.call(null, /*use*/ ctx[0]);
			},
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(input);
				}

				/*input_binding*/ ctx[26](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$4.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function toNumber(value) {
		if (value === '') {
			return Number.NaN;
		}

		return +value;
	}

	function instance$3($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","type","placeholder","value","files","dirty","invalid","updateInvalid","emptyValueNull","emptyValueUndefined","getAttr","addAttr","removeAttr","focus","blur","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Input', slots, []);
		const forwardEvents = forwardEventsBuilder(get_current_component());

		let uninitializedValue = () => {
			
		};

		function isUninitializedValue(value) {
			return value === uninitializedValue;
		}

		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { type = 'text' } = $$props;
		let { placeholder = ' ' } = $$props;
		let { value = uninitializedValue } = $$props;
		const valueUninitialized = isUninitializedValue(value);

		if (valueUninitialized) {
			value = '';
		}

		let { files = null } = $$props;
		let { dirty = false } = $$props;
		let { invalid = false } = $$props;
		let { updateInvalid = true } = $$props;
		let { emptyValueNull = value === null } = $$props;

		if (valueUninitialized && emptyValueNull) {
			value = null;
		}

		let { emptyValueUndefined = value === undefined } = $$props;

		if (valueUninitialized && emptyValueUndefined) {
			value = undefined;
		}

		let element;
		let internalAttrs = {};
		let valueProp = {};

		onMount(() => {
			if (updateInvalid) {
				$$invalidate(14, invalid = element.matches(':invalid'));
			}
		});

		function valueUpdater(e) {
			if (type === 'file') {
				$$invalidate(12, files = e.currentTarget.files);
				return;
			}

			if (e.currentTarget.value === '' && emptyValueNull) {
				$$invalidate(11, value = null);
				return;
			}

			if (e.currentTarget.value === '' && emptyValueUndefined) {
				$$invalidate(11, value = undefined);
				return;
			}

			switch (type) {
				case 'number':
				case 'range':
					$$invalidate(11, value = toNumber(e.currentTarget.value));
					break;
				default:
					$$invalidate(11, value = e.currentTarget.value);
					break;
			}
		}

		function changeHandler(e) {
			if (type === 'file' || type === 'range') {
				valueUpdater(e);
			}

			$$invalidate(13, dirty = true);

			if (updateInvalid) {
				$$invalidate(14, invalid = element.matches(':invalid'));
			}
		}

		function getAttr(name) {
			var _a;

			return name in internalAttrs
			? (_a = internalAttrs[name]) !== null && _a !== void 0
				? _a
				: null
			: getElement().getAttribute(name);
		}

		function addAttr(name, value) {
			if (internalAttrs[name] !== value) {
				$$invalidate(6, internalAttrs[name] = value, internalAttrs);
			}
		}

		function removeAttr(name) {
			if (!(name in internalAttrs) || internalAttrs[name] != null) {
				$$invalidate(6, internalAttrs[name] = undefined, internalAttrs);
			}
		}

		function focus() {
			getElement().focus();
		}

		function blur() {
			getElement().blur();
		}

		function getElement() {
			return element;
		}

		function blur_handler(event) {
			bubble.call(this, $$self, event);
		}

		function focus_handler(event) {
			bubble.call(this, $$self, event);
		}

		function input_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(5, element);
			});
		}

		const input_handler = e => type !== 'file' && valueUpdater(e);

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('type' in $$new_props) $$invalidate(2, type = $$new_props.type);
			if ('placeholder' in $$new_props) $$invalidate(3, placeholder = $$new_props.placeholder);
			if ('value' in $$new_props) $$invalidate(11, value = $$new_props.value);
			if ('files' in $$new_props) $$invalidate(12, files = $$new_props.files);
			if ('dirty' in $$new_props) $$invalidate(13, dirty = $$new_props.dirty);
			if ('invalid' in $$new_props) $$invalidate(14, invalid = $$new_props.invalid);
			if ('updateInvalid' in $$new_props) $$invalidate(15, updateInvalid = $$new_props.updateInvalid);
			if ('emptyValueNull' in $$new_props) $$invalidate(16, emptyValueNull = $$new_props.emptyValueNull);
			if ('emptyValueUndefined' in $$new_props) $$invalidate(17, emptyValueUndefined = $$new_props.emptyValueUndefined);
		};

		$$self.$capture_state = () => ({
			onMount,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			forwardEvents,
			uninitializedValue,
			isUninitializedValue,
			use,
			className,
			type,
			placeholder,
			value,
			valueUninitialized,
			files,
			dirty,
			invalid,
			updateInvalid,
			emptyValueNull,
			emptyValueUndefined,
			element,
			internalAttrs,
			valueProp,
			toNumber,
			valueUpdater,
			changeHandler,
			getAttr,
			addAttr,
			removeAttr,
			focus,
			blur,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('uninitializedValue' in $$props) uninitializedValue = $$new_props.uninitializedValue;
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('type' in $$props) $$invalidate(2, type = $$new_props.type);
			if ('placeholder' in $$props) $$invalidate(3, placeholder = $$new_props.placeholder);
			if ('value' in $$props) $$invalidate(11, value = $$new_props.value);
			if ('files' in $$props) $$invalidate(12, files = $$new_props.files);
			if ('dirty' in $$props) $$invalidate(13, dirty = $$new_props.dirty);
			if ('invalid' in $$props) $$invalidate(14, invalid = $$new_props.invalid);
			if ('updateInvalid' in $$props) $$invalidate(15, updateInvalid = $$new_props.updateInvalid);
			if ('emptyValueNull' in $$props) $$invalidate(16, emptyValueNull = $$new_props.emptyValueNull);
			if ('emptyValueUndefined' in $$props) $$invalidate(17, emptyValueUndefined = $$new_props.emptyValueUndefined);
			if ('element' in $$props) $$invalidate(5, element = $$new_props.element);
			if ('internalAttrs' in $$props) $$invalidate(6, internalAttrs = $$new_props.internalAttrs);
			if ('valueProp' in $$props) $$invalidate(4, valueProp = $$new_props.valueProp);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*type, valueProp, value*/ 2068) {
				if (type === 'file') {
					delete valueProp.value;
					(($$invalidate(4, valueProp), $$invalidate(2, type)), $$invalidate(11, value));
				} else {
					$$invalidate(4, valueProp.value = value == null ? '' : value, valueProp);
				}
			}
		};

		return [
			use,
			className,
			type,
			placeholder,
			valueProp,
			element,
			internalAttrs,
			forwardEvents,
			valueUpdater,
			changeHandler,
			$$restProps,
			value,
			files,
			dirty,
			invalid,
			updateInvalid,
			emptyValueNull,
			emptyValueUndefined,
			getAttr,
			addAttr,
			removeAttr,
			focus,
			blur,
			getElement,
			blur_handler,
			focus_handler,
			input_binding,
			input_handler
		];
	}

	class Input extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$3, create_fragment$4, safe_not_equal, {
				use: 0,
				class: 1,
				type: 2,
				placeholder: 3,
				value: 11,
				files: 12,
				dirty: 13,
				invalid: 14,
				updateInvalid: 15,
				emptyValueNull: 16,
				emptyValueUndefined: 17,
				getAttr: 18,
				addAttr: 19,
				removeAttr: 20,
				focus: 21,
				blur: 22,
				getElement: 23
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Input",
				options,
				id: create_fragment$4.name
			});
		}

		get use() {
			throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get type() {
			throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set type(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get placeholder() {
			throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set placeholder(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get files() {
			throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set files(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get dirty() {
			throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set dirty(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get invalid() {
			throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set invalid(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get updateInvalid() {
			throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set updateInvalid(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get emptyValueNull() {
			throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set emptyValueNull(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get emptyValueUndefined() {
			throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set emptyValueUndefined(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getAttr() {
			return this.$$.ctx[18];
		}

		set getAttr(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get addAttr() {
			return this.$$.ctx[19];
		}

		set addAttr(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get removeAttr() {
			return this.$$.ctx[20];
		}

		set removeAttr(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get focus() {
			return this.$$.ctx[21];
		}

		set focus(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get blur() {
			return this.$$.ctx[22];
		}

		set blur(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[23];
		}

		set getElement(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/textfield/dist/Textarea.svelte generated by Svelte v4.2.19 */
	const file$3 = "node_modules/@smui/textfield/dist/Textarea.svelte";

	function create_fragment$3(ctx) {
		let textarea;
		let textarea_class_value;
		let textarea_style_value;
		let useActions_action;
		let mounted;
		let dispose;

		let textarea_levels = [
			{
				class: textarea_class_value = classMap({
					[/*className*/ ctx[2]]: true,
					'mdc-text-field__input': true
				})
			},
			{
				style: textarea_style_value = `${/*resizable*/ ctx[4] ? '' : 'resize: none; '}${/*style*/ ctx[3]}`
			},
			/*internalAttrs*/ ctx[6],
			/*$$restProps*/ ctx[9]
		];

		let textarea_data = {};

		for (let i = 0; i < textarea_levels.length; i += 1) {
			textarea_data = assign(textarea_data, textarea_levels[i]);
		}

		const block = {
			c: function create() {
				textarea = element("textarea");
				set_attributes(textarea, textarea_data);
				add_location(textarea, file$3, 0, 0, 0);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, textarea, anchor);
				if (textarea.autofocus) textarea.focus();
				/*textarea_binding*/ ctx[21](textarea);
				set_input_value(textarea, /*value*/ ctx[0]);

				if (!mounted) {
					dispose = [
						action_destroyer(useActions_action = useActions.call(null, textarea, /*use*/ ctx[1])),
						action_destroyer(/*forwardEvents*/ ctx[7].call(null, textarea)),
						listen_dev(textarea, "change", /*changeHandler*/ ctx[8], false, false, false, false),
						listen_dev(textarea, "blur", /*blur_handler*/ ctx[19], false, false, false, false),
						listen_dev(textarea, "focus", /*focus_handler*/ ctx[20], false, false, false, false),
						listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[22])
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				set_attributes(textarea, textarea_data = get_spread_update(textarea_levels, [
					dirty & /*className*/ 4 && textarea_class_value !== (textarea_class_value = classMap({
						[/*className*/ ctx[2]]: true,
						'mdc-text-field__input': true
					})) && { class: textarea_class_value },
					dirty & /*resizable, style*/ 24 && textarea_style_value !== (textarea_style_value = `${/*resizable*/ ctx[4] ? '' : 'resize: none; '}${/*style*/ ctx[3]}`) && { style: textarea_style_value },
					dirty & /*internalAttrs*/ 64 && /*internalAttrs*/ ctx[6],
					dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
				]));

				if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/ 2) useActions_action.update.call(null, /*use*/ ctx[1]);

				if (dirty & /*value*/ 1) {
					set_input_value(textarea, /*value*/ ctx[0]);
				}
			},
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(textarea);
				}

				/*textarea_binding*/ ctx[21](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$3.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$2($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","style","value","dirty","invalid","updateInvalid","resizable","getAttr","addAttr","removeAttr","focus","blur","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Textarea', slots, []);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { value = '' } = $$props;
		let { dirty = false } = $$props;
		let { invalid = false } = $$props;
		let { updateInvalid = true } = $$props;
		let { resizable = true } = $$props;
		let element;
		let internalAttrs = {};

		onMount(() => {
			if (updateInvalid) {
				$$invalidate(11, invalid = element.matches(':invalid'));
			}
		});

		function changeHandler() {
			$$invalidate(10, dirty = true);

			if (updateInvalid) {
				$$invalidate(11, invalid = element.matches(':invalid'));
			}
		}

		function getAttr(name) {
			var _a;

			return name in internalAttrs
			? (_a = internalAttrs[name]) !== null && _a !== void 0
				? _a
				: null
			: getElement().getAttribute(name);
		}

		function addAttr(name, value) {
			if (internalAttrs[name] !== value) {
				$$invalidate(6, internalAttrs[name] = value, internalAttrs);
			}
		}

		function removeAttr(name) {
			if (!(name in internalAttrs) || internalAttrs[name] != null) {
				$$invalidate(6, internalAttrs[name] = undefined, internalAttrs);
			}
		}

		function focus() {
			getElement().focus();
		}

		function blur() {
			getElement().blur();
		}

		function getElement() {
			return element;
		}

		function blur_handler(event) {
			bubble.call(this, $$self, event);
		}

		function focus_handler(event) {
			bubble.call(this, $$self, event);
		}

		function textarea_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(5, element);
			});
		}

		function textarea_input_handler() {
			value = this.value;
			$$invalidate(0, value);
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(1, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(3, style = $$new_props.style);
			if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
			if ('dirty' in $$new_props) $$invalidate(10, dirty = $$new_props.dirty);
			if ('invalid' in $$new_props) $$invalidate(11, invalid = $$new_props.invalid);
			if ('updateInvalid' in $$new_props) $$invalidate(12, updateInvalid = $$new_props.updateInvalid);
			if ('resizable' in $$new_props) $$invalidate(4, resizable = $$new_props.resizable);
		};

		$$self.$capture_state = () => ({
			onMount,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			useActions,
			forwardEvents,
			use,
			className,
			style,
			value,
			dirty,
			invalid,
			updateInvalid,
			resizable,
			element,
			internalAttrs,
			changeHandler,
			getAttr,
			addAttr,
			removeAttr,
			focus,
			blur,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(1, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(3, style = $$new_props.style);
			if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
			if ('dirty' in $$props) $$invalidate(10, dirty = $$new_props.dirty);
			if ('invalid' in $$props) $$invalidate(11, invalid = $$new_props.invalid);
			if ('updateInvalid' in $$props) $$invalidate(12, updateInvalid = $$new_props.updateInvalid);
			if ('resizable' in $$props) $$invalidate(4, resizable = $$new_props.resizable);
			if ('element' in $$props) $$invalidate(5, element = $$new_props.element);
			if ('internalAttrs' in $$props) $$invalidate(6, internalAttrs = $$new_props.internalAttrs);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			value,
			use,
			className,
			style,
			resizable,
			element,
			internalAttrs,
			forwardEvents,
			changeHandler,
			$$restProps,
			dirty,
			invalid,
			updateInvalid,
			getAttr,
			addAttr,
			removeAttr,
			focus,
			blur,
			getElement,
			blur_handler,
			focus_handler,
			textarea_binding,
			textarea_input_handler
		];
	}

	class Textarea extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$2, create_fragment$3, safe_not_equal, {
				use: 1,
				class: 2,
				style: 3,
				value: 0,
				dirty: 10,
				invalid: 11,
				updateInvalid: 12,
				resizable: 4,
				getAttr: 13,
				addAttr: 14,
				removeAttr: 15,
				focus: 16,
				blur: 17,
				getElement: 18
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Textarea",
				options,
				id: create_fragment$3.name
			});
		}

		get use() {
			throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get dirty() {
			throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set dirty(value) {
			throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get invalid() {
			throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set invalid(value) {
			throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get updateInvalid() {
			throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set updateInvalid(value) {
			throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get resizable() {
			throw new Error("<Textarea>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set resizable(value) {
			throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getAttr() {
			return this.$$.ctx[13];
		}

		set getAttr(value) {
			throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get addAttr() {
			return this.$$.ctx[14];
		}

		set addAttr(value) {
			throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get removeAttr() {
			return this.$$.ctx[15];
		}

		set removeAttr(value) {
			throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get focus() {
			return this.$$.ctx[16];
		}

		set focus(value) {
			throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get blur() {
			return this.$$.ctx[17];
		}

		set blur(value) {
			throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[18];
		}

		set getElement(value) {
			throw new Error("<Textarea>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/textfield/dist/Textfield.svelte generated by Svelte v4.2.19 */

	const { Error: Error_1$1 } = globals;
	const file$2 = "node_modules/@smui/textfield/dist/Textfield.svelte";
	const get_helper_slot_changes = dirty => ({});
	const get_helper_slot_context = ctx => ({});
	const get_ripple_slot_changes = dirty => ({});
	const get_ripple_slot_context = ctx => ({});
	const get_trailingIcon_slot_changes_1 = dirty => ({});
	const get_trailingIcon_slot_context_1 = ctx => ({});
	const get_leadingIcon_slot_changes_1 = dirty => ({});
	const get_leadingIcon_slot_context_1 = ctx => ({});
	const get_label_slot_changes_2 = dirty => ({});
	const get_label_slot_context_2 = ctx => ({});
	const get_trailingIcon_slot_changes = dirty => ({});
	const get_trailingIcon_slot_context = ctx => ({});
	const get_suffix_slot_changes = dirty => ({});
	const get_suffix_slot_context = ctx => ({});
	const get_prefix_slot_changes = dirty => ({});
	const get_prefix_slot_context = ctx => ({});
	const get_internalCounter_slot_changes = dirty => ({});
	const get_internalCounter_slot_context = ctx => ({});
	const get_leadingIcon_slot_changes = dirty => ({});
	const get_leadingIcon_slot_context = ctx => ({});
	const get_label_slot_changes_1 = dirty => ({});
	const get_label_slot_context_1 = ctx => ({});
	const get_label_slot_changes = dirty => ({});
	const get_label_slot_context = ctx => ({});

	// (167:0) {:else}
	function create_else_block_1$1(ctx) {
		let div;
		let t0;
		let contextfragment0;
		let t1;
		let t2;
		let contextfragment1;
		let t3;
		let div_class_value;
		let div_style_value;
		let Ripple_action;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		const label_slot_template = /*#slots*/ ctx[56].label;
		const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[87], get_label_slot_context_2);

		contextfragment0 = new ContextFragment({
				props: {
					key: "SMUI:textfield:icon:leading",
					value: true,
					$$slots: { default: [create_default_slot_9$1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const default_slot_template = /*#slots*/ ctx[56].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[87], null);

		contextfragment1 = new ContextFragment({
				props: {
					key: "SMUI:textfield:icon:leading",
					value: false,
					$$slots: { default: [create_default_slot_8$1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const ripple_slot_template = /*#slots*/ ctx[56].ripple;
		const ripple_slot = create_slot(ripple_slot_template, ctx, /*$$scope*/ ctx[87], get_ripple_slot_context);

		let div_levels = [
			{
				class: div_class_value = classMap({
					[/*className*/ ctx[9]]: true,
					'mdc-text-field': true,
					'mdc-text-field--disabled': /*disabled*/ ctx[12],
					'mdc-text-field--textarea': /*textarea*/ ctx[14],
					'mdc-text-field--filled': /*variant*/ ctx[15] === 'filled',
					'mdc-text-field--outlined': /*variant*/ ctx[15] === 'outlined',
					'smui-text-field--standard': /*variant*/ ctx[15] === 'standard' && !/*textarea*/ ctx[14],
					'mdc-text-field--no-label': /*noLabel*/ ctx[16] || !/*$$slots*/ ctx[47].label,
					'mdc-text-field--with-leading-icon': /*$$slots*/ ctx[47].leadingIcon,
					'mdc-text-field--with-trailing-icon': /*$$slots*/ ctx[47].trailingIcon,
					'mdc-text-field--invalid': /*invalid*/ ctx[1],
					.../*internalClasses*/ ctx[25]
				})
			},
			{
				style: div_style_value = Object.entries(/*internalStyles*/ ctx[26]).map(func_1).concat([/*style*/ ctx[10]]).join(' ')
			},
			exclude(/*$$restProps*/ ctx[46], ['input$', 'label$', 'ripple$', 'outline$', 'helperLine$'])
		];

		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (label_slot) label_slot.c();
				t0 = space();
				create_component(contextfragment0.$$.fragment);
				t1 = space();
				if (default_slot) default_slot.c();
				t2 = space();
				create_component(contextfragment1.$$.fragment);
				t3 = space();
				if (ripple_slot) ripple_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$2, 167, 2, 5537);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (label_slot) {
					label_slot.m(div, null);
				}

				append_dev(div, t0);
				mount_component(contextfragment0, div, null);
				append_dev(div, t1);

				if (default_slot) {
					default_slot.m(div, null);
				}

				append_dev(div, t2);
				mount_component(contextfragment1, div, null);
				append_dev(div, t3);

				if (ripple_slot) {
					ripple_slot.m(div, null);
				}

				/*div_binding*/ ctx[82](div);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(Ripple_action = Ripple.call(null, div, {
							ripple: /*ripple*/ ctx[11],
							unbounded: false,
							addClass: /*addClass*/ ctx[43],
							removeClass: /*removeClass*/ ctx[44],
							addStyle: /*addStyle*/ ctx[45]
						})),
						action_destroyer(useActions_action = useActions.call(null, div, /*use*/ ctx[8])),
						action_destroyer(/*forwardEvents*/ ctx[34].call(null, div)),
						listen_dev(div, "SMUITextfieldLeadingIcon:mount", /*handleLeadingIconMount*/ ctx[38], false, false, false, false),
						listen_dev(div, "SMUITextfieldLeadingIcon:unmount", /*SMUITextfieldLeadingIcon_unmount_handler_1*/ ctx[83], false, false, false, false),
						listen_dev(div, "SMUITextfieldTrailingIcon:mount", /*handleTrailingIconMount*/ ctx[39], false, false, false, false),
						listen_dev(div, "SMUITextfieldTrailingIcon:unmount", /*SMUITextfieldTrailingIcon_unmount_handler_1*/ ctx[84], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (label_slot) {
					if (label_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							label_slot,
							label_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(label_slot_template, /*$$scope*/ ctx[87], dirty, get_label_slot_changes_2),
							get_label_slot_context_2
						);
					}
				}

				const contextfragment0_changes = {};

				if (dirty[2] & /*$$scope*/ 33554432) {
					contextfragment0_changes.$$scope = { dirty, ctx };
				}

				contextfragment0.$set(contextfragment0_changes);

				if (default_slot) {
					if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[87], dirty, null),
							null
						);
					}
				}

				const contextfragment1_changes = {};

				if (dirty[2] & /*$$scope*/ 33554432) {
					contextfragment1_changes.$$scope = { dirty, ctx };
				}

				contextfragment1.$set(contextfragment1_changes);

				if (ripple_slot) {
					if (ripple_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							ripple_slot,
							ripple_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(ripple_slot_template, /*$$scope*/ ctx[87], dirty, get_ripple_slot_changes),
							get_ripple_slot_context
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					(!current || dirty[0] & /*className, disabled, textarea, variant, noLabel, invalid, internalClasses*/ 33673730 | dirty[1] & /*$$slots*/ 65536 && div_class_value !== (div_class_value = classMap({
						[/*className*/ ctx[9]]: true,
						'mdc-text-field': true,
						'mdc-text-field--disabled': /*disabled*/ ctx[12],
						'mdc-text-field--textarea': /*textarea*/ ctx[14],
						'mdc-text-field--filled': /*variant*/ ctx[15] === 'filled',
						'mdc-text-field--outlined': /*variant*/ ctx[15] === 'outlined',
						'smui-text-field--standard': /*variant*/ ctx[15] === 'standard' && !/*textarea*/ ctx[14],
						'mdc-text-field--no-label': /*noLabel*/ ctx[16] || !/*$$slots*/ ctx[47].label,
						'mdc-text-field--with-leading-icon': /*$$slots*/ ctx[47].leadingIcon,
						'mdc-text-field--with-trailing-icon': /*$$slots*/ ctx[47].trailingIcon,
						'mdc-text-field--invalid': /*invalid*/ ctx[1],
						.../*internalClasses*/ ctx[25]
					}))) && { class: div_class_value },
					(!current || dirty[0] & /*internalStyles, style*/ 67109888 && div_style_value !== (div_style_value = Object.entries(/*internalStyles*/ ctx[26]).map(func_1).concat([/*style*/ ctx[10]]).join(' '))) && { style: div_style_value },
					dirty[1] & /*$$restProps*/ 32768 && exclude(/*$$restProps*/ ctx[46], ['input$', 'label$', 'ripple$', 'outline$', 'helperLine$'])
				]));

				if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*ripple*/ 2048) Ripple_action.update.call(null, {
					ripple: /*ripple*/ ctx[11],
					unbounded: false,
					addClass: /*addClass*/ ctx[43],
					removeClass: /*removeClass*/ ctx[44],
					addStyle: /*addStyle*/ ctx[45]
				});

				if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 256) useActions_action.update.call(null, /*use*/ ctx[8]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(label_slot, local);
				transition_in(contextfragment0.$$.fragment, local);
				transition_in(default_slot, local);
				transition_in(contextfragment1.$$.fragment, local);
				transition_in(ripple_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(label_slot, local);
				transition_out(contextfragment0.$$.fragment, local);
				transition_out(default_slot, local);
				transition_out(contextfragment1.$$.fragment, local);
				transition_out(ripple_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (label_slot) label_slot.d(detaching);
				destroy_component(contextfragment0);
				if (default_slot) default_slot.d(detaching);
				destroy_component(contextfragment1);
				if (ripple_slot) ripple_slot.d(detaching);
				/*div_binding*/ ctx[82](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block_1$1.name,
			type: "else",
			source: "(167:0) {:else}",
			ctx
		});

		return block;
	}

	// (1:0) {#if valued}
	function create_if_block_1$2(ctx) {
		let label_1;
		let t0;
		let t1;
		let contextfragment0;
		let t2;
		let t3;
		let current_block_type_index;
		let if_block2;
		let t4;
		let contextfragment1;
		let t5;
		let label_1_class_value;
		let label_1_style_value;
		let Ripple_action;
		let useActions_action;
		let current;
		let mounted;
		let dispose;
		let if_block0 = !/*textarea*/ ctx[14] && /*variant*/ ctx[15] !== 'outlined' && create_if_block_8$1(ctx);
		let if_block1 = (/*textarea*/ ctx[14] || /*variant*/ ctx[15] === 'outlined') && create_if_block_6$1(ctx);

		contextfragment0 = new ContextFragment({
				props: {
					key: "SMUI:textfield:icon:leading",
					value: true,
					$$slots: { default: [create_default_slot_4$1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const default_slot_template = /*#slots*/ ctx[56].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[87], null);
		const if_block_creators = [create_if_block_3$1, create_else_block$1];
		const if_blocks = [];

		function select_block_type_1(ctx, dirty) {
			if (/*textarea*/ ctx[14] && typeof /*value*/ ctx[0] === 'string') return 0;
			return 1;
		}

		current_block_type_index = select_block_type_1(ctx);
		if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		contextfragment1 = new ContextFragment({
				props: {
					key: "SMUI:textfield:icon:leading",
					value: false,
					$$slots: { default: [create_default_slot_1$1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		let if_block3 = !/*textarea*/ ctx[14] && /*variant*/ ctx[15] !== 'outlined' && /*ripple*/ ctx[11] && create_if_block_2$1(ctx);

		let label_1_levels = [
			{
				class: label_1_class_value = classMap({
					[/*className*/ ctx[9]]: true,
					'mdc-text-field': true,
					'mdc-text-field--disabled': /*disabled*/ ctx[12],
					'mdc-text-field--textarea': /*textarea*/ ctx[14],
					'mdc-text-field--filled': /*variant*/ ctx[15] === 'filled',
					'mdc-text-field--outlined': /*variant*/ ctx[15] === 'outlined',
					'smui-text-field--standard': /*variant*/ ctx[15] === 'standard' && !/*textarea*/ ctx[14],
					'mdc-text-field--no-label': /*noLabel*/ ctx[16] || /*label*/ ctx[17] == null && !/*$$slots*/ ctx[47].label,
					'mdc-text-field--label-floating': /*focused*/ ctx[28] || /*value*/ ctx[0] != null && /*value*/ ctx[0] !== '',
					'mdc-text-field--with-leading-icon': /*isUninitializedValue*/ ctx[35](/*withLeadingIcon*/ ctx[22])
					? /*$$slots*/ ctx[47].leadingIcon
					: /*withLeadingIcon*/ ctx[22],
					'mdc-text-field--with-trailing-icon': /*isUninitializedValue*/ ctx[35](/*withTrailingIcon*/ ctx[23])
					? /*$$slots*/ ctx[47].trailingIcon
					: /*withTrailingIcon*/ ctx[23],
					'mdc-text-field--with-internal-counter': /*textarea*/ ctx[14] && /*$$slots*/ ctx[47].internalCounter,
					'mdc-text-field--invalid': /*invalid*/ ctx[1],
					.../*internalClasses*/ ctx[25]
				})
			},
			{
				style: label_1_style_value = Object.entries(/*internalStyles*/ ctx[26]).map(func$1).concat([/*style*/ ctx[10]]).join(' ')
			},
			{
				for: /* suppress a11y warning, since this is wrapped */ undefined
			},
			exclude(/*$$restProps*/ ctx[46], ['input$', 'label$', 'ripple$', 'outline$', 'helperLine$'])
		];

		let label_data = {};

		for (let i = 0; i < label_1_levels.length; i += 1) {
			label_data = assign(label_data, label_1_levels[i]);
		}

		const block = {
			c: function create() {
				label_1 = element("label");
				if (if_block0) if_block0.c();
				t0 = space();
				if (if_block1) if_block1.c();
				t1 = space();
				create_component(contextfragment0.$$.fragment);
				t2 = space();
				if (default_slot) default_slot.c();
				t3 = space();
				if_block2.c();
				t4 = space();
				create_component(contextfragment1.$$.fragment);
				t5 = space();
				if (if_block3) if_block3.c();
				set_attributes(label_1, label_data);
				add_location(label_1, file$2, 1, 2, 15);
			},
			m: function mount(target, anchor) {
				insert_dev(target, label_1, anchor);
				if (if_block0) if_block0.m(label_1, null);
				append_dev(label_1, t0);
				if (if_block1) if_block1.m(label_1, null);
				append_dev(label_1, t1);
				mount_component(contextfragment0, label_1, null);
				append_dev(label_1, t2);

				if (default_slot) {
					default_slot.m(label_1, null);
				}

				append_dev(label_1, t3);
				if_blocks[current_block_type_index].m(label_1, null);
				append_dev(label_1, t4);
				mount_component(contextfragment1, label_1, null);
				append_dev(label_1, t5);
				if (if_block3) if_block3.m(label_1, null);
				/*label_1_binding*/ ctx[78](label_1);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(Ripple_action = Ripple.call(null, label_1, {
							ripple: !/*textarea*/ ctx[14] && /*variant*/ ctx[15] === 'filled',
							unbounded: false,
							addClass: /*addClass*/ ctx[43],
							removeClass: /*removeClass*/ ctx[44],
							addStyle: /*addStyle*/ ctx[45],
							eventTarget: /*inputElement*/ ctx[33],
							activeTarget: /*inputElement*/ ctx[33],
							initPromise: /*initPromise*/ ctx[37]
						})),
						action_destroyer(useActions_action = useActions.call(null, label_1, /*use*/ ctx[8])),
						action_destroyer(/*forwardEvents*/ ctx[34].call(null, label_1)),
						listen_dev(label_1, "SMUITextfieldLeadingIcon:mount", /*handleLeadingIconMount*/ ctx[38], false, false, false, false),
						listen_dev(label_1, "SMUITextfieldLeadingIcon:unmount", /*SMUITextfieldLeadingIcon_unmount_handler*/ ctx[79], false, false, false, false),
						listen_dev(label_1, "SMUITextfieldTrailingIcon:mount", /*handleTrailingIconMount*/ ctx[39], false, false, false, false),
						listen_dev(label_1, "SMUITextfieldTrailingIcon:unmount", /*SMUITextfieldTrailingIcon_unmount_handler*/ ctx[80], false, false, false, false),
						listen_dev(label_1, "SMUITextfieldCharacterCounter:mount", /*handleCharacterCounterMount*/ ctx[40], false, false, false, false),
						listen_dev(label_1, "SMUITextfieldCharacterCounter:unmount", /*SMUITextfieldCharacterCounter_unmount_handler*/ ctx[81], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (!/*textarea*/ ctx[14] && /*variant*/ ctx[15] !== 'outlined') {
					if (if_block0) {
						if_block0.p(ctx, dirty);

						if (dirty[0] & /*textarea, variant*/ 49152) {
							transition_in(if_block0, 1);
						}
					} else {
						if_block0 = create_if_block_8$1(ctx);
						if_block0.c();
						transition_in(if_block0, 1);
						if_block0.m(label_1, t0);
					}
				} else if (if_block0) {
					group_outros();

					transition_out(if_block0, 1, 1, () => {
						if_block0 = null;
					});

					check_outros();
				}

				if (/*textarea*/ ctx[14] || /*variant*/ ctx[15] === 'outlined') {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty[0] & /*textarea, variant*/ 49152) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block_6$1(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(label_1, t1);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}

				const contextfragment0_changes = {};

				if (dirty[2] & /*$$scope*/ 33554432) {
					contextfragment0_changes.$$scope = { dirty, ctx };
				}

				contextfragment0.$set(contextfragment0_changes);

				if (default_slot) {
					if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[87], dirty, null),
							null
						);
					}
				}

				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type_1(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block2 = if_blocks[current_block_type_index];

					if (!if_block2) {
						if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block2.c();
					} else {
						if_block2.p(ctx, dirty);
					}

					transition_in(if_block2, 1);
					if_block2.m(label_1, t4);
				}

				const contextfragment1_changes = {};

				if (dirty[2] & /*$$scope*/ 33554432) {
					contextfragment1_changes.$$scope = { dirty, ctx };
				}

				contextfragment1.$set(contextfragment1_changes);

				if (!/*textarea*/ ctx[14] && /*variant*/ ctx[15] !== 'outlined' && /*ripple*/ ctx[11]) {
					if (if_block3) {
						if_block3.p(ctx, dirty);

						if (dirty[0] & /*textarea, variant, ripple*/ 51200) {
							transition_in(if_block3, 1);
						}
					} else {
						if_block3 = create_if_block_2$1(ctx);
						if_block3.c();
						transition_in(if_block3, 1);
						if_block3.m(label_1, null);
					}
				} else if (if_block3) {
					group_outros();

					transition_out(if_block3, 1, 1, () => {
						if_block3 = null;
					});

					check_outros();
				}

				set_attributes(label_1, label_data = get_spread_update(label_1_levels, [
					(!current || dirty[0] & /*className, disabled, textarea, variant, noLabel, label, focused, value, withLeadingIcon, withTrailingIcon, invalid, internalClasses*/ 314823171 | dirty[1] & /*$$slots*/ 65536 && label_1_class_value !== (label_1_class_value = classMap({
						[/*className*/ ctx[9]]: true,
						'mdc-text-field': true,
						'mdc-text-field--disabled': /*disabled*/ ctx[12],
						'mdc-text-field--textarea': /*textarea*/ ctx[14],
						'mdc-text-field--filled': /*variant*/ ctx[15] === 'filled',
						'mdc-text-field--outlined': /*variant*/ ctx[15] === 'outlined',
						'smui-text-field--standard': /*variant*/ ctx[15] === 'standard' && !/*textarea*/ ctx[14],
						'mdc-text-field--no-label': /*noLabel*/ ctx[16] || /*label*/ ctx[17] == null && !/*$$slots*/ ctx[47].label,
						'mdc-text-field--label-floating': /*focused*/ ctx[28] || /*value*/ ctx[0] != null && /*value*/ ctx[0] !== '',
						'mdc-text-field--with-leading-icon': /*isUninitializedValue*/ ctx[35](/*withLeadingIcon*/ ctx[22])
						? /*$$slots*/ ctx[47].leadingIcon
						: /*withLeadingIcon*/ ctx[22],
						'mdc-text-field--with-trailing-icon': /*isUninitializedValue*/ ctx[35](/*withTrailingIcon*/ ctx[23])
						? /*$$slots*/ ctx[47].trailingIcon
						: /*withTrailingIcon*/ ctx[23],
						'mdc-text-field--with-internal-counter': /*textarea*/ ctx[14] && /*$$slots*/ ctx[47].internalCounter,
						'mdc-text-field--invalid': /*invalid*/ ctx[1],
						.../*internalClasses*/ ctx[25]
					}))) && { class: label_1_class_value },
					(!current || dirty[0] & /*internalStyles, style*/ 67109888 && label_1_style_value !== (label_1_style_value = Object.entries(/*internalStyles*/ ctx[26]).map(func$1).concat([/*style*/ ctx[10]]).join(' '))) && { style: label_1_style_value },
					{
						for: /* suppress a11y warning, since this is wrapped */ undefined
					},
					dirty[1] & /*$$restProps*/ 32768 && exclude(/*$$restProps*/ ctx[46], ['input$', 'label$', 'ripple$', 'outline$', 'helperLine$'])
				]));

				if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*textarea, variant*/ 49152 | dirty[1] & /*inputElement*/ 4) Ripple_action.update.call(null, {
					ripple: !/*textarea*/ ctx[14] && /*variant*/ ctx[15] === 'filled',
					unbounded: false,
					addClass: /*addClass*/ ctx[43],
					removeClass: /*removeClass*/ ctx[44],
					addStyle: /*addStyle*/ ctx[45],
					eventTarget: /*inputElement*/ ctx[33],
					activeTarget: /*inputElement*/ ctx[33],
					initPromise: /*initPromise*/ ctx[37]
				});

				if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/ 256) useActions_action.update.call(null, /*use*/ ctx[8]);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block0);
				transition_in(if_block1);
				transition_in(contextfragment0.$$.fragment, local);
				transition_in(default_slot, local);
				transition_in(if_block2);
				transition_in(contextfragment1.$$.fragment, local);
				transition_in(if_block3);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block0);
				transition_out(if_block1);
				transition_out(contextfragment0.$$.fragment, local);
				transition_out(default_slot, local);
				transition_out(if_block2);
				transition_out(contextfragment1.$$.fragment, local);
				transition_out(if_block3);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(label_1);
				}

				if (if_block0) if_block0.d();
				if (if_block1) if_block1.d();
				destroy_component(contextfragment0);
				if (default_slot) default_slot.d(detaching);
				if_blocks[current_block_type_index].d();
				destroy_component(contextfragment1);
				if (if_block3) if_block3.d();
				/*label_1_binding*/ ctx[78](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$2.name,
			type: "if",
			source: "(1:0) {#if valued}",
			ctx
		});

		return block;
	}

	// (210:4) <ContextFragment key="SMUI:textfield:icon:leading" value={true}>
	function create_default_slot_9$1(ctx) {
		let current;
		const leadingIcon_slot_template = /*#slots*/ ctx[56].leadingIcon;
		const leadingIcon_slot = create_slot(leadingIcon_slot_template, ctx, /*$$scope*/ ctx[87], get_leadingIcon_slot_context_1);

		const block = {
			c: function create() {
				if (leadingIcon_slot) leadingIcon_slot.c();
			},
			m: function mount(target, anchor) {
				if (leadingIcon_slot) {
					leadingIcon_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (leadingIcon_slot) {
					if (leadingIcon_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							leadingIcon_slot,
							leadingIcon_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(leadingIcon_slot_template, /*$$scope*/ ctx[87], dirty, get_leadingIcon_slot_changes_1),
							get_leadingIcon_slot_context_1
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(leadingIcon_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(leadingIcon_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (leadingIcon_slot) leadingIcon_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_9$1.name,
			type: "slot",
			source: "(210:4) <ContextFragment key=\\\"SMUI:textfield:icon:leading\\\" value={true}>",
			ctx
		});

		return block;
	}

	// (214:4) <ContextFragment key="SMUI:textfield:icon:leading" value={false}>
	function create_default_slot_8$1(ctx) {
		let current;
		const trailingIcon_slot_template = /*#slots*/ ctx[56].trailingIcon;
		const trailingIcon_slot = create_slot(trailingIcon_slot_template, ctx, /*$$scope*/ ctx[87], get_trailingIcon_slot_context_1);

		const block = {
			c: function create() {
				if (trailingIcon_slot) trailingIcon_slot.c();
			},
			m: function mount(target, anchor) {
				if (trailingIcon_slot) {
					trailingIcon_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (trailingIcon_slot) {
					if (trailingIcon_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							trailingIcon_slot,
							trailingIcon_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(trailingIcon_slot_template, /*$$scope*/ ctx[87], dirty, get_trailingIcon_slot_changes_1),
							get_trailingIcon_slot_context_1
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(trailingIcon_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(trailingIcon_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (trailingIcon_slot) trailingIcon_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_8$1.name,
			type: "slot",
			source: "(214:4) <ContextFragment key=\\\"SMUI:textfield:icon:leading\\\" value={false}>",
			ctx
		});

		return block;
	}

	// (60:4) {#if !textarea && variant !== 'outlined'}
	function create_if_block_8$1(ctx) {
		let t;
		let if_block1_anchor;
		let current;
		let if_block0 = /*variant*/ ctx[15] === 'filled' && create_if_block_10(ctx);
		let if_block1 = !/*noLabel*/ ctx[16] && (/*label*/ ctx[17] != null || /*$$slots*/ ctx[47].label) && create_if_block_9(ctx);

		const block = {
			c: function create() {
				if (if_block0) if_block0.c();
				t = space();
				if (if_block1) if_block1.c();
				if_block1_anchor = empty();
			},
			m: function mount(target, anchor) {
				if (if_block0) if_block0.m(target, anchor);
				insert_dev(target, t, anchor);
				if (if_block1) if_block1.m(target, anchor);
				insert_dev(target, if_block1_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (/*variant*/ ctx[15] === 'filled') {
					if (if_block0) ; else {
						if_block0 = create_if_block_10(ctx);
						if_block0.c();
						if_block0.m(t.parentNode, t);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (!/*noLabel*/ ctx[16] && (/*label*/ ctx[17] != null || /*$$slots*/ ctx[47].label)) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty[0] & /*noLabel, label*/ 196608 | dirty[1] & /*$$slots*/ 65536) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block_9(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block1);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block1);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
					detach_dev(if_block1_anchor);
				}

				if (if_block0) if_block0.d(detaching);
				if (if_block1) if_block1.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_8$1.name,
			type: "if",
			source: "(60:4) {#if !textarea && variant !== 'outlined'}",
			ctx
		});

		return block;
	}

	// (61:6) {#if variant === 'filled'}
	function create_if_block_10(ctx) {
		let span;

		const block = {
			c: function create() {
				span = element("span");
				attr_dev(span, "class", "mdc-text-field__ripple");
				add_location(span, file$2, 61, 8, 2179);
			},
			m: function mount(target, anchor) {
				insert_dev(target, span, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(span);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_10.name,
			type: "if",
			source: "(61:6) {#if variant === 'filled'}",
			ctx
		});

		return block;
	}

	// (64:6) {#if !noLabel && (label != null || $$slots.label)}
	function create_if_block_9(ctx) {
		let floatinglabel;
		let current;

		const floatinglabel_spread_levels = [
			{
				floatAbove: /*focused*/ ctx[28] || /*value*/ ctx[0] != null && /*value*/ ctx[0] !== '' && (typeof /*value*/ ctx[0] !== 'number' || !isNaN(/*value*/ ctx[0]))
			},
			{ required: /*required*/ ctx[13] },
			{ wrapped: true },
			prefixFilter(/*$$restProps*/ ctx[46], 'label$')
		];

		let floatinglabel_props = {
			$$slots: { default: [create_default_slot_7$1] },
			$$scope: { ctx }
		};

		for (let i = 0; i < floatinglabel_spread_levels.length; i += 1) {
			floatinglabel_props = assign(floatinglabel_props, floatinglabel_spread_levels[i]);
		}

		floatinglabel = new FloatingLabel({
				props: floatinglabel_props,
				$$inline: true
			});

		/*floatinglabel_binding*/ ctx[57](floatinglabel);

		const block = {
			c: function create() {
				create_component(floatinglabel.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(floatinglabel, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const floatinglabel_changes = (dirty[0] & /*focused, value, required*/ 268443649 | dirty[1] & /*$$restProps*/ 32768)
				? get_spread_update(floatinglabel_spread_levels, [
						dirty[0] & /*focused, value*/ 268435457 && {
							floatAbove: /*focused*/ ctx[28] || /*value*/ ctx[0] != null && /*value*/ ctx[0] !== '' && (typeof /*value*/ ctx[0] !== 'number' || !isNaN(/*value*/ ctx[0]))
						},
						dirty[0] & /*required*/ 8192 && { required: /*required*/ ctx[13] },
						floatinglabel_spread_levels[2],
						dirty[1] & /*$$restProps*/ 32768 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[46], 'label$'))
					])
				: {};

				if (dirty[0] & /*label*/ 131072 | dirty[2] & /*$$scope*/ 33554432) {
					floatinglabel_changes.$$scope = { dirty, ctx };
				}

				floatinglabel.$set(floatinglabel_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(floatinglabel.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(floatinglabel.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				/*floatinglabel_binding*/ ctx[57](null);
				destroy_component(floatinglabel, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_9.name,
			type: "if",
			source: "(64:6) {#if !noLabel && (label != null || $$slots.label)}",
			ctx
		});

		return block;
	}

	// (65:8) <FloatingLabel           bind:this={floatingLabel}           floatAbove={focused ||             (value != null &&               value !== '' &&               (typeof value !== 'number' || !isNaN(value)))}           {required}           wrapped           {...prefixFilter($$restProps, 'label$')}           >
	function create_default_slot_7$1(ctx) {
		let t_value = (/*label*/ ctx[17] == null ? '' : /*label*/ ctx[17]) + "";
		let t;
		let current;
		const label_slot_template = /*#slots*/ ctx[56].label;
		const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[87], get_label_slot_context);

		const block = {
			c: function create() {
				t = text$2(t_value);
				if (label_slot) label_slot.c();
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);

				if (label_slot) {
					label_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if ((!current || dirty[0] & /*label*/ 131072) && t_value !== (t_value = (/*label*/ ctx[17] == null ? '' : /*label*/ ctx[17]) + "")) set_data_dev(t, t_value);

				if (label_slot) {
					if (label_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							label_slot,
							label_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(label_slot_template, /*$$scope*/ ctx[87], dirty, get_label_slot_changes),
							get_label_slot_context
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(label_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(label_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				if (label_slot) label_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_7$1.name,
			type: "slot",
			source: "(65:8) <FloatingLabel           bind:this={floatingLabel}           floatAbove={focused ||             (value != null &&               value !== '' &&               (typeof value !== 'number' || !isNaN(value)))}           {required}           wrapped           {...prefixFilter($$restProps, 'label$')}           >",
			ctx
		});

		return block;
	}

	// (78:4) {#if textarea || variant === 'outlined'}
	function create_if_block_6$1(ctx) {
		let notchedoutline;
		let current;

		const notchedoutline_spread_levels = [
			{
				noLabel: /*noLabel*/ ctx[16] || /*label*/ ctx[17] == null && !/*$$slots*/ ctx[47].label
			},
			prefixFilter(/*$$restProps*/ ctx[46], 'outline$')
		];

		let notchedoutline_props = {
			$$slots: { default: [create_default_slot_5$1] },
			$$scope: { ctx }
		};

		for (let i = 0; i < notchedoutline_spread_levels.length; i += 1) {
			notchedoutline_props = assign(notchedoutline_props, notchedoutline_spread_levels[i]);
		}

		notchedoutline = new NotchedOutline({
				props: notchedoutline_props,
				$$inline: true
			});

		/*notchedoutline_binding*/ ctx[59](notchedoutline);

		const block = {
			c: function create() {
				create_component(notchedoutline.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(notchedoutline, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const notchedoutline_changes = (dirty[0] & /*noLabel, label*/ 196608 | dirty[1] & /*$$slots, $$restProps*/ 98304)
				? get_spread_update(notchedoutline_spread_levels, [
						dirty[0] & /*noLabel, label*/ 196608 | dirty[1] & /*$$slots*/ 65536 && {
							noLabel: /*noLabel*/ ctx[16] || /*label*/ ctx[17] == null && !/*$$slots*/ ctx[47].label
						},
						dirty[1] & /*$$restProps*/ 32768 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[46], 'outline$'))
					])
				: {};

				if (dirty[0] & /*focused, value, required, floatingLabel, label, noLabel*/ 268640289 | dirty[1] & /*$$restProps, $$slots*/ 98304 | dirty[2] & /*$$scope*/ 33554432) {
					notchedoutline_changes.$$scope = { dirty, ctx };
				}

				notchedoutline.$set(notchedoutline_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(notchedoutline.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(notchedoutline.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				/*notchedoutline_binding*/ ctx[59](null);
				destroy_component(notchedoutline, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_6$1.name,
			type: "if",
			source: "(78:4) {#if textarea || variant === 'outlined'}",
			ctx
		});

		return block;
	}

	// (84:8) {#if !noLabel && (label != null || $$slots.label)}
	function create_if_block_7$1(ctx) {
		let floatinglabel;
		let current;

		const floatinglabel_spread_levels = [
			{
				floatAbove: /*focused*/ ctx[28] || /*value*/ ctx[0] != null && /*value*/ ctx[0] !== '' && (typeof /*value*/ ctx[0] !== 'number' || !isNaN(/*value*/ ctx[0]))
			},
			{ required: /*required*/ ctx[13] },
			{ wrapped: true },
			prefixFilter(/*$$restProps*/ ctx[46], 'label$')
		];

		let floatinglabel_props = {
			$$slots: { default: [create_default_slot_6$1] },
			$$scope: { ctx }
		};

		for (let i = 0; i < floatinglabel_spread_levels.length; i += 1) {
			floatinglabel_props = assign(floatinglabel_props, floatinglabel_spread_levels[i]);
		}

		floatinglabel = new FloatingLabel({
				props: floatinglabel_props,
				$$inline: true
			});

		/*floatinglabel_binding_1*/ ctx[58](floatinglabel);

		const block = {
			c: function create() {
				create_component(floatinglabel.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(floatinglabel, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const floatinglabel_changes = (dirty[0] & /*focused, value, required*/ 268443649 | dirty[1] & /*$$restProps*/ 32768)
				? get_spread_update(floatinglabel_spread_levels, [
						dirty[0] & /*focused, value*/ 268435457 && {
							floatAbove: /*focused*/ ctx[28] || /*value*/ ctx[0] != null && /*value*/ ctx[0] !== '' && (typeof /*value*/ ctx[0] !== 'number' || !isNaN(/*value*/ ctx[0]))
						},
						dirty[0] & /*required*/ 8192 && { required: /*required*/ ctx[13] },
						floatinglabel_spread_levels[2],
						dirty[1] & /*$$restProps*/ 32768 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[46], 'label$'))
					])
				: {};

				if (dirty[0] & /*label*/ 131072 | dirty[2] & /*$$scope*/ 33554432) {
					floatinglabel_changes.$$scope = { dirty, ctx };
				}

				floatinglabel.$set(floatinglabel_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(floatinglabel.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(floatinglabel.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				/*floatinglabel_binding_1*/ ctx[58](null);
				destroy_component(floatinglabel, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_7$1.name,
			type: "if",
			source: "(84:8) {#if !noLabel && (label != null || $$slots.label)}",
			ctx
		});

		return block;
	}

	// (85:10) <FloatingLabel             bind:this={floatingLabel}             floatAbove={focused ||               (value != null &&                 value !== '' &&                 (typeof value !== 'number' || !isNaN(value)))}             {required}             wrapped             {...prefixFilter($$restProps, 'label$')}             >
	function create_default_slot_6$1(ctx) {
		let t_value = (/*label*/ ctx[17] == null ? '' : /*label*/ ctx[17]) + "";
		let t;
		let current;
		const label_slot_template = /*#slots*/ ctx[56].label;
		const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[87], get_label_slot_context_1);

		const block = {
			c: function create() {
				t = text$2(t_value);
				if (label_slot) label_slot.c();
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);

				if (label_slot) {
					label_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if ((!current || dirty[0] & /*label*/ 131072) && t_value !== (t_value = (/*label*/ ctx[17] == null ? '' : /*label*/ ctx[17]) + "")) set_data_dev(t, t_value);

				if (label_slot) {
					if (label_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							label_slot,
							label_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(label_slot_template, /*$$scope*/ ctx[87], dirty, get_label_slot_changes_1),
							get_label_slot_context_1
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(label_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(label_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				if (label_slot) label_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_6$1.name,
			type: "slot",
			source: "(85:10) <FloatingLabel             bind:this={floatingLabel}             floatAbove={focused ||               (value != null &&                 value !== '' &&                 (typeof value !== 'number' || !isNaN(value)))}             {required}             wrapped             {...prefixFilter($$restProps, 'label$')}             >",
			ctx
		});

		return block;
	}

	// (79:6) <NotchedOutline         bind:this={notchedOutline}         noLabel={noLabel || (label == null && !$$slots.label)}         {...prefixFilter($$restProps, 'outline$')}       >
	function create_default_slot_5$1(ctx) {
		let if_block_anchor;
		let current;
		let if_block = !/*noLabel*/ ctx[16] && (/*label*/ ctx[17] != null || /*$$slots*/ ctx[47].label) && create_if_block_7$1(ctx);

		const block = {
			c: function create() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			m: function mount(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (!/*noLabel*/ ctx[16] && (/*label*/ ctx[17] != null || /*$$slots*/ ctx[47].label)) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty[0] & /*noLabel, label*/ 196608 | dirty[1] & /*$$slots*/ 65536) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block_7$1(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if (if_block) if_block.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_5$1.name,
			type: "slot",
			source: "(79:6) <NotchedOutline         bind:this={notchedOutline}         noLabel={noLabel || (label == null && !$$slots.label)}         {...prefixFilter($$restProps, 'outline$')}       >",
			ctx
		});

		return block;
	}

	// (99:4) <ContextFragment key="SMUI:textfield:icon:leading" value={true}>
	function create_default_slot_4$1(ctx) {
		let current;
		const leadingIcon_slot_template = /*#slots*/ ctx[56].leadingIcon;
		const leadingIcon_slot = create_slot(leadingIcon_slot_template, ctx, /*$$scope*/ ctx[87], get_leadingIcon_slot_context);

		const block = {
			c: function create() {
				if (leadingIcon_slot) leadingIcon_slot.c();
			},
			m: function mount(target, anchor) {
				if (leadingIcon_slot) {
					leadingIcon_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (leadingIcon_slot) {
					if (leadingIcon_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							leadingIcon_slot,
							leadingIcon_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(leadingIcon_slot_template, /*$$scope*/ ctx[87], dirty, get_leadingIcon_slot_changes),
							get_leadingIcon_slot_context
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(leadingIcon_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(leadingIcon_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (leadingIcon_slot) leadingIcon_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_4$1.name,
			type: "slot",
			source: "(99:4) <ContextFragment key=\\\"SMUI:textfield:icon:leading\\\" value={true}>",
			ctx
		});

		return block;
	}

	// (128:4) {:else}
	function create_else_block$1(ctx) {
		let t0;
		let t1;
		let input_1;
		let updating_value;
		let updating_files;
		let updating_dirty;
		let updating_invalid;
		let t2;
		let t3;
		let current;
		const prefix_slot_template = /*#slots*/ ctx[56].prefix;
		const prefix_slot = create_slot(prefix_slot_template, ctx, /*$$scope*/ ctx[87], get_prefix_slot_context);
		let if_block0 = /*prefix*/ ctx[20] != null && create_if_block_5$1(ctx);

		const input_1_spread_levels = [
			{ type: /*type*/ ctx[18] },
			{ disabled: /*disabled*/ ctx[12] },
			{ required: /*required*/ ctx[13] },
			{ updateInvalid: /*updateInvalid*/ ctx[19] },
			{ "aria-controls": /*helperId*/ ctx[27] },
			{ "aria-describedby": /*helperId*/ ctx[27] },
			/*noLabel*/ ctx[16] && /*label*/ ctx[17] != null
			? { placeholder: /*label*/ ctx[17] }
			: {},
			prefixFilter(/*$$restProps*/ ctx[46], 'input$')
		];

		function input_1_value_binding(value) {
			/*input_1_value_binding*/ ctx[69](value);
		}

		function input_1_files_binding(value) {
			/*input_1_files_binding*/ ctx[70](value);
		}

		function input_1_dirty_binding(value) {
			/*input_1_dirty_binding*/ ctx[71](value);
		}

		function input_1_invalid_binding(value) {
			/*input_1_invalid_binding*/ ctx[72](value);
		}

		let input_1_props = {};

		for (let i = 0; i < input_1_spread_levels.length; i += 1) {
			input_1_props = assign(input_1_props, input_1_spread_levels[i]);
		}

		if (/*value*/ ctx[0] !== void 0) {
			input_1_props.value = /*value*/ ctx[0];
		}

		if (/*files*/ ctx[3] !== void 0) {
			input_1_props.files = /*files*/ ctx[3];
		}

		if (/*dirty*/ ctx[4] !== void 0) {
			input_1_props.dirty = /*dirty*/ ctx[4];
		}

		if (/*invalid*/ ctx[1] !== void 0) {
			input_1_props.invalid = /*invalid*/ ctx[1];
		}

		input_1 = new Input({ props: input_1_props, $$inline: true });
		/*input_1_binding*/ ctx[68](input_1);
		binding_callbacks.push(() => bind(input_1, 'value', input_1_value_binding));
		binding_callbacks.push(() => bind(input_1, 'files', input_1_files_binding));
		binding_callbacks.push(() => bind(input_1, 'dirty', input_1_dirty_binding));
		binding_callbacks.push(() => bind(input_1, 'invalid', input_1_invalid_binding));
		input_1.$on("blur", /*blur_handler_2*/ ctx[73]);
		input_1.$on("focus", /*focus_handler_2*/ ctx[74]);
		input_1.$on("blur", /*blur_handler_3*/ ctx[75]);
		input_1.$on("focus", /*focus_handler_3*/ ctx[76]);
		let if_block1 = /*suffix*/ ctx[21] != null && create_if_block_4$1(ctx);
		const suffix_slot_template = /*#slots*/ ctx[56].suffix;
		const suffix_slot = create_slot(suffix_slot_template, ctx, /*$$scope*/ ctx[87], get_suffix_slot_context);

		const block = {
			c: function create() {
				if (prefix_slot) prefix_slot.c();
				t0 = space();
				if (if_block0) if_block0.c();
				t1 = space();
				create_component(input_1.$$.fragment);
				t2 = space();
				if (if_block1) if_block1.c();
				t3 = space();
				if (suffix_slot) suffix_slot.c();
			},
			m: function mount(target, anchor) {
				if (prefix_slot) {
					prefix_slot.m(target, anchor);
				}

				insert_dev(target, t0, anchor);
				if (if_block0) if_block0.m(target, anchor);
				insert_dev(target, t1, anchor);
				mount_component(input_1, target, anchor);
				insert_dev(target, t2, anchor);
				if (if_block1) if_block1.m(target, anchor);
				insert_dev(target, t3, anchor);

				if (suffix_slot) {
					suffix_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (prefix_slot) {
					if (prefix_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							prefix_slot,
							prefix_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(prefix_slot_template, /*$$scope*/ ctx[87], dirty, get_prefix_slot_changes),
							get_prefix_slot_context
						);
					}
				}

				if (/*prefix*/ ctx[20] != null) {
					if (if_block0) {
						if_block0.p(ctx, dirty);

						if (dirty[0] & /*prefix*/ 1048576) {
							transition_in(if_block0, 1);
						}
					} else {
						if_block0 = create_if_block_5$1(ctx);
						if_block0.c();
						transition_in(if_block0, 1);
						if_block0.m(t1.parentNode, t1);
					}
				} else if (if_block0) {
					group_outros();

					transition_out(if_block0, 1, 1, () => {
						if_block0 = null;
					});

					check_outros();
				}

				const input_1_changes = (dirty[0] & /*type, disabled, required, updateInvalid, helperId, noLabel, label*/ 135213056 | dirty[1] & /*$$restProps*/ 32768)
				? get_spread_update(input_1_spread_levels, [
						dirty[0] & /*type*/ 262144 && { type: /*type*/ ctx[18] },
						dirty[0] & /*disabled*/ 4096 && { disabled: /*disabled*/ ctx[12] },
						dirty[0] & /*required*/ 8192 && { required: /*required*/ ctx[13] },
						dirty[0] & /*updateInvalid*/ 524288 && { updateInvalid: /*updateInvalid*/ ctx[19] },
						dirty[0] & /*helperId*/ 134217728 && { "aria-controls": /*helperId*/ ctx[27] },
						dirty[0] & /*helperId*/ 134217728 && { "aria-describedby": /*helperId*/ ctx[27] },
						dirty[0] & /*noLabel, label*/ 196608 && get_spread_object(/*noLabel*/ ctx[16] && /*label*/ ctx[17] != null
						? { placeholder: /*label*/ ctx[17] }
						: {}),
						dirty[1] & /*$$restProps*/ 32768 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[46], 'input$'))
					])
				: {};

				if (!updating_value && dirty[0] & /*value*/ 1) {
					updating_value = true;
					input_1_changes.value = /*value*/ ctx[0];
					add_flush_callback(() => updating_value = false);
				}

				if (!updating_files && dirty[0] & /*files*/ 8) {
					updating_files = true;
					input_1_changes.files = /*files*/ ctx[3];
					add_flush_callback(() => updating_files = false);
				}

				if (!updating_dirty && dirty[0] & /*dirty*/ 16) {
					updating_dirty = true;
					input_1_changes.dirty = /*dirty*/ ctx[4];
					add_flush_callback(() => updating_dirty = false);
				}

				if (!updating_invalid && dirty[0] & /*invalid*/ 2) {
					updating_invalid = true;
					input_1_changes.invalid = /*invalid*/ ctx[1];
					add_flush_callback(() => updating_invalid = false);
				}

				input_1.$set(input_1_changes);

				if (/*suffix*/ ctx[21] != null) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty[0] & /*suffix*/ 2097152) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block_4$1(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(t3.parentNode, t3);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}

				if (suffix_slot) {
					if (suffix_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							suffix_slot,
							suffix_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(suffix_slot_template, /*$$scope*/ ctx[87], dirty, get_suffix_slot_changes),
							get_suffix_slot_context
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(prefix_slot, local);
				transition_in(if_block0);
				transition_in(input_1.$$.fragment, local);
				transition_in(if_block1);
				transition_in(suffix_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(prefix_slot, local);
				transition_out(if_block0);
				transition_out(input_1.$$.fragment, local);
				transition_out(if_block1);
				transition_out(suffix_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
					detach_dev(t2);
					detach_dev(t3);
				}

				if (prefix_slot) prefix_slot.d(detaching);
				if (if_block0) if_block0.d(detaching);
				/*input_1_binding*/ ctx[68](null);
				destroy_component(input_1, detaching);
				if (if_block1) if_block1.d(detaching);
				if (suffix_slot) suffix_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$1.name,
			type: "else",
			source: "(128:4) {:else}",
			ctx
		});

		return block;
	}

	// (103:4) {#if textarea && typeof value === 'string'}
	function create_if_block_3$1(ctx) {
		let span;
		let textarea_1;
		let updating_value;
		let updating_dirty;
		let updating_invalid;
		let t;
		let span_class_value;
		let current;

		const textarea_1_spread_levels = [
			{ disabled: /*disabled*/ ctx[12] },
			{ required: /*required*/ ctx[13] },
			{ updateInvalid: /*updateInvalid*/ ctx[19] },
			{ "aria-controls": /*helperId*/ ctx[27] },
			{ "aria-describedby": /*helperId*/ ctx[27] },
			prefixFilter(/*$$restProps*/ ctx[46], 'input$')
		];

		function textarea_1_value_binding(value) {
			/*textarea_1_value_binding*/ ctx[61](value);
		}

		function textarea_1_dirty_binding(value) {
			/*textarea_1_dirty_binding*/ ctx[62](value);
		}

		function textarea_1_invalid_binding(value) {
			/*textarea_1_invalid_binding*/ ctx[63](value);
		}

		let textarea_1_props = {};

		for (let i = 0; i < textarea_1_spread_levels.length; i += 1) {
			textarea_1_props = assign(textarea_1_props, textarea_1_spread_levels[i]);
		}

		if (/*value*/ ctx[0] !== void 0) {
			textarea_1_props.value = /*value*/ ctx[0];
		}

		if (/*dirty*/ ctx[4] !== void 0) {
			textarea_1_props.dirty = /*dirty*/ ctx[4];
		}

		if (/*invalid*/ ctx[1] !== void 0) {
			textarea_1_props.invalid = /*invalid*/ ctx[1];
		}

		textarea_1 = new Textarea({ props: textarea_1_props, $$inline: true });
		/*textarea_1_binding*/ ctx[60](textarea_1);
		binding_callbacks.push(() => bind(textarea_1, 'value', textarea_1_value_binding));
		binding_callbacks.push(() => bind(textarea_1, 'dirty', textarea_1_dirty_binding));
		binding_callbacks.push(() => bind(textarea_1, 'invalid', textarea_1_invalid_binding));
		textarea_1.$on("blur", /*blur_handler*/ ctx[64]);
		textarea_1.$on("focus", /*focus_handler*/ ctx[65]);
		textarea_1.$on("blur", /*blur_handler_1*/ ctx[66]);
		textarea_1.$on("focus", /*focus_handler_1*/ ctx[67]);
		const internalCounter_slot_template = /*#slots*/ ctx[56].internalCounter;
		const internalCounter_slot = create_slot(internalCounter_slot_template, ctx, /*$$scope*/ ctx[87], get_internalCounter_slot_context);

		const block = {
			c: function create() {
				span = element("span");
				create_component(textarea_1.$$.fragment);
				t = space();
				if (internalCounter_slot) internalCounter_slot.c();

				attr_dev(span, "class", span_class_value = classMap({
					'mdc-text-field__resizer': !('input$resizable' in /*$$restProps*/ ctx[46]) || /*$$restProps*/ ctx[46].input$resizable
				}));

				add_location(span, file$2, 103, 6, 3634);
			},
			m: function mount(target, anchor) {
				insert_dev(target, span, anchor);
				mount_component(textarea_1, span, null);
				append_dev(span, t);

				if (internalCounter_slot) {
					internalCounter_slot.m(span, null);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				const textarea_1_changes = (dirty[0] & /*disabled, required, updateInvalid, helperId*/ 134754304 | dirty[1] & /*$$restProps*/ 32768)
				? get_spread_update(textarea_1_spread_levels, [
						dirty[0] & /*disabled*/ 4096 && { disabled: /*disabled*/ ctx[12] },
						dirty[0] & /*required*/ 8192 && { required: /*required*/ ctx[13] },
						dirty[0] & /*updateInvalid*/ 524288 && { updateInvalid: /*updateInvalid*/ ctx[19] },
						dirty[0] & /*helperId*/ 134217728 && { "aria-controls": /*helperId*/ ctx[27] },
						dirty[0] & /*helperId*/ 134217728 && { "aria-describedby": /*helperId*/ ctx[27] },
						dirty[1] & /*$$restProps*/ 32768 && get_spread_object(prefixFilter(/*$$restProps*/ ctx[46], 'input$'))
					])
				: {};

				if (!updating_value && dirty[0] & /*value*/ 1) {
					updating_value = true;
					textarea_1_changes.value = /*value*/ ctx[0];
					add_flush_callback(() => updating_value = false);
				}

				if (!updating_dirty && dirty[0] & /*dirty*/ 16) {
					updating_dirty = true;
					textarea_1_changes.dirty = /*dirty*/ ctx[4];
					add_flush_callback(() => updating_dirty = false);
				}

				if (!updating_invalid && dirty[0] & /*invalid*/ 2) {
					updating_invalid = true;
					textarea_1_changes.invalid = /*invalid*/ ctx[1];
					add_flush_callback(() => updating_invalid = false);
				}

				textarea_1.$set(textarea_1_changes);

				if (internalCounter_slot) {
					if (internalCounter_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							internalCounter_slot,
							internalCounter_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(internalCounter_slot_template, /*$$scope*/ ctx[87], dirty, get_internalCounter_slot_changes),
							get_internalCounter_slot_context
						);
					}
				}

				if (!current || dirty[1] & /*$$restProps*/ 32768 && span_class_value !== (span_class_value = classMap({
					'mdc-text-field__resizer': !('input$resizable' in /*$$restProps*/ ctx[46]) || /*$$restProps*/ ctx[46].input$resizable
				}))) {
					attr_dev(span, "class", span_class_value);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(textarea_1.$$.fragment, local);
				transition_in(internalCounter_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(textarea_1.$$.fragment, local);
				transition_out(internalCounter_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(span);
				}

				/*textarea_1_binding*/ ctx[60](null);
				destroy_component(textarea_1);
				if (internalCounter_slot) internalCounter_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_3$1.name,
			type: "if",
			source: "(103:4) {#if textarea && typeof value === 'string'}",
			ctx
		});

		return block;
	}

	// (130:6) {#if prefix != null}
	function create_if_block_5$1(ctx) {
		let prefix_1;
		let current;

		prefix_1 = new Prefix({
				props: {
					$$slots: { default: [create_default_slot_3$1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(prefix_1.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(prefix_1, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const prefix_1_changes = {};

				if (dirty[0] & /*prefix*/ 1048576 | dirty[2] & /*$$scope*/ 33554432) {
					prefix_1_changes.$$scope = { dirty, ctx };
				}

				prefix_1.$set(prefix_1_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(prefix_1.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(prefix_1.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(prefix_1, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_5$1.name,
			type: "if",
			source: "(130:6) {#if prefix != null}",
			ctx
		});

		return block;
	}

	// (131:8) <Prefix>
	function create_default_slot_3$1(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2(/*prefix*/ ctx[20]);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*prefix*/ 1048576) set_data_dev(t, /*prefix*/ ctx[20]);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_3$1.name,
			type: "slot",
			source: "(131:8) <Prefix>",
			ctx
		});

		return block;
	}

	// (152:6) {#if suffix != null}
	function create_if_block_4$1(ctx) {
		let suffix_1;
		let current;

		suffix_1 = new Suffix({
				props: {
					$$slots: { default: [create_default_slot_2$1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(suffix_1.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(suffix_1, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const suffix_1_changes = {};

				if (dirty[0] & /*suffix*/ 2097152 | dirty[2] & /*$$scope*/ 33554432) {
					suffix_1_changes.$$scope = { dirty, ctx };
				}

				suffix_1.$set(suffix_1_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(suffix_1.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(suffix_1.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(suffix_1, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_4$1.name,
			type: "if",
			source: "(152:6) {#if suffix != null}",
			ctx
		});

		return block;
	}

	// (153:8) <Suffix>
	function create_default_slot_2$1(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2(/*suffix*/ ctx[21]);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*suffix*/ 2097152) set_data_dev(t, /*suffix*/ ctx[21]);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_2$1.name,
			type: "slot",
			source: "(153:8) <Suffix>",
			ctx
		});

		return block;
	}

	// (157:4) <ContextFragment key="SMUI:textfield:icon:leading" value={false}>
	function create_default_slot_1$1(ctx) {
		let current;
		const trailingIcon_slot_template = /*#slots*/ ctx[56].trailingIcon;
		const trailingIcon_slot = create_slot(trailingIcon_slot_template, ctx, /*$$scope*/ ctx[87], get_trailingIcon_slot_context);

		const block = {
			c: function create() {
				if (trailingIcon_slot) trailingIcon_slot.c();
			},
			m: function mount(target, anchor) {
				if (trailingIcon_slot) {
					trailingIcon_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (trailingIcon_slot) {
					if (trailingIcon_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							trailingIcon_slot,
							trailingIcon_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(trailingIcon_slot_template, /*$$scope*/ ctx[87], dirty, get_trailingIcon_slot_changes),
							get_trailingIcon_slot_context
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(trailingIcon_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(trailingIcon_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (trailingIcon_slot) trailingIcon_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_1$1.name,
			type: "slot",
			source: "(157:4) <ContextFragment key=\\\"SMUI:textfield:icon:leading\\\" value={false}>",
			ctx
		});

		return block;
	}

	// (160:4) {#if !textarea && variant !== 'outlined' && ripple}
	function create_if_block_2$1(ctx) {
		let lineripple;
		let current;
		const lineripple_spread_levels = [prefixFilter(/*$$restProps*/ ctx[46], 'ripple$')];
		let lineripple_props = {};

		for (let i = 0; i < lineripple_spread_levels.length; i += 1) {
			lineripple_props = assign(lineripple_props, lineripple_spread_levels[i]);
		}

		lineripple = new LineRipple({ props: lineripple_props, $$inline: true });
		/*lineripple_binding*/ ctx[77](lineripple);

		const block = {
			c: function create() {
				create_component(lineripple.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(lineripple, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const lineripple_changes = (dirty[1] & /*$$restProps*/ 32768)
				? get_spread_update(lineripple_spread_levels, [get_spread_object(prefixFilter(/*$$restProps*/ ctx[46], 'ripple$'))])
				: {};

				lineripple.$set(lineripple_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(lineripple.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(lineripple.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				/*lineripple_binding*/ ctx[77](null);
				destroy_component(lineripple, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_2$1.name,
			type: "if",
			source: "(160:4) {#if !textarea && variant !== 'outlined' && ripple}",
			ctx
		});

		return block;
	}

	// (220:0) {#if $$slots.helper}
	function create_if_block$2(ctx) {
		let helperline;
		let current;
		const helperline_spread_levels = [prefixFilter(/*$$restProps*/ ctx[46], 'helperLine$')];

		let helperline_props = {
			$$slots: { default: [create_default_slot$2] },
			$$scope: { ctx }
		};

		for (let i = 0; i < helperline_spread_levels.length; i += 1) {
			helperline_props = assign(helperline_props, helperline_spread_levels[i]);
		}

		helperline = new HelperLine({ props: helperline_props, $$inline: true });
		helperline.$on("SMUITextfieldHelperText:id", /*handleHelperTextId*/ ctx[41]);
		helperline.$on("SMUITextfieldHelperText:mount", /*handleHelperTextMount*/ ctx[42]);
		helperline.$on("SMUITextfieldHelperText:unmount", /*SMUITextfieldHelperText_unmount_handler*/ ctx[85]);
		helperline.$on("SMUITextfieldCharacterCounter:mount", /*handleCharacterCounterMount*/ ctx[40]);
		helperline.$on("SMUITextfieldCharacterCounter:unmount", /*SMUITextfieldCharacterCounter_unmount_handler_1*/ ctx[86]);

		const block = {
			c: function create() {
				create_component(helperline.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(helperline, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const helperline_changes = (dirty[1] & /*$$restProps*/ 32768)
				? get_spread_update(helperline_spread_levels, [get_spread_object(prefixFilter(/*$$restProps*/ ctx[46], 'helperLine$'))])
				: {};

				if (dirty[2] & /*$$scope*/ 33554432) {
					helperline_changes.$$scope = { dirty, ctx };
				}

				helperline.$set(helperline_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(helperline.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(helperline.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(helperline, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$2.name,
			type: "if",
			source: "(220:0) {#if $$slots.helper}",
			ctx
		});

		return block;
	}

	// (221:2) <HelperLine     on:SMUITextfieldHelperText:id={handleHelperTextId}     on:SMUITextfieldHelperText:mount={handleHelperTextMount}     on:SMUITextfieldHelperText:unmount={() => {       helperId = undefined;       helperText = undefined;     }}     on:SMUITextfieldCharacterCounter:mount={handleCharacterCounterMount}     on:SMUITextfieldCharacterCounter:unmount={() =>       (characterCounter = undefined)}     {...prefixFilter($$restProps, 'helperLine$')}     >
	function create_default_slot$2(ctx) {
		let current;
		const helper_slot_template = /*#slots*/ ctx[56].helper;
		const helper_slot = create_slot(helper_slot_template, ctx, /*$$scope*/ ctx[87], get_helper_slot_context);

		const block = {
			c: function create() {
				if (helper_slot) helper_slot.c();
			},
			m: function mount(target, anchor) {
				if (helper_slot) {
					helper_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (helper_slot) {
					if (helper_slot.p && (!current || dirty[2] & /*$$scope*/ 33554432)) {
						update_slot_base(
							helper_slot,
							helper_slot_template,
							ctx,
							/*$$scope*/ ctx[87],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[87])
							: get_slot_changes(helper_slot_template, /*$$scope*/ ctx[87], dirty, get_helper_slot_changes),
							get_helper_slot_context
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(helper_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(helper_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (helper_slot) helper_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$2.name,
			type: "slot",
			source: "(221:2) <HelperLine     on:SMUITextfieldHelperText:id={handleHelperTextId}     on:SMUITextfieldHelperText:mount={handleHelperTextMount}     on:SMUITextfieldHelperText:unmount={() => {       helperId = undefined;       helperText = undefined;     }}     on:SMUITextfieldCharacterCounter:mount={handleCharacterCounterMount}     on:SMUITextfieldCharacterCounter:unmount={() =>       (characterCounter = undefined)}     {...prefixFilter($$restProps, 'helperLine$')}     >",
			ctx
		});

		return block;
	}

	function create_fragment$2(ctx) {
		let current_block_type_index;
		let if_block0;
		let t;
		let if_block1_anchor;
		let current;
		const if_block_creators = [create_if_block_1$2, create_else_block_1$1];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*valued*/ ctx[36]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
		let if_block1 = /*$$slots*/ ctx[47].helper && create_if_block$2(ctx);

		const block = {
			c: function create() {
				if_block0.c();
				t = space();
				if (if_block1) if_block1.c();
				if_block1_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error_1$1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, t, anchor);
				if (if_block1) if_block1.m(target, anchor);
				insert_dev(target, if_block1_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if_block0.p(ctx, dirty);

				if (/*$$slots*/ ctx[47].helper) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty[1] & /*$$slots*/ 65536) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block$2(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block0);
				transition_in(if_block1);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block0);
				transition_out(if_block1);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
					detach_dev(if_block1_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
				if (if_block1) if_block1.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$2.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func$1 = ([name, value]) => `${name}: ${value};`;
	const func_1 = ([name, value]) => `${name}: ${value};`;

	function instance_1($$self, $$props, $$invalidate) {
		let inputElement;

		const omit_props_names = [
			"use","class","style","ripple","disabled","required","textarea","variant","noLabel","label","type","value","files","invalid","updateInvalid","dirty","prefix","suffix","validateOnValueChange","useNativeValidation","withLeadingIcon","withTrailingIcon","input","floatingLabel","lineRipple","notchedOutline","focus","blur","layout","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;

		validate_slots('Textfield', slots, [
			'label','leadingIcon','default','internalCounter','prefix','suffix','trailingIcon','ripple','helper'
		]);

		const $$slots = compute_slots(slots);
		const { applyPassive } = events;
		const forwardEvents = forwardEventsBuilder(get_current_component());

		let uninitializedValue = () => {
			
		};

		function isUninitializedValue(value) {
			return value === uninitializedValue;
		}

		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { ripple = true } = $$props;
		let { disabled = false } = $$props;
		let { required = false } = $$props;
		let { textarea = false } = $$props;
		let { variant = textarea ? 'outlined' : 'standard' } = $$props;
		let { noLabel = false } = $$props;
		let { label = undefined } = $$props;
		let { type = 'text' } = $$props;

		let { value = $$restProps.input$emptyValueUndefined
		? undefined
		: uninitializedValue } = $$props;

		let { files = uninitializedValue } = $$props;
		const valued = !isUninitializedValue(value) || !isUninitializedValue(files);

		if (isUninitializedValue(value)) {
			value = undefined;
		}

		if (isUninitializedValue(files)) {
			files = null;
		}

		let { invalid = uninitializedValue } = $$props;
		let { updateInvalid = isUninitializedValue(invalid) } = $$props;

		if (isUninitializedValue(invalid)) {
			invalid = false;
		}

		let { dirty = false } = $$props;
		let { prefix = undefined } = $$props;
		let { suffix = undefined } = $$props;
		let { validateOnValueChange = updateInvalid } = $$props;
		let { useNativeValidation = updateInvalid } = $$props;
		let { withLeadingIcon = uninitializedValue } = $$props;
		let { withTrailingIcon = uninitializedValue } = $$props;
		let { input = undefined } = $$props;
		let { floatingLabel = undefined } = $$props;
		let { lineRipple = undefined } = $$props;
		let { notchedOutline = undefined } = $$props;
		let element;
		let instance;
		let internalClasses = {};
		let internalStyles = {};
		let helperId = undefined;
		let focused = false;
		let addLayoutListener = getContext('SMUI:addLayoutListener');
		let removeLayoutListener;
		let initPromiseResolve;
		let initPromise = new Promise(resolve => initPromiseResolve = resolve);

		// These are instances, not accessors.
		let leadingIcon = undefined;

		let trailingIcon = undefined;
		let helperText = undefined;
		let characterCounter = undefined;

		// React to changes of value from outside component.
		let previousValue = value;

		if (addLayoutListener) {
			removeLayoutListener = addLayoutListener(layout);
		}

		onMount(() => {
			$$invalidate(54, instance = new MDCTextFieldFoundation({
					// getRootAdapterMethods_
					addClass,
					removeClass,
					hasClass,
					registerTextFieldInteractionHandler: (evtType, handler) => getElement().addEventListener(evtType, handler),
					deregisterTextFieldInteractionHandler: (evtType, handler) => getElement().removeEventListener(evtType, handler),
					registerValidationAttributeChangeHandler: handler => {
						const getAttributesList = mutationsList => {
							return mutationsList.map(mutation => mutation.attributeName).filter(attributeName => attributeName);
						};

						const observer = new MutationObserver(mutationsList => {
								if (useNativeValidation) {
									handler(getAttributesList(mutationsList));
								}
							});

						const config = { attributes: true };

						if (input) {
							observer.observe(input.getElement(), config);
						}

						return observer;
					},
					deregisterValidationAttributeChangeHandler: observer => {
						observer.disconnect();
					},
					// getInputAdapterMethods_
					getNativeInput: () => {
						var _a;

						return (_a = input === null || input === void 0
						? void 0
						: input.getElement()) !== null && _a !== void 0
						? _a
						: null;
					},
					setInputAttr: (name, value) => {
						input === null || input === void 0
						? void 0
						: input.addAttr(name, value);
					},
					removeInputAttr: name => {
						input === null || input === void 0
						? void 0
						: input.removeAttr(name);
					},
					isFocused: () => document.activeElement === (input === null || input === void 0
					? void 0
					: input.getElement()),
					registerInputInteractionHandler: (evtType, handler) => {
						input === null || input === void 0
						? void 0
						: input.getElement().addEventListener(evtType, handler, applyPassive());
					},
					deregisterInputInteractionHandler: (evtType, handler) => {
						input === null || input === void 0
						? void 0
						: input.getElement().removeEventListener(evtType, handler, applyPassive());
					},
					// getLabelAdapterMethods_
					floatLabel: shouldFloat => floatingLabel && floatingLabel.float(shouldFloat),
					getLabelWidth: () => floatingLabel ? floatingLabel.getWidth() : 0,
					hasLabel: () => !!floatingLabel,
					shakeLabel: shouldShake => floatingLabel && floatingLabel.shake(shouldShake),
					setLabelRequired: isRequired => floatingLabel && floatingLabel.setRequired(isRequired),
					// getLineRippleAdapterMethods_
					activateLineRipple: () => lineRipple && lineRipple.activate(),
					deactivateLineRipple: () => lineRipple && lineRipple.deactivate(),
					setLineRippleTransformOrigin: normalizedX => lineRipple && lineRipple.setRippleCenter(normalizedX),
					// getOutlineAdapterMethods_
					closeOutline: () => notchedOutline && notchedOutline.closeNotch(),
					hasOutline: () => !!notchedOutline,
					notchOutline: labelWidth => notchedOutline && notchedOutline.notch(labelWidth)
				},
			{
					get helperText() {
						return helperText;
					},
					get characterCounter() {
						return characterCounter;
					},
					get leadingIcon() {
						return leadingIcon;
					},
					get trailingIcon() {
						return trailingIcon;
					}
				}));

			if (valued) {
				if (input == null) {
					throw new Error('SMUI Textfield must be initialized with either a non-undefined initial value or an Input component.');
				}

				instance.init();
			} else {
				tick().then(() => {
					if (input == null) {
						throw new Error('SMUI Textfield must be initialized with either a non-undefined initial value or an Input component.');
					}

					instance.init();
				});
			}

			initPromiseResolve();

			return () => {
				instance.destroy();
			};
		});

		onDestroy(() => {
			if (removeLayoutListener) {
				removeLayoutListener();
			}
		});

		function handleLeadingIconMount(event) {
			$$invalidate(29, leadingIcon = event.detail);
		}

		function handleTrailingIconMount(event) {
			$$invalidate(30, trailingIcon = event.detail);
		}

		function handleCharacterCounterMount(event) {
			$$invalidate(32, characterCounter = event.detail);
		}

		function handleHelperTextId(event) {
			$$invalidate(27, helperId = event.detail);
		}

		function handleHelperTextMount(event) {
			$$invalidate(31, helperText = event.detail);
		}

		function hasClass(className) {
			var _a;

			return className in internalClasses
			? (_a = internalClasses[className]) !== null && _a !== void 0
				? _a
				: null
			: getElement().classList.contains(className);
		}

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(25, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(25, internalClasses[className] = false, internalClasses);
			}
		}

		function addStyle(name, value) {
			if (internalStyles[name] != value) {
				if (value === '' || value == null) {
					delete internalStyles[name];
					$$invalidate(26, internalStyles);
				} else {
					$$invalidate(26, internalStyles[name] = value, internalStyles);
				}
			}
		}

		function focus() {
			input === null || input === void 0
			? void 0
			: input.focus();
		}

		function blur() {
			input === null || input === void 0
			? void 0
			: input.blur();
		}

		function layout() {
			if (instance) {
				const openNotch = instance.shouldFloat;
				instance.notchOutline(openNotch);
			}
		}

		function getElement() {
			return element;
		}

		function floatinglabel_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				floatingLabel = $$value;
				$$invalidate(5, floatingLabel);
			});
		}

		function floatinglabel_binding_1($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				floatingLabel = $$value;
				$$invalidate(5, floatingLabel);
			});
		}

		function notchedoutline_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				notchedOutline = $$value;
				$$invalidate(7, notchedOutline);
			});
		}

		function textarea_1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				input = $$value;
				$$invalidate(2, input);
			});
		}

		function textarea_1_value_binding(value$1) {
			value = value$1;
			$$invalidate(0, value);
		}

		function textarea_1_dirty_binding(value) {
			dirty = value;
			$$invalidate(4, dirty);
		}

		function textarea_1_invalid_binding(value) {
			invalid = value;
			(($$invalidate(1, invalid), $$invalidate(54, instance)), $$invalidate(19, updateInvalid));
		}

		const blur_handler = () => $$invalidate(28, focused = false);
		const focus_handler = () => $$invalidate(28, focused = true);
		const blur_handler_1 = event => dispatch(element, 'blur', event);
		const focus_handler_1 = event => dispatch(element, 'focus', event);

		function input_1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				input = $$value;
				$$invalidate(2, input);
			});
		}

		function input_1_value_binding(value$1) {
			value = value$1;
			$$invalidate(0, value);
		}

		function input_1_files_binding(value) {
			files = value;
			$$invalidate(3, files);
		}

		function input_1_dirty_binding(value) {
			dirty = value;
			$$invalidate(4, dirty);
		}

		function input_1_invalid_binding(value) {
			invalid = value;
			(($$invalidate(1, invalid), $$invalidate(54, instance)), $$invalidate(19, updateInvalid));
		}

		const blur_handler_2 = () => $$invalidate(28, focused = false);
		const focus_handler_2 = () => $$invalidate(28, focused = true);
		const blur_handler_3 = event => dispatch(element, 'blur', event);
		const focus_handler_3 = event => dispatch(element, 'focus', event);

		function lineripple_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				lineRipple = $$value;
				$$invalidate(6, lineRipple);
			});
		}

		function label_1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(24, element);
			});
		}

		const SMUITextfieldLeadingIcon_unmount_handler = () => $$invalidate(29, leadingIcon = undefined);
		const SMUITextfieldTrailingIcon_unmount_handler = () => $$invalidate(30, trailingIcon = undefined);
		const SMUITextfieldCharacterCounter_unmount_handler = () => $$invalidate(32, characterCounter = undefined);

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(24, element);
			});
		}

		const SMUITextfieldLeadingIcon_unmount_handler_1 = () => $$invalidate(29, leadingIcon = undefined);
		const SMUITextfieldTrailingIcon_unmount_handler_1 = () => $$invalidate(30, trailingIcon = undefined);

		const SMUITextfieldHelperText_unmount_handler = () => {
			$$invalidate(27, helperId = undefined);
			$$invalidate(31, helperText = undefined);
		};

		const SMUITextfieldCharacterCounter_unmount_handler_1 = () => $$invalidate(32, characterCounter = undefined);

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(46, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(8, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(9, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(10, style = $$new_props.style);
			if ('ripple' in $$new_props) $$invalidate(11, ripple = $$new_props.ripple);
			if ('disabled' in $$new_props) $$invalidate(12, disabled = $$new_props.disabled);
			if ('required' in $$new_props) $$invalidate(13, required = $$new_props.required);
			if ('textarea' in $$new_props) $$invalidate(14, textarea = $$new_props.textarea);
			if ('variant' in $$new_props) $$invalidate(15, variant = $$new_props.variant);
			if ('noLabel' in $$new_props) $$invalidate(16, noLabel = $$new_props.noLabel);
			if ('label' in $$new_props) $$invalidate(17, label = $$new_props.label);
			if ('type' in $$new_props) $$invalidate(18, type = $$new_props.type);
			if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
			if ('files' in $$new_props) $$invalidate(3, files = $$new_props.files);
			if ('invalid' in $$new_props) $$invalidate(1, invalid = $$new_props.invalid);
			if ('updateInvalid' in $$new_props) $$invalidate(19, updateInvalid = $$new_props.updateInvalid);
			if ('dirty' in $$new_props) $$invalidate(4, dirty = $$new_props.dirty);
			if ('prefix' in $$new_props) $$invalidate(20, prefix = $$new_props.prefix);
			if ('suffix' in $$new_props) $$invalidate(21, suffix = $$new_props.suffix);
			if ('validateOnValueChange' in $$new_props) $$invalidate(48, validateOnValueChange = $$new_props.validateOnValueChange);
			if ('useNativeValidation' in $$new_props) $$invalidate(49, useNativeValidation = $$new_props.useNativeValidation);
			if ('withLeadingIcon' in $$new_props) $$invalidate(22, withLeadingIcon = $$new_props.withLeadingIcon);
			if ('withTrailingIcon' in $$new_props) $$invalidate(23, withTrailingIcon = $$new_props.withTrailingIcon);
			if ('input' in $$new_props) $$invalidate(2, input = $$new_props.input);
			if ('floatingLabel' in $$new_props) $$invalidate(5, floatingLabel = $$new_props.floatingLabel);
			if ('lineRipple' in $$new_props) $$invalidate(6, lineRipple = $$new_props.lineRipple);
			if ('notchedOutline' in $$new_props) $$invalidate(7, notchedOutline = $$new_props.notchedOutline);
			if ('$$scope' in $$new_props) $$invalidate(87, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			MDCTextFieldFoundation,
			events,
			onMount,
			onDestroy,
			getContext,
			tick,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			exclude,
			prefixFilter,
			useActions,
			dispatch,
			ContextFragment,
			Ripple,
			FloatingLabel,
			LineRipple,
			NotchedOutline,
			HelperLine,
			Prefix,
			Suffix,
			Input,
			Textarea,
			applyPassive,
			forwardEvents,
			uninitializedValue,
			isUninitializedValue,
			use,
			className,
			style,
			ripple,
			disabled,
			required,
			textarea,
			variant,
			noLabel,
			label,
			type,
			value,
			files,
			valued,
			invalid,
			updateInvalid,
			dirty,
			prefix,
			suffix,
			validateOnValueChange,
			useNativeValidation,
			withLeadingIcon,
			withTrailingIcon,
			input,
			floatingLabel,
			lineRipple,
			notchedOutline,
			element,
			instance,
			internalClasses,
			internalStyles,
			helperId,
			focused,
			addLayoutListener,
			removeLayoutListener,
			initPromiseResolve,
			initPromise,
			leadingIcon,
			trailingIcon,
			helperText,
			characterCounter,
			previousValue,
			handleLeadingIconMount,
			handleTrailingIconMount,
			handleCharacterCounterMount,
			handleHelperTextId,
			handleHelperTextMount,
			hasClass,
			addClass,
			removeClass,
			addStyle,
			focus,
			blur,
			layout,
			getElement,
			inputElement
		});

		$$self.$inject_state = $$new_props => {
			if ('uninitializedValue' in $$props) uninitializedValue = $$new_props.uninitializedValue;
			if ('use' in $$props) $$invalidate(8, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(9, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(10, style = $$new_props.style);
			if ('ripple' in $$props) $$invalidate(11, ripple = $$new_props.ripple);
			if ('disabled' in $$props) $$invalidate(12, disabled = $$new_props.disabled);
			if ('required' in $$props) $$invalidate(13, required = $$new_props.required);
			if ('textarea' in $$props) $$invalidate(14, textarea = $$new_props.textarea);
			if ('variant' in $$props) $$invalidate(15, variant = $$new_props.variant);
			if ('noLabel' in $$props) $$invalidate(16, noLabel = $$new_props.noLabel);
			if ('label' in $$props) $$invalidate(17, label = $$new_props.label);
			if ('type' in $$props) $$invalidate(18, type = $$new_props.type);
			if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
			if ('files' in $$props) $$invalidate(3, files = $$new_props.files);
			if ('invalid' in $$props) $$invalidate(1, invalid = $$new_props.invalid);
			if ('updateInvalid' in $$props) $$invalidate(19, updateInvalid = $$new_props.updateInvalid);
			if ('dirty' in $$props) $$invalidate(4, dirty = $$new_props.dirty);
			if ('prefix' in $$props) $$invalidate(20, prefix = $$new_props.prefix);
			if ('suffix' in $$props) $$invalidate(21, suffix = $$new_props.suffix);
			if ('validateOnValueChange' in $$props) $$invalidate(48, validateOnValueChange = $$new_props.validateOnValueChange);
			if ('useNativeValidation' in $$props) $$invalidate(49, useNativeValidation = $$new_props.useNativeValidation);
			if ('withLeadingIcon' in $$props) $$invalidate(22, withLeadingIcon = $$new_props.withLeadingIcon);
			if ('withTrailingIcon' in $$props) $$invalidate(23, withTrailingIcon = $$new_props.withTrailingIcon);
			if ('input' in $$props) $$invalidate(2, input = $$new_props.input);
			if ('floatingLabel' in $$props) $$invalidate(5, floatingLabel = $$new_props.floatingLabel);
			if ('lineRipple' in $$props) $$invalidate(6, lineRipple = $$new_props.lineRipple);
			if ('notchedOutline' in $$props) $$invalidate(7, notchedOutline = $$new_props.notchedOutline);
			if ('element' in $$props) $$invalidate(24, element = $$new_props.element);
			if ('instance' in $$props) $$invalidate(54, instance = $$new_props.instance);
			if ('internalClasses' in $$props) $$invalidate(25, internalClasses = $$new_props.internalClasses);
			if ('internalStyles' in $$props) $$invalidate(26, internalStyles = $$new_props.internalStyles);
			if ('helperId' in $$props) $$invalidate(27, helperId = $$new_props.helperId);
			if ('focused' in $$props) $$invalidate(28, focused = $$new_props.focused);
			if ('addLayoutListener' in $$props) addLayoutListener = $$new_props.addLayoutListener;
			if ('removeLayoutListener' in $$props) removeLayoutListener = $$new_props.removeLayoutListener;
			if ('initPromiseResolve' in $$props) initPromiseResolve = $$new_props.initPromiseResolve;
			if ('initPromise' in $$props) $$invalidate(37, initPromise = $$new_props.initPromise);
			if ('leadingIcon' in $$props) $$invalidate(29, leadingIcon = $$new_props.leadingIcon);
			if ('trailingIcon' in $$props) $$invalidate(30, trailingIcon = $$new_props.trailingIcon);
			if ('helperText' in $$props) $$invalidate(31, helperText = $$new_props.helperText);
			if ('characterCounter' in $$props) $$invalidate(32, characterCounter = $$new_props.characterCounter);
			if ('previousValue' in $$props) $$invalidate(55, previousValue = $$new_props.previousValue);
			if ('inputElement' in $$props) $$invalidate(33, inputElement = $$new_props.inputElement);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty[0] & /*input*/ 4) {
				$$invalidate(33, inputElement = input && input.getElement());
			}

			if ($$self.$$.dirty[0] & /*invalid, updateInvalid*/ 524290 | $$self.$$.dirty[1] & /*instance*/ 8388608) {
				if (instance && instance.isValid() !== !invalid) {
					if (updateInvalid) {
						$$invalidate(1, invalid = !instance.isValid());
					} else {
						instance.setValid(!invalid);
					}
				}
			}

			if ($$self.$$.dirty[1] & /*instance, validateOnValueChange*/ 8519680) {
				if (instance && instance.getValidateOnValueChange() !== validateOnValueChange) {
					instance.setValidateOnValueChange(isUninitializedValue(validateOnValueChange)
					? false
					: validateOnValueChange);
				}
			}

			if ($$self.$$.dirty[1] & /*instance, useNativeValidation*/ 8650752) {
				if (instance) {
					instance.setUseNativeValidation(isUninitializedValue(useNativeValidation)
					? true
					: useNativeValidation);
				}
			}

			if ($$self.$$.dirty[0] & /*disabled*/ 4096 | $$self.$$.dirty[1] & /*instance*/ 8388608) {
				if (instance) {
					instance.setDisabled(disabled);
				}
			}

			if ($$self.$$.dirty[0] & /*value*/ 1 | $$self.$$.dirty[1] & /*instance, previousValue*/ 25165824) {
				if (instance && valued && previousValue !== value) {
					$$invalidate(55, previousValue = value);

					// Check the data is flowing down.
					const stringValue = `${value}`;

					if (instance.getValue() !== stringValue) {
						instance.setValue(stringValue);
					}
				}
			}
		};

		return [
			value,
			invalid,
			input,
			files,
			dirty,
			floatingLabel,
			lineRipple,
			notchedOutline,
			use,
			className,
			style,
			ripple,
			disabled,
			required,
			textarea,
			variant,
			noLabel,
			label,
			type,
			updateInvalid,
			prefix,
			suffix,
			withLeadingIcon,
			withTrailingIcon,
			element,
			internalClasses,
			internalStyles,
			helperId,
			focused,
			leadingIcon,
			trailingIcon,
			helperText,
			characterCounter,
			inputElement,
			forwardEvents,
			isUninitializedValue,
			valued,
			initPromise,
			handleLeadingIconMount,
			handleTrailingIconMount,
			handleCharacterCounterMount,
			handleHelperTextId,
			handleHelperTextMount,
			addClass,
			removeClass,
			addStyle,
			$$restProps,
			$$slots,
			validateOnValueChange,
			useNativeValidation,
			focus,
			blur,
			layout,
			getElement,
			instance,
			previousValue,
			slots,
			floatinglabel_binding,
			floatinglabel_binding_1,
			notchedoutline_binding,
			textarea_1_binding,
			textarea_1_value_binding,
			textarea_1_dirty_binding,
			textarea_1_invalid_binding,
			blur_handler,
			focus_handler,
			blur_handler_1,
			focus_handler_1,
			input_1_binding,
			input_1_value_binding,
			input_1_files_binding,
			input_1_dirty_binding,
			input_1_invalid_binding,
			blur_handler_2,
			focus_handler_2,
			blur_handler_3,
			focus_handler_3,
			lineripple_binding,
			label_1_binding,
			SMUITextfieldLeadingIcon_unmount_handler,
			SMUITextfieldTrailingIcon_unmount_handler,
			SMUITextfieldCharacterCounter_unmount_handler,
			div_binding,
			SMUITextfieldLeadingIcon_unmount_handler_1,
			SMUITextfieldTrailingIcon_unmount_handler_1,
			SMUITextfieldHelperText_unmount_handler,
			SMUITextfieldCharacterCounter_unmount_handler_1,
			$$scope
		];
	}

	class Textfield extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(
				this,
				options,
				instance_1,
				create_fragment$2,
				safe_not_equal,
				{
					use: 8,
					class: 9,
					style: 10,
					ripple: 11,
					disabled: 12,
					required: 13,
					textarea: 14,
					variant: 15,
					noLabel: 16,
					label: 17,
					type: 18,
					value: 0,
					files: 3,
					invalid: 1,
					updateInvalid: 19,
					dirty: 4,
					prefix: 20,
					suffix: 21,
					validateOnValueChange: 48,
					useNativeValidation: 49,
					withLeadingIcon: 22,
					withTrailingIcon: 23,
					input: 2,
					floatingLabel: 5,
					lineRipple: 6,
					notchedOutline: 7,
					focus: 50,
					blur: 51,
					layout: 52,
					getElement: 53
				},
				null,
				[-1, -1, -1, -1]
			);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Textfield",
				options,
				id: create_fragment$2.name
			});
		}

		get use() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get ripple() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set ripple(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get disabled() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set disabled(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get required() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set required(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get textarea() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set textarea(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get variant() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set variant(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get noLabel() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set noLabel(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get label() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set label(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get type() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set type(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get files() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set files(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get invalid() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set invalid(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get updateInvalid() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set updateInvalid(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get dirty() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set dirty(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get prefix() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set prefix(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get suffix() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set suffix(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get validateOnValueChange() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set validateOnValueChange(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get useNativeValidation() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set useNativeValidation(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get withLeadingIcon() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set withLeadingIcon(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get withTrailingIcon() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set withTrailingIcon(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get input() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set input(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get floatingLabel() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set floatingLabel(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get lineRipple() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set lineRipple(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get notchedOutline() {
			throw new Error_1$1("<Textfield>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set notchedOutline(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get focus() {
			return this.$$.ctx[50];
		}

		set focus(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get blur() {
			return this.$$.ctx[51];
		}

		set blur(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get layout() {
			return this.$$.ctx[52];
		}

		set layout(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[53];
		}

		set getElement(value) {
			throw new Error_1$1("<Textfield>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/@smui/fab/dist/Fab.svelte generated by Svelte v4.2.19 */
	const file$1 = "node_modules/@smui/fab/dist/Fab.svelte";

	// (38:2) {#if focusRing}
	function create_if_block_1$1(ctx) {
		let div;

		const block = {
			c: function create() {
				div = element("div");
				attr_dev(div, "class", "mdc-fab__focus-ring");
				add_location(div, file$1, 37, 17, 787);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$1.name,
			type: "if",
			source: "(38:2) {#if focusRing}",
			ctx
		});

		return block;
	}

	// (39:10) {#if touch}
	function create_if_block$1(ctx) {
		let div;

		const block = {
			c: function create() {
				div = element("div");
				attr_dev(div, "class", "mdc-fab__touch");
				add_location(div, file$1, 38, 21, 849);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$1.name,
			type: "if",
			source: "(39:10) {#if touch}",
			ctx
		});

		return block;
	}

	// (1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: false,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-fab': true,     'mdc-fab--mini': mini,     'mdc-fab--exited': exited,     'mdc-fab--extended': extended,     'smui-fab--color-primary': color === 'primary',     'mdc-fab--touch': touch,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   {href}   {...$$restProps}   >
	function create_default_slot$1(ctx) {
		let div;
		let t0;
		let t1;
		let if_block1_anchor;
		let current;
		let if_block0 = /*focusRing*/ ctx[4] && create_if_block_1$1(ctx);
		const default_slot_template = /*#slots*/ ctx[22].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[24], null);
		let if_block1 = /*touch*/ ctx[9] && create_if_block$1(ctx);

		const block = {
			c: function create() {
				div = element("div");
				t0 = space();
				if (if_block0) if_block0.c();
				t1 = space();
				if (default_slot) default_slot.c();
				if (if_block1) if_block1.c();
				if_block1_anchor = empty();
				attr_dev(div, "class", "mdc-fab__ripple");
				add_location(div, file$1, 36, 3, 738);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				insert_dev(target, t0, anchor);
				if (if_block0) if_block0.m(target, anchor);
				insert_dev(target, t1, anchor);

				if (default_slot) {
					default_slot.m(target, anchor);
				}

				if (if_block1) if_block1.m(target, anchor);
				insert_dev(target, if_block1_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (/*focusRing*/ ctx[4]) {
					if (if_block0) ; else {
						if_block0 = create_if_block_1$1(ctx);
						if_block0.c();
						if_block0.m(t1.parentNode, t1);
					}
				} else if (if_block0) {
					if_block0.d(1);
					if_block0 = null;
				}

				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 16777216)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[24],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[24])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[24], dirty, null),
							null
						);
					}
				}

				if (/*touch*/ ctx[9]) {
					if (if_block1) ; else {
						if_block1 = create_if_block$1(ctx);
						if_block1.c();
						if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
					}
				} else if (if_block1) {
					if_block1.d(1);
					if_block1 = null;
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
					detach_dev(t0);
					detach_dev(t1);
					detach_dev(if_block1_anchor);
				}

				if (if_block0) if_block0.d(detaching);
				if (default_slot) default_slot.d(detaching);
				if (if_block1) if_block1.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$1.name,
			type: "slot",
			source: "(1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: false,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-fab': true,     'mdc-fab--mini': mini,     'mdc-fab--exited': exited,     'mdc-fab--extended': extended,     'smui-fab--color-primary': color === 'primary',     'mdc-fab--touch': touch,     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   {href}   {...$$restProps}   >",
			ctx
		});

		return block;
	}

	function create_fragment$1(ctx) {
		let switch_instance;
		let switch_instance_anchor;
		let current;

		const switch_instance_spread_levels = [
			{ tag: /*tag*/ ctx[12] },
			{
				use: [
					[
						Ripple,
						{
							ripple: /*ripple*/ ctx[3],
							unbounded: false,
							color: /*color*/ ctx[5],
							disabled: !!/*$$restProps*/ ctx[20].disabled,
							addClass: /*addClass*/ ctx[17],
							removeClass: /*removeClass*/ ctx[18],
							addStyle: /*addStyle*/ ctx[19]
						}
					],
					/*forwardEvents*/ ctx[16],
					.../*use*/ ctx[0]
				]
			},
			{
				class: classMap({
					[/*className*/ ctx[1]]: true,
					'mdc-fab': true,
					'mdc-fab--mini': /*mini*/ ctx[6],
					'mdc-fab--exited': /*exited*/ ctx[7],
					'mdc-fab--extended': /*extended*/ ctx[8],
					'smui-fab--color-primary': /*color*/ ctx[5] === 'primary',
					'mdc-fab--touch': /*touch*/ ctx[9],
					.../*internalClasses*/ ctx[14]
				})
			},
			{
				style: Object.entries(/*internalStyles*/ ctx[15]).map(func).concat([/*style*/ ctx[2]]).join(' ')
			},
			{ href: /*href*/ ctx[10] },
			/*$$restProps*/ ctx[20]
		];

		var switch_value = /*component*/ ctx[11];

		function switch_props(ctx, dirty) {
			let switch_instance_props = {
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			};

			for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
				switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
			}

			if (dirty !== undefined && dirty & /*tag, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use, className, mini, exited, extended, touch, internalClasses, Object, internalStyles, style, href*/ 2086895) {
				switch_instance_props = assign(switch_instance_props, get_spread_update(switch_instance_spread_levels, [
					dirty & /*tag*/ 4096 && { tag: /*tag*/ ctx[12] },
					dirty & /*ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use*/ 2031657 && {
						use: [
							[
								Ripple,
								{
									ripple: /*ripple*/ ctx[3],
									unbounded: false,
									color: /*color*/ ctx[5],
									disabled: !!/*$$restProps*/ ctx[20].disabled,
									addClass: /*addClass*/ ctx[17],
									removeClass: /*removeClass*/ ctx[18],
									addStyle: /*addStyle*/ ctx[19]
								}
							],
							/*forwardEvents*/ ctx[16],
							.../*use*/ ctx[0]
						]
					},
					dirty & /*className, mini, exited, extended, color, touch, internalClasses*/ 17378 && {
						class: classMap({
							[/*className*/ ctx[1]]: true,
							'mdc-fab': true,
							'mdc-fab--mini': /*mini*/ ctx[6],
							'mdc-fab--exited': /*exited*/ ctx[7],
							'mdc-fab--extended': /*extended*/ ctx[8],
							'smui-fab--color-primary': /*color*/ ctx[5] === 'primary',
							'mdc-fab--touch': /*touch*/ ctx[9],
							.../*internalClasses*/ ctx[14]
						})
					},
					dirty & /*Object, internalStyles, style*/ 32772 && {
						style: Object.entries(/*internalStyles*/ ctx[15]).map(func).concat([/*style*/ ctx[2]]).join(' ')
					},
					dirty & /*href*/ 1024 && { href: /*href*/ ctx[10] },
					dirty & /*$$restProps*/ 1048576 && get_spread_object(/*$$restProps*/ ctx[20])
				]));
			}

			return {
				props: switch_instance_props,
				$$inline: true
			};
		}

		if (switch_value) {
			switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
			/*switch_instance_binding*/ ctx[23](switch_instance);
		}

		const block = {
			c: function create() {
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (switch_instance) mount_component(switch_instance, target, anchor);
				insert_dev(target, switch_instance_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*component*/ 2048 && switch_value !== (switch_value = /*component*/ ctx[11])) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx, dirty));
						/*switch_instance_binding*/ ctx[23](switch_instance);
						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					const switch_instance_changes = (dirty & /*tag, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use, className, mini, exited, extended, touch, internalClasses, Object, internalStyles, style, href*/ 2086895)
					? get_spread_update(switch_instance_spread_levels, [
							dirty & /*tag*/ 4096 && { tag: /*tag*/ ctx[12] },
							dirty & /*ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use*/ 2031657 && {
								use: [
									[
										Ripple,
										{
											ripple: /*ripple*/ ctx[3],
											unbounded: false,
											color: /*color*/ ctx[5],
											disabled: !!/*$$restProps*/ ctx[20].disabled,
											addClass: /*addClass*/ ctx[17],
											removeClass: /*removeClass*/ ctx[18],
											addStyle: /*addStyle*/ ctx[19]
										}
									],
									/*forwardEvents*/ ctx[16],
									.../*use*/ ctx[0]
								]
							},
							dirty & /*className, mini, exited, extended, color, touch, internalClasses*/ 17378 && {
								class: classMap({
									[/*className*/ ctx[1]]: true,
									'mdc-fab': true,
									'mdc-fab--mini': /*mini*/ ctx[6],
									'mdc-fab--exited': /*exited*/ ctx[7],
									'mdc-fab--extended': /*extended*/ ctx[8],
									'smui-fab--color-primary': /*color*/ ctx[5] === 'primary',
									'mdc-fab--touch': /*touch*/ ctx[9],
									.../*internalClasses*/ ctx[14]
								})
							},
							dirty & /*Object, internalStyles, style*/ 32772 && {
								style: Object.entries(/*internalStyles*/ ctx[15]).map(func).concat([/*style*/ ctx[2]]).join(' ')
							},
							dirty & /*href*/ 1024 && { href: /*href*/ ctx[10] },
							dirty & /*$$restProps*/ 1048576 && get_spread_object(/*$$restProps*/ ctx[20])
						])
					: {};

					if (dirty & /*$$scope, touch, focusRing*/ 16777744) {
						switch_instance_changes.$$scope = { dirty, ctx };
					}

					switch_instance.$set(switch_instance_changes);
				}
			},
			i: function intro(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(switch_instance_anchor);
				}

				/*switch_instance_binding*/ ctx[23](null);
				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$1.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const func = ([name, value]) => `${name}: ${value};`;

	function instance$1($$self, $$props, $$invalidate) {
		const omit_props_names = [
			"use","class","style","ripple","focusRing","color","mini","exited","extended","touch","href","component","tag","getElement"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Fab', slots, ['default']);
		const forwardEvents = forwardEventsBuilder(get_current_component());
		let { use = [] } = $$props;
		let { class: className = '' } = $$props;
		let { style = '' } = $$props;
		let { ripple = true } = $$props;
		let { focusRing = false } = $$props;
		let { color = 'secondary' } = $$props;
		let { mini = false } = $$props;
		let { exited = false } = $$props;
		let { extended = false } = $$props;
		let { touch = false } = $$props;
		let { href = undefined } = $$props;
		let element;
		let internalClasses = {};
		let internalStyles = {};
		let { component = SmuiElement } = $$props;

		let { tag = component === SmuiElement
		? href == null ? 'button' : 'a'
		: undefined } = $$props;

		setContext('SMUI:label:context', 'fab');
		setContext('SMUI:icon:context', 'fab');

		function addClass(className) {
			if (!internalClasses[className]) {
				$$invalidate(14, internalClasses[className] = true, internalClasses);
			}
		}

		function removeClass(className) {
			if (!(className in internalClasses) || internalClasses[className]) {
				$$invalidate(14, internalClasses[className] = false, internalClasses);
			}
		}

		function addStyle(name, value) {
			if (internalStyles[name] != value) {
				if (value === '' || value == null) {
					delete internalStyles[name];
					$$invalidate(15, internalStyles);
				} else {
					$$invalidate(15, internalStyles[name] = value, internalStyles);
				}
			}
		}

		function getElement() {
			return element.getElement();
		}

		function switch_instance_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				element = $$value;
				$$invalidate(13, element);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(20, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('use' in $$new_props) $$invalidate(0, use = $$new_props.use);
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('style' in $$new_props) $$invalidate(2, style = $$new_props.style);
			if ('ripple' in $$new_props) $$invalidate(3, ripple = $$new_props.ripple);
			if ('focusRing' in $$new_props) $$invalidate(4, focusRing = $$new_props.focusRing);
			if ('color' in $$new_props) $$invalidate(5, color = $$new_props.color);
			if ('mini' in $$new_props) $$invalidate(6, mini = $$new_props.mini);
			if ('exited' in $$new_props) $$invalidate(7, exited = $$new_props.exited);
			if ('extended' in $$new_props) $$invalidate(8, extended = $$new_props.extended);
			if ('touch' in $$new_props) $$invalidate(9, touch = $$new_props.touch);
			if ('href' in $$new_props) $$invalidate(10, href = $$new_props.href);
			if ('component' in $$new_props) $$invalidate(11, component = $$new_props.component);
			if ('tag' in $$new_props) $$invalidate(12, tag = $$new_props.tag);
			if ('$$scope' in $$new_props) $$invalidate(24, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			setContext,
			get_current_component,
			forwardEventsBuilder,
			classMap,
			Ripple,
			SmuiElement,
			forwardEvents,
			use,
			className,
			style,
			ripple,
			focusRing,
			color,
			mini,
			exited,
			extended,
			touch,
			href,
			element,
			internalClasses,
			internalStyles,
			component,
			tag,
			addClass,
			removeClass,
			addStyle,
			getElement
		});

		$$self.$inject_state = $$new_props => {
			if ('use' in $$props) $$invalidate(0, use = $$new_props.use);
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('style' in $$props) $$invalidate(2, style = $$new_props.style);
			if ('ripple' in $$props) $$invalidate(3, ripple = $$new_props.ripple);
			if ('focusRing' in $$props) $$invalidate(4, focusRing = $$new_props.focusRing);
			if ('color' in $$props) $$invalidate(5, color = $$new_props.color);
			if ('mini' in $$props) $$invalidate(6, mini = $$new_props.mini);
			if ('exited' in $$props) $$invalidate(7, exited = $$new_props.exited);
			if ('extended' in $$props) $$invalidate(8, extended = $$new_props.extended);
			if ('touch' in $$props) $$invalidate(9, touch = $$new_props.touch);
			if ('href' in $$props) $$invalidate(10, href = $$new_props.href);
			if ('element' in $$props) $$invalidate(13, element = $$new_props.element);
			if ('internalClasses' in $$props) $$invalidate(14, internalClasses = $$new_props.internalClasses);
			if ('internalStyles' in $$props) $$invalidate(15, internalStyles = $$new_props.internalStyles);
			if ('component' in $$props) $$invalidate(11, component = $$new_props.component);
			if ('tag' in $$props) $$invalidate(12, tag = $$new_props.tag);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			use,
			className,
			style,
			ripple,
			focusRing,
			color,
			mini,
			exited,
			extended,
			touch,
			href,
			component,
			tag,
			element,
			internalClasses,
			internalStyles,
			forwardEvents,
			addClass,
			removeClass,
			addStyle,
			$$restProps,
			getElement,
			slots,
			switch_instance_binding,
			$$scope
		];
	}

	class Fab extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$1, create_fragment$1, safe_not_equal, {
				use: 0,
				class: 1,
				style: 2,
				ripple: 3,
				focusRing: 4,
				color: 5,
				mini: 6,
				exited: 7,
				extended: 8,
				touch: 9,
				href: 10,
				component: 11,
				tag: 12,
				getElement: 21
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Fab",
				options,
				id: create_fragment$1.name
			});
		}

		get use() {
			throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set use(value) {
			throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get class() {
			throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get style() {
			throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set style(value) {
			throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get ripple() {
			throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set ripple(value) {
			throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get focusRing() {
			throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set focusRing(value) {
			throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get color() {
			throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set color(value) {
			throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get mini() {
			throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set mini(value) {
			throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get exited() {
			throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set exited(value) {
			throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get extended() {
			throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set extended(value) {
			throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get touch() {
			throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set touch(value) {
			throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get href() {
			throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set href(value) {
			throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get component() {
			throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set component(value) {
			throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tag() {
			throw new Error("<Fab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tag(value) {
			throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get getElement() {
			return this.$$.ctx[21];
		}

		set getElement(value) {
			throw new Error("<Fab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/App.svelte generated by Svelte v4.2.19 */

	const { Error: Error_1, console: console_1 } = globals;
	const file = "src/App.svelte";

	function get_each_context_3(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[111] = list[i];
		return child_ctx;
	}

	function get_each_context_4(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[111] = list[i];
		return child_ctx;
	}

	function get_each_context(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[106] = list[i];
		child_ctx[107] = list;
		child_ctx[108] = i;
		return child_ctx;
	}

	function get_each_context_1(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[109] = list[i];
		child_ctx[106] = i;
		return child_ctx;
	}

	function get_each_context_2(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[111] = list[i];
		return child_ctx;
	}

	// (481:8) <Label>
	function create_default_slot_77(ctx) {
		let t_value = /*tab*/ ctx[114] + "";
		let t;

		const block = {
			c: function create() {
				t = text$2(t_value);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			p: function update(ctx, dirty) {
				if (dirty[3] & /*tab*/ 2097152 && t_value !== (t_value = /*tab*/ ctx[114] + "")) set_data_dev(t, t_value);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_77.name,
			type: "slot",
			source: "(481:8) <Label>",
			ctx
		});

		return block;
	}

	// (480:6) <Tab {tab} disabled={isRunning}>
	function create_default_slot_76(ctx) {
		let label;
		let current;

		label = new CommonLabel({
				props: {
					$$slots: { default: [create_default_slot_77] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(label.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(label, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const label_changes = {};

				if (dirty[3] & /*$$scope, tab*/ 69206016) {
					label_changes.$$scope = { dirty, ctx };
				}

				label.$set(label_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(label.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(label.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(label, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_76.name,
			type: "slot",
			source: "(480:6) <Tab {tab} disabled={isRunning}>",
			ctx
		});

		return block;
	}

	// (475:4) <TabBar             tabs={["Environment", "Training", "Flow"]}             let:tab             bind:active={view}     >
	function create_default_slot_75(ctx) {
		let tab;
		let current;

		tab = new Tab({
				props: {
					tab: /*tab*/ ctx[114],
					disabled: /*isRunning*/ ctx[24],
					$$slots: { default: [create_default_slot_76] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(tab.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(tab, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const tab_changes = {};
				if (dirty[3] & /*tab*/ 2097152) tab_changes.tab = /*tab*/ ctx[114];
				if (dirty[0] & /*isRunning*/ 16777216) tab_changes.disabled = /*isRunning*/ ctx[24];

				if (dirty[3] & /*$$scope, tab*/ 69206016) {
					tab_changes.$$scope = { dirty, ctx };
				}

				tab.$set(tab_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tab.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tab.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(tab, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_75.name,
			type: "slot",
			source: "(475:4) <TabBar             tabs={[\\\"Environment\\\", \\\"Training\\\", \\\"Flow\\\"]}             let:tab             bind:active={view}     >",
			ctx
		});

		return block;
	}

	// (785:30) 
	function create_if_block_8(ctx) {
		let div;

		const block = {
			c: function create() {
				div = element("div");
				add_location(div, file, 786, 8, 24042);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				/*div_binding*/ ctx[67](div);
			},
			p: noop,
			i: noop,
			o: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				/*div_binding*/ ctx[67](null);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_8.name,
			type: "if",
			source: "(785:30) ",
			ctx
		});

		return block;
	}

	// (612:34) 
	function create_if_block_1(ctx) {
		let div9;
		let div5;
		let div0;
		let fab0;
		let t0;
		let fab1;
		let t1;
		let div4;
		let div1;
		let select0;
		let updating_value;
		let t2;
		let div3;
		let div2;
		let select1;
		let updating_value_1;
		let t3;
		let div7;
		let div6;
		let tabbar;
		let updating_active;
		let t4;
		let current_block_type_index;
		let if_block0;
		let t5;
		let t6;
		let div8;
		let current_block_type_index_1;
		let if_block2;
		let current;

		fab0 = new Fab({
				props: {
					mini: true,
					disabled: /*isRunning*/ ctx[24],
					$$slots: { default: [create_default_slot_73] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		fab0.$on("click", /*resetSliders*/ ctx[36]);

		fab1 = new Fab({
				props: {
					$$slots: { default: [create_default_slot_70] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		fab1.$on("click", function () {
			if (is_function(/*isRunning*/ ctx[24]
			? /*stopTraining*/ ctx[39]
			: /*startTraining*/ ctx[38])) (/*isRunning*/ ctx[24]
			? /*stopTraining*/ ctx[39]
			: /*startTraining*/ ctx[38]).apply(this, arguments);
		});

		function select0_value_binding(value) {
			/*select0_value_binding*/ ctx[55](value);
		}

		let select0_props = {
			label: "Loss",
			color: "primary",
			disabled: "true",
			$$slots: { default: [create_default_slot_68] },
			$$scope: { ctx }
		};

		if (/*loss_choice*/ ctx[16] !== void 0) {
			select0_props.value = /*loss_choice*/ ctx[16];
		}

		select0 = new Select({ props: select0_props, $$inline: true });
		binding_callbacks.push(() => bind(select0, 'value', select0_value_binding));

		function select1_value_binding(value) {
			/*select1_value_binding*/ ctx[56](value);
		}

		let select1_props = {
			label: "Iterations",
			disabled: /*isRunning*/ ctx[24],
			$$slots: { default: [create_default_slot_66] },
			$$scope: { ctx }
		};

		if (/*n_iterations_str*/ ctx[2] !== void 0) {
			select1_props.value = /*n_iterations_str*/ ctx[2];
		}

		select1 = new Select({ props: select1_props, $$inline: true });
		binding_callbacks.push(() => bind(select1, 'value', select1_value_binding));

		function tabbar_active_binding_1(value) {
			/*tabbar_active_binding_1*/ ctx[57](value);
		}

		let tabbar_props = {
			tabs: ['Basic', 'Advanced'],
			$$slots: {
				default: [
					create_default_slot_63,
					({ tab }) => ({ 114: tab }),
					({ tab }) => [0, 0, 0, tab ? 2097152 : 0]
				]
			},
			$$scope: { ctx }
		};

		if (/*active_tab*/ ctx[18] !== void 0) {
			tabbar_props.active = /*active_tab*/ ctx[18];
		}

		tabbar = new TabBar({ props: tabbar_props, $$inline: true });
		binding_callbacks.push(() => bind(tabbar, 'active', tabbar_active_binding_1));
		const if_block_creators = [create_if_block_5, create_if_block_6];
		const if_blocks = [];

		function select_block_type_2(ctx, dirty) {
			if (/*active_tab*/ ctx[18] === 'Basic') return 0;
			if (/*active_tab*/ ctx[18] === 'Advanced') return 1;
			return -1;
		}

		if (~(current_block_type_index = select_block_type_2(ctx))) {
			if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
		}

		function select_block_type_3(ctx, dirty) {
			if (!/*display_trainhistory*/ ctx[21] && !/*isRunning*/ ctx[24]) return create_if_block_4;
			return create_else_block;
		}

		let current_block_type = select_block_type_3(ctx);
		let if_block1 = current_block_type(ctx);
		const if_block_creators_1 = [create_if_block_2, create_if_block_3];
		const if_blocks_1 = [];

		function select_block_type_4(ctx, dirty) {
			if (!/*isRunning*/ ctx[24] & /*display_trainhistory*/ ctx[21]) return 0;
			if (/*isRunning*/ ctx[24]) return 1;
			return -1;
		}

		if (~(current_block_type_index_1 = select_block_type_4(ctx))) {
			if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
		}

		const block = {
			c: function create() {
				div9 = element("div");
				div5 = element("div");
				div0 = element("div");
				create_component(fab0.$$.fragment);
				t0 = space();
				create_component(fab1.$$.fragment);
				t1 = space();
				div4 = element("div");
				div1 = element("div");
				create_component(select0.$$.fragment);
				t2 = space();
				div3 = element("div");
				div2 = element("div");
				create_component(select1.$$.fragment);
				t3 = space();
				div7 = element("div");
				div6 = element("div");
				create_component(tabbar.$$.fragment);
				t4 = space();
				if (if_block0) if_block0.c();
				t5 = space();
				if_block1.c();
				t6 = space();
				div8 = element("div");
				if (if_block2) if_block2.c();
				attr_dev(div0, "class", "pg-play");
				add_location(div0, file, 617, 10, 18023);
				attr_dev(div1, "class", "columns margins");
				set_style(div1, "justify-content", "flex-start");
				set_style(div1, "display", "None");
				add_location(div1, file, 636, 12, 18673);
				attr_dev(div2, "class", "columns margins");
				set_style(div2, "justify-content", "flex-start");
				add_location(div2, file, 644, 14, 19078);
				attr_dev(div3, "class", "pg-iterations");
				add_location(div3, file, 643, 12, 19036);
				attr_dev(div4, "class", "pg-loss");
				add_location(div4, file, 635, 10, 18639);
				attr_dev(div5, "class", "pg-top");
				add_location(div5, file, 616, 8, 17992);
				add_location(div6, file, 660, 10, 19597);
				attr_dev(div7, "class", "pg-side");
				add_location(div7, file, 659, 8, 19565);
				attr_dev(div8, "class", "pg-bottom");
				add_location(div8, file, 767, 8, 23501);
				attr_dev(div9, "class", "pg-container");
				add_location(div9, file, 615, 6, 17957);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div9, anchor);
				append_dev(div9, div5);
				append_dev(div5, div0);
				mount_component(fab0, div0, null);
				append_dev(div0, t0);
				mount_component(fab1, div0, null);
				append_dev(div5, t1);
				append_dev(div5, div4);
				append_dev(div4, div1);
				mount_component(select0, div1, null);
				append_dev(div4, t2);
				append_dev(div4, div3);
				append_dev(div3, div2);
				mount_component(select1, div2, null);
				append_dev(div9, t3);
				append_dev(div9, div7);
				append_dev(div7, div6);
				mount_component(tabbar, div6, null);
				append_dev(div6, t4);

				if (~current_block_type_index) {
					if_blocks[current_block_type_index].m(div6, null);
				}

				append_dev(div9, t5);
				if_block1.m(div9, null);
				append_dev(div9, t6);
				append_dev(div9, div8);

				if (~current_block_type_index_1) {
					if_blocks_1[current_block_type_index_1].m(div8, null);
				}

				current = true;
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;
				const fab0_changes = {};
				if (dirty[0] & /*isRunning*/ 16777216) fab0_changes.disabled = /*isRunning*/ ctx[24];

				if (dirty[3] & /*$$scope*/ 67108864) {
					fab0_changes.$$scope = { dirty, ctx };
				}

				fab0.$set(fab0_changes);
				const fab1_changes = {};

				if (dirty[0] & /*isRunning*/ 16777216 | dirty[3] & /*$$scope*/ 67108864) {
					fab1_changes.$$scope = { dirty, ctx };
				}

				fab1.$set(fab1_changes);
				const select0_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					select0_changes.$$scope = { dirty, ctx };
				}

				if (!updating_value && dirty[0] & /*loss_choice*/ 65536) {
					updating_value = true;
					select0_changes.value = /*loss_choice*/ ctx[16];
					add_flush_callback(() => updating_value = false);
				}

				select0.$set(select0_changes);
				const select1_changes = {};
				if (dirty[0] & /*isRunning*/ 16777216) select1_changes.disabled = /*isRunning*/ ctx[24];

				if (dirty[3] & /*$$scope*/ 67108864) {
					select1_changes.$$scope = { dirty, ctx };
				}

				if (!updating_value_1 && dirty[0] & /*n_iterations_str*/ 4) {
					updating_value_1 = true;
					select1_changes.value = /*n_iterations_str*/ ctx[2];
					add_flush_callback(() => updating_value_1 = false);
				}

				select1.$set(select1_changes);
				const tabbar_changes = {};

				if (dirty[3] & /*$$scope, tab*/ 69206016) {
					tabbar_changes.$$scope = { dirty, ctx };
				}

				if (!updating_active && dirty[0] & /*active_tab*/ 262144) {
					updating_active = true;
					tabbar_changes.active = /*active_tab*/ ctx[18];
					add_flush_callback(() => updating_active = false);
				}

				tabbar.$set(tabbar_changes);
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type_2(ctx);

				if (current_block_type_index === previous_block_index) {
					if (~current_block_type_index) {
						if_blocks[current_block_type_index].p(ctx, dirty);
					}
				} else {
					if (if_block0) {
						group_outros();

						transition_out(if_blocks[previous_block_index], 1, 1, () => {
							if_blocks[previous_block_index] = null;
						});

						check_outros();
					}

					if (~current_block_type_index) {
						if_block0 = if_blocks[current_block_type_index];

						if (!if_block0) {
							if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
							if_block0.c();
						} else {
							if_block0.p(ctx, dirty);
						}

						transition_in(if_block0, 1);
						if_block0.m(div6, null);
					} else {
						if_block0 = null;
					}
				}

				if (current_block_type !== (current_block_type = select_block_type_3(ctx))) {
					if_block1.d(1);
					if_block1 = current_block_type(ctx);

					if (if_block1) {
						if_block1.c();
						if_block1.m(div9, t6);
					}
				}

				let previous_block_index_1 = current_block_type_index_1;
				current_block_type_index_1 = select_block_type_4(ctx);

				if (current_block_type_index_1 === previous_block_index_1) {
					if (~current_block_type_index_1) {
						if_blocks_1[current_block_type_index_1].p(ctx, dirty);
					}
				} else {
					if (if_block2) {
						group_outros();

						transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
							if_blocks_1[previous_block_index_1] = null;
						});

						check_outros();
					}

					if (~current_block_type_index_1) {
						if_block2 = if_blocks_1[current_block_type_index_1];

						if (!if_block2) {
							if_block2 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
							if_block2.c();
						} else {
							if_block2.p(ctx, dirty);
						}

						transition_in(if_block2, 1);
						if_block2.m(div8, null);
					} else {
						if_block2 = null;
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(fab0.$$.fragment, local);
				transition_in(fab1.$$.fragment, local);
				transition_in(select0.$$.fragment, local);
				transition_in(select1.$$.fragment, local);
				transition_in(tabbar.$$.fragment, local);
				transition_in(if_block0);
				transition_in(if_block2);
				current = true;
			},
			o: function outro(local) {
				transition_out(fab0.$$.fragment, local);
				transition_out(fab1.$$.fragment, local);
				transition_out(select0.$$.fragment, local);
				transition_out(select1.$$.fragment, local);
				transition_out(tabbar.$$.fragment, local);
				transition_out(if_block0);
				transition_out(if_block2);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div9);
				}

				destroy_component(fab0);
				destroy_component(fab1);
				destroy_component(select0);
				destroy_component(select1);
				destroy_component(tabbar);

				if (~current_block_type_index) {
					if_blocks[current_block_type_index].d();
				}

				if_block1.d();

				if (~current_block_type_index_1) {
					if_blocks_1[current_block_type_index_1].d();
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1.name,
			type: "if",
			source: "(612:34) ",
			ctx
		});

		return block;
	}

	// (484:4) {#if view === 'Environment'}
	function create_if_block(ctx) {
		let div9;
		let div3;
		let div0;
		let fab0;
		let t0;
		let fab1;
		let t1;
		let div2;
		let div1;
		let select_1;
		let updating_value;
		let t2;
		let div5;
		let div4;
		let t3;
		let div6;
		let t4;
		let div7;
		let datatable;
		let t5;
		let div8;
		let t6;
		let br0;
		let t7;
		let br1;
		let t8;
		let current;

		fab0 = new Fab({
				props: {
					mini: true,
					disabled: /*isRunning*/ ctx[24],
					$$slots: { default: [create_default_slot_57] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		fab0.$on("click", /*resetGaussians*/ ctx[40]);

		fab1 = new Fab({
				props: {
					disabled: /*isRunning*/ ctx[24],
					$$slots: { default: [create_default_slot_55] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		fab1.$on("click", /*click_handler*/ ctx[45]);

		function select_1_value_binding(value) {
			/*select_1_value_binding*/ ctx[46](value);
		}

		let select_1_props = {
			label: "N Gaussians",
			disabled: /*isRunning*/ ctx[24],
			$$slots: { default: [create_default_slot_53] },
			$$scope: { ctx }
		};

		if (/*n_gaussians*/ ctx[1] !== void 0) {
			select_1_props.value = /*n_gaussians*/ ctx[1];
		}

		select_1 = new Select({ props: select_1_props, $$inline: true });
		binding_callbacks.push(() => bind(select_1, 'value', select_1_value_binding));
		let each_value_1 = ensure_array_like_dev(/*$gaussians*/ ctx[29]);
		let each_blocks = [];

		for (let i = 0; i < each_value_1.length; i += 1) {
			each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
		}

		datatable = new DataTable({
				props: {
					"table$aria-label": "Parameters of Gaussians",
					style: "width: 100%;border-radius: 1px",
					$$slots: { default: [create_default_slot_39] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				div9 = element("div");
				div3 = element("div");
				div0 = element("div");
				create_component(fab0.$$.fragment);
				t0 = space();
				create_component(fab1.$$.fragment);
				t1 = space();
				div2 = element("div");
				div1 = element("div");
				create_component(select_1.$$.fragment);
				t2 = space();
				div5 = element("div");
				div4 = element("div");

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				t3 = space();
				div6 = element("div");
				t4 = space();
				div7 = element("div");
				create_component(datatable.$$.fragment);
				t5 = space();
				div8 = element("div");
				t6 = text$2("Adjust the reward function by dragging the circles and dots in the left plot or by setting the parameters in the table.\n          ");
				br0 = element("br");
				t7 = text$2("By setting the mean and variance of multiple 2D Multivariate Gaussians we get the reward function on the right as a mixture.\n          ");
				br1 = element("br");
				t8 = text$2("Then switch to the \"Training\" tab to start training.");
				attr_dev(div0, "class", "pg-play");
				add_location(div0, file, 489, 10, 13237);
				attr_dev(div1, "class", "columns margins");
				set_style(div1, "justify-content", "flex-start");
				add_location(div1, file, 505, 12, 13760);
				attr_dev(div2, "class", "pg-ngaussians");
				add_location(div2, file, 504, 10, 13720);
				attr_dev(div3, "class", "pg-top");
				add_location(div3, file, 488, 8, 13206);
				attr_dev(div4, "class", "pg-circles-container");
				add_location(div4, file, 517, 10, 14200);
				attr_dev(div5, "id", /*plotContainerEnv2d*/ ctx[31]);
				attr_dev(div5, "class", "pg-2dplot");
				add_location(div5, file, 516, 8, 14140);
				attr_dev(div6, "id", /*plotContainerEnv3d*/ ctx[32]);
				attr_dev(div6, "class", "pg-3dplot");
				add_location(div6, file, 556, 8, 15555);
				attr_dev(div7, "class", "pg-gauss-table");
				add_location(div7, file, 558, 8, 15628);
				add_location(br0, file, 605, 10, 17659);
				add_location(br1, file, 606, 10, 17798);
				attr_dev(div8, "class", "pg-env-help");
				add_location(div8, file, 603, 8, 17493);
				attr_dev(div9, "class", "pg-container");
				add_location(div9, file, 487, 6, 13171);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div9, anchor);
				append_dev(div9, div3);
				append_dev(div3, div0);
				mount_component(fab0, div0, null);
				append_dev(div0, t0);
				mount_component(fab1, div0, null);
				append_dev(div3, t1);
				append_dev(div3, div2);
				append_dev(div2, div1);
				mount_component(select_1, div1, null);
				append_dev(div9, t2);
				append_dev(div9, div5);
				append_dev(div5, div4);

				for (let i = 0; i < each_blocks.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(div4, null);
					}
				}

				append_dev(div9, t3);
				append_dev(div9, div6);
				append_dev(div9, t4);
				append_dev(div9, div7);
				mount_component(datatable, div7, null);
				append_dev(div9, t5);
				append_dev(div9, div8);
				append_dev(div8, t6);
				append_dev(div8, br0);
				append_dev(div8, t7);
				append_dev(div8, br1);
				append_dev(div8, t8);
				current = true;
			},
			p: function update(ctx, dirty) {
				const fab0_changes = {};
				if (dirty[0] & /*isRunning*/ 16777216) fab0_changes.disabled = /*isRunning*/ ctx[24];

				if (dirty[3] & /*$$scope*/ 67108864) {
					fab0_changes.$$scope = { dirty, ctx };
				}

				fab0.$set(fab0_changes);
				const fab1_changes = {};
				if (dirty[0] & /*isRunning*/ 16777216) fab1_changes.disabled = /*isRunning*/ ctx[24];

				if (dirty[3] & /*$$scope*/ 67108864) {
					fab1_changes.$$scope = { dirty, ctx };
				}

				fab1.$set(fab1_changes);
				const select_1_changes = {};
				if (dirty[0] & /*isRunning*/ 16777216) select_1_changes.disabled = /*isRunning*/ ctx[24];

				if (dirty[3] & /*$$scope*/ 67108864) {
					select_1_changes.$$scope = { dirty, ctx };
				}

				if (!updating_value && dirty[0] & /*n_gaussians*/ 2) {
					updating_value = true;
					select_1_changes.value = /*n_gaussians*/ ctx[1];
					add_flush_callback(() => updating_value = false);
				}

				select_1.$set(select_1_changes);

				if (dirty[0] & /*$gaussians, isRunning*/ 553648128 | dirty[1] & /*hoveredGaussian, startDragMean, startDragVariance*/ 3088) {
					each_value_1 = ensure_array_like_dev(/*$gaussians*/ ctx[29]);
					let i;

					for (i = 0; i < each_value_1.length; i += 1) {
						const child_ctx = get_each_context_1(ctx, each_value_1, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
						} else {
							each_blocks[i] = create_each_block_1(child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(div4, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}

					each_blocks.length = each_value_1.length;
				}

				const datatable_changes = {};

				if (dirty[0] & /*$gaussians*/ 536870912 | dirty[3] & /*$$scope*/ 67108864) {
					datatable_changes.$$scope = { dirty, ctx };
				}

				datatable.$set(datatable_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(fab0.$$.fragment, local);
				transition_in(fab1.$$.fragment, local);
				transition_in(select_1.$$.fragment, local);
				transition_in(datatable.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(fab0.$$.fragment, local);
				transition_out(fab1.$$.fragment, local);
				transition_out(select_1.$$.fragment, local);
				transition_out(datatable.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div9);
				}

				destroy_component(fab0);
				destroy_component(fab1);
				destroy_component(select_1);
				destroy_each(each_blocks, detaching);
				destroy_component(datatable);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block.name,
			type: "if",
			source: "(484:4) {#if view === 'Environment'}",
			ctx
		});

		return block;
	}

	// (623:13) <Icon class="material-icons" style="font-size: 22px">
	function create_default_slot_74(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("replay");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_74.name,
			type: "slot",
			source: "(623:13) <Icon class=\\\"material-icons\\\" style=\\\"font-size: 22px\\\">",
			ctx
		});

		return block;
	}

	// (619:12) <Fab               on:click={resetSliders}               mini               disabled="{isRunning}"             >
	function create_default_slot_73(ctx) {
		let icon;
		let current;

		icon = new CommonIcon({
				props: {
					class: "material-icons",
					style: "font-size: 22px",
					$$slots: { default: [create_default_slot_74] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(icon.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(icon, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const icon_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					icon_changes.$$scope = { dirty, ctx };
				}

				icon.$set(icon_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(icon.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(icon.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(icon, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_73.name,
			type: "slot",
			source: "(619:12) <Fab               on:click={resetSliders}               mini               disabled=\\\"{isRunning}\\\"             >",
			ctx
		});

		return block;
	}

	// (630:14) {:else}
	function create_else_block_1(ctx) {
		let icon;
		let current;

		icon = new CommonIcon({
				props: {
					class: "material-icons",
					style: "font-size: 50px",
					$$slots: { default: [create_default_slot_72] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(icon.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(icon, target, anchor);
				current = true;
			},
			i: function intro(local) {
				if (current) return;
				transition_in(icon.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(icon.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(icon, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block_1.name,
			type: "else",
			source: "(630:14) {:else}",
			ctx
		});

		return block;
	}

	// (628:14) {#if isRunning}
	function create_if_block_7(ctx) {
		let icon;
		let current;

		icon = new CommonIcon({
				props: {
					class: "material-icons",
					style: "font-size: 50px",
					$$slots: { default: [create_default_slot_71] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(icon.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(icon, target, anchor);
				current = true;
			},
			i: function intro(local) {
				if (current) return;
				transition_in(icon.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(icon.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(icon, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_7.name,
			type: "if",
			source: "(628:14) {#if isRunning}",
			ctx
		});

		return block;
	}

	// (631:16) <Icon class="material-icons" style="font-size: 50px">
	function create_default_slot_72(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("play_arrow");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_72.name,
			type: "slot",
			source: "(631:16) <Icon class=\\\"material-icons\\\" style=\\\"font-size: 50px\\\">",
			ctx
		});

		return block;
	}

	// (629:16) <Icon class="material-icons" style="font-size: 50px">
	function create_default_slot_71(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("stop");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_71.name,
			type: "slot",
			source: "(629:16) <Icon class=\\\"material-icons\\\" style=\\\"font-size: 50px\\\">",
			ctx
		});

		return block;
	}

	// (625:12) <Fab               on:click={isRunning ? stopTraining : startTraining}             >
	function create_default_slot_70(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block_7, create_else_block_1];
		const if_blocks = [];

		function select_block_type_1(ctx, dirty) {
			if (/*isRunning*/ ctx[24]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type_1(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type_1(ctx);

				if (current_block_type_index !== previous_block_index) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_70.name,
			type: "slot",
			source: "(625:12) <Fab               on:click={isRunning ? stopTraining : startTraining}             >",
			ctx
		});

		return block;
	}

	// (640:18) <Option value={select}>
	function create_default_slot_69(ctx) {
		let t_value = /*select*/ ctx[111] + "";
		let t;

		const block = {
			c: function create() {
				t = text$2(t_value);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_69.name,
			type: "slot",
			source: "(640:18) <Option value={select}>",
			ctx
		});

		return block;
	}

	// (639:16) {#each losses_select as select}
	function create_each_block_4(ctx) {
		let option;
		let current;

		option = new Option({
				props: {
					value: /*select*/ ctx[111],
					$$slots: { default: [create_default_slot_69] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(option.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(option, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const option_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					option_changes.$$scope = { dirty, ctx };
				}

				option.$set(option_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(option.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(option.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(option, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block_4.name,
			type: "each",
			source: "(639:16) {#each losses_select as select}",
			ctx
		});

		return block;
	}

	// (638:14) <Select bind:value="{loss_choice}" label="Loss" color="primary" disabled="true" >
	function create_default_slot_68(ctx) {
		let each_1_anchor;
		let current;
		let each_value_4 = ensure_array_like_dev(/*losses_select*/ ctx[34]);
		let each_blocks = [];

		for (let i = 0; i < each_value_4.length; i += 1) {
			each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		const block = {
			c: function create() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m: function mount(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(target, anchor);
					}
				}

				insert_dev(target, each_1_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty[1] & /*losses_select*/ 8) {
					each_value_4 = ensure_array_like_dev(/*losses_select*/ ctx[34]);
					let i;

					for (i = 0; i < each_value_4.length; i += 1) {
						const child_ctx = get_each_context_4(ctx, each_value_4, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block_4(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
						}
					}

					group_outros();

					for (i = each_value_4.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;

				for (let i = 0; i < each_value_4.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o: function outro(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(each_1_anchor);
				}

				destroy_each(each_blocks, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_68.name,
			type: "slot",
			source: "(638:14) <Select bind:value=\\\"{loss_choice}\\\" label=\\\"Loss\\\" color=\\\"primary\\\" disabled=\\\"true\\\" >",
			ctx
		});

		return block;
	}

	// (652:20) <Option value={select}>
	function create_default_slot_67(ctx) {
		let t_value = /*select*/ ctx[111] + "";
		let t;

		const block = {
			c: function create() {
				t = text$2(t_value);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_67.name,
			type: "slot",
			source: "(652:20) <Option value={select}>",
			ctx
		});

		return block;
	}

	// (651:18) {#each n_iterations_select as select}
	function create_each_block_3(ctx) {
		let option;
		let current;

		option = new Option({
				props: {
					value: /*select*/ ctx[111],
					$$slots: { default: [create_default_slot_67] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(option.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(option, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const option_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					option_changes.$$scope = { dirty, ctx };
				}

				option.$set(option_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(option.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(option.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(option, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block_3.name,
			type: "each",
			source: "(651:18) {#each n_iterations_select as select}",
			ctx
		});

		return block;
	}

	// (646:16) <Select                   bind:value="{n_iterations_str}"                   label="Iterations"                   disabled="{isRunning}"                 >
	function create_default_slot_66(ctx) {
		let each_1_anchor;
		let current;
		let each_value_3 = ensure_array_like_dev(/*n_iterations_select*/ ctx[33]);
		let each_blocks = [];

		for (let i = 0; i < each_value_3.length; i += 1) {
			each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		const block = {
			c: function create() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m: function mount(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(target, anchor);
					}
				}

				insert_dev(target, each_1_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty[1] & /*n_iterations_select*/ 4) {
					each_value_3 = ensure_array_like_dev(/*n_iterations_select*/ ctx[33]);
					let i;

					for (i = 0; i < each_value_3.length; i += 1) {
						const child_ctx = get_each_context_3(ctx, each_value_3, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block_3(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
						}
					}

					group_outros();

					for (i = each_value_3.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;

				for (let i = 0; i < each_value_3.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o: function outro(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(each_1_anchor);
				}

				destroy_each(each_blocks, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_66.name,
			type: "slot",
			source: "(646:16) <Select                   bind:value=\\\"{n_iterations_str}\\\"                   label=\\\"Iterations\\\"                   disabled=\\\"{isRunning}\\\"                 >",
			ctx
		});

		return block;
	}

	// (664:16) <Label>
	function create_default_slot_65(ctx) {
		let t_value = /*tab*/ ctx[114] + "";
		let t;

		const block = {
			c: function create() {
				t = text$2(t_value);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			p: function update(ctx, dirty) {
				if (dirty[3] & /*tab*/ 2097152 && t_value !== (t_value = /*tab*/ ctx[114] + "")) set_data_dev(t, t_value);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_65.name,
			type: "slot",
			source: "(664:16) <Label>",
			ctx
		});

		return block;
	}

	// (663:14) <Tab {tab}>
	function create_default_slot_64(ctx) {
		let label;
		let current;

		label = new CommonLabel({
				props: {
					$$slots: { default: [create_default_slot_65] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(label.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(label, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const label_changes = {};

				if (dirty[3] & /*$$scope, tab*/ 69206016) {
					label_changes.$$scope = { dirty, ctx };
				}

				label.$set(label_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(label.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(label.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(label, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_64.name,
			type: "slot",
			source: "(663:14) <Tab {tab}>",
			ctx
		});

		return block;
	}

	// (662:12) <TabBar tabs={['Basic', 'Advanced']} let:tab bind:active={active_tab}>
	function create_default_slot_63(ctx) {
		let tab;
		let current;

		tab = new Tab({
				props: {
					tab: /*tab*/ ctx[114],
					$$slots: { default: [create_default_slot_64] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(tab.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(tab, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const tab_changes = {};
				if (dirty[3] & /*tab*/ 2097152) tab_changes.tab = /*tab*/ ctx[114];

				if (dirty[3] & /*$$scope, tab*/ 69206016) {
					tab_changes.$$scope = { dirty, ctx };
				}

				tab.$set(tab_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tab.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tab.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(tab, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_63.name,
			type: "slot",
			source: "(662:12) <TabBar tabs={['Basic', 'Advanced']} let:tab bind:active={active_tab}>",
			ctx
		});

		return block;
	}

	// (712:48) 
	function create_if_block_6(ctx) {
		let paper;
		let current;

		paper = new Paper({
				props: {
					variant: "unelevated",
					$$slots: { default: [create_default_slot_61] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(paper.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(paper, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const paper_changes = {};

				if (dirty[0] & /*isRunning, seed_value, hidden_dim_value, hidden_layer_value, off_policy_value*/ 16834816 | dirty[3] & /*$$scope*/ 67108864) {
					paper_changes.$$scope = { dirty, ctx };
				}

				paper.$set(paper_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(paper.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(paper.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(paper, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_6.name,
			type: "if",
			source: "(712:48) ",
			ctx
		});

		return block;
	}

	// (668:12) {#if active_tab === 'Basic'}
	function create_if_block_5(ctx) {
		let paper;
		let current;

		paper = new Paper({
				props: {
					variant: "unelevated",
					$$slots: { default: [create_default_slot_59] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(paper.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(paper, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const paper_changes = {};

				if (dirty[0] & /*isRunning, lr_logz_value, lr_model_value, trajectory_length_value, batch_size_exponent, batch_size_value*/ 50338817 | dirty[3] & /*$$scope*/ 67108864) {
					paper_changes.$$scope = { dirty, ctx };
				}

				paper.$set(paper_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(paper.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(paper.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(paper, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_5.name,
			type: "if",
			source: "(668:12) {#if active_tab === 'Basic'}",
			ctx
		});

		return block;
	}

	// (714:16) <Content>
	function create_default_slot_62(ctx) {
		let t0;
		let t1;
		let t2;
		let slider0;
		let updating_value;
		let t3;
		let br0;
		let t4;
		let t5;
		let t6;
		let slider1;
		let updating_value_1;
		let t7;
		let br1;
		let t8;
		let t9;
		let t10;
		let slider2;
		let updating_value_2;
		let t11;
		let br2;
		let t12;
		let t13;
		let t14;
		let slider3;
		let updating_value_3;
		let current;

		function slider0_value_binding_1(value) {
			/*slider0_value_binding_1*/ ctx[62](value);
		}

		let slider0_props = {
			min: 0,
			max: 3,
			step: 0.1,
			disabled: /*isRunning*/ ctx[24],
			"input$aria-label": "Set the Off-policy training"
		};

		if (/*off_policy_value*/ ctx[8] !== void 0) {
			slider0_props.value = /*off_policy_value*/ ctx[8];
		}

		slider0 = new Slider({ props: slider0_props, $$inline: true });
		binding_callbacks.push(() => bind(slider0, 'value', slider0_value_binding_1));

		function slider1_value_binding_1(value) {
			/*slider1_value_binding_1*/ ctx[63](value);
		}

		let slider1_props = {
			min: 1,
			max: 6,
			step: 1,
			disabled: /*isRunning*/ ctx[24],
			"input$aria-label": "Set the number of hidden layers"
		};

		if (/*hidden_layer_value*/ ctx[13] !== void 0) {
			slider1_props.value = /*hidden_layer_value*/ ctx[13];
		}

		slider1 = new Slider({ props: slider1_props, $$inline: true });
		binding_callbacks.push(() => bind(slider1, 'value', slider1_value_binding_1));

		function slider2_value_binding_1(value) {
			/*slider2_value_binding_1*/ ctx[64](value);
		}

		let slider2_props = {
			min: 8,
			max: 128,
			step: 8,
			disabled: /*isRunning*/ ctx[24],
			"input$aria-label": "Set the dimension of the hidden layers"
		};

		if (/*hidden_dim_value*/ ctx[14] !== void 0) {
			slider2_props.value = /*hidden_dim_value*/ ctx[14];
		}

		slider2 = new Slider({ props: slider2_props, $$inline: true });
		binding_callbacks.push(() => bind(slider2, 'value', slider2_value_binding_1));

		function slider3_value_binding_1(value) {
			/*slider3_value_binding_1*/ ctx[65](value);
		}

		let slider3_props = {
			min: 1,
			max: 99,
			step: 1,
			disabled: /*isRunning*/ ctx[24],
			"input$aria-label": "Set the seed"
		};

		if (/*seed_value*/ ctx[15] !== void 0) {
			slider3_props.value = /*seed_value*/ ctx[15];
		}

		slider3 = new Slider({ props: slider3_props, $$inline: true });
		binding_callbacks.push(() => bind(slider3, 'value', slider3_value_binding_1));

		const block = {
			c: function create() {
				t0 = text$2("Off-policy: ");
				t1 = text$2(/*off_policy_value*/ ctx[8]);
				t2 = space();
				create_component(slider0.$$.fragment);
				t3 = space();
				br0 = element("br");
				t4 = text$2("\n                  Number of hidden layers: ");
				t5 = text$2(/*hidden_layer_value*/ ctx[13]);
				t6 = space();
				create_component(slider1.$$.fragment);
				t7 = space();
				br1 = element("br");
				t8 = text$2("\n                  Size of the hidden layers: ");
				t9 = text$2(/*hidden_dim_value*/ ctx[14]);
				t10 = space();
				create_component(slider2.$$.fragment);
				t11 = space();
				br2 = element("br");
				t12 = text$2("\n                  Seed: ");
				t13 = text$2(/*seed_value*/ ctx[15]);
				t14 = space();
				create_component(slider3.$$.fragment);
				add_location(br0, file, 723, 18, 21994);
				add_location(br1, file, 733, 18, 22381);
				add_location(br2, file, 743, 18, 22775);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, t2, anchor);
				mount_component(slider0, target, anchor);
				insert_dev(target, t3, anchor);
				insert_dev(target, br0, anchor);
				insert_dev(target, t4, anchor);
				insert_dev(target, t5, anchor);
				insert_dev(target, t6, anchor);
				mount_component(slider1, target, anchor);
				insert_dev(target, t7, anchor);
				insert_dev(target, br1, anchor);
				insert_dev(target, t8, anchor);
				insert_dev(target, t9, anchor);
				insert_dev(target, t10, anchor);
				mount_component(slider2, target, anchor);
				insert_dev(target, t11, anchor);
				insert_dev(target, br2, anchor);
				insert_dev(target, t12, anchor);
				insert_dev(target, t13, anchor);
				insert_dev(target, t14, anchor);
				mount_component(slider3, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (!current || dirty[0] & /*off_policy_value*/ 256) set_data_dev(t1, /*off_policy_value*/ ctx[8]);
				const slider0_changes = {};
				if (dirty[0] & /*isRunning*/ 16777216) slider0_changes.disabled = /*isRunning*/ ctx[24];

				if (!updating_value && dirty[0] & /*off_policy_value*/ 256) {
					updating_value = true;
					slider0_changes.value = /*off_policy_value*/ ctx[8];
					add_flush_callback(() => updating_value = false);
				}

				slider0.$set(slider0_changes);
				if (!current || dirty[0] & /*hidden_layer_value*/ 8192) set_data_dev(t5, /*hidden_layer_value*/ ctx[13]);
				const slider1_changes = {};
				if (dirty[0] & /*isRunning*/ 16777216) slider1_changes.disabled = /*isRunning*/ ctx[24];

				if (!updating_value_1 && dirty[0] & /*hidden_layer_value*/ 8192) {
					updating_value_1 = true;
					slider1_changes.value = /*hidden_layer_value*/ ctx[13];
					add_flush_callback(() => updating_value_1 = false);
				}

				slider1.$set(slider1_changes);
				if (!current || dirty[0] & /*hidden_dim_value*/ 16384) set_data_dev(t9, /*hidden_dim_value*/ ctx[14]);
				const slider2_changes = {};
				if (dirty[0] & /*isRunning*/ 16777216) slider2_changes.disabled = /*isRunning*/ ctx[24];

				if (!updating_value_2 && dirty[0] & /*hidden_dim_value*/ 16384) {
					updating_value_2 = true;
					slider2_changes.value = /*hidden_dim_value*/ ctx[14];
					add_flush_callback(() => updating_value_2 = false);
				}

				slider2.$set(slider2_changes);
				if (!current || dirty[0] & /*seed_value*/ 32768) set_data_dev(t13, /*seed_value*/ ctx[15]);
				const slider3_changes = {};
				if (dirty[0] & /*isRunning*/ 16777216) slider3_changes.disabled = /*isRunning*/ ctx[24];

				if (!updating_value_3 && dirty[0] & /*seed_value*/ 32768) {
					updating_value_3 = true;
					slider3_changes.value = /*seed_value*/ ctx[15];
					add_flush_callback(() => updating_value_3 = false);
				}

				slider3.$set(slider3_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(slider0.$$.fragment, local);
				transition_in(slider1.$$.fragment, local);
				transition_in(slider2.$$.fragment, local);
				transition_in(slider3.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(slider0.$$.fragment, local);
				transition_out(slider1.$$.fragment, local);
				transition_out(slider2.$$.fragment, local);
				transition_out(slider3.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
					detach_dev(t2);
					detach_dev(t3);
					detach_dev(br0);
					detach_dev(t4);
					detach_dev(t5);
					detach_dev(t6);
					detach_dev(t7);
					detach_dev(br1);
					detach_dev(t8);
					detach_dev(t9);
					detach_dev(t10);
					detach_dev(t11);
					detach_dev(br2);
					detach_dev(t12);
					detach_dev(t13);
					detach_dev(t14);
				}

				destroy_component(slider0, detaching);
				destroy_component(slider1, detaching);
				destroy_component(slider2, detaching);
				destroy_component(slider3, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_62.name,
			type: "slot",
			source: "(714:16) <Content>",
			ctx
		});

		return block;
	}

	// (713:14) <Paper variant="unelevated">
	function create_default_slot_61(ctx) {
		let content;
		let current;

		content = new Content({
				props: {
					$$slots: { default: [create_default_slot_62] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(content.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(content, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const content_changes = {};

				if (dirty[0] & /*isRunning, seed_value, hidden_dim_value, hidden_layer_value, off_policy_value*/ 16834816 | dirty[3] & /*$$scope*/ 67108864) {
					content_changes.$$scope = { dirty, ctx };
				}

				content.$set(content_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(content.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(content.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(content, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_61.name,
			type: "slot",
			source: "(713:14) <Paper variant=\\\"unelevated\\\">",
			ctx
		});

		return block;
	}

	// (670:16) <Content>
	function create_default_slot_60(ctx) {
		let t0;
		let t1;
		let t2;
		let slider0;
		let updating_value;
		let t3;
		let br0;
		let t4;
		let t5;
		let t6;
		let slider1;
		let updating_value_1;
		let t7;
		let br1;
		let t8;
		let t9_value = /*lr_model_value*/ ctx[10].toFixed(4) + "";
		let t9;
		let t10;
		let slider2;
		let updating_value_2;
		let t11;
		let br2;
		let t12;
		let br3;
		let t13;
		let t14_value = /*lr_logz_value*/ ctx[11].toFixed(3) + "";
		let t14;
		let t15;
		let slider3;
		let updating_value_3;
		let current;

		function slider0_value_binding(value) {
			/*slider0_value_binding*/ ctx[58](value);
		}

		let slider0_props = {
			min: 3,
			max: 11,
			step: 1,
			disabled: /*isRunning*/ ctx[24],
			"input$aria-label": "Set the batch size: 2 to the power of n"
		};

		if (/*batch_size_exponent*/ ctx[0] !== void 0) {
			slider0_props.value = /*batch_size_exponent*/ ctx[0];
		}

		slider0 = new Slider({ props: slider0_props, $$inline: true });
		binding_callbacks.push(() => bind(slider0, 'value', slider0_value_binding));

		function slider1_value_binding(value) {
			/*slider1_value_binding*/ ctx[59](value);
		}

		let slider1_props = {
			min: 1,
			max: 10,
			step: 1,
			disabled: /*isRunning*/ ctx[24],
			"input$aria-label": "Set the length of the trajectory"
		};

		if (/*trajectory_length_value*/ ctx[12] !== void 0) {
			slider1_props.value = /*trajectory_length_value*/ ctx[12];
		}

		slider1 = new Slider({ props: slider1_props, $$inline: true });
		binding_callbacks.push(() => bind(slider1, 'value', slider1_value_binding));

		function slider2_value_binding(value) {
			/*slider2_value_binding*/ ctx[60](value);
		}

		let slider2_props = {
			min: 0.0001,
			max: 0.01,
			step: 0.0001,
			disabled: /*isRunning*/ ctx[24],
			"input$aria-label": "Set the learning rate of the model"
		};

		if (/*lr_model_value*/ ctx[10] !== void 0) {
			slider2_props.value = /*lr_model_value*/ ctx[10];
		}

		slider2 = new Slider({ props: slider2_props, $$inline: true });
		binding_callbacks.push(() => bind(slider2, 'value', slider2_value_binding));

		function slider3_value_binding(value) {
			/*slider3_value_binding*/ ctx[61](value);
		}

		let slider3_props = {
			min: 0.001,
			max: 0.3,
			step: 0.001,
			disabled: /*isRunning*/ ctx[24],
			"input$aria-label": "Set the learning rate of logZ"
		};

		if (/*lr_logz_value*/ ctx[11] !== void 0) {
			slider3_props.value = /*lr_logz_value*/ ctx[11];
		}

		slider3 = new Slider({ props: slider3_props, $$inline: true });
		binding_callbacks.push(() => bind(slider3, 'value', slider3_value_binding));

		const block = {
			c: function create() {
				t0 = text$2("Batch size: ");
				t1 = text$2(/*batch_size_value*/ ctx[25]);
				t2 = space();
				create_component(slider0.$$.fragment);
				t3 = space();
				br0 = element("br");
				t4 = text$2("\n                  Trajectory length: ");
				t5 = text$2(/*trajectory_length_value*/ ctx[12]);
				t6 = space();
				create_component(slider1.$$.fragment);
				t7 = space();
				br1 = element("br");
				t8 = text$2("\n                  Learning rate of the model: ");
				t9 = text$2(t9_value);
				t10 = space();
				create_component(slider2.$$.fragment);
				t11 = space();
				br2 = element("br");
				t12 = text$2("\n                  Learning rate of ");
				br3 = element("br");
				t13 = text$2(" logZ: ");
				t14 = text$2(t14_value);
				t15 = space();
				create_component(slider3.$$.fragment);
				add_location(br0, file, 679, 18, 20280);
				add_location(br1, file, 689, 18, 20673);
				add_location(br2, file, 699, 18, 21082);
				add_location(br3, file, 700, 35, 21122);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, t2, anchor);
				mount_component(slider0, target, anchor);
				insert_dev(target, t3, anchor);
				insert_dev(target, br0, anchor);
				insert_dev(target, t4, anchor);
				insert_dev(target, t5, anchor);
				insert_dev(target, t6, anchor);
				mount_component(slider1, target, anchor);
				insert_dev(target, t7, anchor);
				insert_dev(target, br1, anchor);
				insert_dev(target, t8, anchor);
				insert_dev(target, t9, anchor);
				insert_dev(target, t10, anchor);
				mount_component(slider2, target, anchor);
				insert_dev(target, t11, anchor);
				insert_dev(target, br2, anchor);
				insert_dev(target, t12, anchor);
				insert_dev(target, br3, anchor);
				insert_dev(target, t13, anchor);
				insert_dev(target, t14, anchor);
				insert_dev(target, t15, anchor);
				mount_component(slider3, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (!current || dirty[0] & /*batch_size_value*/ 33554432) set_data_dev(t1, /*batch_size_value*/ ctx[25]);
				const slider0_changes = {};
				if (dirty[0] & /*isRunning*/ 16777216) slider0_changes.disabled = /*isRunning*/ ctx[24];

				if (!updating_value && dirty[0] & /*batch_size_exponent*/ 1) {
					updating_value = true;
					slider0_changes.value = /*batch_size_exponent*/ ctx[0];
					add_flush_callback(() => updating_value = false);
				}

				slider0.$set(slider0_changes);
				if (!current || dirty[0] & /*trajectory_length_value*/ 4096) set_data_dev(t5, /*trajectory_length_value*/ ctx[12]);
				const slider1_changes = {};
				if (dirty[0] & /*isRunning*/ 16777216) slider1_changes.disabled = /*isRunning*/ ctx[24];

				if (!updating_value_1 && dirty[0] & /*trajectory_length_value*/ 4096) {
					updating_value_1 = true;
					slider1_changes.value = /*trajectory_length_value*/ ctx[12];
					add_flush_callback(() => updating_value_1 = false);
				}

				slider1.$set(slider1_changes);
				if ((!current || dirty[0] & /*lr_model_value*/ 1024) && t9_value !== (t9_value = /*lr_model_value*/ ctx[10].toFixed(4) + "")) set_data_dev(t9, t9_value);
				const slider2_changes = {};
				if (dirty[0] & /*isRunning*/ 16777216) slider2_changes.disabled = /*isRunning*/ ctx[24];

				if (!updating_value_2 && dirty[0] & /*lr_model_value*/ 1024) {
					updating_value_2 = true;
					slider2_changes.value = /*lr_model_value*/ ctx[10];
					add_flush_callback(() => updating_value_2 = false);
				}

				slider2.$set(slider2_changes);
				if ((!current || dirty[0] & /*lr_logz_value*/ 2048) && t14_value !== (t14_value = /*lr_logz_value*/ ctx[11].toFixed(3) + "")) set_data_dev(t14, t14_value);
				const slider3_changes = {};
				if (dirty[0] & /*isRunning*/ 16777216) slider3_changes.disabled = /*isRunning*/ ctx[24];

				if (!updating_value_3 && dirty[0] & /*lr_logz_value*/ 2048) {
					updating_value_3 = true;
					slider3_changes.value = /*lr_logz_value*/ ctx[11];
					add_flush_callback(() => updating_value_3 = false);
				}

				slider3.$set(slider3_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(slider0.$$.fragment, local);
				transition_in(slider1.$$.fragment, local);
				transition_in(slider2.$$.fragment, local);
				transition_in(slider3.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(slider0.$$.fragment, local);
				transition_out(slider1.$$.fragment, local);
				transition_out(slider2.$$.fragment, local);
				transition_out(slider3.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
					detach_dev(t2);
					detach_dev(t3);
					detach_dev(br0);
					detach_dev(t4);
					detach_dev(t5);
					detach_dev(t6);
					detach_dev(t7);
					detach_dev(br1);
					detach_dev(t8);
					detach_dev(t9);
					detach_dev(t10);
					detach_dev(t11);
					detach_dev(br2);
					detach_dev(t12);
					detach_dev(br3);
					detach_dev(t13);
					detach_dev(t14);
					detach_dev(t15);
				}

				destroy_component(slider0, detaching);
				destroy_component(slider1, detaching);
				destroy_component(slider2, detaching);
				destroy_component(slider3, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_60.name,
			type: "slot",
			source: "(670:16) <Content>",
			ctx
		});

		return block;
	}

	// (669:14) <Paper variant="unelevated">
	function create_default_slot_59(ctx) {
		let content;
		let current;

		content = new Content({
				props: {
					$$slots: { default: [create_default_slot_60] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(content.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(content, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const content_changes = {};

				if (dirty[0] & /*isRunning, lr_logz_value, lr_model_value, trajectory_length_value, batch_size_exponent, batch_size_value*/ 50338817 | dirty[3] & /*$$scope*/ 67108864) {
					content_changes.$$scope = { dirty, ctx };
				}

				content.$set(content_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(content.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(content.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(content, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_59.name,
			type: "slot",
			source: "(669:14) <Paper variant=\\\"unelevated\\\">",
			ctx
		});

		return block;
	}

	// (763:8) {:else}
	function create_else_block(ctx) {
		let div;

		const block = {
			c: function create() {
				div = element("div");
				div.innerHTML = ``;
				attr_dev(div, "class", "pg-vis");
				attr_dev(div, "id", "trainplot");
				add_location(div, file, 763, 10, 23425);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block.name,
			type: "else",
			source: "(763:8) {:else}",
			ctx
		});

		return block;
	}

	// (759:8) {#if !display_trainhistory && !isRunning}
	function create_if_block_4(ctx) {
		let div;

		const block = {
			c: function create() {
				div = element("div");
				div.textContent = "Press Play to start training a GFlowNet";
				attr_dev(div, "class", "pg-vis");
				set_style(div, "text-align", "center");
				set_style(div, "padding", "100px");
				set_style(div, "color", "#323232");
				add_location(div, file, 759, 10, 23251);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_4.name,
			type: "if",
			source: "(759:8) {#if !display_trainhistory && !isRunning}",
			ctx
		});

		return block;
	}

	// (777:26) 
	function create_if_block_3(ctx) {
		let div;
		let linearprogress;
		let current;

		linearprogress = new LinearProgress({
				props: {
					progress: /*training_progress*/ ctx[23] / /*n_iterations_value*/ ctx[9]
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				div = element("div");
				create_component(linearprogress.$$.fragment);
				attr_dev(div, "class", "pg-progress");
				add_location(div, file, 777, 8, 23821);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				mount_component(linearprogress, div, null);
				current = true;
			},
			p: function update(ctx, dirty) {
				const linearprogress_changes = {};
				if (dirty[0] & /*training_progress, n_iterations_value*/ 8389120) linearprogress_changes.progress = /*training_progress*/ ctx[23] / /*n_iterations_value*/ ctx[9];
				linearprogress.$set(linearprogress_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(linearprogress.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(linearprogress.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				destroy_component(linearprogress);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_3.name,
			type: "if",
			source: "(777:26) ",
			ctx
		});

		return block;
	}

	// (769:10) {#if !isRunning & display_trainhistory}
	function create_if_block_2(ctx) {
		let slider;
		let updating_value;
		let current;

		function slider_value_binding(value) {
			/*slider_value_binding*/ ctx[66](value);
		}

		let slider_props = {
			min: 0,
			max: /*frames*/ ctx[22].length,
			step: 1,
			"input$aria-label": "View the iterations"
		};

		if (/*training_frame*/ ctx[4] !== void 0) {
			slider_props.value = /*training_frame*/ ctx[4];
		}

		slider = new Slider({ props: slider_props, $$inline: true });
		binding_callbacks.push(() => bind(slider, 'value', slider_value_binding));

		const block = {
			c: function create() {
				create_component(slider.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(slider, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const slider_changes = {};
				if (dirty[0] & /*frames*/ 4194304) slider_changes.max = /*frames*/ ctx[22].length;

				if (!updating_value && dirty[0] & /*training_frame*/ 16) {
					updating_value = true;
					slider_changes.value = /*training_frame*/ ctx[4];
					add_flush_callback(() => updating_value = false);
				}

				slider.$set(slider_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(slider.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(slider.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(slider, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_2.name,
			type: "if",
			source: "(769:10) {#if !isRunning & display_trainhistory}",
			ctx
		});

		return block;
	}

	// (495:13) <Icon class="material-icons" style="font-size: 22px">
	function create_default_slot_58(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("replay");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_58.name,
			type: "slot",
			source: "(495:13) <Icon class=\\\"material-icons\\\" style=\\\"font-size: 22px\\\">",
			ctx
		});

		return block;
	}

	// (491:12) <Fab               on:click={resetGaussians}               mini               disabled="{isRunning}"             >
	function create_default_slot_57(ctx) {
		let icon;
		let current;

		icon = new CommonIcon({
				props: {
					class: "material-icons",
					style: "font-size: 22px",
					$$slots: { default: [create_default_slot_58] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(icon.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(icon, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const icon_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					icon_changes.$$scope = { dirty, ctx };
				}

				icon.$set(icon_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(icon.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(icon.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(icon, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_57.name,
			type: "slot",
			source: "(491:12) <Fab               on:click={resetGaussians}               mini               disabled=\\\"{isRunning}\\\"             >",
			ctx
		});

		return block;
	}

	// (501:16) <Icon class="material-icons" style="font-size: 50px">
	function create_default_slot_56(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("play_arrow");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_56.name,
			type: "slot",
			source: "(501:16) <Icon class=\\\"material-icons\\\" style=\\\"font-size: 50px\\\">",
			ctx
		});

		return block;
	}

	// (497:12) <Fab               on:click={() => view="Training"}               disabled="{isRunning}"             >
	function create_default_slot_55(ctx) {
		let icon;
		let current;

		icon = new CommonIcon({
				props: {
					class: "material-icons",
					style: "font-size: 50px",
					$$slots: { default: [create_default_slot_56] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(icon.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(icon, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const icon_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					icon_changes.$$scope = { dirty, ctx };
				}

				icon.$set(icon_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(icon.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(icon.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(icon, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_55.name,
			type: "slot",
			source: "(497:12) <Fab               on:click={() => view=\\\"Training\\\"}               disabled=\\\"{isRunning}\\\"             >",
			ctx
		});

		return block;
	}

	// (509:18) <Option value={select}>
	function create_default_slot_54(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2(/*select*/ ctx[111]);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_54.name,
			type: "slot",
			source: "(509:18) <Option value={select}>",
			ctx
		});

		return block;
	}

	// (508:16) {#each ["1","2","3","4"] as select}
	function create_each_block_2(ctx) {
		let option;
		let current;

		option = new Option({
				props: {
					value: /*select*/ ctx[111],
					$$slots: { default: [create_default_slot_54] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(option.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(option, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const option_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					option_changes.$$scope = { dirty, ctx };
				}

				option.$set(option_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(option.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(option.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(option, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block_2.name,
			type: "each",
			source: "(508:16) {#each [\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\"] as select}",
			ctx
		});

		return block;
	}

	// (507:14) <Select bind:value="{n_gaussians}" label="N Gaussians" disabled="{isRunning}">
	function create_default_slot_53(ctx) {
		let each_1_anchor;
		let current;
		let each_value_2 = ensure_array_like_dev(["1", "2", "3", "4"]);
		let each_blocks = [];

		for (let i = 0; i < 4; i += 1) {
			each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
		}

		const block = {
			c: function create() {
				for (let i = 0; i < 4; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m: function mount(target, anchor) {
				for (let i = 0; i < 4; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(target, anchor);
					}
				}

				insert_dev(target, each_1_anchor, anchor);
				current = true;
			},
			p: noop,
			i: function intro(local) {
				if (current) return;

				for (let i = 0; i < 4; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o: function outro(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < 4; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(each_1_anchor);
				}

				destroy_each(each_blocks, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_53.name,
			type: "slot",
			source: "(507:14) <Select bind:value=\\\"{n_gaussians}\\\" label=\\\"N Gaussians\\\" disabled=\\\"{isRunning}\\\">",
			ctx
		});

		return block;
	}

	// (519:12) {#each $gaussians as g, i}
	function create_each_block_1(ctx) {
		let div0;
		let div0_aria_valuenow_value;
		let t;
		let div1;
		let div1_aria_valuenow_value;
		let mounted;
		let dispose;

		function mousedown_handler(...args) {
			return /*mousedown_handler*/ ctx[47](/*g*/ ctx[109], ...args);
		}

		function mousedown_handler_1(...args) {
			return /*mousedown_handler_1*/ ctx[48](/*g*/ ctx[109], ...args);
		}

		const block = {
			c: function create() {
				div0 = element("div");
				t = space();
				div1 = element("div");
				attr_dev(div0, "class", "variance-circle");
				set_style(div0, "width", 129 * /*g*/ ctx[109].variance + "px");
				set_style(div0, "height", 129 * /*g*/ ctx[109].variance + "px");
				set_style(div0, "left", 132 + 132 / 3 * /*g*/ ctx[109].mean.x + "px");
				set_style(div0, "top", 132 - 132 / 3 * /*g*/ ctx[109].mean.y + "px");
				attr_dev(div0, "role", "slider");
				attr_dev(div0, "aria-valuenow", div0_aria_valuenow_value = /*g*/ ctx[109].variance);
				attr_dev(div0, "aria-valuemin", "0.1");
				attr_dev(div0, "aria-valuemax", "1");
				attr_dev(div0, "tabindex", "0");
				toggle_class(div0, "highlight", /*i*/ ctx[106] === /*hoveredGaussian*/ ctx[35] || /*isRunning*/ ctx[24]);
				add_location(div0, file, 520, 14, 14327);
				attr_dev(div1, "class", "mean-circle");
				set_style(div1, "left", 132 + 132 / 3 * /*g*/ ctx[109].mean.x + "px");
				set_style(div1, "top", 132 - 132 / 3 * /*g*/ ctx[109].mean.y + "px");
				attr_dev(div1, "role", "slider");
				attr_dev(div1, "aria-valuenow", div1_aria_valuenow_value = "" + (/*g*/ ctx[109].mean.x + ", " + /*g*/ ctx[109].mean.y));
				attr_dev(div1, "aria-valuemin", "-3");
				attr_dev(div1, "aria-valuemax", "3");
				attr_dev(div1, "tabindex", "0");
				toggle_class(div1, "highlight", /*i*/ ctx[106] === /*hoveredGaussian*/ ctx[35]);
				add_location(div1, file, 538, 14, 14989);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div0, anchor);
				insert_dev(target, t, anchor);
				insert_dev(target, div1, anchor);

				if (!mounted) {
					dispose = [
						listen_dev(div0, "mousedown", mousedown_handler, false, false, false, false),
						listen_dev(div1, "mousedown", mousedown_handler_1, false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;

				if (dirty[0] & /*$gaussians*/ 536870912) {
					set_style(div0, "width", 129 * /*g*/ ctx[109].variance + "px");
				}

				if (dirty[0] & /*$gaussians*/ 536870912) {
					set_style(div0, "height", 129 * /*g*/ ctx[109].variance + "px");
				}

				if (dirty[0] & /*$gaussians*/ 536870912) {
					set_style(div0, "left", 132 + 132 / 3 * /*g*/ ctx[109].mean.x + "px");
				}

				if (dirty[0] & /*$gaussians*/ 536870912) {
					set_style(div0, "top", 132 - 132 / 3 * /*g*/ ctx[109].mean.y + "px");
				}

				if (dirty[0] & /*$gaussians*/ 536870912 && div0_aria_valuenow_value !== (div0_aria_valuenow_value = /*g*/ ctx[109].variance)) {
					attr_dev(div0, "aria-valuenow", div0_aria_valuenow_value);
				}

				if (dirty[0] & /*isRunning*/ 16777216 | dirty[1] & /*hoveredGaussian*/ 16) {
					toggle_class(div0, "highlight", /*i*/ ctx[106] === /*hoveredGaussian*/ ctx[35] || /*isRunning*/ ctx[24]);
				}

				if (dirty[0] & /*$gaussians*/ 536870912) {
					set_style(div1, "left", 132 + 132 / 3 * /*g*/ ctx[109].mean.x + "px");
				}

				if (dirty[0] & /*$gaussians*/ 536870912) {
					set_style(div1, "top", 132 - 132 / 3 * /*g*/ ctx[109].mean.y + "px");
				}

				if (dirty[0] & /*$gaussians*/ 536870912 && div1_aria_valuenow_value !== (div1_aria_valuenow_value = "" + (/*g*/ ctx[109].mean.x + ", " + /*g*/ ctx[109].mean.y))) {
					attr_dev(div1, "aria-valuenow", div1_aria_valuenow_value);
				}
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div0);
					detach_dev(t);
					detach_dev(div1);
				}

				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block_1.name,
			type: "each",
			source: "(519:12) {#each $gaussians as g, i}",
			ctx
		});

		return block;
	}

	// (563:22) <Katex>
	function create_default_slot_52(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("\\mu_x");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_52.name,
			type: "slot",
			source: "(563:22) <Katex>",
			ctx
		});

		return block;
	}

	// (563:16) <Cell>
	function create_default_slot_51(ctx) {
		let katex;
		let current;

		katex = new Katex({
				props: {
					$$slots: { default: [create_default_slot_52] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(katex.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(katex, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const katex_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex_changes.$$scope = { dirty, ctx };
				}

				katex.$set(katex_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(katex.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(katex.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(katex, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_51.name,
			type: "slot",
			source: "(563:16) <Cell>",
			ctx
		});

		return block;
	}

	// (564:22) <Katex>
	function create_default_slot_50(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("\\mu_y");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_50.name,
			type: "slot",
			source: "(564:22) <Katex>",
			ctx
		});

		return block;
	}

	// (564:16) <Cell>
	function create_default_slot_49(ctx) {
		let katex;
		let current;

		katex = new Katex({
				props: {
					$$slots: { default: [create_default_slot_50] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(katex.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(katex, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const katex_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex_changes.$$scope = { dirty, ctx };
				}

				katex.$set(katex_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(katex.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(katex.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(katex, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_49.name,
			type: "slot",
			source: "(564:16) <Cell>",
			ctx
		});

		return block;
	}

	// (565:22) <Katex>
	function create_default_slot_48(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("\\sigma^2");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_48.name,
			type: "slot",
			source: "(565:22) <Katex>",
			ctx
		});

		return block;
	}

	// (565:16) <Cell>
	function create_default_slot_47(ctx) {
		let katex;
		let current;

		katex = new Katex({
				props: {
					$$slots: { default: [create_default_slot_48] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(katex.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(katex, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const katex_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex_changes.$$scope = { dirty, ctx };
				}

				katex.$set(katex_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(katex.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(katex.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(katex, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_47.name,
			type: "slot",
			source: "(565:16) <Cell>",
			ctx
		});

		return block;
	}

	// (562:14) <Row>
	function create_default_slot_46(ctx) {
		let cell0;
		let t0;
		let cell1;
		let t1;
		let cell2;
		let current;

		cell0 = new Cell({
				props: {
					$$slots: { default: [create_default_slot_51] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		cell1 = new Cell({
				props: {
					$$slots: { default: [create_default_slot_49] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		cell2 = new Cell({
				props: {
					$$slots: { default: [create_default_slot_47] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(cell0.$$.fragment);
				t0 = space();
				create_component(cell1.$$.fragment);
				t1 = space();
				create_component(cell2.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(cell0, target, anchor);
				insert_dev(target, t0, anchor);
				mount_component(cell1, target, anchor);
				insert_dev(target, t1, anchor);
				mount_component(cell2, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const cell0_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					cell0_changes.$$scope = { dirty, ctx };
				}

				cell0.$set(cell0_changes);
				const cell1_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					cell1_changes.$$scope = { dirty, ctx };
				}

				cell1.$set(cell1_changes);
				const cell2_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					cell2_changes.$$scope = { dirty, ctx };
				}

				cell2.$set(cell2_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(cell0.$$.fragment, local);
				transition_in(cell1.$$.fragment, local);
				transition_in(cell2.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(cell0.$$.fragment, local);
				transition_out(cell1.$$.fragment, local);
				transition_out(cell2.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
				}

				destroy_component(cell0, detaching);
				destroy_component(cell1, detaching);
				destroy_component(cell2, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_46.name,
			type: "slot",
			source: "(562:14) <Row>",
			ctx
		});

		return block;
	}

	// (561:12) <Head>
	function create_default_slot_45(ctx) {
		let row;
		let current;

		row = new Row({
				props: {
					$$slots: { default: [create_default_slot_46] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(row.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(row, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const row_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					row_changes.$$scope = { dirty, ctx };
				}

				row.$set(row_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(row.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(row.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(row, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_45.name,
			type: "slot",
			source: "(561:12) <Head>",
			ctx
		});

		return block;
	}

	// (571:18) <Cell>
	function create_default_slot_44(ctx) {
		let textfield;
		let updating_value;
		let current;

		function textfield_value_binding(value) {
			/*textfield_value_binding*/ ctx[49](value, /*i*/ ctx[106]);
		}

		function input_handler(...args) {
			return /*input_handler*/ ctx[50](/*i*/ ctx[106], ...args);
		}

		let textfield_props = {
			type: "number",
			input$step: "0.1",
			style: "width:100%",
			helperLine$style: "width: 100%;"
		};

		if (/*$gaussians*/ ctx[29][/*i*/ ctx[106]]["mean"]["x"] !== void 0) {
			textfield_props.value = /*$gaussians*/ ctx[29][/*i*/ ctx[106]]["mean"]["x"];
		}

		textfield = new Textfield({ props: textfield_props, $$inline: true });
		binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding));
		textfield.$on("input", input_handler);

		const block = {
			c: function create() {
				create_component(textfield.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(textfield, target, anchor);
				current = true;
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;
				const textfield_changes = {};

				if (!updating_value && dirty[0] & /*$gaussians*/ 536870912) {
					updating_value = true;
					textfield_changes.value = /*$gaussians*/ ctx[29][/*i*/ ctx[106]]["mean"]["x"];
					add_flush_callback(() => updating_value = false);
				}

				textfield.$set(textfield_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(textfield.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(textfield.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(textfield, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_44.name,
			type: "slot",
			source: "(571:18) <Cell>",
			ctx
		});

		return block;
	}

	// (581:18) <Cell>
	function create_default_slot_43(ctx) {
		let textfield;
		let updating_value;
		let current;

		function textfield_value_binding_1(value) {
			/*textfield_value_binding_1*/ ctx[51](value, /*i*/ ctx[106]);
		}

		function input_handler_1(...args) {
			return /*input_handler_1*/ ctx[52](/*i*/ ctx[106], ...args);
		}

		let textfield_props = {
			type: "number",
			input$step: "0.1",
			style: "width:100%",
			helperLine$style: "width: 100%;"
		};

		if (/*$gaussians*/ ctx[29][/*i*/ ctx[106]]["mean"]["y"] !== void 0) {
			textfield_props.value = /*$gaussians*/ ctx[29][/*i*/ ctx[106]]["mean"]["y"];
		}

		textfield = new Textfield({ props: textfield_props, $$inline: true });
		binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_1));
		textfield.$on("input", input_handler_1);

		const block = {
			c: function create() {
				create_component(textfield.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(textfield, target, anchor);
				current = true;
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;
				const textfield_changes = {};

				if (!updating_value && dirty[0] & /*$gaussians*/ 536870912) {
					updating_value = true;
					textfield_changes.value = /*$gaussians*/ ctx[29][/*i*/ ctx[106]]["mean"]["y"];
					add_flush_callback(() => updating_value = false);
				}

				textfield.$set(textfield_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(textfield.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(textfield.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(textfield, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_43.name,
			type: "slot",
			source: "(581:18) <Cell>",
			ctx
		});

		return block;
	}

	// (590:18) <Cell>
	function create_default_slot_42(ctx) {
		let textfield;
		let updating_value;
		let current;

		function textfield_value_binding_2(value) {
			/*textfield_value_binding_2*/ ctx[53](value, /*i*/ ctx[106]);
		}

		function input_handler_2(...args) {
			return /*input_handler_2*/ ctx[54](/*i*/ ctx[106], ...args);
		}

		let textfield_props = {
			type: "number",
			input$step: "0.1",
			style: "width:100%",
			helperLine$style: "width: 100%;"
		};

		if (/*$gaussians*/ ctx[29][/*i*/ ctx[106]]["variance"] !== void 0) {
			textfield_props.value = /*$gaussians*/ ctx[29][/*i*/ ctx[106]]["variance"];
		}

		textfield = new Textfield({ props: textfield_props, $$inline: true });
		binding_callbacks.push(() => bind(textfield, 'value', textfield_value_binding_2));
		textfield.$on("input", input_handler_2);

		const block = {
			c: function create() {
				create_component(textfield.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(textfield, target, anchor);
				current = true;
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;
				const textfield_changes = {};

				if (!updating_value && dirty[0] & /*$gaussians*/ 536870912) {
					updating_value = true;
					textfield_changes.value = /*$gaussians*/ ctx[29][/*i*/ ctx[106]]["variance"];
					add_flush_callback(() => updating_value = false);
				}

				textfield.$set(textfield_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(textfield.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(textfield.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(textfield, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_42.name,
			type: "slot",
			source: "(590:18) <Cell>",
			ctx
		});

		return block;
	}

	// (570:16) <Row>
	function create_default_slot_41(ctx) {
		let cell0;
		let t0;
		let cell1;
		let t1;
		let cell2;
		let t2;
		let current;

		cell0 = new Cell({
				props: {
					$$slots: { default: [create_default_slot_44] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		cell1 = new Cell({
				props: {
					$$slots: { default: [create_default_slot_43] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		cell2 = new Cell({
				props: {
					$$slots: { default: [create_default_slot_42] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(cell0.$$.fragment);
				t0 = space();
				create_component(cell1.$$.fragment);
				t1 = space();
				create_component(cell2.$$.fragment);
				t2 = space();
			},
			m: function mount(target, anchor) {
				mount_component(cell0, target, anchor);
				insert_dev(target, t0, anchor);
				mount_component(cell1, target, anchor);
				insert_dev(target, t1, anchor);
				mount_component(cell2, target, anchor);
				insert_dev(target, t2, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const cell0_changes = {};

				if (dirty[0] & /*$gaussians*/ 536870912 | dirty[3] & /*$$scope*/ 67108864) {
					cell0_changes.$$scope = { dirty, ctx };
				}

				cell0.$set(cell0_changes);
				const cell1_changes = {};

				if (dirty[0] & /*$gaussians*/ 536870912 | dirty[3] & /*$$scope*/ 67108864) {
					cell1_changes.$$scope = { dirty, ctx };
				}

				cell1.$set(cell1_changes);
				const cell2_changes = {};

				if (dirty[0] & /*$gaussians*/ 536870912 | dirty[3] & /*$$scope*/ 67108864) {
					cell2_changes.$$scope = { dirty, ctx };
				}

				cell2.$set(cell2_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(cell0.$$.fragment, local);
				transition_in(cell1.$$.fragment, local);
				transition_in(cell2.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(cell0.$$.fragment, local);
				transition_out(cell1.$$.fragment, local);
				transition_out(cell2.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
					detach_dev(t2);
				}

				destroy_component(cell0, detaching);
				destroy_component(cell1, detaching);
				destroy_component(cell2, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_41.name,
			type: "slot",
			source: "(570:16) <Row>",
			ctx
		});

		return block;
	}

	// (569:14) {#each [...Array($gaussians.length).keys()] as i}
	function create_each_block(ctx) {
		let row;
		let current;

		row = new Row({
				props: {
					$$slots: { default: [create_default_slot_41] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(row.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(row, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const row_changes = {};

				if (dirty[0] & /*$gaussians*/ 536870912 | dirty[3] & /*$$scope*/ 67108864) {
					row_changes.$$scope = { dirty, ctx };
				}

				row.$set(row_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(row.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(row.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(row, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block.name,
			type: "each",
			source: "(569:14) {#each [...Array($gaussians.length).keys()] as i}",
			ctx
		});

		return block;
	}

	// (568:12) <Body>
	function create_default_slot_40(ctx) {
		let each_1_anchor;
		let current;
		let each_value = ensure_array_like_dev([...Array(/*$gaussians*/ ctx[29].length).keys()]);
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		const block = {
			c: function create() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m: function mount(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(target, anchor);
					}
				}

				insert_dev(target, each_1_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*$gaussians*/ 536870912 | dirty[1] & /*gaussians_textinput*/ 4096) {
					each_value = ensure_array_like_dev([...Array(/*$gaussians*/ ctx[29].length).keys()]);
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
						}
					}

					group_outros();

					for (i = each_value.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o: function outro(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(each_1_anchor);
				}

				destroy_each(each_blocks, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_40.name,
			type: "slot",
			source: "(568:12) <Body>",
			ctx
		});

		return block;
	}

	// (560:10) <DataTable table$aria-label="Parameters of Gaussians" style="width: 100%;border-radius: 1px">
	function create_default_slot_39(ctx) {
		let head;
		let t;
		let body;
		let current;

		head = new Head({
				props: {
					$$slots: { default: [create_default_slot_45] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		body = new Body({
				props: {
					$$slots: { default: [create_default_slot_40] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(head.$$.fragment);
				t = space();
				create_component(body.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(head, target, anchor);
				insert_dev(target, t, anchor);
				mount_component(body, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const head_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					head_changes.$$scope = { dirty, ctx };
				}

				head.$set(head_changes);
				const body_changes = {};

				if (dirty[0] & /*$gaussians*/ 536870912 | dirty[3] & /*$$scope*/ 67108864) {
					body_changes.$$scope = { dirty, ctx };
				}

				body.$set(body_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(head.$$.fragment, local);
				transition_in(body.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(head.$$.fragment, local);
				transition_out(body.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				destroy_component(head, detaching);
				destroy_component(body, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_39.name,
			type: "slot",
			source: "(560:10) <DataTable table$aria-label=\\\"Parameters of Gaussians\\\" style=\\\"width: 100%;border-radius: 1px\\\">",
			ctx
		});

		return block;
	}

	// (795:8) <Icon class="material-icons">
	function create_default_slot_38(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("keyboard_arrow_down");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_38.name,
			type: "slot",
			source: "(795:8) <Icon class=\\\"material-icons\\\">",
			ctx
		});

		return block;
	}

	// (791:6) <Fab         on:click={scrollToTutorial}         disabled="{isRunning}"       >
	function create_default_slot_37(ctx) {
		let icon;
		let current;

		icon = new CommonIcon({
				props: {
					class: "material-icons",
					$$slots: { default: [create_default_slot_38] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(icon.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(icon, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const icon_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					icon_changes.$$scope = { dirty, ctx };
				}

				icon.$set(icon_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(icon.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(icon.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(icon, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_37.name,
			type: "slot",
			source: "(791:6) <Fab         on:click={scrollToTutorial}         disabled=\\\"{isRunning}\\\"       >",
			ctx
		});

		return block;
	}

	// (819:51) <Katex>
	function create_default_slot_36(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("\\pi(x)");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_36.name,
			type: "slot",
			source: "(819:51) <Katex>",
			ctx
		});

		return block;
	}

	// (819:209) <Katex>
	function create_default_slot_35(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("\\pi(x)");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_35.name,
			type: "slot",
			source: "(819:209) <Katex>",
			ctx
		});

		return block;
	}

	// (819:262) <Katex>
	function create_default_slot_34(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("\\pi(x) \\propto R(x)");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_34.name,
			type: "slot",
			source: "(819:262) <Katex>",
			ctx
		});

		return block;
	}

	// (827:12) <Header>
	function create_default_slot_33(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("Example (And more introduction)");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_33.name,
			type: "slot",
			source: "(827:12) <Header>",
			ctx
		});

		return block;
	}

	// (835:95) <Katex>
	function create_default_slot_32(ctx) {
		let t0;
		let t1_value = "final" + "";
		let t1;

		const block = {
			c: function create() {
				t0 = text$2("s_0 \\to s_1 \\to ... \\to s_");
				t1 = text$2(t1_value);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, t1, anchor);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_32.name,
			type: "slot",
			source: "(835:95) <Katex>",
			ctx
		});

		return block;
	}

	// (828:12) <Content>
	function create_default_slot_31(ctx) {
		let t0;
		let br0;
		let t1;
		let br1;
		let t2;
		let br2;
		let t3;
		let br3;
		let t4;
		let br4;
		let t5;
		let br5;
		let t6;
		let katex;
		let t7;
		let br6;
		let t8;
		let br7;
		let t9;
		let br8;
		let t10;
		let br9;
		let t11;
		let current;

		katex = new Katex({
				props: {
					$$slots: { default: [create_default_slot_32] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				t0 = text$2("Imagine building a Lego Pyramid. There are different blocks, and you can place them rotated and at different places.\n              ");
				br0 = element("br");
				t1 = text$2("You might start with an empty plane and add a 2x4 block and so on. After some steps you might end up with an object which is more or less pyramid-shaped.\n              ");
				br1 = element("br");
				t2 = space();
				br2 = element("br");
				t3 = text$2("The different possibilities of states of the object form a graph: While in the beginning (state 0) you can only place something in the first level, later on you might have different options, and they depend on your first choices. One option is always to choose to be finished instead of continuing building.\n              ");
				br3 = element("br");
				t4 = space();
				br4 = element("br");
				t5 = text$2("If you want to use a GFlowNet for your task, it is important that the resulting graph is acyclic, i.e. it is not possible to reach a previous state.\n              ");
				br5 = element("br");
				t6 = text$2("If we built a pyramid, in the end we have a trajectory (a sequence of states ");
				create_component(katex.$$.fragment);
				t7 = text$2("). As we can choose to stop anytime, our trajectories can have different lengts, e.g. we can build a pyramid from 1 piece or from 100.\n              ");
				br6 = element("br");
				t8 = space();
				br7 = element("br");
				t9 = text$2("As you might have guessed from the vocabulary, GFlowNets are very similar to Reinforcement learning methods, we sample trajectories and assign a reward R(x) to them (or to the states). The main difference is that usual RL methods try to find solutions which maximize the reward, whereas GFlowNets learn the underlying distribution p(x). So we want to train a model such that p(x) is proportional to the reward function R(x). This allows us to sample not only from the mode which has the highest reward, but also all other modes which might be almost as good. Imagine a pyramid from two 2x4 blocks next to each other and a 2x2 block centered on top or we could just use 2x2 blocks. Both are valid and we might be interested in finding many possible ways to build pyramids.\n              ");
				br8 = element("br");
				t10 = space();
				br9 = element("br");
				t11 = text$2("Building Lego Pyramids is maybe not usecase number one for GFlowNets, but they are used for is drug discovery (Nica et al., 2022), where sampling from multiple modes is really what you want in order to discover not only the most promising molecule.");
				add_location(br0, file, 829, 14, 26041);
				add_location(br1, file, 830, 14, 26213);
				add_location(br2, file, 831, 14, 26232);
				add_location(br3, file, 832, 14, 26558);
				add_location(br4, file, 833, 14, 26577);
				add_location(br5, file, 834, 14, 26744);
				add_location(br6, file, 835, 14, 27024);
				add_location(br7, file, 836, 14, 27043);
				add_location(br8, file, 837, 14, 27833);
				add_location(br9, file, 838, 14, 27852);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, br0, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, br1, anchor);
				insert_dev(target, t2, anchor);
				insert_dev(target, br2, anchor);
				insert_dev(target, t3, anchor);
				insert_dev(target, br3, anchor);
				insert_dev(target, t4, anchor);
				insert_dev(target, br4, anchor);
				insert_dev(target, t5, anchor);
				insert_dev(target, br5, anchor);
				insert_dev(target, t6, anchor);
				mount_component(katex, target, anchor);
				insert_dev(target, t7, anchor);
				insert_dev(target, br6, anchor);
				insert_dev(target, t8, anchor);
				insert_dev(target, br7, anchor);
				insert_dev(target, t9, anchor);
				insert_dev(target, br8, anchor);
				insert_dev(target, t10, anchor);
				insert_dev(target, br9, anchor);
				insert_dev(target, t11, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const katex_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex_changes.$$scope = { dirty, ctx };
				}

				katex.$set(katex_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(katex.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(katex.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(br0);
					detach_dev(t1);
					detach_dev(br1);
					detach_dev(t2);
					detach_dev(br2);
					detach_dev(t3);
					detach_dev(br3);
					detach_dev(t4);
					detach_dev(br4);
					detach_dev(t5);
					detach_dev(br5);
					detach_dev(t6);
					detach_dev(t7);
					detach_dev(br6);
					detach_dev(t8);
					detach_dev(br7);
					detach_dev(t9);
					detach_dev(br8);
					detach_dev(t10);
					detach_dev(br9);
					detach_dev(t11);
				}

				destroy_component(katex, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_31.name,
			type: "slot",
			source: "(828:12) <Content>",
			ctx
		});

		return block;
	}

	// (826:10) <Panel color="secondary">
	function create_default_slot_30(ctx) {
		let header;
		let t;
		let content;
		let current;

		header = new Header({
				props: {
					$$slots: { default: [create_default_slot_33] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		content = new Content({
				props: {
					$$slots: { default: [create_default_slot_31] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(header.$$.fragment);
				t = space();
				create_component(content.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(header, target, anchor);
				insert_dev(target, t, anchor);
				mount_component(content, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const header_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					header_changes.$$scope = { dirty, ctx };
				}

				header.$set(header_changes);
				const content_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					content_changes.$$scope = { dirty, ctx };
				}

				content.$set(content_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(header.$$.fragment, local);
				transition_in(content.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(header.$$.fragment, local);
				transition_out(content.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				destroy_component(header, detaching);
				destroy_component(content, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_30.name,
			type: "slot",
			source: "(826:10) <Panel color=\\\"secondary\\\">",
			ctx
		});

		return block;
	}

	// (825:8) <Accordion multiple>
	function create_default_slot_29(ctx) {
		let panel;
		let current;

		panel = new Panel({
				props: {
					color: "secondary",
					$$slots: { default: [create_default_slot_30] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(panel.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(panel, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const panel_changes_1 = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					panel_changes_1.$$scope = { dirty, ctx };
				}

				panel.$set(panel_changes_1);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(panel.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(panel.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(panel, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_29.name,
			type: "slot",
			source: "(825:8) <Accordion multiple>",
			ctx
		});

		return block;
	}

	// (849:6) <Katex>
	function create_default_slot_28(ctx) {
		let t0;
		let t1_value = "{t+1}" + "";
		let t1;
		let t2;

		const block = {
			c: function create() {
				t0 = text$2("P_F(s_");
				t1 = text$2(t1_value);
				t2 = text$2("|s_t)\n      ");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, t2, anchor);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
					detach_dev(t2);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_28.name,
			type: "slot",
			source: "(849:6) <Katex>",
			ctx
		});

		return block;
	}

	// (880:6) <Katex displayMode>
	function create_default_slot_27(ctx) {
		let t0;
		let t1_value = "{s'}" + "";
		let t1;
		let t2;
		let t3_value = "{s'}" + "";
		let t3;
		let t4;

		const block = {
			c: function create() {
				t0 = text$2("\\sum_");
				t1 = text$2(t1_value);
				t2 = text$2(" F(s,s') = \\sum_");
				t3 = text$2(t3_value);
				t4 = text$2(" R(s') + F(s')");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, t2, anchor);
				insert_dev(target, t3, anchor);
				insert_dev(target, t4, anchor);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
					detach_dev(t2);
					detach_dev(t3);
					detach_dev(t4);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_27.name,
			type: "slot",
			source: "(880:6) <Katex displayMode>",
			ctx
		});

		return block;
	}

	// (887:6) <Katex displayMode>
	function create_default_slot_26(ctx) {
		let t0;
		let t1_value = "{F(s,s')}{F(s)}" + "";
		let t1;

		const block = {
			c: function create() {
				t0 = text$2("P_F(s'|s) = \\frac");
				t1 = text$2(t1_value);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, t1, anchor);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_26.name,
			type: "slot",
			source: "(887:6) <Katex displayMode>",
			ctx
		});

		return block;
	}

	// (895:6) <Katex displayMode>
	function create_default_slot_25(ctx) {
		let t0;
		let t1_value = "{L}" + "";
		let t1;
		let t2;
		let t3_value = "{FM}" + "";
		let t3;
		let t4;
		let t5_value = "{\\sum_{(s''\\to s)}F(s'',s)}" + "";
		let t5;
		let t6_value = "{\\sum_{(s\\to s')}F(s,s')}" + "";
		let t6;
		let t7;

		const block = {
			c: function create() {
				t0 = text$2("\\mathcal");
				t1 = text$2(t1_value);
				t2 = text$2("_");
				t3 = text$2(t3_value);
				t4 = text$2(" = \\left( \\log \\frac");
				t5 = text$2(t5_value);
				t6 = text$2(t6_value);
				t7 = text$2(" \\right)^2");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, t2, anchor);
				insert_dev(target, t3, anchor);
				insert_dev(target, t4, anchor);
				insert_dev(target, t5, anchor);
				insert_dev(target, t6, anchor);
				insert_dev(target, t7, anchor);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
					detach_dev(t2);
					detach_dev(t3);
					detach_dev(t4);
					detach_dev(t5);
					detach_dev(t6);
					detach_dev(t7);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_25.name,
			type: "slot",
			source: "(895:6) <Katex displayMode>",
			ctx
		});

		return block;
	}

	// (930:6) <Katex displayMode>
	function create_default_slot_24(ctx) {
		let t0;
		let t1_value = "{Z_{\\theta}\\prod_t P_F(s_{t+1}|s_t;\\theta)}" + "";
		let t1;
		let t2_value = "{R(x)\\prod_t P_B(s_t|s_{t+1}; \\theta)}" + "";
		let t2;
		let t3;

		const block = {
			c: function create() {
				t0 = text$2("L(\\tau) = \\log\\left(\\frac");
				t1 = text$2(t1_value);
				t2 = text$2(t2_value);
				t3 = text$2(" \\right)^2");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, t2, anchor);
				insert_dev(target, t3, anchor);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
					detach_dev(t2);
					detach_dev(t3);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_24.name,
			type: "slot",
			source: "(930:6) <Katex displayMode>",
			ctx
		});

		return block;
	}

	// (936:15) <Katex>
	function create_default_slot_23(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("\\theta");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_23.name,
			type: "slot",
			source: "(936:15) <Katex>",
			ctx
		});

		return block;
	}

	// (936:101) <Katex>
	function create_default_slot_22(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("P_F, P_B, Z");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_22.name,
			type: "slot",
			source: "(936:101) <Katex>",
			ctx
		});

		return block;
	}

	// (942:10) <Header>
	function create_default_slot_21(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("More math");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_21.name,
			type: "slot",
			source: "(942:10) <Header>",
			ctx
		});

		return block;
	}

	// (947:16) <Katex>
	function create_default_slot_20(ctx) {
		let t0;
		let t1_value = "t+1" + "";
		let t1;
		let t2;

		const block = {
			c: function create() {
				t0 = text$2("P_F(s_");
				t1 = text$2(t1_value);
				t2 = text$2("|s_t;\\theta)");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, t2, anchor);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
					detach_dev(t2);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_20.name,
			type: "slot",
			source: "(947:16) <Katex>",
			ctx
		});

		return block;
	}

	// (951:16) <Katex>
	function create_default_slot_19(ctx) {
		let t0;
		let t1_value = "t+1" + "";
		let t1;
		let t2;

		const block = {
			c: function create() {
				t0 = text$2("P_B(s_t|s_");
				t1 = text$2(t1_value);
				t2 = text$2(";\\theta)");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, t2, anchor);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
					detach_dev(t2);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_19.name,
			type: "slot",
			source: "(951:16) <Katex>",
			ctx
		});

		return block;
	}

	// (956:16) <Katex>
	function create_default_slot_18(ctx) {
		let t0;
		let t1_value = "\\theta" + "";
		let t1;

		const block = {
			c: function create() {
				t0 = text$2("Z_");
				t1 = text$2(t1_value);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, t1, anchor);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_18.name,
			type: "slot",
			source: "(956:16) <Katex>",
			ctx
		});

		return block;
	}

	// (964:16) <Katex>
	function create_default_slot_17(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("R(x)");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_17.name,
			type: "slot",
			source: "(964:16) <Katex>",
			ctx
		});

		return block;
	}

	// (943:10) <Content>
	function create_default_slot_16(ctx) {
		let t0;
		let ul;
		let li0;
		let katex0;
		let t1;
		let t2;
		let li1;
		let katex1;
		let t3;
		let t4;
		let li2;
		let katex2;
		let t5;
		let t6;
		let li3;
		let katex3;
		let t7;
		let current;

		katex0 = new Katex({
				props: {
					$$slots: { default: [create_default_slot_20] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex1 = new Katex({
				props: {
					$$slots: { default: [create_default_slot_19] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex2 = new Katex({
				props: {
					$$slots: { default: [create_default_slot_18] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex3 = new Katex({
				props: {
					$$slots: { default: [create_default_slot_17] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				t0 = text$2("Let's look at the parts of this loss function:\n            ");
				ul = element("ul");
				li0 = element("li");
				create_component(katex0.$$.fragment);
				t1 = text$2("\n                The forward policy. It represents the distribution over the next states (the children) of the current state.");
				t2 = space();
				li1 = element("li");
				create_component(katex1.$$.fragment);
				t3 = text$2("\n                The backward policy. Similar to as we defined the forward policy, we can define the backward policy as a distribution over the previous states (the parents) of a state.\n                We can also estimate it using a NN (not the same as for the forward policy).");
				t4 = space();
				li2 = element("li");
				create_component(katex2.$$.fragment);
				t5 = text$2("\n                The partition function. It is equal to the total flow of the system.\n                It is another parameter to be learned by our agent and should approach the true partition function given enough training.\n                In our case, the true partition function is 2 (the number of gaussians), however it is usually not known.\n                The partition function for a mixture of gaussians is the sum of its mixture weights, so always 1 (therefore logZ is 0).\n                However we do not compute a real mixture of gaussians here, as we do not use mixture weights but simply sum up over all gaussians.");
				t6 = space();
				li3 = element("li");
				create_component(katex3.$$.fragment);
				t7 = text$2("\n                The reward for the final object x of the trajectory. Note that if we propagate the reward backward using our backward policy, only a small part of it goes through one trajectory, as there are usually many ways to sample x using different trajectories.");
				add_location(li0, file, 945, 14, 34704);
				add_location(li1, file, 949, 14, 34925);
				add_location(li2, file, 954, 14, 35299);
				add_location(li3, file, 962, 14, 36011);
				add_location(ul, file, 944, 12, 34685);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, ul, anchor);
				append_dev(ul, li0);
				mount_component(katex0, li0, null);
				append_dev(li0, t1);
				append_dev(ul, t2);
				append_dev(ul, li1);
				mount_component(katex1, li1, null);
				append_dev(li1, t3);
				append_dev(ul, t4);
				append_dev(ul, li2);
				mount_component(katex2, li2, null);
				append_dev(li2, t5);
				append_dev(ul, t6);
				append_dev(ul, li3);
				mount_component(katex3, li3, null);
				append_dev(li3, t7);
				current = true;
			},
			p: function update(ctx, dirty) {
				const katex0_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex0_changes.$$scope = { dirty, ctx };
				}

				katex0.$set(katex0_changes);
				const katex1_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex1_changes.$$scope = { dirty, ctx };
				}

				katex1.$set(katex1_changes);
				const katex2_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex2_changes.$$scope = { dirty, ctx };
				}

				katex2.$set(katex2_changes);
				const katex3_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex3_changes.$$scope = { dirty, ctx };
				}

				katex3.$set(katex3_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(katex0.$$.fragment, local);
				transition_in(katex1.$$.fragment, local);
				transition_in(katex2.$$.fragment, local);
				transition_in(katex3.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(katex0.$$.fragment, local);
				transition_out(katex1.$$.fragment, local);
				transition_out(katex2.$$.fragment, local);
				transition_out(katex3.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(ul);
				}

				destroy_component(katex0);
				destroy_component(katex1);
				destroy_component(katex2);
				destroy_component(katex3);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_16.name,
			type: "slot",
			source: "(943:10) <Content>",
			ctx
		});

		return block;
	}

	// (941:8) <Panel color="secondary">
	function create_default_slot_15(ctx) {
		let header;
		let t;
		let content;
		let current;

		header = new Header({
				props: {
					$$slots: { default: [create_default_slot_21] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		content = new Content({
				props: {
					$$slots: { default: [create_default_slot_16] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(header.$$.fragment);
				t = space();
				create_component(content.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(header, target, anchor);
				insert_dev(target, t, anchor);
				mount_component(content, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const header_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					header_changes.$$scope = { dirty, ctx };
				}

				header.$set(header_changes);
				const content_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					content_changes.$$scope = { dirty, ctx };
				}

				content.$set(content_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(header.$$.fragment, local);
				transition_in(content.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(header.$$.fragment, local);
				transition_out(content.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				destroy_component(header, detaching);
				destroy_component(content, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_15.name,
			type: "slot",
			source: "(941:8) <Panel color=\\\"secondary\\\">",
			ctx
		});

		return block;
	}

	// (974:14) <Icon class="material-icons"  on>
	function create_default_slot_14(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("expand_less");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_14.name,
			type: "slot",
			source: "(974:14) <Icon class=\\\"material-icons\\\"  on>",
			ctx
		});

		return block;
	}

	// (975:14) <Icon class="material-icons">
	function create_default_slot_13(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("expand_more");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_13.name,
			type: "slot",
			source: "(975:14) <Icon class=\\\"material-icons\\\">",
			ctx
		});

		return block;
	}

	// (973:12) <IconButton toggle bind:pressed="{panel_algo}"on:click={panel_algo=!panel_algo} >
	function create_default_slot_12(ctx) {
		let icon0;
		let t;
		let icon1;
		let current;

		icon0 = new CommonIcon({
				props: {
					class: "material-icons",
					on: true,
					$$slots: { default: [create_default_slot_14] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		icon1 = new CommonIcon({
				props: {
					class: "material-icons",
					$$slots: { default: [create_default_slot_13] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(icon0.$$.fragment);
				t = space();
				create_component(icon1.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(icon0, target, anchor);
				insert_dev(target, t, anchor);
				mount_component(icon1, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const icon0_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					icon0_changes.$$scope = { dirty, ctx };
				}

				icon0.$set(icon0_changes);
				const icon1_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					icon1_changes.$$scope = { dirty, ctx };
				}

				icon1.$set(icon1_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(icon0.$$.fragment, local);
				transition_in(icon1.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(icon0.$$.fragment, local);
				transition_out(icon1.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				destroy_component(icon0, detaching);
				destroy_component(icon1, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_12.name,
			type: "slot",
			source: "(973:12) <IconButton toggle bind:pressed=\\\"{panel_algo}\\\"on:click={panel_algo=!panel_algo} >",
			ctx
		});

		return block;
	}

	// (971:10) <Header>
	function create_default_slot_11(ctx) {
		let t;
		let iconbutton;
		let updating_pressed;
		let current;

		function iconbutton_pressed_binding(value) {
			/*iconbutton_pressed_binding*/ ctx[69](value);
		}

		let iconbutton_props = {
			toggle: true,
			$$slots: { default: [create_default_slot_12] },
			$$scope: { ctx }
		};

		if (/*panel_algo*/ ctx[20] !== void 0) {
			iconbutton_props.pressed = /*panel_algo*/ ctx[20];
		}

		iconbutton = new IconButton({ props: iconbutton_props, $$inline: true });
		binding_callbacks.push(() => bind(iconbutton, 'pressed', iconbutton_pressed_binding));

		iconbutton.$on("click", function () {
			if (is_function(/*panel_algo*/ ctx[20] = !/*panel_algo*/ ctx[20])) (/*panel_algo*/ ctx[20] = !/*panel_algo*/ ctx[20]).apply(this, arguments);
		});

		const block = {
			c: function create() {
				t = text$2("The algorithm\n            ");
				create_component(iconbutton.$$.fragment);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
				mount_component(iconbutton, target, anchor);
				current = true;
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;
				const iconbutton_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					iconbutton_changes.$$scope = { dirty, ctx };
				}

				if (!updating_pressed && dirty[0] & /*panel_algo*/ 1048576) {
					updating_pressed = true;
					iconbutton_changes.pressed = /*panel_algo*/ ctx[20];
					add_flush_callback(() => updating_pressed = false);
				}

				iconbutton.$set(iconbutton_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(iconbutton.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(iconbutton.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				destroy_component(iconbutton, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_11.name,
			type: "slot",
			source: "(971:10) <Header>",
			ctx
		});

		return block;
	}

	// (979:10) <Content style="white-space: pre;">
	function create_default_slot_10(ctx) {
		let t0;
		let br0;
		let t1;
		let br1;
		let t2;
		let br2;
		let t3;
		let br3;
		let t4;
		let br4;
		let t5;
		let br5;
		let t6;
		let br6;
		let t7;
		let br7;
		let t8;
		let br8;
		let t9;
		let br9;
		let t10;
		let br10;
		let br11;
		let t11;
		let a;
		let t13;

		const block = {
			c: function create() {
				t0 = text$2("Input: Reward function (part of the environment), model, hyperparameters\n              ");
				br0 = element("br");
				t1 = text$2("  1. Initialize model parameters for PF, PB, logZ\n              ");
				br1 = element("br");
				t2 = text$2("  2. Repeat for a number of iterations or until convergence:\n              ");
				br2 = element("br");
				t3 = text$2("  3.      Repeat for trajectory length:\n              ");
				br3 = element("br");
				t4 = text$2("  4.            Sample action for current state from PF\n              ");
				br4 = element("br");
				t5 = text$2("  5.            Take step according to action\n              ");
				br5 = element("br");
				t6 = text$2("  6.            Add new state to trajectory\n              ");
				br6 = element("br");
				t7 = text$2("  7.      Calculate reward of final state according to reward function\n              ");
				br7 = element("br");
				t8 = text$2("  8.      Calculate the sum of the log probabilities of all actions of the trajectory for each PF and PB\n              ");
				br8 = element("br");
				t9 = text$2("  9.      Calculate the TB-Loss: (logZ + log probabilities PF - log probabilities PB - log reward)^2\n              ");
				br9 = element("br");
				t10 = text$2("  10.    Update the parameters PF, PB, logZ\n              ");
				br10 = element("br");
				br11 = element("br");
				t11 = text$2("\n            You can find the python code for this implementation on my ");
				a = element("a");
				a.textContent = "github";
				t13 = text$2(".");
				add_location(br0, file, 980, 14, 36914);
				add_location(br1, file, 981, 14, 36982);
				add_location(br2, file, 982, 14, 37061);
				add_location(br3, file, 983, 14, 37119);
				add_location(br4, file, 984, 14, 37193);
				add_location(br5, file, 985, 14, 37257);
				add_location(br6, file, 986, 14, 37319);
				add_location(br7, file, 987, 14, 37408);
				add_location(br8, file, 988, 14, 37531);
				add_location(br9, file, 989, 14, 37650);
				add_location(br10, file, 990, 14, 37712);
				add_location(br11, file, 990, 18, 37716);
				attr_dev(a, "href", "https://github.com/florianholeczek/ugfn");
				attr_dev(a, "target", "_blank");
				add_location(a, file, 991, 71, 37792);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, br0, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, br1, anchor);
				insert_dev(target, t2, anchor);
				insert_dev(target, br2, anchor);
				insert_dev(target, t3, anchor);
				insert_dev(target, br3, anchor);
				insert_dev(target, t4, anchor);
				insert_dev(target, br4, anchor);
				insert_dev(target, t5, anchor);
				insert_dev(target, br5, anchor);
				insert_dev(target, t6, anchor);
				insert_dev(target, br6, anchor);
				insert_dev(target, t7, anchor);
				insert_dev(target, br7, anchor);
				insert_dev(target, t8, anchor);
				insert_dev(target, br8, anchor);
				insert_dev(target, t9, anchor);
				insert_dev(target, br9, anchor);
				insert_dev(target, t10, anchor);
				insert_dev(target, br10, anchor);
				insert_dev(target, br11, anchor);
				insert_dev(target, t11, anchor);
				insert_dev(target, a, anchor);
				insert_dev(target, t13, anchor);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(br0);
					detach_dev(t1);
					detach_dev(br1);
					detach_dev(t2);
					detach_dev(br2);
					detach_dev(t3);
					detach_dev(br3);
					detach_dev(t4);
					detach_dev(br4);
					detach_dev(t5);
					detach_dev(br5);
					detach_dev(t6);
					detach_dev(br6);
					detach_dev(t7);
					detach_dev(br7);
					detach_dev(t8);
					detach_dev(br8);
					detach_dev(t9);
					detach_dev(br9);
					detach_dev(t10);
					detach_dev(br10);
					detach_dev(br11);
					detach_dev(t11);
					detach_dev(a);
					detach_dev(t13);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_10.name,
			type: "slot",
			source: "(979:10) <Content style=\\\"white-space: pre;\\\">",
			ctx
		});

		return block;
	}

	// (970:8) <Panel color="secondary" bind:open={panel_algo}>
	function create_default_slot_9(ctx) {
		let header;
		let t;
		let content;
		let current;

		header = new Header({
				props: {
					$$slots: { default: [create_default_slot_11] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		content = new Content({
				props: {
					style: "white-space: pre;",
					$$slots: { default: [create_default_slot_10] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(header.$$.fragment);
				t = space();
				create_component(content.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(header, target, anchor);
				insert_dev(target, t, anchor);
				mount_component(content, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const header_changes = {};

				if (dirty[0] & /*panel_algo*/ 1048576 | dirty[3] & /*$$scope*/ 67108864) {
					header_changes.$$scope = { dirty, ctx };
				}

				header.$set(header_changes);
				const content_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					content_changes.$$scope = { dirty, ctx };
				}

				content.$set(content_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(header.$$.fragment, local);
				transition_in(content.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(header.$$.fragment, local);
				transition_out(content.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				destroy_component(header, detaching);
				destroy_component(content, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_9.name,
			type: "slot",
			source: "(970:8) <Panel color=\\\"secondary\\\" bind:open={panel_algo}>",
			ctx
		});

		return block;
	}

	// (940:6) <Accordion multiple>
	function create_default_slot_8(ctx) {
		let panel0;
		let t;
		let panel1;
		let updating_open;
		let current;

		panel0 = new Panel({
				props: {
					color: "secondary",
					$$slots: { default: [create_default_slot_15] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		function panel1_open_binding(value) {
			/*panel1_open_binding*/ ctx[70](value);
		}

		let panel1_props = {
			color: "secondary",
			$$slots: { default: [create_default_slot_9] },
			$$scope: { ctx }
		};

		if (/*panel_algo*/ ctx[20] !== void 0) {
			panel1_props.open = /*panel_algo*/ ctx[20];
		}

		panel1 = new Panel({ props: panel1_props, $$inline: true });
		binding_callbacks.push(() => bind(panel1, 'open', panel1_open_binding));

		const block = {
			c: function create() {
				create_component(panel0.$$.fragment);
				t = space();
				create_component(panel1.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(panel0, target, anchor);
				insert_dev(target, t, anchor);
				mount_component(panel1, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const panel0_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					panel0_changes.$$scope = { dirty, ctx };
				}

				panel0.$set(panel0_changes);
				const panel1_changes = {};

				if (dirty[0] & /*panel_algo*/ 1048576 | dirty[3] & /*$$scope*/ 67108864) {
					panel1_changes.$$scope = { dirty, ctx };
				}

				if (!updating_open && dirty[0] & /*panel_algo*/ 1048576) {
					updating_open = true;
					panel1_changes.open = /*panel_algo*/ ctx[20];
					add_flush_callback(() => updating_open = false);
				}

				panel1.$set(panel1_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(panel0.$$.fragment, local);
				transition_in(panel1.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(panel0.$$.fragment, local);
				transition_out(panel1.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				destroy_component(panel0, detaching);
				destroy_component(panel1, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_8.name,
			type: "slot",
			source: "(940:6) <Accordion multiple>",
			ctx
		});

		return block;
	}

	// (1043:66) <Katex>
	function create_default_slot_7(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("\\beta");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_7.name,
			type: "slot",
			source: "(1043:66) <Katex>",
			ctx
		});

		return block;
	}

	// (1043:112) <Katex>
	function create_default_slot_6(ctx) {
		let t0;
		let t1_value = "new" + "";
		let t1;
		let t2;

		const block = {
			c: function create() {
				t0 = text$2("R_");
				t1 = text$2(t1_value);
				t2 = text$2("(x)=R(x)^\\beta");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, t2, anchor);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
					detach_dev(t2);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_6.name,
			type: "slot",
			source: "(1043:112) <Katex>",
			ctx
		});

		return block;
	}

	// (1043:286) <Katex>
	function create_default_slot_5(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("\\pi(x|\\beta) \\propto R(x)^\\beta");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_5.name,
			type: "slot",
			source: "(1043:286) <Katex>",
			ctx
		});

		return block;
	}

	// (1043:361) <Katex>
	function create_default_slot_4(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("\\beta");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_4.name,
			type: "slot",
			source: "(1043:361) <Katex>",
			ctx
		});

		return block;
	}

	// (1049:10) <Header>
	function create_default_slot_3(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text$2("Changes to the algorithm");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_3.name,
			type: "slot",
			source: "(1049:10) <Header>",
			ctx
		});

		return block;
	}

	// (1050:10) <Content>
	function create_default_slot_2(ctx) {
		let t0;
		let br0;
		let t1;
		let br1;
		let t2;
		let br2;
		let t3;
		let ul;
		let li0;
		let t5;
		let li1;
		let t7;
		let li2;
		let t9;
		let li3;
		let t11;
		let li4;

		const block = {
			c: function create() {
				t0 = text$2("Training off-policy is even more helpful when we schedule it. We start with more a higher variance and scale it down during training until we reach on-policy training.\n            ");
				br0 = element("br");
				t1 = text$2("Our new hyperparameter is the initial value for the off policy training, during each step we gradually decrease it until we reach 0.\n            ");
				br1 = element("br");
				t2 = space();
				br2 = element("br");
				t3 = text$2("Important changes:\n            ");
				ul = element("ul");
				li0 = element("li");
				li0.textContent = "Define schedule in the beginning: [start=initial value, stop=0, step=-initial value/number of iterations\\]";
				t5 = space();
				li1 = element("li");
				li1.textContent = "When sampling the actions we compute the logits as usual.";
				t7 = space();
				li2 = element("li");
				li2.textContent = "Instead of just defining the policy distribution with them, we also define a exploratory distribution by adding the scheduled value to the variance.";
				t9 = space();
				li3 = element("li");
				li3.textContent = "We then sample our actions from the exploratory distribution. We need the policy distribution later to compute the log probabilities of our actions.";
				t11 = space();
				li4 = element("li");
				li4.textContent = "We do not use the scheduled values with the backward policy and during inference.";
				add_location(br0, file, 1051, 12, 41119);
				add_location(br1, file, 1052, 12, 41268);
				add_location(br2, file, 1053, 12, 41285);
				add_location(li0, file, 1055, 14, 41339);
				add_location(li1, file, 1058, 14, 41501);
				add_location(li2, file, 1061, 14, 41614);
				add_location(li3, file, 1064, 14, 41818);
				add_location(li4, file, 1067, 14, 42022);
				add_location(ul, file, 1054, 12, 41320);
			},
			m: function mount(target, anchor) {
				insert_dev(target, t0, anchor);
				insert_dev(target, br0, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, br1, anchor);
				insert_dev(target, t2, anchor);
				insert_dev(target, br2, anchor);
				insert_dev(target, t3, anchor);
				insert_dev(target, ul, anchor);
				append_dev(ul, li0);
				append_dev(ul, t5);
				append_dev(ul, li1);
				append_dev(ul, t7);
				append_dev(ul, li2);
				append_dev(ul, t9);
				append_dev(ul, li3);
				append_dev(ul, t11);
				append_dev(ul, li4);
			},
			p: noop,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(br0);
					detach_dev(t1);
					detach_dev(br1);
					detach_dev(t2);
					detach_dev(br2);
					detach_dev(t3);
					detach_dev(ul);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_2.name,
			type: "slot",
			source: "(1050:10) <Content>",
			ctx
		});

		return block;
	}

	// (1048:8) <Panel color="secondary">
	function create_default_slot_1(ctx) {
		let header;
		let t;
		let content;
		let current;

		header = new Header({
				props: {
					$$slots: { default: [create_default_slot_3] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		content = new Content({
				props: {
					$$slots: { default: [create_default_slot_2] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(header.$$.fragment);
				t = space();
				create_component(content.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(header, target, anchor);
				insert_dev(target, t, anchor);
				mount_component(content, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const header_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					header_changes.$$scope = { dirty, ctx };
				}

				header.$set(header_changes);
				const content_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					content_changes.$$scope = { dirty, ctx };
				}

				content.$set(content_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(header.$$.fragment, local);
				transition_in(content.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(header.$$.fragment, local);
				transition_out(content.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				destroy_component(header, detaching);
				destroy_component(content, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_1.name,
			type: "slot",
			source: "(1048:8) <Panel color=\\\"secondary\\\">",
			ctx
		});

		return block;
	}

	// (1047:6) <Accordion multiple>
	function create_default_slot(ctx) {
		let panel;
		let current;

		panel = new Panel({
				props: {
					color: "secondary",
					$$slots: { default: [create_default_slot_1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(panel.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(panel, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const panel_changes_1 = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					panel_changes_1.$$scope = { dirty, ctx };
				}

				panel.$set(panel_changes_1);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(panel.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(panel.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(panel, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot.name,
			type: "slot",
			source: "(1047:6) <Accordion multiple>",
			ctx
		});

		return block;
	}

	function create_fragment(ctx) {
		let link0;
		let t0;
		let link1;
		let t1;
		let main;
		let header;
		let div0;
		let h1;
		let t3;
		let p0;
		let t5;
		let div4;
		let div1;
		let t6;
		let div2;
		let tabbar;
		let updating_active;
		let t7;
		let current_block_type_index;
		let if_block;
		let t8;
		let div3;
		let fab;
		let t9;
		let section0;
		let h20;
		let t11;
		let p1;
		let t12;
		let br0;
		let t13;
		let br1;
		let t14;
		let t15;
		let h21;
		let t17;
		let p2;
		let t18;
		let br2;
		let t19;
		let katex0;
		let t20;
		let katex1;
		let t21;
		let katex2;
		let t22;
		let br3;
		let t23;
		let t24;
		let div5;
		let accordion0;
		let t25;
		let p3;
		let t26;
		let katex3;
		let t27;
		let br4;
		let t28;
		let br5;
		let t29;
		let br6;
		let t30;
		let br7;
		let t31;
		let br8;
		let t32;
		let br9;
		let t33;
		let br10;
		let t34;
		let div6;
		let img0;
		let img0_src_value;
		let t35;
		let p4;
		let span0;
		let t37;
		let br11;
		let t38;
		let br12;
		let t39;
		let br13;
		let t40;
		let span1;
		let t42;
		let span2;
		let t44;
		let br14;
		let t45;
		let katex4;
		let t46;
		let span3;
		let t48;
		let katex5;
		let t49;
		let span4;
		let t51;
		let br15;
		let t52;
		let katex6;
		let t53;
		let span5;
		let t55;
		let t56;
		let h22;
		let t58;
		let p5_1;
		let t59;
		let br16;
		let t60;
		let br17;
		let t61;
		let br18;
		let t62;
		let br19;
		let t63;
		let t64;
		let section1;
		let h23;
		let t66;
		let p6;
		let t67;
		let br20;
		let t68;
		let br21;
		let t69;
		let katex7;
		let t70;
		let span6;
		let t71;
		let br22;
		let t72;
		let t73;
		let br23;
		let t74;
		let katex8;
		let t75;
		let katex9;
		let t76;
		let br24;
		let t77;
		let t78;
		let div7;
		let accordion1;
		let t79;
		let p7;
		let t81;
		let div8;
		let img1;
		let img1_src_value;
		let t82;
		let div9;
		let slider0;
		let updating_value;
		let t83;
		let t84;
		let p8;
		let t86;
		let h24;
		let t88;
		let p9;
		let t90;
		let div10;
		let img2;
		let img2_src_value;
		let t91;
		let div11;
		let slider1;
		let updating_value_1;
		let t92;
		let p10;
		let t93;
		let br25;
		let br26;
		let t94;
		let span7;
		let t95;
		let katex10;
		let t96;
		let katex11;
		let t97;
		let katex12;
		let t98;
		let katex13;
		let t99;
		let t100;
		let span8;
		let t102;
		let div12;
		let accordion2;
		let t103;
		let div13;
		let img3;
		let img3_src_value;
		let t104;
		let div14;
		let slider2;
		let updating_value_2;
		let t105;
		let p11;
		let t107;
		let section2;
		let h25;
		let t109;
		let p12;
		let t110;
		let br27;
		let t111;
		let br28;
		let t112;
		let br29;
		let t113;
		let i_1;
		let t115;
		let t116;
		let section3;
		let h26;
		let t118;
		let p13;
		let t119;
		let br30;
		let t120;
		let span9;
		let t121;
		let a0;
		let t123;
		let t124;
		let span10;
		let t125;
		let a1;
		let t127;
		let t128;
		let span11;
		let t129;
		let a2;
		let t131;
		let t132;
		let section4;
		let h27;
		let t134;
		let h30;
		let t136;
		let p14;
		let t137;
		let br31;
		let br32;
		let t138;
		let br33;
		let br34;
		let t139;
		let br35;
		let br36;
		let t140;
		let br37;
		let br38;
		let t141;
		let br39;
		let br40;
		let t142;
		let t143;
		let h31;
		let t145;
		let p15;
		let t146;
		let br41;
		let br42;
		let t147;
		let br43;
		let br44;
		let t148;
		let t149;
		let h32;
		let t151;
		let p16;
		let t152;
		let br45;
		let br46;
		let t153;
		let br47;
		let br48;
		let t154;
		let current;

		function tabbar_active_binding(value) {
			/*tabbar_active_binding*/ ctx[44](value);
		}

		let tabbar_props = {
			tabs: ["Environment", "Training", "Flow"],
			$$slots: {
				default: [
					create_default_slot_75,
					({ tab }) => ({ 114: tab }),
					({ tab }) => [0, 0, 0, tab ? 2097152 : 0]
				]
			},
			$$scope: { ctx }
		};

		if (/*view*/ ctx[3] !== void 0) {
			tabbar_props.active = /*view*/ ctx[3];
		}

		tabbar = new TabBar({ props: tabbar_props, $$inline: true });
		binding_callbacks.push(() => bind(tabbar, 'active', tabbar_active_binding));
		const if_block_creators = [create_if_block, create_if_block_1, create_if_block_8];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*view*/ ctx[3] === 'Environment') return 0;
			if (/*view*/ ctx[3] === "Training") return 1;
			if (/*view*/ ctx[3] === "Flow") return 2;
			return -1;
		}

		if (~(current_block_type_index = select_block_type(ctx))) {
			if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
		}

		fab = new Fab({
				props: {
					disabled: /*isRunning*/ ctx[24],
					$$slots: { default: [create_default_slot_37] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		fab.$on("click", /*scrollToTutorial*/ ctx[37]);

		katex0 = new Katex({
				props: {
					$$slots: { default: [create_default_slot_36] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex1 = new Katex({
				props: {
					$$slots: { default: [create_default_slot_35] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex2 = new Katex({
				props: {
					$$slots: { default: [create_default_slot_34] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		accordion0 = new Accordion({
				props: {
					multiple: true,
					$$slots: { default: [create_default_slot_29] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex3 = new Katex({
				props: {
					$$slots: { default: [create_default_slot_28] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex4 = new Katex({
				props: {
					displayMode: true,
					$$slots: { default: [create_default_slot_27] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex5 = new Katex({
				props: {
					displayMode: true,
					$$slots: { default: [create_default_slot_26] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex6 = new Katex({
				props: {
					displayMode: true,
					$$slots: { default: [create_default_slot_25] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex7 = new Katex({
				props: {
					displayMode: true,
					$$slots: { default: [create_default_slot_24] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex8 = new Katex({
				props: {
					$$slots: { default: [create_default_slot_23] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex9 = new Katex({
				props: {
					$$slots: { default: [create_default_slot_22] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		accordion1 = new Accordion({
				props: {
					multiple: true,
					$$slots: { default: [create_default_slot_8] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		function slider0_value_binding_2(value) {
			/*slider0_value_binding_2*/ ctx[71](value);
		}

		let slider0_props = {
			min: 0,
			max: 2048,
			step: 128,
			discrete: true,
			"input$aria-label": "Discrete slider"
		};

		if (/*run1_value*/ ctx[5] !== void 0) {
			slider0_props.value = /*run1_value*/ ctx[5];
		}

		slider0 = new Slider({ props: slider0_props, $$inline: true });
		binding_callbacks.push(() => bind(slider0, 'value', slider0_value_binding_2));

		function slider1_value_binding_2(value) {
			/*slider1_value_binding_2*/ ctx[72](value);
		}

		let slider1_props = {
			min: 0,
			max: 4096,
			step: 128,
			discrete: true,
			"input$aria-label": "Discrete slider"
		};

		if (/*run2_value*/ ctx[6] !== void 0) {
			slider1_props.value = /*run2_value*/ ctx[6];
		}

		slider1 = new Slider({ props: slider1_props, $$inline: true });
		binding_callbacks.push(() => bind(slider1, 'value', slider1_value_binding_2));

		katex10 = new Katex({
				props: {
					$$slots: { default: [create_default_slot_7] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex11 = new Katex({
				props: {
					$$slots: { default: [create_default_slot_6] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex12 = new Katex({
				props: {
					$$slots: { default: [create_default_slot_5] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		katex13 = new Katex({
				props: {
					$$slots: { default: [create_default_slot_4] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		accordion2 = new Accordion({
				props: {
					multiple: true,
					$$slots: { default: [create_default_slot] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		function slider2_value_binding_2(value) {
			/*slider2_value_binding_2*/ ctx[73](value);
		}

		let slider2_props = {
			min: 0,
			max: 4096,
			step: 128,
			discrete: true,
			"input$aria-label": "Discrete slider"
		};

		if (/*run3_value*/ ctx[7] !== void 0) {
			slider2_props.value = /*run3_value*/ ctx[7];
		}

		slider2 = new Slider({ props: slider2_props, $$inline: true });
		binding_callbacks.push(() => bind(slider2, 'value', slider2_value_binding_2));

		const block = {
			c: function create() {
				link0 = element("link");
				t0 = space();
				link1 = element("link");
				t1 = space();
				main = element("main");
				header = element("header");
				div0 = element("div");
				h1 = element("h1");
				h1.textContent = "Understanding GFlowNets";
				t3 = space();
				p0 = element("p");
				p0.textContent = "Gaining intuition for Generative Flow Networks and how to train them";
				t5 = space();
				div4 = element("div");
				div1 = element("div");
				div1.innerHTML = ``;
				t6 = space();
				div2 = element("div");
				create_component(tabbar.$$.fragment);
				t7 = space();
				if (if_block) if_block.c();
				t8 = space();
				div3 = element("div");
				create_component(fab.$$.fragment);
				t9 = space();
				section0 = element("section");
				h20 = element("h2");
				h20.textContent = "What is this about?";
				t11 = space();
				p1 = element("p");
				t12 = text$2("Here you can explore how GFlowNets learn.\n      ");
				br0 = element("br");
				t13 = text$2("Make your own reward function, adjust the hyperparameters and watch the training progress.\n      If you have no idea what a GFlowNet actually is you might want to look into this basic tutorial first.\n      ");
				br1 = element("br");
				t14 = text$2(" Or just explore!");
				t15 = space();
				h21 = element("h2");
				h21.textContent = "What is a GFlowNet?";
				t17 = space();
				p2 = element("p");
				t18 = text$2("In short, a generative flow network is a model class which allows sampling from an arbitrary probability distribution (similar to MCMC). GFlowNets allow for generating objects with sequentially built compositional structure like trees or graphs.\n\n      ");
				br2 = element("br");
				t19 = text$2("We train a model to learn a distribution ");
				create_component(katex0.$$.fragment);
				t20 = text$2(" (our policy), so we can sample from it. For this, we need a reward function R(x) which assigns value to each final object x and we want ");
				create_component(katex1.$$.fragment);
				t21 = text$2(" to sample proportional to it:  ");
				create_component(katex2.$$.fragment);
				t22 = text$2(". This allows us later on to sample a diversity of solutions instead of just the reward-maximizing one.\n\n      ");
				br3 = element("br");
				t23 = text$2("As we do not rely on a external dataset but only on our internal reward function we are only limited by compute - we can generate objects and query the reward function as often as we like.");
				t24 = space();
				div5 = element("div");
				create_component(accordion0.$$.fragment);
				t25 = space();
				p3 = element("p");
				t26 = text$2("When sequentially generating an object, we need to take actions which give us the next state:\n      We could add one of the possible components or decide we are done.\n      For this we use a neural net which represents our forward policy\n      ");
				create_component(katex3.$$.fragment);
				t27 = text$2(", it gives us the action which leads to the next state.\n      ");
				br4 = element("br");
				t28 = space();
				br5 = element("br");
				t29 = text$2("So far, everything sounds very nice, but how do we achieve this?\n      ");
				br6 = element("br");
				t30 = text$2("Thats where the Flows come into play.\n      ");
				br7 = element("br");
				t31 = space();
				br8 = element("br");
				t32 = text$2("If you connect all possible states from the start state to the terminal states you get a directed graph.\n      If you want to use a GFlowNet for your task it is important that the graph is acyclic, i.e. it is not possible to reach a previous state.\n      We can now interpret this directed acyclic graph (DAG) as a flow network.\n      ");
				br9 = element("br");
				t33 = text$2("Imagine water flowing from the start space through the intermediate states to the final states, following the edges of the DAG like pipes.\n      ");
				br10 = element("br");
				t34 = space();
				div6 = element("div");
				img0 = element("img");
				t35 = space();
				p4 = element("p");
				span0 = element("span");
				span0.textContent = "Visualization from the GFlowNet Tutorial by MILA showing the flow from the start state to the terminal states as particles";
				t37 = space();
				br11 = element("br");
				t38 = text$2("This places an important constraint on our model: Preservation of Flow.\n      The pipes (edges) and states (nodes) must not be leaky, all of the water has to be preserved.\n      ");
				br12 = element("br");
				t39 = text$2("This means:\n      ");
				br13 = element("br");
				t40 = space();
				span1 = element("span");
				span1.textContent = "The flow going into the DAG (Flow of the start state) is the same as the Flow going out of it (Sum of the flow of all terminal states).";
				t42 = space();
				span2 = element("span");
				span2.textContent = "Same for the nodes: The sum of the flow going into a state is the same as the sum of the flow going out of it.";
				t44 = space();
				br14 = element("br");
				t45 = text$2("\n      We now can set the flow going out of a terminal state equal to it's reward.\n      Assuming all flow is stricly positivy, we can express the Flow from one state s to its children s' as:\n\n\n      ");
				create_component(katex4.$$.fragment);
				t46 = space();
				span3 = element("span");
				span3.textContent = "The total Flow of a state is the Reward of its terminal children plus the Flow of its non-terminal children";
				t48 = text$2("\n\n\n      We now define our forward policy as the proportion of the Flow s -> s' to the total Flow of s:\n      ");
				create_component(katex5.$$.fragment);
				t49 = space();
				span4 = element("span");
				span4.textContent = "The probability to sample an action to get to the next state s' is the flow going from s to s' divided by the total flow through s";
				t51 = text$2("\n      By using this policy we will sample finished objects x proportional to its reward.\n\n      ");
				br15 = element("br");
				t52 = text$2("The only thing we miss for training is the loss. The easiest way would be to turn our flow matching constraint into a MSE:\n\n      ");
				create_component(katex6.$$.fragment);
				t53 = space();
				span5 = element("span");
				span5.textContent = "If the flow going into a state is equal to the flow going out of a state the loss goes to 0.";
				t55 = text$2("\n\n      This is actually what the authors did in the first paper (Benigo et al., 2021), however it does not perform so well as there are problems with credit assignment.\n      We will later use the Trajectory Balance Loss (Malkin et al., 2022) to calculate the loss for a whole trajectory instead of single states.\n      It converges better but is a bit more complicated, so let's ignore it for now and look at our environment.");
				t56 = space();
				h22 = element("h2");
				h22.textContent = "Toy Environment";
				t58 = space();
				p5_1 = element("p");
				t59 = text$2("As we want to train GFlowNets quickly to explore how they behave, we need a simple environment which allows for exploring without needing a lot of compute during training. Here we use a simple 2D grid with each variable in the range [-3,3]. We then calculate the reward according to the Mixture of Multivariate Gaussians (for now two of them).\n      ");
				br16 = element("br");
				t60 = space();
				br17 = element("br");
				t61 = text$2("For each action, the GFlowNet takes a step along both the x and y direction, this is repeated until the defined length of a trajectory is reached. Note that this is unusual: GFlowNets allow for variable trajectory lengths, so the action space usually contains an additional end of sequence action, where the current state becomes the final state.\n      ");
				br18 = element("br");
				t62 = space();
				br19 = element("br");
				t63 = text$2("Above we stated that GFlowNets build an Acyclic Graph, so each state can only be visited once. We currently violate this assumption: While it is unlikely that a state gets visited twice in our continuous environment, it is still possible. To mitigate this we simply include a counter in our state which represents the current step.");
				t64 = space();
				section1 = element("section");
				h23 = element("h2");
				h23.textContent = "Training";
				t66 = space();
				p6 = element("p");
				t67 = text$2("Now, how do we train a GFlowNet?\n      ");
				br20 = element("br");
				t68 = text$2("First we need our GFN to be able to act in the environment.\n      To do this we let it predict the parameters of a distribution from which we then sample the actions.\n      To move, we simply add the actio to the current state to get the next state.\n      ");
				br21 = element("br");
				t69 = text$2("That was the easy part.\n      We now want to train our GFN using Trajectory Balance loss. Here it is again:\n      ");
				create_component(katex7.$$.fragment);
				t70 = space();
				span6 = element("span");
				t71 = text$2("The trajectory balance loss. ");
				br22 = element("br");
				t72 = text$2(" If both parts of the fraction are equal our loss goes to 0.");
				t73 = text$2("\n      We want the two parts of the fraction to be equal again.\n      Simply put, the upper part tells us what fraction of the total flow goes through this trajectory and the lower part tells us what fraction of the reward of the final object x goes through this trajectory.\n      ");
				br23 = element("br");
				t74 = text$2("Here ");
				create_component(katex8.$$.fragment);
				t75 = text$2(" are the parameters of our model. They include the parameters of ");
				create_component(katex9.$$.fragment);
				t76 = text$2(" and we can update them using the loss above.\n      ");
				br24 = element("br");
				t77 = text$2("Below you find more detailed background for the parts of the trajectory balance loss as well as the algorithm for training.");
				t78 = space();
				div7 = element("div");
				create_component(accordion1.$$.fragment);
				t79 = space();
				p7 = element("p");
				p7.textContent = "We trained a GFlowNet on this environment for 2000 Iterations.\n      Below you see the progress of our GFlowNet during training. While it first samples randomly, it learns to match the true distribution of our environment.";
				t81 = space();
				div8 = element("div");
				img1 = element("img");
				t82 = space();
				div9 = element("div");
				create_component(slider0.$$.fragment);
				t83 = text$2("\n      Show training Progress");
				t84 = space();
				p8 = element("p");
				p8.textContent = "Sampling according to the underlying distribution is one of the big advantages of GFlowNets: Other approaches usually learn to maximize the reward, so they would not sample from both of our modes (or everything in between), but they would find one of them and then just sample from it (especially if one of our modes would be greater than the other). This might be suboptimal e.g. in molecule discovery, where you might not want the most promising molecule, but many different of themmight be interesting.";
				t86 = space();
				h24 = element("h2");
				h24.textContent = "Mode Collapse";
				t88 = space();
				p9 = element("p");
				p9.textContent = "So far, our distribution to match was very easy. Lets make it more challenging: If we lower the variance, we see the two modes are more seperated.";
				t90 = space();
				div10 = element("div");
				img2 = element("img");
				t91 = space();
				div11 = element("div");
				create_component(slider1.$$.fragment);
				t92 = space();
				p10 = element("p");
				t93 = text$2("Well thats not what we want! Instead of sampling from the true distribution we only sample from one mode, thats what common RL methods do. We had another goal!\n      ");
				br25 = element("br");
				br26 = element("br");
				t94 = text$2("\n      There are two main possibilities to fix this:\n      ");
				span7 = element("span");
				t95 = text$2("We could introduce a temperature parameter ");
				create_component(katex10.$$.fragment);
				t96 = text$2(" into our reward function:");
				create_component(katex11.$$.fragment);
				t97 = text$2(". This would change the \"peakyness\" of the reward function and we would not sample proportional to the reward function but according to ");
				create_component(katex12.$$.fragment);
				t98 = text$2(". It is also possible to use ");
				create_component(katex13.$$.fragment);
				t99 = text$2(" as a trainable parameter and condition the model on it.");
				t100 = space();
				span8 = element("span");
				span8.textContent = "A similar but simpler way is to just train off-policy. By adding a fixed variance to the logits of the forward policy, we explore more during training. As this is a very easy implementation let's go with this one.";
				t102 = space();
				div12 = element("div");
				create_component(accordion2.$$.fragment);
				t103 = space();
				div13 = element("div");
				img3 = element("img");
				t104 = space();
				div14 = element("div");
				create_component(slider2.$$.fragment);
				t105 = space();
				p11 = element("p");
				p11.textContent = "It took some iterations, but now we match the distribution again.";
				t107 = space();
				section2 = element("section");
				h25 = element("h2");
				h25.textContent = "Flow: Is this what it looks like?";
				t109 = space();
				p12 = element("p");
				t110 = text$2("Well, kind of. Imagine our grid would be discrete. If we are in one cell, we would have a certain Flow (a non-negative scalar) to each other cell (technically also to itself given our trick with adding the step to the state).\n      ");
				br27 = element("br");
				t111 = text$2("Even in a discrete space, this is hard to visualize, as we would have to compute the flow from each state to every other state.\n      ");
				br28 = element("br");
				t112 = text$2("In our continuous space this gets even more complicated, not only in terms of visualization but also mathematically - look into Lahlou et al. (2023) if you are interested.\n      ");
				br29 = element("br");
				t113 = text$2("Instead of showing all the flows, the plot shows the ");
				i_1 = element("i");
				i_1.textContent = "highest";
				t115 = text$2(" flow for each state: This is a vector from it to another point on the grid.\n      If we do that for some evenly spaced points we get a vectorfield. The visualization above is just a nicer way to show it by letting particles move through the field.\n      Note that this might be a bit misleading as a lot depends on the parameters of the physics simulation. Change to view the vectorfield for more precision.");
				t116 = space();
				section3 = element("section");
				h26 = element("h2");
				h26.textContent = "Acknowledgements";
				t118 = space();
				p13 = element("p");
				t119 = text$2("Thanks to Christina Humer for the feedback and resources.\n      ");
				br30 = element("br");
				t120 = text$2("Some implementations and ideas are based on other great work:\n      ");
				span9 = element("span");
				t121 = text$2("The\n        ");
				a0 = element("a");
				a0.textContent = "continuous line";
				t123 = text$2("\n        example by Joseph Viviano & Kolya Malkin.\n        The idea for the environment is based on their notebook and much of the training code is adapted from theirs.");
				t124 = space();
				span10 = element("span");
				t125 = text$2("The\n        ");
				a1 = element("a");
				a1.textContent = "neural network playgroud";
				t127 = text$2("\n         by Daniel Smilkov and Shan Carter was an inspiration on how to visualize machine learning and the training progress in the browser.");
				t128 = space();
				span11 = element("span");
				t129 = text$2("The code for the flow field visualization is mostly taken from\n        ");
				a2 = element("a");
				a2.textContent = "Mathcurious' implementation";
				t131 = text$2("\n      If you want to learn more about GFlowNets have a look into the literature and tutorials below.");
				t132 = space();
				section4 = element("section");
				h27 = element("h2");
				h27.textContent = "Sources";
				t134 = space();
				h30 = element("h3");
				h30.textContent = "Literature";
				t136 = space();
				p14 = element("p");
				t137 = text$2("Malkin, N., Jain, M., Bengio, E., Sun, C., & Bengio, Y. (2022). Trajectory balance: Improved credit\n        assignment in gflownets. Advances in Neural Information Processing Systems, 35, 5955-5967.\n        ");
				br31 = element("br");
				br32 = element("br");
				t138 = text$2("\n        Shen, M. W., Bengio, E., Hajiramezanali, E., Loukas, A., Cho, K., & Biancalani, T. (2023, July).\n        Towards understanding and improving gflownet training. In International Conference on Machine\n        Learning (pp. 30956-30975). PMLR.\n        ");
				br33 = element("br");
				br34 = element("br");
				t139 = text$2("\n        Bengio, Y., Lahlou, S., Deleu, T., Hu, E. J., Tiwari, M., & Bengio, E. (2023). Gflownet foundations. The\n        Journal of Machine Learning Research, 24(1), 10006-10060.\n        ");
				br35 = element("br");
				br36 = element("br");
				t140 = text$2("\n        Bengio, E., Jain, M., Korablyov, M., Precup, D., & Bengio, Y. (2021). Flow network based generative\n        models for non-iterative diverse candidate generation. Advances in Neural Information Processing\n        Systems, 34, 27381-27394.\n        ");
				br37 = element("br");
				br38 = element("br");
				t141 = text$2("\n        Nica, A. C., Jain, M., Bengio, E., Liu, C. H., Korablyov, M., Bronstein, M. M., & Bengio, Y. (2022). Evaluating generalization in gflownets for molecule design. In ICLR2022 Machine Learning for Drug Discovery.\n        ");
				br39 = element("br");
				br40 = element("br");
				t142 = text$2("\n        Lahlou, S., Deleu, T., Lemos, P., Zhang, D., Volokhova, A., Hernández-Garcıa, A., ... & Malkin, N. (2023, July). A theory of continuous generative flow networks. In International Conference on Machine Learning (pp. 18269-18300). PMLR.");
				t143 = space();
				h31 = element("h3");
				h31.textContent = "Tutorials";
				t145 = space();
				p15 = element("p");
				t146 = text$2("https://milayb.notion.site/The-GFlowNet-Tutorial-95434ef0e2d94c24aab90e69b30be9b3\n        ");
				br41 = element("br");
				br42 = element("br");
				t147 = text$2("\n        https://colab.research.google.com/drive/1fUMwgu2OhYpQagpzU5mhe9_Esib3Q2VR\n        ");
				br43 = element("br");
				br44 = element("br");
				t148 = text$2("\n        https://github.com/GFNOrg/torchgfn/blob/master/tutorials/notebooks/intro_gfn_continuous_line_simple.ipynb");
				t149 = space();
				h32 = element("h3");
				h32.textContent = "GFlowNet Libraries";
				t151 = space();
				p16 = element("p");
				t152 = text$2("https://github.com/alexhernandezgarcia/gflownet\n        ");
				br45 = element("br");
				br46 = element("br");
				t153 = text$2("\n        https://github.com/GFNOrg/torchgfn\n        ");
				br47 = element("br");
				br48 = element("br");
				t154 = text$2("\n        https://github.com/augustwester/gflownet");
				attr_dev(link0, "rel", "stylesheet");
				attr_dev(link0, "href", "https://cdn.jsdelivr.net/npm/katex@0.15.2/dist/katex.min.css");
				attr_dev(link0, "integrity", "sha384-MlJdn/WNKDGXveldHDdyRP1R4CTHr3FeuDNfhsLPYrq2t0UBkUdK2jyTnXPEK1NQ");
				attr_dev(link0, "crossorigin", "anonymous");
				add_location(link0, file, 447, 0, 12180);
				attr_dev(link1, "href", "https://fonts.googleapis.com/css2?family=Material+Icons&display=swap");
				attr_dev(link1, "rel", "stylesheet");
				add_location(link1, file, 448, 0, 12380);
				attr_dev(h1, "class", "title");
				add_location(h1, file, 460, 6, 12583);
				attr_dev(p0, "class", "subtitle");
				add_location(p0, file, 461, 6, 12636);
				attr_dev(div0, "class", "container");
				add_location(div0, file, 459, 4, 12553);
				attr_dev(header, "class", "header-top");
				add_location(header, file, 458, 2, 12521);
				attr_dev(div1, "class", "pg-top-background");
				add_location(div1, file, 470, 2, 12810);
				attr_dev(div2, "class", "pg-views");
				add_location(div2, file, 473, 2, 12856);
				attr_dev(div3, "class", "pg-scrollbutton");
				add_location(div3, file, 789, 4, 24103);
				attr_dev(div4, "class", "pg-background");
				add_location(div4, file, 469, 2, 12780);
				attr_dev(h20, "class", "section-title");
				add_location(h20, file, 806, 4, 24389);
				add_location(br0, file, 809, 6, 24523);
				add_location(br1, file, 811, 6, 24733);
				attr_dev(p1, "class", "section-text");
				add_location(p1, file, 807, 4, 24444);
				attr_dev(h21, "class", "section-title");
				add_location(h21, file, 813, 4, 24768);
				add_location(br2, file, 818, 6, 25108);
				add_location(br3, file, 820, 6, 25509);
				attr_dev(p2, "class", "section-text");
				add_location(p2, file, 814, 4, 24823);
				attr_dev(div5, "class", "image-container");
				add_location(div5, file, 823, 6, 25718);
				add_location(br4, file, 851, 6, 28574);
				add_location(br5, file, 852, 6, 28585);
				add_location(br6, file, 853, 6, 28660);
				add_location(br7, file, 854, 6, 28708);
				add_location(br8, file, 855, 6, 28719);
				add_location(br9, file, 858, 6, 29058);
				add_location(br10, file, 859, 6, 29207);
				attr_dev(p3, "class", "section-text");
				add_location(p3, file, 844, 4, 28186);
				if (!src_url_equal(img0.src, img0_src_value = "/images/gflownet_anim.gif")) attr_dev(img0, "src", img0_src_value);
				attr_dev(img0, "class", "image");
				attr_dev(img0, "alt", "A visualization of the flow through the DAG");
				add_location(img0, file, 862, 8, 29271);
				attr_dev(div6, "class", "image-container-small");
				add_location(div6, file, 861, 6, 29227);
				attr_dev(span0, "class", "mathexpl svelte-18u8l72");
				add_location(span0, file, 865, 6, 29421);
				add_location(br11, file, 867, 6, 29581);
				add_location(br12, file, 869, 6, 29763);
				add_location(br13, file, 870, 6, 29785);
				attr_dev(span1, "class", "li svelte-18u8l72");
				add_location(span1, file, 872, 6, 29797);
				attr_dev(span2, "class", "li svelte-18u8l72");
				add_location(span2, file, 873, 6, 29963);
				add_location(br14, file, 874, 6, 30104);
				attr_dev(span3, "class", "mathexpl svelte-18u8l72");
				add_location(span3, file, 882, 6, 30409);
				attr_dev(span4, "class", "mathexpl svelte-18u8l72");
				add_location(span4, file, 889, 6, 30740);
				add_location(br15, file, 892, 6, 30998);
				attr_dev(span5, "class", "mathexpl svelte-18u8l72");
				add_location(span5, file, 897, 6, 31300);
				attr_dev(p4, "class", "section-text");
				add_location(p4, file, 864, 4, 29390);
				attr_dev(h22, "class", "section-title");
				add_location(h22, file, 906, 4, 31867);
				add_location(br16, file, 909, 6, 32299);
				add_location(br17, file, 910, 6, 32310);
				add_location(br18, file, 911, 6, 32667);
				add_location(br19, file, 912, 6, 32678);
				attr_dev(p5_1, "class", "section-text");
				add_location(p5_1, file, 907, 4, 31918);
				attr_dev(section0, "class", "section");
				attr_dev(section0, "id", "Tutorial");
				add_location(section0, file, 805, 2, 24319);
				attr_dev(h23, "class", "section-title");
				add_location(h23, file, 921, 4, 33079);
				add_location(br20, file, 924, 6, 33193);
				add_location(br21, file, 927, 6, 33453);
				add_location(br22, file, 932, 58, 33800);
				attr_dev(span6, "class", "mathexpl svelte-18u8l72");
				add_location(span6, file, 932, 6, 33748);
				add_location(br23, file, 935, 6, 34152);
				add_location(br24, file, 936, 6, 34325);
				attr_dev(p6, "class", "section-text");
				add_location(p6, file, 922, 4, 33123);
				attr_dev(div7, "class", "image-container");
				add_location(div7, file, 938, 4, 34466);
				attr_dev(p7, "class", "section-text");
				add_location(p7, file, 996, 4, 37942);
				if (!src_url_equal(img1.src, img1_src_value = /*run1*/ ctx[28])) attr_dev(img1, "src", img1_src_value);
				attr_dev(img1, "class", "image");
				attr_dev(img1, "alt", "GFN samples from the underlying distribution");
				add_location(img1, file, 1003, 6, 38247);
				attr_dev(div8, "class", "image-container");
				add_location(div8, file, 1002, 4, 38211);
				set_style(div9, "width", "600px");
				set_style(div9, "margin", "auto");
				set_style(div9, "text-align", "center");
				add_location(div9, file, 1005, 4, 38346);
				attr_dev(p8, "class", "section-text");
				add_location(p8, file, 1016, 4, 38620);
				attr_dev(h24, "class", "section-title");
				add_location(h24, file, 1021, 4, 39172);
				attr_dev(p9, "class", "section-text");
				add_location(p9, file, 1022, 4, 39221);
				if (!src_url_equal(img2.src, img2_src_value = /*run2*/ ctx[27])) attr_dev(img2, "src", img2_src_value);
				attr_dev(img2, "class", "image");
				attr_dev(img2, "alt", "The model samples only from one mode of the distribution");
				add_location(img2, file, 1026, 6, 39448);
				attr_dev(div10, "class", "image-container");
				add_location(div10, file, 1025, 4, 39412);
				set_style(div11, "width", "600px");
				set_style(div11, "margin", "auto");
				set_style(div11, "text-align", "center");
				add_location(div11, file, 1028, 4, 39559);
				add_location(br25, file, 1040, 6, 40001);
				add_location(br26, file, 1040, 10, 40005);
				attr_dev(span7, "class", "li svelte-18u8l72");
				add_location(span7, file, 1042, 6, 40068);
				attr_dev(span8, "class", "li svelte-18u8l72");
				add_location(span8, file, 1043, 6, 40513);
				attr_dev(p10, "class", "section-text");
				add_location(p10, file, 1038, 4, 39804);
				attr_dev(div12, "class", "image-container");
				add_location(div12, file, 1045, 4, 40764);
				if (!src_url_equal(img3.src, img3_src_value = /*run3*/ ctx[26])) attr_dev(img3, "src", img3_src_value);
				attr_dev(img3, "class", "image");
				attr_dev(img3, "alt", "Training off policy helps to discover modes");
				add_location(img3, file, 1076, 6, 42271);
				attr_dev(div13, "class", "image-container");
				add_location(div13, file, 1075, 4, 42235);
				set_style(div14, "width", "600px");
				set_style(div14, "margin", "auto");
				set_style(div14, "text-align", "center");
				add_location(div14, file, 1078, 4, 42369);
				attr_dev(p11, "class", "section-text");
				add_location(p11, file, 1088, 4, 42614);
				attr_dev(section1, "class", "section section-light");
				add_location(section1, file, 920, 2, 33035);
				attr_dev(h25, "class", "section-title");
				add_location(h25, file, 1095, 4, 42767);
				add_location(br27, file, 1098, 6, 43099);
				add_location(br28, file, 1099, 6, 43237);
				add_location(br29, file, 1100, 6, 43419);
				add_location(i_1, file, 1100, 63, 43476);
				attr_dev(p12, "class", "section-text");
				add_location(p12, file, 1096, 4, 42836);
				attr_dev(section2, "class", "section");
				add_location(section2, file, 1094, 2, 42737);
				attr_dev(h26, "class", "section-title");
				add_location(h26, file, 1106, 4, 43953);
				add_location(br30, file, 1109, 6, 44100);
				attr_dev(a0, "href", "https://github.com/GFNOrg/torchgfn/blob/master/tutorials/notebooks/intro_gfn_continuous_line_simple.ipynb");
				attr_dev(a0, "target", "_blank");
				add_location(a0, file, 1111, 8, 44201);
				attr_dev(span9, "class", "li svelte-18u8l72");
				add_location(span9, file, 1110, 6, 44172);
				attr_dev(a1, "href", "https://playground.tensorflow.org/");
				attr_dev(a1, "target", "_blank");
				add_location(a1, file, 1116, 8, 44566);
				attr_dev(span10, "class", "li svelte-18u8l72");
				add_location(span10, file, 1115, 4, 44537);
				attr_dev(a2, "href", "https://editor.p5js.org/Mathcurious/sketches/bdp6luRil");
				attr_dev(a2, "target", "_blank");
				add_location(a2, file, 1121, 8, 44916);
				attr_dev(span11, "class", "li svelte-18u8l72");
				add_location(span11, file, 1120, 6, 44828);
				attr_dev(p13, "class", "section-text");
				add_location(p13, file, 1107, 4, 44005);
				attr_dev(section3, "class", "section");
				add_location(section3, file, 1105, 2, 43923);
				attr_dev(h27, "class", "section-title");
				add_location(h27, file, 1130, 4, 45201);
				attr_dev(h30, "class", "section-title3");
				add_location(h30, file, 1131, 4, 45244);
				add_location(br31, file, 1135, 8, 45533);
				add_location(br32, file, 1135, 12, 45537);
				add_location(br33, file, 1139, 8, 45799);
				add_location(br34, file, 1139, 12, 45803);
				add_location(br35, file, 1142, 8, 45995);
				add_location(br36, file, 1142, 12, 45999);
				add_location(br37, file, 1146, 8, 46259);
				add_location(br38, file, 1146, 12, 46263);
				add_location(br39, file, 1148, 8, 46494);
				add_location(br40, file, 1148, 12, 46498);
				attr_dev(p14, "class", "section-text");
				add_location(p14, file, 1132, 6, 45293);
				attr_dev(h31, "class", "section-title3");
				add_location(h31, file, 1151, 4, 46761);
				add_location(br41, file, 1154, 8, 46932);
				add_location(br42, file, 1154, 12, 46936);
				add_location(br43, file, 1156, 8, 47031);
				add_location(br44, file, 1156, 12, 47035);
				attr_dev(p15, "class", "section-text");
				add_location(p15, file, 1152, 6, 46809);
				attr_dev(h32, "class", "section-title3");
				add_location(h32, file, 1160, 4, 47170);
				add_location(br45, file, 1163, 8, 47316);
				add_location(br46, file, 1163, 12, 47320);
				add_location(br47, file, 1165, 8, 47376);
				add_location(br48, file, 1165, 12, 47380);
				attr_dev(p16, "class", "section-text");
				add_location(p16, file, 1161, 6, 47227);
				attr_dev(section4, "class", "section");
				add_location(section4, file, 1129, 2, 45171);
				attr_dev(main, "class", "main-content");
				add_location(main, file, 457, 0, 12491);
			},
			l: function claim(nodes) {
				throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, link0, anchor);
				insert_dev(target, t0, anchor);
				insert_dev(target, link1, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, main, anchor);
				append_dev(main, header);
				append_dev(header, div0);
				append_dev(div0, h1);
				append_dev(div0, t3);
				append_dev(div0, p0);
				append_dev(main, t5);
				append_dev(main, div4);
				append_dev(div4, div1);
				append_dev(div4, t6);
				append_dev(div4, div2);
				mount_component(tabbar, div2, null);
				append_dev(div2, t7);

				if (~current_block_type_index) {
					if_blocks[current_block_type_index].m(div2, null);
				}

				append_dev(div4, t8);
				append_dev(div4, div3);
				mount_component(fab, div3, null);
				append_dev(main, t9);
				append_dev(main, section0);
				append_dev(section0, h20);
				append_dev(section0, t11);
				append_dev(section0, p1);
				append_dev(p1, t12);
				append_dev(p1, br0);
				append_dev(p1, t13);
				append_dev(p1, br1);
				append_dev(p1, t14);
				append_dev(section0, t15);
				append_dev(section0, h21);
				append_dev(section0, t17);
				append_dev(section0, p2);
				append_dev(p2, t18);
				append_dev(p2, br2);
				append_dev(p2, t19);
				mount_component(katex0, p2, null);
				append_dev(p2, t20);
				mount_component(katex1, p2, null);
				append_dev(p2, t21);
				mount_component(katex2, p2, null);
				append_dev(p2, t22);
				append_dev(p2, br3);
				append_dev(p2, t23);
				append_dev(section0, t24);
				append_dev(section0, div5);
				mount_component(accordion0, div5, null);
				append_dev(section0, t25);
				append_dev(section0, p3);
				append_dev(p3, t26);
				mount_component(katex3, p3, null);
				append_dev(p3, t27);
				append_dev(p3, br4);
				append_dev(p3, t28);
				append_dev(p3, br5);
				append_dev(p3, t29);
				append_dev(p3, br6);
				append_dev(p3, t30);
				append_dev(p3, br7);
				append_dev(p3, t31);
				append_dev(p3, br8);
				append_dev(p3, t32);
				append_dev(p3, br9);
				append_dev(p3, t33);
				append_dev(p3, br10);
				append_dev(section0, t34);
				append_dev(section0, div6);
				append_dev(div6, img0);
				append_dev(section0, t35);
				append_dev(section0, p4);
				append_dev(p4, span0);
				append_dev(p4, t37);
				append_dev(p4, br11);
				append_dev(p4, t38);
				append_dev(p4, br12);
				append_dev(p4, t39);
				append_dev(p4, br13);
				append_dev(p4, t40);
				append_dev(p4, span1);
				append_dev(p4, t42);
				append_dev(p4, span2);
				append_dev(p4, t44);
				append_dev(p4, br14);
				append_dev(p4, t45);
				mount_component(katex4, p4, null);
				append_dev(p4, t46);
				append_dev(p4, span3);
				append_dev(p4, t48);
				mount_component(katex5, p4, null);
				append_dev(p4, t49);
				append_dev(p4, span4);
				append_dev(p4, t51);
				append_dev(p4, br15);
				append_dev(p4, t52);
				mount_component(katex6, p4, null);
				append_dev(p4, t53);
				append_dev(p4, span5);
				append_dev(p4, t55);
				append_dev(section0, t56);
				append_dev(section0, h22);
				append_dev(section0, t58);
				append_dev(section0, p5_1);
				append_dev(p5_1, t59);
				append_dev(p5_1, br16);
				append_dev(p5_1, t60);
				append_dev(p5_1, br17);
				append_dev(p5_1, t61);
				append_dev(p5_1, br18);
				append_dev(p5_1, t62);
				append_dev(p5_1, br19);
				append_dev(p5_1, t63);
				/*section0_binding*/ ctx[68](section0);
				append_dev(main, t64);
				append_dev(main, section1);
				append_dev(section1, h23);
				append_dev(section1, t66);
				append_dev(section1, p6);
				append_dev(p6, t67);
				append_dev(p6, br20);
				append_dev(p6, t68);
				append_dev(p6, br21);
				append_dev(p6, t69);
				mount_component(katex7, p6, null);
				append_dev(p6, t70);
				append_dev(p6, span6);
				append_dev(span6, t71);
				append_dev(span6, br22);
				append_dev(span6, t72);
				append_dev(p6, t73);
				append_dev(p6, br23);
				append_dev(p6, t74);
				mount_component(katex8, p6, null);
				append_dev(p6, t75);
				mount_component(katex9, p6, null);
				append_dev(p6, t76);
				append_dev(p6, br24);
				append_dev(p6, t77);
				append_dev(section1, t78);
				append_dev(section1, div7);
				mount_component(accordion1, div7, null);
				append_dev(section1, t79);
				append_dev(section1, p7);
				append_dev(section1, t81);
				append_dev(section1, div8);
				append_dev(div8, img1);
				append_dev(section1, t82);
				append_dev(section1, div9);
				mount_component(slider0, div9, null);
				append_dev(div9, t83);
				append_dev(section1, t84);
				append_dev(section1, p8);
				append_dev(section1, t86);
				append_dev(section1, h24);
				append_dev(section1, t88);
				append_dev(section1, p9);
				append_dev(section1, t90);
				append_dev(section1, div10);
				append_dev(div10, img2);
				append_dev(section1, t91);
				append_dev(section1, div11);
				mount_component(slider1, div11, null);
				append_dev(section1, t92);
				append_dev(section1, p10);
				append_dev(p10, t93);
				append_dev(p10, br25);
				append_dev(p10, br26);
				append_dev(p10, t94);
				append_dev(p10, span7);
				append_dev(span7, t95);
				mount_component(katex10, span7, null);
				append_dev(span7, t96);
				mount_component(katex11, span7, null);
				append_dev(span7, t97);
				mount_component(katex12, span7, null);
				append_dev(span7, t98);
				mount_component(katex13, span7, null);
				append_dev(span7, t99);
				append_dev(p10, t100);
				append_dev(p10, span8);
				append_dev(section1, t102);
				append_dev(section1, div12);
				mount_component(accordion2, div12, null);
				append_dev(section1, t103);
				append_dev(section1, div13);
				append_dev(div13, img3);
				append_dev(section1, t104);
				append_dev(section1, div14);
				mount_component(slider2, div14, null);
				append_dev(section1, t105);
				append_dev(section1, p11);
				append_dev(main, t107);
				append_dev(main, section2);
				append_dev(section2, h25);
				append_dev(section2, t109);
				append_dev(section2, p12);
				append_dev(p12, t110);
				append_dev(p12, br27);
				append_dev(p12, t111);
				append_dev(p12, br28);
				append_dev(p12, t112);
				append_dev(p12, br29);
				append_dev(p12, t113);
				append_dev(p12, i_1);
				append_dev(p12, t115);
				append_dev(main, t116);
				append_dev(main, section3);
				append_dev(section3, h26);
				append_dev(section3, t118);
				append_dev(section3, p13);
				append_dev(p13, t119);
				append_dev(p13, br30);
				append_dev(p13, t120);
				append_dev(p13, span9);
				append_dev(span9, t121);
				append_dev(span9, a0);
				append_dev(span9, t123);
				append_dev(p13, t124);
				append_dev(p13, span10);
				append_dev(span10, t125);
				append_dev(span10, a1);
				append_dev(span10, t127);
				append_dev(p13, t128);
				append_dev(p13, span11);
				append_dev(span11, t129);
				append_dev(span11, a2);
				append_dev(p13, t131);
				append_dev(main, t132);
				append_dev(main, section4);
				append_dev(section4, h27);
				append_dev(section4, t134);
				append_dev(section4, h30);
				append_dev(section4, t136);
				append_dev(section4, p14);
				append_dev(p14, t137);
				append_dev(p14, br31);
				append_dev(p14, br32);
				append_dev(p14, t138);
				append_dev(p14, br33);
				append_dev(p14, br34);
				append_dev(p14, t139);
				append_dev(p14, br35);
				append_dev(p14, br36);
				append_dev(p14, t140);
				append_dev(p14, br37);
				append_dev(p14, br38);
				append_dev(p14, t141);
				append_dev(p14, br39);
				append_dev(p14, br40);
				append_dev(p14, t142);
				append_dev(section4, t143);
				append_dev(section4, h31);
				append_dev(section4, t145);
				append_dev(section4, p15);
				append_dev(p15, t146);
				append_dev(p15, br41);
				append_dev(p15, br42);
				append_dev(p15, t147);
				append_dev(p15, br43);
				append_dev(p15, br44);
				append_dev(p15, t148);
				append_dev(section4, t149);
				append_dev(section4, h32);
				append_dev(section4, t151);
				append_dev(section4, p16);
				append_dev(p16, t152);
				append_dev(p16, br45);
				append_dev(p16, br46);
				append_dev(p16, t153);
				append_dev(p16, br47);
				append_dev(p16, br48);
				append_dev(p16, t154);
				current = true;
			},
			p: function update(ctx, dirty) {
				const tabbar_changes = {};

				if (dirty[0] & /*isRunning*/ 16777216 | dirty[3] & /*$$scope, tab*/ 69206016) {
					tabbar_changes.$$scope = { dirty, ctx };
				}

				if (!updating_active && dirty[0] & /*view*/ 8) {
					updating_active = true;
					tabbar_changes.active = /*view*/ ctx[3];
					add_flush_callback(() => updating_active = false);
				}

				tabbar.$set(tabbar_changes);
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if (~current_block_type_index) {
						if_blocks[current_block_type_index].p(ctx, dirty);
					}
				} else {
					if (if_block) {
						group_outros();

						transition_out(if_blocks[previous_block_index], 1, 1, () => {
							if_blocks[previous_block_index] = null;
						});

						check_outros();
					}

					if (~current_block_type_index) {
						if_block = if_blocks[current_block_type_index];

						if (!if_block) {
							if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
							if_block.c();
						} else {
							if_block.p(ctx, dirty);
						}

						transition_in(if_block, 1);
						if_block.m(div2, null);
					} else {
						if_block = null;
					}
				}

				const fab_changes = {};
				if (dirty[0] & /*isRunning*/ 16777216) fab_changes.disabled = /*isRunning*/ ctx[24];

				if (dirty[3] & /*$$scope*/ 67108864) {
					fab_changes.$$scope = { dirty, ctx };
				}

				fab.$set(fab_changes);
				const katex0_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex0_changes.$$scope = { dirty, ctx };
				}

				katex0.$set(katex0_changes);
				const katex1_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex1_changes.$$scope = { dirty, ctx };
				}

				katex1.$set(katex1_changes);
				const katex2_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex2_changes.$$scope = { dirty, ctx };
				}

				katex2.$set(katex2_changes);
				const accordion0_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					accordion0_changes.$$scope = { dirty, ctx };
				}

				accordion0.$set(accordion0_changes);
				const katex3_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex3_changes.$$scope = { dirty, ctx };
				}

				katex3.$set(katex3_changes);
				const katex4_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex4_changes.$$scope = { dirty, ctx };
				}

				katex4.$set(katex4_changes);
				const katex5_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex5_changes.$$scope = { dirty, ctx };
				}

				katex5.$set(katex5_changes);
				const katex6_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex6_changes.$$scope = { dirty, ctx };
				}

				katex6.$set(katex6_changes);
				const katex7_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex7_changes.$$scope = { dirty, ctx };
				}

				katex7.$set(katex7_changes);
				const katex8_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex8_changes.$$scope = { dirty, ctx };
				}

				katex8.$set(katex8_changes);
				const katex9_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex9_changes.$$scope = { dirty, ctx };
				}

				katex9.$set(katex9_changes);
				const accordion1_changes = {};

				if (dirty[0] & /*panel_algo*/ 1048576 | dirty[3] & /*$$scope*/ 67108864) {
					accordion1_changes.$$scope = { dirty, ctx };
				}

				accordion1.$set(accordion1_changes);

				if (!current || dirty[0] & /*run1*/ 268435456 && !src_url_equal(img1.src, img1_src_value = /*run1*/ ctx[28])) {
					attr_dev(img1, "src", img1_src_value);
				}

				const slider0_changes = {};

				if (!updating_value && dirty[0] & /*run1_value*/ 32) {
					updating_value = true;
					slider0_changes.value = /*run1_value*/ ctx[5];
					add_flush_callback(() => updating_value = false);
				}

				slider0.$set(slider0_changes);

				if (!current || dirty[0] & /*run2*/ 134217728 && !src_url_equal(img2.src, img2_src_value = /*run2*/ ctx[27])) {
					attr_dev(img2, "src", img2_src_value);
				}

				const slider1_changes = {};

				if (!updating_value_1 && dirty[0] & /*run2_value*/ 64) {
					updating_value_1 = true;
					slider1_changes.value = /*run2_value*/ ctx[6];
					add_flush_callback(() => updating_value_1 = false);
				}

				slider1.$set(slider1_changes);
				const katex10_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex10_changes.$$scope = { dirty, ctx };
				}

				katex10.$set(katex10_changes);
				const katex11_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex11_changes.$$scope = { dirty, ctx };
				}

				katex11.$set(katex11_changes);
				const katex12_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex12_changes.$$scope = { dirty, ctx };
				}

				katex12.$set(katex12_changes);
				const katex13_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					katex13_changes.$$scope = { dirty, ctx };
				}

				katex13.$set(katex13_changes);
				const accordion2_changes = {};

				if (dirty[3] & /*$$scope*/ 67108864) {
					accordion2_changes.$$scope = { dirty, ctx };
				}

				accordion2.$set(accordion2_changes);

				if (!current || dirty[0] & /*run3*/ 67108864 && !src_url_equal(img3.src, img3_src_value = /*run3*/ ctx[26])) {
					attr_dev(img3, "src", img3_src_value);
				}

				const slider2_changes = {};

				if (!updating_value_2 && dirty[0] & /*run3_value*/ 128) {
					updating_value_2 = true;
					slider2_changes.value = /*run3_value*/ ctx[7];
					add_flush_callback(() => updating_value_2 = false);
				}

				slider2.$set(slider2_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tabbar.$$.fragment, local);
				transition_in(if_block);
				transition_in(fab.$$.fragment, local);
				transition_in(katex0.$$.fragment, local);
				transition_in(katex1.$$.fragment, local);
				transition_in(katex2.$$.fragment, local);
				transition_in(accordion0.$$.fragment, local);
				transition_in(katex3.$$.fragment, local);
				transition_in(katex4.$$.fragment, local);
				transition_in(katex5.$$.fragment, local);
				transition_in(katex6.$$.fragment, local);
				transition_in(katex7.$$.fragment, local);
				transition_in(katex8.$$.fragment, local);
				transition_in(katex9.$$.fragment, local);
				transition_in(accordion1.$$.fragment, local);
				transition_in(slider0.$$.fragment, local);
				transition_in(slider1.$$.fragment, local);
				transition_in(katex10.$$.fragment, local);
				transition_in(katex11.$$.fragment, local);
				transition_in(katex12.$$.fragment, local);
				transition_in(katex13.$$.fragment, local);
				transition_in(accordion2.$$.fragment, local);
				transition_in(slider2.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tabbar.$$.fragment, local);
				transition_out(if_block);
				transition_out(fab.$$.fragment, local);
				transition_out(katex0.$$.fragment, local);
				transition_out(katex1.$$.fragment, local);
				transition_out(katex2.$$.fragment, local);
				transition_out(accordion0.$$.fragment, local);
				transition_out(katex3.$$.fragment, local);
				transition_out(katex4.$$.fragment, local);
				transition_out(katex5.$$.fragment, local);
				transition_out(katex6.$$.fragment, local);
				transition_out(katex7.$$.fragment, local);
				transition_out(katex8.$$.fragment, local);
				transition_out(katex9.$$.fragment, local);
				transition_out(accordion1.$$.fragment, local);
				transition_out(slider0.$$.fragment, local);
				transition_out(slider1.$$.fragment, local);
				transition_out(katex10.$$.fragment, local);
				transition_out(katex11.$$.fragment, local);
				transition_out(katex12.$$.fragment, local);
				transition_out(katex13.$$.fragment, local);
				transition_out(accordion2.$$.fragment, local);
				transition_out(slider2.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(link0);
					detach_dev(t0);
					detach_dev(link1);
					detach_dev(t1);
					detach_dev(main);
				}

				destroy_component(tabbar);

				if (~current_block_type_index) {
					if_blocks[current_block_type_index].d();
				}

				destroy_component(fab);
				destroy_component(katex0);
				destroy_component(katex1);
				destroy_component(katex2);
				destroy_component(accordion0);
				destroy_component(katex3);
				destroy_component(katex4);
				destroy_component(katex5);
				destroy_component(katex6);
				/*section0_binding*/ ctx[68](null);
				destroy_component(katex7);
				destroy_component(katex8);
				destroy_component(katex9);
				destroy_component(accordion1);
				destroy_component(slider0);
				destroy_component(slider1);
				destroy_component(katex10);
				destroy_component(katex11);
				destroy_component(katex12);
				destroy_component(katex13);
				destroy_component(accordion2);
				destroy_component(slider2);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const POLLING_INTERVAL = 30;

	function instance($$self, $$props, $$invalidate) {
		let batch_size_value;
		let run1;
		let run2;
		let run3;
		let $gaussians;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('App', slots, []);
		let off_policy_value = 0;
		let n_iterations_value;
		let lr_model_value = 0.001;
		let lr_logz_value = 0.1;
		let trajectory_length_value = 6;
		let hidden_layer_value = 2;
		let hidden_dim_value = 64;
		let seed_value = 42;
		let batch_size_exponent = 6;
		let n_gaussians = "2";
		let loss_choice = "Trajectory Balance";

		const gaussians = writable([
			{ mean: { x: -1, y: -1 }, variance: 0.4 },
			{ mean: { x: 1, y: 1 }, variance: 0.4 }
		]);

		validate_store(gaussians, 'gaussians');
		component_subscribe($$self, gaussians, value => $$invalidate(29, $gaussians = value));

		// elements
		let plotContainerEnv2d = "plot-container2d";

		let plotContainerEnv3d = "plot-container3d";
		let tutorialstart;
		let active_tab = 'Basic';
		let n_iterations_select = ["128", "1024", "2048", "4096", "8192", "10240"];
		let n_iterations_str = "2048";
		let losses_select = ["Trajectory Balance", "Flow Matching"];
		let view = "Environment";
		let Plotly;
		let p5;
		let flowContainer;
		let flowvis_instance;
		let panel_algo = false;
		let panel_loss = false;
		let panel_example = false;
		let panel_changes = false;

		// ranges for means and variances
		const range = { min: -3, max: 3 };

		const varianceRange = { min: 0.1, max: 1.0 };

		// Gaussian tracking
		let selectedGaussian = null; // Tracks the currently selected Gaussian

		let hoveredGaussian = null; // Tracks the Gaussian to be highlighted for deletion

		// Mouse interaction handlers
		let isDraggingMean = false;

		let isDraggingVariance = false;
		let initialMouse = { x: 0, y: 0 };

		//others
		let plotlyready = false;

		let display_trainhistory = false;
		let frames = []; //saves all frames for plotting them after training
		let training_frame = 0;
		let training_progress = 0; //for progressbar
		let current_states;
		let current_losses;
		let current_vectorfield;
		let run1_value = 2048;
		let run2_value = 4096;
		let run3_value = 4096;
		let isRunning = false;
		let pollingTimer;

		function changeNGaussians(n) {
			while ($gaussians.length < parseInt(n)) {
				addGaussian();
			}

			while ($gaussians.length > parseInt(n)) {
				removeGaussian();
			}

			if (plotlyready) {
				plotEnv();
			}
		}

		function plot_trainingframe(frame) {
			if (!isRunning && display_trainhistory) {
				plotStates(Plotly, frames[frame]['gaussians'], frames[frame]['states'], frames[frame]['losses']);
			}
		}

		function viewChange(view) {
			if (plotlyready) {
				setTimeout(
					() => {
						if (view === "Environment") {
							console.log("Env View");
							stop_flow();
							plotEnv();
						} else if (view === "Training") {
							console.log("Train View");
							stop_flow();
							plot_trainingframe(training_frame);
						} else {
							console.log("Flow View");
							updateVectorfield();
						}
					},
					5
				);
			}
		}

		async function updateVectorfield() {
			await get_vectorfield(15);

			if (!flowvis_instance) {
				flowvis_instance = new p5(p => plot_flow(p, current_vectorfield), flowContainer);
			}
		}

		// Utility functions
		function stop_flow() {
			if (flowvis_instance) {
				flowvis_instance.remove();
				flowvis_instance = null;
			}
		}

		const clamp = (value, min, max) => Math.min(Math.max(value, min), max);

		function resetSliders() {
			$$invalidate(8, off_policy_value = 0);
			$$invalidate(2, n_iterations_str = "2048");
			$$invalidate(10, lr_model_value = 0.001);
			$$invalidate(11, lr_logz_value = 0.1);
			$$invalidate(12, trajectory_length_value = 6);
			$$invalidate(13, hidden_layer_value = 2);
			$$invalidate(14, hidden_dim_value = 64);
			$$invalidate(15, seed_value = 42);
			$$invalidate(0, batch_size_exponent = 6);
		}

		async function loadPlotly() {
			const script = document.createElement('script');
			script.src = 'https://cdn.plot.ly/plotly-latest.min.js';
			document.head.appendChild(script);

			return new Promise(resolve => {
					script.onload = () => {
						Plotly = window.Plotly;
						resolve();
					};
				});
		}

		async function loadp5() {
			const script = document.createElement('script');
			script.src = 'https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js';
			document.head.appendChild(script);

			return new Promise(resolve => {
					script.onload = () => {
						p5 = window.p5;
						resolve();
					};
				});
		}

		function scrollToTutorial() {
			if (tutorialstart) {
				tutorialstart.scrollIntoView({ behavior: 'smooth', block: 'start' });
			}
		}

		// Functions used to start, stop and update the training process
		async function startTraining() {
			try {
				// Disable sliders and switch button state
				$$invalidate(24, isRunning = true);

				$$invalidate(21, display_trainhistory = true);
				$$invalidate(23, training_progress = 0);
				const curr_gaussians = $gaussians;

				const send_params = JSON.stringify({
					off_policy_value,
					loss_choice,
					n_iterations_value,
					lr_model_value,
					lr_logz_value,
					trajectory_length_value,
					hidden_layer_value,
					hidden_dim_value,
					seed_value,
					batch_size_value,
					curr_gaussians
				});

				// Start training
				const response = await fetch('http://localhost:8000/start_training', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: send_params
				});

				console.log("Training params sent:", send_params);

				if (!response.ok) {
					throw new Error('Failed to start training.');
				}

				$$invalidate(22, frames = []);

				// Start polling for trainings
				pollTraining();
			} catch(error) {
				console.error(error);
				$$invalidate(24, isRunning = false);
			}
		}

		async function stopTraining() {
			try {
				// Stop training on backend
				const response = await fetch('http://localhost:8000/stop_training', { method: 'POST' });

				if (!response.ok) {
					throw new Error('Failed to stop training.');
				}

				// Stop polling and reset button state
				clearInterval(pollingTimer);

				$$invalidate(24, isRunning = false);
			} catch(error) {
				console.error(error);
			}
		}

		function pollTraining() {
			pollingTimer = setInterval(
				async () => {
					try {
						const response = await fetch('http://localhost:8000/get_training_update');

						if (!response.ok) {
							throw new Error('Failed to fetch training.');
						}

						const data = await response.json();

						if (data.losses) {
							current_losses = data.losses;
							$$invalidate(23, training_progress = current_losses['losses'].length);
						}

						if (data.states) {
							current_states = data.states;
							plotStates(Plotly, $gaussians, current_states, current_losses);

							frames.push({
								'gaussians': JSON.parse(JSON.stringify($gaussians)),
								'states': current_states,
								'losses': current_losses
							});
						}

						if (data.completed) {
							console.log("Training process completed.");
							plotStates(Plotly, $gaussians, current_states, current_losses);
							$$invalidate(24, isRunning = false); // Update the UI state to reflect the stopped process
							clearInterval(pollingTimer); // Stop the polling
							return; // Stop polling
						}
					} catch(error) {
						console.error(error);
					}
				},
				POLLING_INTERVAL
			);
		}

		// Functions for setting the environment
		function resetGaussians() {
			gaussians.set([
				{ mean: { x: -1, y: -1 }, variance: 0.4 },
				{ mean: { x: 1, y: 1 }, variance: 0.4 }
			]);

			$$invalidate(1, n_gaussians = "2");
			plotEnv();
		}

		const addGaussian = () => {
			gaussians.update(gs => {
				if (gs.length < 4) {
					gs.push({ mean: { x: 0, y: 0 }, variance: 0.5 });
				}

				return gs;
			});

			plotEnv();
		};

		const removeGaussian = () => {
			gaussians.update(gs => {
				if (gs.length > 1) {
					gs.pop();
				}

				return gs;
			});

			plotEnv();
		};

		const startDragMean = (event, gaussian) => {
			if (isRunning) return;
			isDraggingMean = true;
			selectedGaussian = gaussian;
			initialMouse = { x: event.clientX, y: event.clientY };
		};

		const startDragVariance = (event, gaussian) => {
			if (isRunning) return;
			isDraggingVariance = true;
			selectedGaussian = gaussian;
			initialMouse = { x: event.clientX, y: event.clientY };
		};

		const handleMouseMove = event => {
			if (!selectedGaussian || isRunning) return;
			const dx = (event.clientX - initialMouse.x) / 44;
			const dy = (event.clientY - initialMouse.y) / 44;

			gaussians.update(gs => {
				const g = gs.find(g => g === selectedGaussian);

				if (isDraggingMean && g) {
					g.mean.x = clamp(g.mean.x + dx, range.min, range.max);
					g.mean.y = clamp(g.mean.y - dy, range.min, range.max);
				} else if (isDraggingVariance && g) {
					const newVariance = g.variance + dx + dy;
					g.variance = clamp(newVariance, varianceRange.min, varianceRange.max);
				}

				return gs;
			});

			plotEnv();
			initialMouse = { x: event.clientX, y: event.clientY };
		};

		const stopDrag = () => {
			if (isDraggingMean || isDraggingVariance) {
				console.log($gaussians);
				plotEnv();
			}

			isDraggingMean = false;
			isDraggingVariance = false;
			selectedGaussian = null;
		};

		function plotEnv() {
			plotEnvironment(Plotly, plotContainerEnv2d, $gaussians, { title: null });
			plotEnvironment(Plotly, plotContainerEnv3d, $gaussians, { title: null });
		}

		function gaussians_textinput(e, i, param) {
			let value = parseFloat(e.target.value);
			if (isNaN(value)) value = 0;

			if (param === "variance") {
				value = Math.min(1, Math.max(0.1, value));
				set_store_value(gaussians, $gaussians[i][param] = value, $gaussians);
			} else {
				value = Math.min(3, Math.max(-3, value));
				set_store_value(gaussians, $gaussians[i]["mean"][param] = value, $gaussians);
			}

			plotEnv();
		}

		//get vectorfield from backend
		async function get_vectorfield(size) {
			try {
				// params: width and heigth
				const response = await fetch('http://localhost:8000/get_vectorfield', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ size })
				});

				console.log("Field params sent:", size);

				if (!response.ok) {
					throw new Error(`Failed to get Vectorfield HTTP error! Status: ${response.status}`);
				}

				const data = await response.json();
				console.log(data);
				current_vectorfield = data;
			} catch(error) {
				console.error(error);
			}
		}

		// Mounting
		onMount(async () => {
			//visualize the environment
			await loadPlotly();

			await loadp5();
			plotlyready = true;
			plotEnv();

			// add listeners for changing the Environment
			window.addEventListener('mousemove', handleMouseMove);

			window.addEventListener('mouseup', stopDrag);

			return () => {
				window.removeEventListener('mousemove', handleMouseMove);
				window.removeEventListener('mouseup', stopDrag);
			};
		});

		const writable_props = [];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<App> was created with unknown prop '${key}'`);
		});

		function tabbar_active_binding(value) {
			view = value;
			$$invalidate(3, view);
		}

		const click_handler = () => $$invalidate(3, view = "Training");

		function select_1_value_binding(value) {
			n_gaussians = value;
			$$invalidate(1, n_gaussians);
		}

		const mousedown_handler = (g, e) => startDragVariance(e, g);
		const mousedown_handler_1 = (g, e) => startDragMean(e, g);

		function textfield_value_binding(value, i) {
			if ($$self.$$.not_equal($gaussians[i]["mean"]["x"], value)) {
				$gaussians[i]["mean"]["x"] = value;
				gaussians.set($gaussians);
			}
		}

		const input_handler = (i, e) => gaussians_textinput(e, i, "x");

		function textfield_value_binding_1(value, i) {
			if ($$self.$$.not_equal($gaussians[i]["mean"]["y"], value)) {
				$gaussians[i]["mean"]["y"] = value;
				gaussians.set($gaussians);
			}
		}

		const input_handler_1 = (i, e) => gaussians_textinput(e, i, "y");

		function textfield_value_binding_2(value, i) {
			if ($$self.$$.not_equal($gaussians[i]["variance"], value)) {
				$gaussians[i]["variance"] = value;
				gaussians.set($gaussians);
			}
		}

		const input_handler_2 = (i, e) => gaussians_textinput(e, i, "variance");

		function select0_value_binding(value) {
			loss_choice = value;
			$$invalidate(16, loss_choice);
		}

		function select1_value_binding(value) {
			n_iterations_str = value;
			$$invalidate(2, n_iterations_str);
		}

		function tabbar_active_binding_1(value) {
			active_tab = value;
			$$invalidate(18, active_tab);
		}

		function slider0_value_binding(value) {
			batch_size_exponent = value;
			$$invalidate(0, batch_size_exponent);
		}

		function slider1_value_binding(value) {
			trajectory_length_value = value;
			$$invalidate(12, trajectory_length_value);
		}

		function slider2_value_binding(value) {
			lr_model_value = value;
			$$invalidate(10, lr_model_value);
		}

		function slider3_value_binding(value) {
			lr_logz_value = value;
			$$invalidate(11, lr_logz_value);
		}

		function slider0_value_binding_1(value) {
			off_policy_value = value;
			$$invalidate(8, off_policy_value);
		}

		function slider1_value_binding_1(value) {
			hidden_layer_value = value;
			$$invalidate(13, hidden_layer_value);
		}

		function slider2_value_binding_1(value) {
			hidden_dim_value = value;
			$$invalidate(14, hidden_dim_value);
		}

		function slider3_value_binding_1(value) {
			seed_value = value;
			$$invalidate(15, seed_value);
		}

		function slider_value_binding(value) {
			training_frame = value;
			$$invalidate(4, training_frame);
		}

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				flowContainer = $$value;
				$$invalidate(19, flowContainer);
			});
		}

		function section0_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				tutorialstart = $$value;
				$$invalidate(17, tutorialstart);
			});
		}

		function iconbutton_pressed_binding(value) {
			panel_algo = value;
			$$invalidate(20, panel_algo);
		}

		function panel1_open_binding(value) {
			panel_algo = value;
			$$invalidate(20, panel_algo);
		}

		function slider0_value_binding_2(value) {
			run1_value = value;
			$$invalidate(5, run1_value);
		}

		function slider1_value_binding_2(value) {
			run2_value = value;
			$$invalidate(6, run2_value);
		}

		function slider2_value_binding_2(value) {
			run3_value = value;
			$$invalidate(7, run3_value);
		}

		$$self.$capture_state = () => ({
			onMount,
			writable,
			Katex,
			plotEnvironment,
			plotStates,
			plot_flow,
			Accordion,
			Panel,
			Header,
			Content,
			Slider,
			Button,
			Label: CommonLabel,
			IconButton,
			Icon: CommonIcon,
			Tab,
			TabBar,
			Paper,
			LinearProgress,
			Select,
			Option,
			DataTable,
			Head,
			Body,
			Row,
			Cell,
			Textfield,
			Fab,
			off_policy_value,
			n_iterations_value,
			lr_model_value,
			lr_logz_value,
			trajectory_length_value,
			hidden_layer_value,
			hidden_dim_value,
			seed_value,
			batch_size_exponent,
			n_gaussians,
			loss_choice,
			gaussians,
			plotContainerEnv2d,
			plotContainerEnv3d,
			tutorialstart,
			active_tab,
			n_iterations_select,
			n_iterations_str,
			losses_select,
			view,
			Plotly,
			p5,
			flowContainer,
			flowvis_instance,
			panel_algo,
			panel_loss,
			panel_example,
			panel_changes,
			range,
			varianceRange,
			selectedGaussian,
			hoveredGaussian,
			isDraggingMean,
			isDraggingVariance,
			initialMouse,
			plotlyready,
			display_trainhistory,
			frames,
			training_frame,
			training_progress,
			current_states,
			current_losses,
			current_vectorfield,
			run1_value,
			run2_value,
			run3_value,
			POLLING_INTERVAL,
			isRunning,
			pollingTimer,
			changeNGaussians,
			plot_trainingframe,
			viewChange,
			updateVectorfield,
			stop_flow,
			clamp,
			resetSliders,
			loadPlotly,
			loadp5,
			scrollToTutorial,
			startTraining,
			stopTraining,
			pollTraining,
			resetGaussians,
			addGaussian,
			removeGaussian,
			startDragMean,
			startDragVariance,
			handleMouseMove,
			stopDrag,
			plotEnv,
			gaussians_textinput,
			get_vectorfield,
			batch_size_value,
			run3,
			run2,
			run1,
			$gaussians
		});

		$$self.$inject_state = $$props => {
			if ('off_policy_value' in $$props) $$invalidate(8, off_policy_value = $$props.off_policy_value);
			if ('n_iterations_value' in $$props) $$invalidate(9, n_iterations_value = $$props.n_iterations_value);
			if ('lr_model_value' in $$props) $$invalidate(10, lr_model_value = $$props.lr_model_value);
			if ('lr_logz_value' in $$props) $$invalidate(11, lr_logz_value = $$props.lr_logz_value);
			if ('trajectory_length_value' in $$props) $$invalidate(12, trajectory_length_value = $$props.trajectory_length_value);
			if ('hidden_layer_value' in $$props) $$invalidate(13, hidden_layer_value = $$props.hidden_layer_value);
			if ('hidden_dim_value' in $$props) $$invalidate(14, hidden_dim_value = $$props.hidden_dim_value);
			if ('seed_value' in $$props) $$invalidate(15, seed_value = $$props.seed_value);
			if ('batch_size_exponent' in $$props) $$invalidate(0, batch_size_exponent = $$props.batch_size_exponent);
			if ('n_gaussians' in $$props) $$invalidate(1, n_gaussians = $$props.n_gaussians);
			if ('loss_choice' in $$props) $$invalidate(16, loss_choice = $$props.loss_choice);
			if ('plotContainerEnv2d' in $$props) $$invalidate(31, plotContainerEnv2d = $$props.plotContainerEnv2d);
			if ('plotContainerEnv3d' in $$props) $$invalidate(32, plotContainerEnv3d = $$props.plotContainerEnv3d);
			if ('tutorialstart' in $$props) $$invalidate(17, tutorialstart = $$props.tutorialstart);
			if ('active_tab' in $$props) $$invalidate(18, active_tab = $$props.active_tab);
			if ('n_iterations_select' in $$props) $$invalidate(33, n_iterations_select = $$props.n_iterations_select);
			if ('n_iterations_str' in $$props) $$invalidate(2, n_iterations_str = $$props.n_iterations_str);
			if ('losses_select' in $$props) $$invalidate(34, losses_select = $$props.losses_select);
			if ('view' in $$props) $$invalidate(3, view = $$props.view);
			if ('Plotly' in $$props) Plotly = $$props.Plotly;
			if ('p5' in $$props) p5 = $$props.p5;
			if ('flowContainer' in $$props) $$invalidate(19, flowContainer = $$props.flowContainer);
			if ('flowvis_instance' in $$props) flowvis_instance = $$props.flowvis_instance;
			if ('panel_algo' in $$props) $$invalidate(20, panel_algo = $$props.panel_algo);
			if ('panel_loss' in $$props) panel_loss = $$props.panel_loss;
			if ('panel_example' in $$props) panel_example = $$props.panel_example;
			if ('panel_changes' in $$props) panel_changes = $$props.panel_changes;
			if ('selectedGaussian' in $$props) selectedGaussian = $$props.selectedGaussian;
			if ('hoveredGaussian' in $$props) $$invalidate(35, hoveredGaussian = $$props.hoveredGaussian);
			if ('isDraggingMean' in $$props) isDraggingMean = $$props.isDraggingMean;
			if ('isDraggingVariance' in $$props) isDraggingVariance = $$props.isDraggingVariance;
			if ('initialMouse' in $$props) initialMouse = $$props.initialMouse;
			if ('plotlyready' in $$props) plotlyready = $$props.plotlyready;
			if ('display_trainhistory' in $$props) $$invalidate(21, display_trainhistory = $$props.display_trainhistory);
			if ('frames' in $$props) $$invalidate(22, frames = $$props.frames);
			if ('training_frame' in $$props) $$invalidate(4, training_frame = $$props.training_frame);
			if ('training_progress' in $$props) $$invalidate(23, training_progress = $$props.training_progress);
			if ('current_states' in $$props) current_states = $$props.current_states;
			if ('current_losses' in $$props) current_losses = $$props.current_losses;
			if ('current_vectorfield' in $$props) current_vectorfield = $$props.current_vectorfield;
			if ('run1_value' in $$props) $$invalidate(5, run1_value = $$props.run1_value);
			if ('run2_value' in $$props) $$invalidate(6, run2_value = $$props.run2_value);
			if ('run3_value' in $$props) $$invalidate(7, run3_value = $$props.run3_value);
			if ('isRunning' in $$props) $$invalidate(24, isRunning = $$props.isRunning);
			if ('pollingTimer' in $$props) pollingTimer = $$props.pollingTimer;
			if ('batch_size_value' in $$props) $$invalidate(25, batch_size_value = $$props.batch_size_value);
			if ('run3' in $$props) $$invalidate(26, run3 = $$props.run3);
			if ('run2' in $$props) $$invalidate(27, run2 = $$props.run2);
			if ('run1' in $$props) $$invalidate(28, run1 = $$props.run1);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty[0] & /*batch_size_exponent*/ 1) {
				$$invalidate(25, batch_size_value = 2 ** batch_size_exponent);
			}

			if ($$self.$$.dirty[0] & /*n_iterations_str*/ 4) {
				$$invalidate(9, n_iterations_value = parseInt(n_iterations_str, 10));
			}

			if ($$self.$$.dirty[0] & /*n_gaussians*/ 2) {
				// reactive
				changeNGaussians(n_gaussians);
			}

			if ($$self.$$.dirty[0] & /*training_frame*/ 16) {
				plot_trainingframe(training_frame);
			}

			if ($$self.$$.dirty[0] & /*run1_value*/ 32) {
				$$invalidate(28, run1 = `./images/run1/run1_${run1_value}.png`);
			}

			if ($$self.$$.dirty[0] & /*run2_value*/ 64) {
				$$invalidate(27, run2 = `./images/run2/run2_${run2_value}.png`);
			}

			if ($$self.$$.dirty[0] & /*run3_value*/ 128) {
				$$invalidate(26, run3 = `./images/run3/run3_${run3_value}.png`);
			}

			if ($$self.$$.dirty[0] & /*view*/ 8) {
				viewChange(view);
			}
		};

		return [
			batch_size_exponent,
			n_gaussians,
			n_iterations_str,
			view,
			training_frame,
			run1_value,
			run2_value,
			run3_value,
			off_policy_value,
			n_iterations_value,
			lr_model_value,
			lr_logz_value,
			trajectory_length_value,
			hidden_layer_value,
			hidden_dim_value,
			seed_value,
			loss_choice,
			tutorialstart,
			active_tab,
			flowContainer,
			panel_algo,
			display_trainhistory,
			frames,
			training_progress,
			isRunning,
			batch_size_value,
			run3,
			run2,
			run1,
			$gaussians,
			gaussians,
			plotContainerEnv2d,
			plotContainerEnv3d,
			n_iterations_select,
			losses_select,
			hoveredGaussian,
			resetSliders,
			scrollToTutorial,
			startTraining,
			stopTraining,
			resetGaussians,
			startDragMean,
			startDragVariance,
			gaussians_textinput,
			tabbar_active_binding,
			click_handler,
			select_1_value_binding,
			mousedown_handler,
			mousedown_handler_1,
			textfield_value_binding,
			input_handler,
			textfield_value_binding_1,
			input_handler_1,
			textfield_value_binding_2,
			input_handler_2,
			select0_value_binding,
			select1_value_binding,
			tabbar_active_binding_1,
			slider0_value_binding,
			slider1_value_binding,
			slider2_value_binding,
			slider3_value_binding,
			slider0_value_binding_1,
			slider1_value_binding_1,
			slider2_value_binding_1,
			slider3_value_binding_1,
			slider_value_binding,
			div_binding,
			section0_binding,
			iconbutton_pressed_binding,
			panel1_open_binding,
			slider0_value_binding_2,
			slider1_value_binding_2,
			slider2_value_binding_2
		];
	}

	class App extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance, create_fragment, safe_not_equal, {}, null, [-1, -1, -1, -1]);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "App",
				options,
				id: create_fragment.name
			});
		}
	}

	const app = new App({
		target: document.body,
		props: {
			name: 'world'
		}
	});

	return app;

})();
//# sourceMappingURL=bundle.js.map
